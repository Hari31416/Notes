{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<p>While learning to code and program, I have taken notes on various topics. These notes are scattered across many repository and many files. This repository is an attempt to consolidate all of these notes into one place. Apart from these personal notes of mine, I am planning to add some extra materials from other sources as well. I will try to give proper credit to the original authors. Though, the name of the repository will still be just <code>Notes</code>, this will contain more than just my notes.</p> <p>The repository is under construction. This file will be updated as I add more notes.</p> <p>Have a look at another repository of mine: Courses which contains notes from various courses I have taken.</p>"},{"location":"Notes/DL/CNN/","title":"CNN","text":"<p>The convolutional neural network, or CNN for short, is a specialized type of neural network model designed for working with two-dimensional image data, although they can be used with one-dimensional and three-dimensional data.</p> <p>Central to the convolutional neural network is the convolutional layer that gives the network its name. This layer performs an operation called a \u201cconvolution\u201c.</p> <p>The fundamental difference between a densely connected layer and a convolution layer is this: <code>Dense</code> layers learn global patterns in their input feature space (for example, for a MNIST digit, patterns involving all pixels), whereas convolution layers learn local patterns: in the case of images, patterns found in small 2D windows of the inputs.</p> <p></p> <p>This key characteristic gives convnets two interesting properties: - The patterns they learn are translation invariant: After learning a certain pattern in the lower-right corner of a picture, a convnet can recognize it anywhere: for example, in the upper-left corner. A densely connected network would have to learn the pattern anew if it appeared at a new location. - They can learn spatial hierarchies of patterns: A first convolution layer will learn small local patterns such as edges, a second convolution layer will learn larger patterns made of the features of the first layers, and so on. This allows convnets to efficiently learn increasingly complex and abstract visual concepts.</p> <p></p> <p>In the context of a convolutional neural network, a convolution is a linear operation that involves the multiplication of a set of weights with the input, much like a traditional neural network. Given that the technique was designed for two-dimensional input, the multiplication is performed between an array of input data and a two-dimensional array of weights, called a filter or a kernel.</p> <p>Convolutions operate over 3D tensors, called feature maps, with two spatial axes (height and width) as well as a depth axis (also called the channels axis). The convolution operation extracts patches from its input feature map and applies the same transformation to all of these patches, producing an output feature map. This output feature map is still a 3D tensor: it has a width and a height. Its depth can be arbitrary, because the output depth is a parameter of the layer, and the different channels in that depth axis no longer stand for specific colors as in RGB input; rather, they stand for filters.</p> <p>Convolutions are defined by two key parameters: - Size of the patches extracted from the inputs\u2014These are typically 3 \u00d7 3 or 5 \u00d7 5. In the example, they were 3 \u00d7 3, which is a common choice.    - Depth of the output feature map\u2014The number of filters computed by the convolution. The example started with a depth of 32 and ended with a depth of 64.</p> <p>A convolution works by sliding these windows of size 3 \u00d7 3 or 5 \u00d7 5 over the 3D input feature map, stopping at every possible location, and extracting the 3D patch of surrounding features (shape <code>(window_height, window_width, input_depth)</code>). Each such 3D patch is then transformed (via a tensor product with the same learned weight matrix, called the convolution kernel) into a 1D vector of shape <code>(output_depth,)</code>. All of these vectors are then spatially reassembled into a 3D output map of shape <code>(height, width, output_depth)</code>. Every spatial location in the output feature map corresponds to the same location in the input feature map (for example, the lower-right corner of the output contains information about the lower-right corner of the input). For instance, with 3 \u00d7 3 windows, the vector <code>output[i, j, :]</code> comes from the 3D patch <code>input[i-1:i+1, j-1:j+1, :]</code></p> <p></p> <p>Consider a 5 \u00d7 5 feature map (25 tiles total). There are only 9 tiles around which you can center a 3 \u00d7 3 window, forming a 3 \u00d7 3 grid. Hence, the output feature map will be 3 \u00d7 3. It shrinks a little: by exactly two tiles alongside each dimension, in this case. If you want to get an output feature map with the same spatial dimensions as the input, you can use padding. Padding consists of adding an appropriate number of rows and columns on each side of the input feature map so as to make it possible to fit center convolution windows around every input tile.</p> <p></p> <p>In Conv2D layers, padding is configurable via the padding argument, which takes two values: \"valid\", which means no padding (only valid window locations will be used); and \"same\", which means \u201cpad in such a way as to have an output with the same width and height as the input.\u201d</p> <p></p> <p>The distance between two successive windows is a parameter of the convolution, called its stride, which defaults to 1. It\u2019s possible to have strided convolutions: convolutions with a stride higher than 1. You can see the patches extracted by a 3 \u00d7 3 convolution with stride 2 over a 5 \u00d7 5 input (without padding).</p> <p></p> <p>If the input is a \\(n \\times m\\) feature map and we are using a kernel of size \\(f \\times f\\), with padding p and stride s then the output shape will be $$ \\lfloor {\\frac{(n+2p-f)}{s}+1} \\rfloor \\times \\lfloor {\\frac{(n+2p-f)}{s}+1} \\rfloor $$</p> <p>If we use $$ n_H^{[l]} = \\text{height}\\ n_W^{[l]} = \\text{width}\\ f^{[l]} = \\text{filter size}\\ p^{[l]} = \\text{padding}\\ s^{[l]} = \\text{stride}\\ n_c^{[l]} = \\text{number of channels} $$ for the \\(l\\)-th layer, then the input shape for a convolutional layer will be: $$ n_H^{[l-1]}\\times n_W^{[l-1]}\\times n_c^{[l-1]} $$ and $$ n_H^{[l]}\\times n_W^{[l]}\\times n_c^{[l]} $$ Where \\(n_H^{[l]}\\) and \\(n_W^{[l]}\\) will be calculated by the above formula.</p> <p>Furthermore, total number of weight parameters of the \\(l\\)-th layer will be: $$ n_c^{[l-1]} \\times n_c^{[l]} \\times f^{[l]} \\times f^{[l]} $$</p> <p>Pooling layers are used as the purpose of gradually decreasing the spatial extent of the network, which reduces the parameters and overall computation of the network.</p> <p>The pooling layers down-sample the previous layers feature map.</p> <p>Pooling layers follow a sequence of one or more convolutional layers and are intended to consolidate the features learned and expressed in the previous layers feature map. As such, pooling may be consider a technique to compress or generalize feature representations and generally reduce the overfitting of the training data by the model.</p> <p>Max pooling consists of extracting windows from the input feature maps and outputting the max value of each channel. It\u2019s conceptually similar to convolution, except that instead of transforming local patches via a learned linear transformation (the convolution kernel), they\u2019re transformed via a hardcoded max tensor operation.</p> <p></p> <p>This is similar to max pooling, except that the max value is replaced by the average value of all the pixels in the window.</p> <p>The Pooling layers don't have any parameters to learn.</p> <p>A typical convolutional neural network consists of a sequence of convolutional layers, followed by pooling layers and finally some fully-connected layer.</p> <p></p> <pre><code>import tensorflow as tf\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.utils import plot_model\n</code></pre> <pre><code>model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n</code></pre> <pre><code>plot_model(model, show_shapes=True)\n</code></pre>"},{"location":"Notes/DL/CNN/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Convolution-Layer\"&gt;Convolution Layer&lt;/a&gt;&lt;/li&gt;\n</code></pre> <p><li>The Convolution Operation</li></p> <ol><li>Padding</li> <li>Stride</li> <li>Output Shape</li> </ol> <p><li>Pooling Layer</li></p> <ol><li>Max Pooling</li> <li>Average Pooling</li> </ol> <p><li>A Typical Convolutional Neural Network</li> </p>"},{"location":"Notes/DL/CNN/#convolution-layer","title":"Convolution Layer","text":""},{"location":"Notes/DL/CNN/#the-convolution-operation","title":"The Convolution Operation","text":""},{"location":"Notes/DL/CNN/#padding","title":"Padding","text":""},{"location":"Notes/DL/CNN/#stride","title":"Stride","text":""},{"location":"Notes/DL/CNN/#output-shape","title":"Output Shape","text":""},{"location":"Notes/DL/CNN/#pooling-layer","title":"Pooling Layer","text":""},{"location":"Notes/DL/CNN/#max-pooling","title":"Max Pooling","text":""},{"location":"Notes/DL/CNN/#average-pooling","title":"Average Pooling","text":""},{"location":"Notes/DL/CNN/#a-typical-convolutional-neural-network","title":"A Typical Convolutional Neural Network","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/","title":"Creating NN From Scratch","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nplt.rcdefaults()\n</code></pre> <p>Here are the notation we'll using in this notebook: - Superscript \\([l]\\) denotes a quantity associated with the \\(l^{th}\\) layer.      - Example: \\(a^{[L]}\\) is the \\(L^{th}\\) layer activation. \\(W^{[L]}\\) and \\(b^{[L]}\\) are the \\(L^{th}\\) layer parameters. - Superscript \\((i)\\) denotes a quantity associated with the \\(i^{th}\\) example.      - Example: \\(x^{(i)}\\) is the \\(i^{th}\\) training example. - Lowerscript \\(i\\) denotes the \\(i^{th}\\) entry of a vector.     - Example: \\(a^{[l]}_i\\) denotes the \\(i^{th}\\) entry of the \\(l^{th}\\) layer's activations).</p> <p>The idea is to create some helper functions which will be used later to create an arbitrarily deep neural network.</p> <p>Here's an outline of the steps in this assignment:</p> <ul> <li>Initialize the parameters for an \\(L\\)-layer neural network</li> <li>Implement the forward propagation module (shown in purple in the figure below)<ul> <li>Complete the LINEAR part of a layer's forward propagation step (resulting in \\(Z^{[l]}\\)).</li> <li>Implement the activation functions (relu/sigmoid)</li> <li>Combine the previous two steps into a new [LINEAR-&gt;ACTIVATION] forward function.</li> <li>Stack the [LINEAR-&gt;RELU] forward function L-1 time (for layers 1 through L-1) and add a [LINEAR-&gt;SIGMOID] at the end (for the final layer \\(L\\)). This gives you a new <code>L_model_forward</code> function.</li> </ul> </li> <li>Compute the loss</li> <li>Implement the backward propagation module (denoted in red in the figure below)<ul> <li>Complete the LINEAR part of a layer's backward propagation step</li> <li>Create functions for the gradient of the ACTIVATE function(relu_backward/sigmoid_backward) </li> <li>Combine the previous two steps into a new [LINEAR-&gt;ACTIVATION] backward function</li> <li>Stack [LINEAR-&gt;RELU] backward L-1 times and add [LINEAR-&gt;SIGMOID] backward in a new <code>L_model_backward</code> function</li> </ul> </li> <li>Finally, update the parameters.</li> </ul> <p> Outline</p> <p>For every forward function, there is a corresponding backward function. This is why at every step of your forward module you will be storing some values in a cache. These cached values are useful for computing gradients.</p> <p>In the backpropagation module, you can then use the cache to calculate the gradients. Don't worry, this assignment will show you exactly how to carry out each of these steps!</p> <p>Let's get started!</p> <p>Before we create a function to initialize the parameters, we should make sure that the weights are of the correct shape. Assuming  the size of your input \\(X\\) is \\((12288, 209)\\) (with \\(m=209\\) examples) then the shapes of weights and biases of various layers should be:</p> Shape of W Shape of b Activation Shape of Activation Layer 1  $(n^{[1]},12288)$   $(n^{[1]},1)$   $Z^{[1]} = W^{[1]}  X + b^{[1]} $   $(n^{[1]},209)$  Layer 2  $(n^{[2]}, n^{[1]})$    $(n^{[2]},1)$  $Z^{[2]} = W^{[2]} A^{[1]} + b^{[2]}$   $(n^{[2]}, 209)$   $\\vdots$   $\\vdots$    $\\vdots$    $\\vdots$  $\\vdots$   Layer L-1  $(n^{[L-1]}, n^{[L-2]})$   $(n^{[L-1]}, 1)$   $Z^{[L-1]} =  W^{[L-1]} A^{[L-2]} + b^{[L-1]}$   $(n^{[L-1]}, 209)$  Layer L  $(n^{[L]}, n^{[L-1]})$   $(n^{[L]}, 1)$   $Z^{[L]} =  W^{[L]} A^{[L-1]} + b^{[L]}$  $(n^{[L]}, 209)$   <p>Keeping this table in mind, let's initialize the parameters for for an L-layer Neural Network.</p> <p>Steps</p> <ul> <li>The model's structure is [LINEAR -&gt; RELU] $ \\times$ (L-1) -&gt; LINEAR -&gt; SIGMOID. i.e., it has \\(L-1\\) layers using a ReLU activation function followed by an output layer with a sigmoid activation function.</li> <li>Use random initialization for the weight matrices. Use <code>np.random.randn(shape) * 0.01</code>.</li> <li>Use zeros initialization for the biases. Use <code>np.zeros(shape)</code>.</li> <li>We'll store \\(n^{[l]}\\), the number of units in different layers, in a variable <code>layer_dims</code>. </li> </ul> <pre><code>def initialize_parameters_deep(layer_dims):\n\"\"\"\n    Arguments\n    ---------\n    layer_dims : list of ints\n        The dimensions of each layer in the network.\n\n    Returns\n    -------\n    parameters : dictionary\n        A dictionary containing the parameters of the network.\\\\\n        The dictionary has the following keys:\n        * Wl: The weight matrix of shape (layer_dims[l], layer_dims[l-1])\n        * bl: The bias vector of shape (layer_dims[l], 1)\\\\\n        for l in range(1, len(layer_dims))\n    \"\"\"\n    parameters = {}\n    L = len(layer_dims)\n    for l in range(1, L):\n        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1])*0.01\n        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))\n\n        assert(parameters['W' + str(l)].shape == (layer_dims[l], layer_dims[l - 1]))\n        assert(parameters['b' + str(l)].shape == (layer_dims[l], 1))\n\n    return parameters\n</code></pre> <p>Here, we'll implement the two activation functions that you'll use in the model: 1. Relu: \\(\\max(0, x)\\) 2. Sigmod: \\(\\frac{1}{1+e^{-x}}\\) The functions will also return the value of <code>x</code> as cache to be used in backpropagation.</p> <pre><code>def relu(x):\n\"\"\"\n    Arguments\n    ---------\n    x : numpy array\n        The input array.\n\n    Returns\n    -------\n    x : numpy array\n        The output array.\n    \"\"\"\n    return np.maximum(0, x), x\n</code></pre> <pre><code>X = np.linspace(-1, 1, 100)\nY, _ = relu(X)\nplt.plot(X, Y)\nplt.axvline(x=0, color='black')\nplt.show()\n</code></pre> <pre><code>def sigmoid(x):\n\"\"\"\n    Arguments\n    ---------\n    x : numpy array\n        The input array.\n\n    Returns\n    -------\n    x : numpy array\n    \"\"\"\n    return 1/(1+np.exp(-x)), x\n</code></pre> <pre><code>X = np.linspace(-10, 10, 200)\nY, _ = sigmoid(X)\nplt.plot(X, Y)\nplt.axvline(x=0, color='black')\nplt.show()\n</code></pre> <p>Next, we'll be stacking a linear layer with a ReLU activation layer to create one layer of the neural network. We'll also be returning the values of <code>A</code>, <code>W</code> and <code>b</code> as <code>cache</code> to be used later during backpropagation.</p> <p>The output of a unit without any activation function is given by: \\(\\(Z^{[l]} = W^{[l]} A^{[l-1]} + b^{[l]}\\)\\) If \\(g\\) is the activation function, then the activation of a unit is: \\(\\(A^{[l]} = g(Z^{[l]})\\)\\)</p> <pre><code>def linear_forward(A, W, b):\n\"\"\"\n    Implement the linear part of a layer's forward propagation.\n    Attributes\n    ----------\n    A : numpy array\n        The input array.\n    W : numpy array\n        The weight matrix.\n    b : numpy array\n        The bias vector.\n\n    Returns\n    -------\n    Z : numpy array\n        The output array.\n    cache : tuple\n        A tuple of (A, W, b) to be used in the backward pass.\n    \"\"\"\n    Z = np.dot(W, A) + b\n    assert (Z.shape == (W.shape[0], A.shape[1])), \"Shape of Z is not correct\"\n    cache = (A, W, b)\n    return Z, cache\n</code></pre> <pre><code>def linear_activation_forward(A_prev, W, b, activation):\n\"\"\"\n    Implement the forward propagation for the LINEAR-&gt;ACTIVATION layer\n\n    Arguments\n    ---------\n    A_prev : numpy array\n        The input array.\n    W : numpy array\n        The weight matrix.\n    b : numpy array\n        The bias vector.\n    activation : string\n        The activation function to use. Available functions are:\n        * relu\n        * sigmoid\n\n    Returns\n    -------\n    A : numpy array\n        The output array.\n    cache : tuple\n        a python tuple containing \"linear_cache\" and \"activation_cache\"\\\\\n             stored for computing the backward pass efficiently\n    \"\"\"\n\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n\n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n\n    cache = (linear_cache, activation_cache)\n\n    return A, cache\n</code></pre> <p>Now as we have the <code>linear_activation_forward</code> function implemented, we can implement the <code>L_model_forward</code> function. The function loops through <code>linear_activation_forward</code> to  LINEAR-&gt;RELU (L-1) times. Also, the function adds the output from the activation function to the cache. After that, the function also implments the LINEAR-&gt;SIGMOID as the final layer.</p> <pre><code>def L_model_forward(X, parameters):\n\"\"\"\n    Implement forward propagation for the [LINEAR-&gt;RELU]*(L-1)-&gt;LINEAR-&gt;SIGMOID computation\n\n    Arguments\n    ---------\n    X : numpy array\n        The input data, of shape (input size, number of examples)\n    parameters : dictionary\n        A dictionary containing the parameters of the network.\\\\\n        The dictionary has the following keys:\n        * Wl: The weight matrix of shape (layer_dims[l], layer_dims[l-1])\n        * bl: The bias vector of shape (layer_dims[l], 1)\\\\\n        for l in range(1, len(layer_dims))\n\n    Returns\n    -------\n    AL : numpy array\n        The output of the forward propagation, of shape (output size, number of examples)\n    caches : list\n        A list of tuples, where each tuple contains the inputs and outputs of a layer.\\\\\n        For each layer, the tuple contains (A_prev, W, b)\n    \"\"\"\n\n    caches = []\n    A = X\n    # number of layers in the neural network\n    L = len(parameters) // 2                  \n\n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], 'relu')\n        caches.append(cache)\n    AL, cache = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], 'sigmoid')\n    caches.append(cache)\n\n    return AL, caches\n</code></pre> <p>Here, we'll implement the cost function for the model. We'll use the cross-entropy cost function \\(J\\), using the following formula:  \\(\\(-\\frac{1}{m} \\sum\\limits_{i = 1}^{m} (y^{(i)}\\log\\left(a^{[L] (i)}\\right) + (1-y^{(i)})\\log\\left(1- a^{[L](i)}\\right))\\)\\)</p> <pre><code>def compute_cost(AL, Y):\n\"\"\"\n    Implement the cost function\n\n    Arguments\n    ---------\n    AL : numpy array\n        The output of the forward propagation, of shape (1, number of examples)\n    Y : numpy array\n        The true labels, of shape (1, number of examples)\n    \"\"\"\n\n    m = Y.shape[1]\n    cost = -(np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL)))/m\n    cost = np.squeeze(cost)\n    return cost\n</code></pre> <p>This section will be about implementing the backpropagation algorithm to compute the gradients. </p> <p>similarly to forward propagation, you're going to build the backward propagation in three steps: 1. LINEAR backward 2. LINEAR -&gt; ACTIVATION backward where ACTIVATION computes the derivative of either the ReLU or sigmoid activation 3. [LINEAR -&gt; RELU] \\(\\times\\) (L-1) -&gt; LINEAR -&gt; SIGMOID backward (whole model)</p> <p>For layer \\(l\\), the linear part is: \\(Z^{[l]} = W^{[l]} A^{[l-1]} + b^{[l]}\\) (followed by an activation).</p> <p>Suppose you have already calculated the derivative \\(dZ^{[l]} = \\frac{\\partial \\mathcal{L} }{\\partial Z^{[l]}}\\). You want to get \\((dW^{[l]}, db^{[l]}, dA^{[l-1]})\\).</p> <p>The three outputs \\((dW^{[l]}, db^{[l]}, dA^{[l-1]})\\) are computed using the input \\(dZ^{[l]}\\).</p> <p>Here are the formulas: $$ dW^{[l]} = \\frac{\\partial \\mathcal{J} }{\\partial W^{[l]}} = \\frac{1}{m} dZ^{[l]} A^{[l-1] T} $$ $$ db^{[l]} = \\frac{\\partial \\mathcal{J} }{\\partial b^{[l]}} = \\frac{1}{m} \\sum_{i = 1}^{m} dZ^{l}$$ $$ dA^{[l-1]} = \\frac{\\partial \\mathcal{L} }{\\partial A^{[l-1]}} = W^{[l] T} dZ^{[l]} $$</p> <pre><code># GRADED FUNCTION: linear_backward\n\ndef linear_backward(dZ, cache):\n\"\"\"\n    Implement the linear portion of backward propagation for a single layer (layer l)\n\n    Arguments\n    ---------\n    dZ : numpy array\n        The gradient of the cost with respect to the linear output (of current layer l)\n    cache : tuple\n        A tuple of values (A_prev, W, b) coming from the forward propagation in the current layer\n\n    Returns\n    -------\n    dA_prev : numpy array\n        The gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW : numpy array\n        The gradient of the cost with respect to W (current layer l), same shape as W\n    db : numpy array\n        The gradient of the cost with respect to b (current layer l), same shape as b\n    \"\"\"\n    A_prev, W, b = cache\n    m = A_prev.shape[1]\n    dW = np.dot(dZ, A_prev.T)/m\n    db = np.sum(dZ,axis = 1, keepdims=True)/m\n    dA_prev = np.dot(W.T, dZ)\n\n    return dA_prev, dW, db\n</code></pre> <p>We'll create two functions to implement the backward propagation for the activation functions, <code>relu_backward</code> and <code>sigmoid_backward</code>. The function will <code>dA</code> as well as <code>cache</code> as inputs and return <code>dZ</code>.</p> <pre><code>def relu_backward(dA, cache):\n\"\"\"\n    Implement the backward propagation for a single RELU unit.\n\n    Arguments\n    ---------\n    dA : numpy array\n        post-activation gradient\n    cache : tuple\n        tuple of values (Z) from forward propagation\n\n    Returns\n    -------\n    dZ : numpy array\n        Gradient of the cost with respect to Z\n    \"\"\"\n\n    Z = cache\n    dZ = np.array(dA, copy=True)\n    dZ[Z &lt;= 0] = 0\n    assert (dZ.shape == Z.shape)\n    return dZ\n</code></pre> <pre><code>def sigmoid_backward(dA, cache):\n\"\"\"\n    Implement the backward propagation for a single SIGMOID unit.\n\n    Arguments\n    ---------\n    dA : numpy array\n        post-activation gradient\n    cache : tuple\n        tuple of values (Z) from forward propagation\n\n    Returns\n    -------\n    dZ : numpy array\n        Gradient of the cost with respect to Z\n    \"\"\"\n\n    Z = cache\n    s = 1/(1+np.exp(-Z))\n    dZ = dA * s * (1-s)\n    assert (dZ.shape == Z.shape)\n    return dZ\n</code></pre> <p>Next, you will create a function that merges the two helper functions: <code>linear_backward</code> and the backward step for the activation <code>linear_activation_backward</code>.</p> <pre><code># GRADED FUNCTION: linear_activation_backward\n\ndef linear_activation_backward(dA, cache, activation):\n\"\"\"\n    Implement the backward propagation for the LINEAR-&gt;ACTIVATION layer.\n\n    Arguments\n    ---------\n    dA : numpy array\n        post-activation gradient for current layer l\n    cache : tuple\n        tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently\n    activation : string\n        the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns\n    -------\n    dA_prev : numpy array\n        Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW : numpy array\n        Gradient of the cost with respect to W (current layer l), same shape as W\n    db : numpy array\n        Gradient of the cost with respect to b (current layer l), same shape as b\n    \"\"\"\n    linear_cache, activation_cache = cache\n    if activation == \"relu\":\n        dZ = relu_backward(dA, activation_cache)\n        dA_prev, dW, db = linear_backward(dZ, linear_cache)     \n    elif activation == \"sigmoid\":\n        dZ = sigmoid_backward(dA, activation_cache)\n        dA_prev, dW, db = linear_backward(dZ, linear_cache)\n\n    return dA_prev, dW, db\n</code></pre> <p>When we implemented the L_model_forward function, at each iteration, we stored a cache which contains (X,W,b, and z). In the back propagation module, we'll use those variables to compute the gradients. Therefore, in the L_model_backward function, we'll iterate through all the hidden layers backward, starting from layer  L . On each step, we will use the cached values for layer  l  to backpropagate through layer l .</p> <p>But first, we need an initial value of <code>dA</code>, which is the derivative of the cost with respect to the activation of the output layer. This can be calculated using the formula: $$ dA^{[L]} = -\\left(\\frac{Y}{A_L}-\\frac{1-Y}{1-A_L}\\right) $$ We can then use this post-activation gradient dAL to keep going backward.</p> <pre><code>def L_model_backward(AL, Y, caches):\n\"\"\"\n    Implement the backward propagation for the [LINEAR-&gt;RELU] * (L-1) -&gt; LINEAR -&gt; SIGMOID group\n\n    Arguments\n    ---------\n    AL : numpy array\n        probability vector, output of forward propagation (L_model_forward())\n    Y : numpy array\n        true \"label\" vector\n    caches : list\n        list of caches containing:\n            every cache of linear_activation_forward() with \"relu\" (there are (L-1) ors)\n            the cache of linear_activation_forward() with \"sigmoid\" (there is one)\n\n    Returns\n    -------\n    grads : dictionary\n\n        grads[\"dA\" + str(l)] = ...\\\\\n        grads[\"dW\" + str(l)] = ...\\\\\n        grads[\"db\" + str(l)] = ...\n    \"\"\"\n\n    grads = {}\n    L = len(caches)\n    m = AL.shape[1]\n    Y = Y.reshape(AL.shape)\n    dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))\n\n    current_cache = caches[L-1]\n    dA_prev_temp, dW_temp, db_temp = linear_activation_backward(dAL, current_cache, 'sigmoid')\n    grads[\"dA\" + str(L-1)] = dA_prev_temp\n    grads[\"dW\" + str(L)] = dW_temp\n    grads[\"db\" + str(L)] = db_temp\n\n    for l in reversed(range(L-1)):\n        current_cache = caches[l]\n        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(dA_prev_temp, current_cache, 'relu')\n        grads[\"dA\" + str(l)] = dA_prev_temp\n        grads[\"dW\" + str(l + 1)] = dW_temp\n        grads[\"db\" + str(l + 1)] = db_temp\n\n    return grads\n</code></pre> <p>In this section, we'll update the parameters of the model, using gradient descent: </p> \\[ W^{[l]} = W^{[l]} - \\alpha \\text{ } dW^{[l]}$$ $$ b^{[l]} = b^{[l]} - \\alpha \\text{ } db^{[l]}\\] <p>where \\(\\alpha\\) is the learning rate. </p> <pre><code>def update_parameters(params, grads, learning_rate):\n\"\"\"\n    Update parameters using gradient descent\n\n    Arguments\n    ---------\n    params : dictionary\n        parameters to be updated\n    grads : dictionary\n        python dictionary containing your gradients, output of L_model_backward\n\n    Returns\n    -------\n    params : dictionary\n        python dictionary containing your updated parameters after one pass of gradient descent\n            parameters[\"W\" + str(l)] = ... \\\\\n            parameters[\"b\" + str(l)] = ...\n    \"\"\"\n    parameters = params.copy()\n    grads = grads.copy()\n    L = len(parameters) // 2\n    for l in range(L):\n        parameters[\"W\" + str(l+1)] = parameters[\"W\" + str(l+1)] - learning_rate*grads[\"dW\" + str(l+1)]\n        parameters[\"b\" + str(l+1)] = parameters[\"b\" + str(l+1)]- learning_rate*grads[\"db\" + str(l+1)]\n\n    return parameters\n</code></pre> <p>This completes the implementation of the helper functions needed to build a neural network. Next, we'll use those functions to build the model.</p> <p>In this section, we'll build a L-layer neural network with the following structure: [LINEAR -&gt; RELU] \u00d7 (L-1) -&gt; LINEAR -&gt; SIGMOID. </p> <p>The number of layers and the number of units in each layer will be determined using the <code>layers_dims</code> parameter which is a list containing the number of units in each layer of the network. Let's create the model!</p> <pre><code># GRADED FUNCTION: L_layer_model\n\ndef L_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):\n\"\"\"\n    Implements a L-layer neural network: [LINEAR-&gt;RELU]*(L-1)-&gt;LINEAR-&gt;SIGMOID.\n\n    Arguments\n    ---------\n    X : numpy array\n        (n_x, m) matrix, training examples\n    Y : numpy array\n        (1, m) matrix, training labels\n    layers_dims : list\n        dimensions of each layer\n    learning_rate : float\n        learning rate of the gradient descent update rule\n    num_iterations : int\n        number of iterations of the optimization loop\n    print_cost : bool\n        if True, it prints the cost every 100 steps\n\n    Returns\n    -------\n    parameters : dictionary\n        parameters learnt by the model. They can then be used to predict.\n    \"\"\"\n\n    np.random.seed(1)\n    costs = []\n    parameters = initialize_parameters_deep(layers_dims)\n    for i in range(0, num_iterations):\n        AL, caches = L_model_forward(X, parameters)\n        cost = compute_cost(AL, Y)\n        grads = L_model_backward(AL, Y, caches)\n        parameters = update_parameters(parameters, grads, learning_rate)\n\n        # Print the cost every 100 iterations\n        if print_cost and i % 100 == 0 or i == num_iterations - 1:\n            print(f\"Cost after iteration {i}: {np.squeeze(cost)}\")\n        if i % 100 == 0 or i == num_iterations:\n            costs.append(cost)\n    return parameters, costs\n</code></pre> <p>Let's create a dataset to be trained on.</p> <pre><code>def load_data():\n    train_dataset = h5py.File('datasets/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n\n    test_dataset = h5py.File('datasets/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n\n    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n\n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n\n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes\n</code></pre> <pre><code>train_x_orig, train_y, test_x_orig, test_y, classes = load_data()\n</code></pre> <pre><code># Reshape the training and test examples \ntrain_x_flatten = train_x_orig.reshape(train_x_orig.shape[0], -1).T   # The \"-1\" makes reshape flatten the remaining dimensions\ntest_x_flatten = test_x_orig.reshape(test_x_orig.shape[0], -1).T\n\n# Standardize data to have feature values between 0 and 1.\ntrain_x = train_x_flatten/255.\ntest_x = test_x_flatten/255.\n\nprint (\"train_x's shape: \" + str(train_x.shape))\nprint (\"test_x's shape: \" + str(test_x.shape))\n</code></pre> <pre>\n<code>train_x's shape: (12288, 209)\ntest_x's shape: (12288, 50)\n</code>\n</pre> <pre><code>layers_dims = [12288, 20, 7, 5, 1] #  4-layer model\n</code></pre> <pre><code>parameters, costs = L_layer_model(train_x, train_y, layers_dims, learning_rate=0.02, num_iterations = 2500, print_cost = True)\n</code></pre> <pre>\n<code>Cost after iteration 0: 0.6931489045172448\nCost after iteration 100: 0.6624971419117535\nCost after iteration 200: 0.651094757435918\nCost after iteration 300: 0.6467572191732891\nCost after iteration 400: 0.6450746296904617\nCost after iteration 500: 0.6444126114559184\nCost after iteration 600: 0.6441496227067939\nCost after iteration 700: 0.6440444862712489\nCost after iteration 800: 0.6440022822578234\nCost after iteration 900: 0.6439852956688383\nCost after iteration 1000: 0.643978446974854\nCost after iteration 1100: 0.6439756825182593\nCost after iteration 1200: 0.643974565630174\nCost after iteration 1300: 0.6439741139342244\nCost after iteration 1400: 0.6439739310230211\nCost after iteration 1500: 0.6439738567187566\nCost after iteration 1600: 0.643973826351625\nCost after iteration 1700: 0.643973813766312\nCost after iteration 1800: 0.6439738083386956\nCost after iteration 1900: 0.6439738057896578\nCost after iteration 2000: 0.6439738043154932\nCost after iteration 2100: 0.6439738031521817\nCost after iteration 2200: 0.643973802338866\nCost after iteration 2300: 0.6439738016972762\nCost after iteration 2400: 0.6439738011387375\nCost after iteration 2499: 0.6439738006062699\n</code>\n</pre> <pre><code>def predict(X, y, parameters):\n    m = X.shape[1]\n    n = len(parameters) // 2 # number of layers in the neural network\n    p = np.zeros((1,m))\n\n    # Forward propagation\n    probas, caches = L_model_forward(X, parameters)\n\n\n    # convert probas to 0/1 predictions\n    for i in range(0, probas.shape[1]):\n        if probas[0,i] &gt; 0.5:\n            p[0,i] = 1\n        else:\n            p[0,i] = 0\n\n    print(\"Accuracy: \"  + str(np.sum((p == y)/m)))\n\n    return p\n</code></pre> <pre><code>pred_train = predict(train_x, train_y, parameters)\n</code></pre> <pre>\n<code>Accuracy: 0.6555023923444976\n</code>\n</pre> <pre><code>pred_test = predict(test_x, test_y, parameters)\n</code></pre> <pre>\n<code>Accuracy: 0.3400000000000001\n</code>\n</pre>"},{"location":"Notes/DL/Creating_NN_From_Scratch/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Notation</li> <li>Outline</li> <li>Forward Propagation</li> <ol><li>Initialization</li> <ol><li>Getting the Shapes Right</li> <li>initialize_parameters_deep</li> </ol><li>Activation Functions</li> <ol><li>relu</li> <li>sigmoid</li> </ol><li>Stacking Linear Layer with Activation</li> <ol><li>linear_forward</li> <li>linear_activation_forward</li> <li>L_model_forward</li> </ol> </ol> <p><li>The Cost</li></p> <li>Backpropagation</li> <ol><li>Linear Backward</li> <ol><li>linear_backward</li> </ol><li>Backpropagation for Activation Functions</li> <ol><li>relu_backward</li> <li>sigmoid_backward</li> </ol><li>Linear-Activation Backward</li> <ol><li>linear_activation_backward</li> </ol><li>L-Model Backward</li> <ol><li>L_model_backward</li> </ol><li>Update Parameters</li> <ol><li>update_parameters</li> </ol><li>The Model</li> <ol><li>L_layer_model</li> <li>Train the model</li> <ol><li>Creating the Dataset</li> </ol> </ol> </ol>"},{"location":"Notes/DL/Creating_NN_From_Scratch/#imports","title":"Imports","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#notation","title":"Notation","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#outline","title":"Outline","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#forward-propagation","title":"Forward Propagation","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#initialization","title":"Initialization","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#getting-the-shapes-right","title":"Getting the Shapes Right","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#initialize_parameters_deep","title":"<code>initialize_parameters_deep</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#activation-functions","title":"Activation Functions","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#relu","title":"<code>relu</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#sigmoid","title":"<code>sigmoid</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#stacking-linear-layer-with-activation","title":"Stacking Linear Layer with Activation","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear_forward","title":"<code>linear_forward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear_activation_forward","title":"<code>linear_activation_forward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#l_model_forward","title":"<code>L_model_forward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#the-cost","title":"The Cost","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#backpropagation","title":"Backpropagation","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear-backward","title":"Linear Backward","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear_backward","title":"<code>linear_backward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#backpropagation-for-activation-functions","title":"Backpropagation for Activation Functions","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#relu_backward","title":"<code>relu_backward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#sigmoid_backward","title":"<code>sigmoid_backward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear-activation-backward","title":"Linear-Activation Backward","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#linear_activation_backward","title":"<code>linear_activation_backward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#l-model-backward","title":"L-Model Backward","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#l_model_backward","title":"<code>L_model_backward</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#update-parameters","title":"Update Parameters","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#update_parameters","title":"<code>update_parameters</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#the-model","title":"The Model","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#l_layer_model","title":"<code>L_layer_model</code>","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#train-the-model","title":"Train the model","text":""},{"location":"Notes/DL/Creating_NN_From_Scratch/#creating-the-dataset","title":"Creating the Dataset","text":""},{"location":"Notes/DL/Different_Initializations/","title":"Different Initializations","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n</code></pre> <p>Training your neural network requires specifying an initial value of the weights. A well-chosen initialization method helps the learning process.</p> <p>A well-chosen initialization can: - Speed up the convergence of gradient descent - Increase the odds of gradient descent converging to a lower training (and generalization) error</p> <p>The weights of a neural network can be initialized in a variety of ways. Some of them are: 1. Zero initialization: Initialize all weights to 0. 2. Random initialization: Initialize all weights to random values. 3. He initialization: Initialize all weights to random values drawn from a normal distribution with a mean of 0 and standard deviation of \\(\\sqrt{2 / n}\\). 4. Glorot initialization: Initialize all weights to random values drawn from a normal distribution with a mean of 0 and standard deviation of \\(\\sqrt{2 / (n + m)}\\). 5. Xavier initialization: Initialize all weights to random values drawn from a normal distribution with a mean of 0 and standard deviation of \\(\\sqrt{1 / n}\\). Here \\(n\\) is the number of input units, \\(m\\) is the number of output units for the current layer.</p> <p></p> <p>This is the most trivial initialization method. In this method, all - the weight matrices \\((W^{[1]}, W^{[2]}, W^{[3]}, ..., W^{[L-1]}, W^{[L]})\\)</p> <p>and - the bias vectors \\((b^{[1]}, b^{[2]}, b^{[3]}, ..., b^{[L-1]}, b^{[L]})\\)</p> <p>are initialized to 0.</p> <pre><code>def initialize_parameters_zeros(layers_dims):\n\n    parameters = {}\n    L = len(layers_dims)\n    for l in range(1, L):\n        parameters['W' + str(l)] = np.zeros((layers_dims[l], layers_dims[l-1]))\n        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))\n    return parameters\n</code></pre> <p>However, this type of initialization is of no use. Once the weights are initialized to zero, they remain zero throughout the training and the model doesn't learn anything. Let's see why this can happen.</p> <p>Since the weights and biases are zero, multiplying by the weights creates the zero vector which gives 0 when the activation function is ReLU. As <code>z = 0</code></p> \\[a = ReLU(z) = max(0, z) = 0\\] <p>At the classification layer, where the activation function is sigmoid you then get (for either input): </p> \\[\\sigma(z) = \\frac{1}{ 1 + e^{-(z)}} = \\frac{1}{2} = y_{pred}\\] <p>As for every example you are getting a 0.5 chance of it being true our cost function becomes helpless in adjusting the weights.</p> <p>Your loss function: $$ \\mathcal{L}(a, y) =  - y  \\ln(y_{pred}) - (1-y)  \\ln(1-y_{pred})$$</p> <p>For <code>y=1</code>, <code>y_pred=0.5</code> it becomes:</p> \\[ \\mathcal{L}(0, 1) =  - (1)  \\ln(\\frac{1}{2}) = 0.6931471805599453\\] <p>For <code>y=0</code>, <code>y_pred=0.5</code> it becomes:</p> \\[ \\mathcal{L}(0, 0) =  - (1)  \\ln(\\frac{1}{2}) = 0.6931471805599453\\] <p>As we can see with the prediction being 0.5 whether the actual (<code>y</code>) value is 1 or 0 we get the same loss value for both, so none of the weights get adjusted and we are stuck with the same old value of the weights. </p> <p>This is why we can see that the model is predicting 0 for every example!</p> <p>In general, initializing all the weights to zero results in the network failing to break symmetry. This means that every neuron in each layer will learn the same thing, so we might as well be training a neural network with \\(n^{[l]}=1\\) for every layer. This way, the network is no more powerful than a linear classifier like logistic regression.</p> <p>To break symmetry, initialize the weights randomly. Following random initialization, each neuron can then proceed to learn a different function of its inputs.</p> <pre><code>def initialize_parameters_random(layers_dims):\n    parameters = {}\n    L = len(layers_dims) \n    for l in range(1, L):\n        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1])*10\n        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))\n    return parameters\n</code></pre> <p>With random initialization, the model starts with making prediction by random but starts to learn with every epoch.</p> <p>Random initialization can be used to break symmetry, however it is far from perfect. Poor initialization can lead to vanishing/exploding gradients, which also slows down the optimization algorithm. What's more initializing with overly large random numbers slows down the optimization.</p> <p>\"He Initialization\"; this is named for the first author of He et al., 2015. This is the same as random intialization, the only different being that while the standard deviation for random initialization is1, the standard deviation for He initialization is \\(\\sqrt{\\frac{2}{\\text{dimension of the previous layer}}}\\). Changing the standard deviation to \\(\\sqrt{\\frac{1}{\\text{dimension of the previous layer}}}\\) gives the same Xavier initialization.</p> <pre><code>def initialize_parameters_he(layers_dims):\n    parameters = {}\n    L = len(layers_dims) - 1\n\n    for l in range(1, L + 1):\n        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1])*(np.sqrt(2/(layers_dims[l-1])))\n        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))        \n    return parameters\n</code></pre> <p>Here, the standard deviation is \\(\\sqrt{\\frac{2}{\\text{dimension of the previous layer}+\\text{dimension of the current layer}}}\\).</p> <pre><code>def initialize_parameters_glorot(layers_dims):\n    parameters = {}\n    L = len(layers_dims) - 1\n\n    for l in range(1, L + 1):\n        parameters['W' + str(l)] = np.random.randn(layers_dims[l], layers_dims[l-1])*(np.sqrt(2/((layers_dims[l-1]+layers_dims[l]))))\n        parameters['b' + str(l)] = np.zeros((layers_dims[l], 1))        \n    return parameters\n</code></pre>"},{"location":"Notes/DL/Different_Initializations/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Initialization</li> <li>Different Types of Initialization</li> <ol><li>Zero Initialization</li> <li>Random Initialization</li> <li>He Initialization</li> <li>Glorot Initialization</li> </ol>"},{"location":"Notes/DL/Different_Initializations/#imports","title":"Imports","text":""},{"location":"Notes/DL/Different_Initializations/#initialization","title":"Initialization","text":""},{"location":"Notes/DL/Different_Initializations/#different-types-of-initialization","title":"Different Types of Initialization","text":""},{"location":"Notes/DL/Different_Initializations/#zero-initialization","title":"Zero Initialization","text":""},{"location":"Notes/DL/Different_Initializations/#random-initialization","title":"Random Initialization","text":""},{"location":"Notes/DL/Different_Initializations/#he-initialization","title":"He Initialization","text":""},{"location":"Notes/DL/Different_Initializations/#glorot-initialization","title":"Glorot Initialization","text":""},{"location":"Notes/DL/Neural_Networks/","title":"Neural Networks","text":"<p>Perceptrons were developed in the 1950s and 1960s by the scientist Frank Rosenblatt, inspired by earlier work by Warren McCulloch and Walter Pitts. A perceptron takes several binary inputs, \\(x_1,x_2,\\ldots,\\) and produces a single binary output:</p> <p></p> <p>In the example shown the perceptron has three inputs, \\(x_1,x_2,x_3\\). In general it could have more or fewer inputs. Rosenblatt proposed a simple rule to compute the output. He introduced weights, \\(w_1,w_2,\u2026,\\) real numbers expressing the importance of the respective inputs to the output. The neuron's output, 0 or 1, is determined by whether the weighted sum \\(\\sum_j w_j x_j\\) is less than or greater than some threshold value. Just like the weights, the threshold is a real number which is a parameter of the neuron. To put it in more precise algebraic terms: $$ \\text{output}=\\begin{cases}             0 &amp; \\text{if }  \\sum_j w_j x_j \\le \\text{threshold} \\        1 &amp; \\text{if }  \\sum_j w_j x_j &gt;  \\text{threshold}          \\end{cases} $$</p> <p>The above notation can be simplified by using a dot product instead of the sum and transfering the threshold to the left of the inequality. Using this notation, the equation for the output is: $$ \\text{output}=\\begin{cases}             0 &amp; \\text{if }  w \\cdot x -b\\le 0 \\        1 &amp; \\text{if }  w \\cdot x -b&gt;  0          \\end{cases} $$</p> <p>b here is the bias of the perceptron. You can think of the bias as a measure of how easy it is to get the perceptron to output a 1. Or to put it in more biological terms, the bias is a measure of how easy it is to get the perceptron to fire. For a perceptron with a really big bias, it's extremely easy for the perceptron to output a 1. But if the bias is very negative, then it's difficult for the perceptron to output a 1.</p> <p>Just like a perceptron, the sigmoid neuron has inputs, \\(x_1,x_2,\\ldots\\). But instead of being just 0 or 1, these inputs can also take on any values between 0 and 1. So, for instance, 0.638\u2026 is a valid input for a sigmoid neuron. Also just like a perceptron, the sigmoid neuron has weights for each input, \\(w_1,w_2,\\ldots,\\) and an overall bias, \\(b\\). But the output is not 0 or 1. Instead, it's \\(\\sigma(w \\cdot x+b)\\), where \\(\\sigma\\) is called the sigmoid function. $$ \\begin{align}    \\sigma(z) \\equiv \\frac{1}{1+e^{-z}} \\end{align}$$ or using the inputs and weights, $$ \\begin{align}    \\sigma(z) \\equiv \\frac{1}{1+e^{-w \\cdot x-b}} \\end{align}$$</p> <p>Suppose we have the network:</p> <p></p> <p>The leftmost layer in this network is called the input layer, and the neurons within the layer are called input neurons. The rightmost or output layer contains the output neurons, or, as in this case, a single output neuron. The middle layer is called a hidden layer. The network above has just a single hidden layer, but some networks have multiple hidden layers. For example, the following four-layer network has two hidden layers:</p> <p></p> <ul> <li>Superscript \\([l]\\) denotes a quantity associated with the \\(l^{th}\\) layer. <ul> <li>Example: \\(a^{[L]}\\) is the \\(L^{th}\\) layer activation. \\(W^{[L]}\\) and \\(b^{[L]}\\) are the \\(L^{th}\\) layer parameters.</li> </ul> </li> <li>Superscript \\((i)\\) denotes a quantity associated with the \\(i^{th}\\) example. <ul> <li>Example: \\(x^{(i)}\\) is the \\(i^{th}\\) training example.</li> </ul> </li> <li>Lowerscript \\(i\\) denotes the \\(i^{th}\\) entry of a vector.<ul> <li>Example: \\(a^{[l]}_i\\) denotes the \\(i^{th}\\) entry of the \\(l^{th}\\) layer's activations).</li> </ul> </li> </ul> <p>The design of the input and output layers in a network is often straightforward. For example, suppose we're trying to determine whether a handwritten image depicts a \"9\" or not. A natural way to design the network is to encode the intensities of the image pixels into the input neurons. If the image is a 64 by 64 greyscale image, then we'd have 4,096=64\u00d764 input neurons, with the intensities scaled appropriately between 0 and 1. The output layer will contain just a single neuron, with output values of less than 0.5 indicating \"input image is not a 9\", and values greater than 0.5 indicating \"input image is a 9\".</p> <p>While the design of the input and output layers of a neural network is often straightforward, there can be quite an art to the design of the hidden layers. In particular, it's not possible to sum up the design process for the hidden layers with a few simple rules of thumb. Instead, neural networks researchers have developed many design heuristics for the hidden layers, which help people get the behaviour they want out of their nets.</p> <p>To recognize individual digits we will use a three-layer neural network:</p> <p></p> <p>The architecture we'll be using is a three layered network, as shown in the figure above.  Our training data for the network will consist of many 28 by 28 pixel images of scanned handwritten digits, and so the input layer contains 784=28\u00d728 neurons. The input layer has been omitted for simplicity. The first hidden layer contains 15 neurons, and the second hidden layer contains 30 neurons. Since we want to classify the digits, the output layer contains 10 neurons, one for each digit.</p>"},{"location":"Notes/DL/Neural_Networks/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Perceptrons\"&gt;Perceptrons&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Working of Perceptrons</li> <li>Sigmoid Neurons</li> </ol> <p><li>Terminology</li></p> <ol><li>Notation</li> </ol> <p><li>Designing a Neural Network to Classify Handwritten Digits</li></p> <ol><li>The Architecture</li> </ol>"},{"location":"Notes/DL/Neural_Networks/#perceptrons","title":"Perceptrons","text":""},{"location":"Notes/DL/Neural_Networks/#working-of-perceptrons","title":"Working of Perceptrons","text":""},{"location":"Notes/DL/Neural_Networks/#sigmoid-neurons","title":"Sigmoid Neurons","text":""},{"location":"Notes/DL/Neural_Networks/#terminology","title":"Terminology","text":""},{"location":"Notes/DL/Neural_Networks/#notation","title":"Notation","text":""},{"location":"Notes/DL/Neural_Networks/#designing-a-neural-network-to-classify-handwritten-digits","title":"Designing a Neural Network to Classify Handwritten Digits","text":""},{"location":"Notes/DL/Neural_Networks/#the-architecture","title":"The Architecture","text":""},{"location":"Notes/DL/Optimization_Methods/","title":"Optimization Methods","text":"<pre><code>import numpy as np\n</code></pre> <p>Having a good optimization algorithm can be the difference between waiting days vs. just a few hours to get a good result. Until now, we've always used Gradient Descent to update the parameters and minimize the cost. Here, we'll talk about some other optimization methods.</p> <p>We'll be including the gradient descent just for the sake of completeness. When you take gradient steps with respect to all  m  examples on each step, it is also called Batch Gradient Descent. The  gradient descent rule is, for \\(l = 1, ..., L\\):  $$ W^{[l]} = W^{[l]} - \\alpha \\text{ } dW^{[l]}$$ $$ b^{[l]} = b^{[l]} - \\alpha \\text{ } db^{[l]}$$</p> <p>where L is the number of layers and \\(\\alpha\\) is the learning rate.</p> <pre><code>def update_parameters_with_gd(parameters, grads, learning_rate):\n    L = len(parameters) // 2\n    for l in range(1, L + 1):\n        parameters[\"W\" + str(l)] -= grads[\"dW\" + str(l)]*learning_rate\n        parameters[\"b\" + str(l)] -= grads[\"db\" + str(l)]*learning_rate\n    return parameters\n</code></pre> <p>Stochastic Gradient Descent is a variant of Gradient Descent where you only update the parameters after seeing a single example.</p> <p>The update rule that you have just implemented does not change. What changes is that you would be computing gradients on just one training example at a time, rather than on the whole training set. The code examples below illustrate the difference between stochastic gradient descent and (batch) gradient descent.</p> <ul> <li>(Batch) Gradient Descent:</li> </ul> <pre><code>X = data_input\nY = labels\nparameters = initialize_parameters(layers_dims)\nfor i in range(0, num_iterations):\n    # Forward propagation\n    a, caches = forward_propagation(X, parameters)\n    # Compute cost.\n    cost += compute_cost(a, Y)\n    # Backward propagation.\n    grads = backward_propagation(a, caches, parameters)\n    # Update parameters.\n    parameters = update_parameters(parameters, grads)\n</code></pre> <ul> <li>Stochastic Gradient Descent:</li> </ul> <pre><code>X = data_input\nY = labels\nparameters = initialize_parameters(layers_dims)\nfor i in range(0, num_iterations):\n    for j in range(0, m):\n        # Forward propagation\n        a, caches = forward_propagation(X[:,j], parameters)\n        # Compute cost\n        cost += compute_cost(a, Y[:,j])\n        # Backward propagation\n        grads = backward_propagation(a, caches, parameters)\n        # Update parameters.\n        parameters = update_parameters(parameters, grads)\n</code></pre> <p>In Stochastic Gradient Descent, you use only 1 training example before updating the gradients. When the training set is large, SGD can be faster. But the parameters will \"oscillate\" toward the minimum rather than converge smoothly.</p> <p></p> <p>Mini-batch gradient descent uses an intermediate number of examples for each step. With mini-batch gradient descent, you loop over the mini-batches instead of looping over individual training examples. There are two steps involved in mini-batch gradient descent: - Shuffle: Create a shuffled version of the training set (X, Y) as shown below. Each column of X and Y represents a training example. Note that the random shuffling is done synchronously between X and Y. Such that after the shuffling the \\(i^{th}\\) column of X is the example corresponding to the \\(i^{th}\\) label in Y. The shuffling step ensures that examples will be split randomly into different mini-batches. </p> <p></p> <ul> <li>Partition: Partition the shuffled (X, Y) into mini-batches of size <code>mini_batch_size</code> (here 64). Note that the number of training examples is not always divisible by <code>mini_batch_size</code>. The last mini batch might be smaller, but you don't need to worry about this. When the final mini-batch is smaller than the full `mini_batch_size</li> </ul> <p></p> <pre><code>def random_mini_batches(X, Y, mini_batch_size = 64, seed = 0):\n    np.random.seed(seed)\n    m = X.shape[1]\n    mini_batches = []\n\n    permutation = list(np.random.permutation(m))\n    shuffled_X = X[:, permutation]\n    shuffled_Y = Y[:, permutation].reshape((1, m))\n\n    inc = mini_batch_size\n\n    num_complete_minibatches = np.floor(m / mini_batch_size) \n    for k in range(0, num_complete_minibatches):\n        mini_batch_X = shuffled_X[:, k*mini_batch_size:(k+1)*mini_batch_size]\n        mini_batch_Y = shuffled_Y[:, k*mini_batch_size:(k+1)*mini_batch_size]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n\n    # For handling the end case (last mini-batch &lt; mini_batch_size i.e less than 64)\n    if m % mini_batch_size != 0:\n        mini_batch_X = shuffled_X[:, (k+1)*mini_batch_size:]\n        mini_batch_Y = shuffled_Y[:, (k+1)*mini_batch_size:]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n\n    return mini_batches\n</code></pre> <p>Because mini-batch gradient descent makes a parameter update after seeing just a subset of examples, the direction of the update has some variance, and so the path taken by mini-batch gradient descent will \"oscillate\" toward convergence. Using momentum can reduce these oscillations.</p> <p>Momentum takes into account the past gradients to smooth out the update. The 'direction' of the previous gradients is stored in the variable  v . Formally, this will be the exponentially weighted average of the gradient on previous steps. You can also think of  v  as the \"velocity\" of a ball rolling downhill, building up speed (and momentum) according to the direction of the gradient/slope of the hill.</p> <p>For this algorithm to work, we first intialize the velocity as a vector of zeros. After that the velocity as well as the weight parameters are updated using the formula: $$ \\begin{cases} v_{dW^{[l]}} = \\beta v_{dW^{[l]}} + (1 - \\beta) dW^{[l]} \\ W^{[l]} = W^{[l]} - \\alpha v_{dW^{[l]}} \\end{cases}$$</p> <p>\\(\\(\\begin{cases} v_{db^{[l]}} = \\beta v_{db^{[l]}} + (1 - \\beta) db^{[l]} \\\\ b^{[l]} = b^{[l]} - \\alpha v_{db^{[l]}}  \\end{cases}\\)\\) for \\(l = 1, ..., L\\) where L is the number of layers and \\(\\beta\\) is the momentum and \\(\\alpha\\) is the learning rate.</p> <pre><code>def update_parameters_with_momentum(parameters, grads, v, beta, learning_rate):\n    L = len(parameters) // 2\n    for l in range(1, L + 1):\n        v[\"dW\" + str(l)] = beta*v[\"dW\" + str(l)] + (1 - beta)*grads[\"dW\" + str(l)]\n        v[\"db\" + str(l)] = beta*v[\"db\" + str(l)] + (1 - beta)*grads[\"db\" + str(l)]\n\n        parameters[\"W\" + str(l)] -= learning_rate*v[\"dW\" + str(l)]\n        parameters[\"b\" + str(l)] -= learning_rate*v[\"db\" + str(l)]\n    return parameters, v\n</code></pre> <p>Note that: - The velocity is initialized with zeros. So the algorithm will take a few iterations to \"build up\" velocity and start to take bigger steps. - If \\(\\beta = 0\\), then this just becomes standard gradient descent without momentum. </p> <p>How do you choose \\(\\beta\\)?</p> <ul> <li>The larger the momentum \\(\\beta\\) is, the smoother the update, because it takes the past gradients into account more. But if \\(\\beta\\) is too big, it could also smooth out the updates too much. </li> <li>Common values for \\(\\beta\\) range from 0.8 to 0.999. If you don't feel inclined to tune this, \\(\\beta = 0.9\\) is often a reasonable default. </li> <li>Tuning the optimal \\(\\beta\\) for your model might require trying several values to see what works best in terms of reducing the value of the cost function \\(J\\).</li> </ul> <p>Gradient Descent starts by quickly going down the steepest slope, then slowly goes down the bottom of the valley. It would be nice if the algorithm could detect this early on and correct its direction to point a bit more toward the global optimum. This is what RMSProp does. RMSProp keeps track of an exponentially decaying average of past squared gradients. It updates the parameter as: \\(\\(s \u2190\\beta s + (1-\\beta)\u2207_\u03b8J(\u03b8)\u2297 \u2207_\u03b8J(\u03b8)\\\\ \u03b8 \u2190\u03b8 \u2212 \u03b7 \u2207_\u03b8J(\u03b8) \u2297\\sqrt{s +\\epsilon}\\)\\)</p> <p>\u2297 is the element-wise product.</p> <p>Adam is one of the most effective optimization algorithms for training neural networks. It combines ideas from RMSProp and Momentum.</p> <p>How does Adam work? 1. It calculates an exponentially weighted average of past gradients, and stores it in variables \\(v\\) (before bias correction) and \\(v^{corrected}\\) (with bias correction).  2. It calculates an exponentially weighted average of the squares of the past gradients, and  stores it in variables \\(s\\) (before bias correction) and \\(s^{corrected}\\) (with bias correction).  3. It updates parameters in a direction based on combining information from \"1\" and \"2\".</p> <p>The update rule is, for \\(l = 1, ..., L\\): </p> <p>\\(\\(\\begin{cases} v_{dW^{[l]}} = \\beta_1 v_{dW^{[l]}} + (1 - \\beta_1) \\frac{\\partial \\mathcal{J} }{ \\partial W^{[l]} } \\\\ v^{corrected}_{dW^{[l]}} = \\frac{v_{dW^{[l]}}}{1 - (\\beta_1)^t} \\\\ s_{dW^{[l]}} = \\beta_2 s_{dW^{[l]}} + (1 - \\beta_2) (\\frac{\\partial \\mathcal{J} }{\\partial W^{[l]} })^2 \\\\ s^{corrected}_{dW^{[l]}} = \\frac{s_{dW^{[l]}}}{1 - (\\beta_2)^t} \\\\ W^{[l]} = W^{[l]} - \\alpha \\frac{v^{corrected}_{dW^{[l]}}}{\\sqrt{s^{corrected}_{dW^{[l]}}} + \\varepsilon} \\end{cases}\\)\\) where: - t counts the number of steps taken of Adam  - L is the number of layers - \\(\\beta_1\\) and \\(\\beta_2\\) are hyperparameters that control the two exponentially weighted averages.  - \\(\\alpha\\) is the learning rate - \\(\\varepsilon\\) is a very small number to avoid dividing by zero</p> <pre><code>def update_parameters_with_adam(\n    parameters, grads, v, s, t, learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8\n):\n\n    L = len(parameters) // 2\n    v_corrected = {}\n    s_corrected = {}\n    for l in range(1, L + 1):\n        v[\"dW\" + str(l)] = beta1 * v[\"dW\" + str(l)] + (1 - beta1) * grads[\"dW\" + str(l)]\n        v[\"db\" + str(l)] = beta1 * v[\"db\" + str(l)] + (1 - beta1) * grads[\"db\" + str(l)]\n\n        v_corrected[\"dW\" + str(l)] = v[\"dW\" + str(l)] / (1 - (beta1) ** t)\n        v_corrected[\"db\" + str(l)] = v[\"db\" + str(l)] / (1 - (beta1) ** t)\n\n        s[\"dW\" + str(l)] = (\n            beta2 * s[\"dW\" + str(l)] + (1 - beta2) * (grads[\"dW\" + str(l)]) ** 2\n        )\n        s[\"db\" + str(l)] = (\n            beta2 * s[\"db\" + str(l)] + (1 - beta2) * (grads[\"db\" + str(l)]) ** 2\n        )\n\n        s_corrected[\"dW\" + str(l)] = s[\"dW\" + str(l)] / (1 - (beta2) ** t)\n        s_corrected[\"db\" + str(l)] = s[\"db\" + str(l)] / (1 - (beta2) ** t)\n\n        parameters[\"W\" + str(l)] -= (learning_rate * v_corrected[\"dW\" + str(l)]) / (\n            np.sqrt(s_corrected[\"dW\" + str(l)]) + epsilon\n        )\n        parameters[\"b\" + str(l)] -= (learning_rate * v_corrected[\"db\" + str(l)]) / (\n            np.sqrt(s_corrected[\"db\" + str(l)]) + epsilon\n        )\n\n    return parameters, v, s, v_corrected, s_corrected\n</code></pre> <p>Apart from the optimization algorithm, changing the learning rate can also speed up the training of the model.  During the first part of training, our model can get away with taking large steps, but over time, using a fixed value for the learning rate alpha can cause our model to get stuck in a wide oscillation that never quite converges. But if we were to slowly reduce our learning rate alpha over time, we could then take smaller, slower steps that bring we closer to the minimum. This is the idea behind learning rate decay.</p> <p>Learning rate decay can be achieved by using either adaptive methods or pre-defined learning rate schedules.</p> <p>We can try one of the pre-defined schedules for learning rate decay, called exponential learning rate decay. It takes this mathematical form: \\(\\(\\alpha = \\frac{1}{1 + decayRate \\times epochNumber} \\alpha_{0}\\)\\)</p> <p>This method has the problem that as the epoch number increases, the learning rate becomes smaller and smaller and eventually becomes zero. This makes the model unable to learn anything.</p> <p>One way to solve this problem is to use a fixed interval scheduling. This is a method that takes a fixed number of iterations and then reduces the learning rate.</p> <p>The mathematical form of this schedule is: \\(\\(\\alpha = \\frac{1}{1 + decayRate \\times \\lfloor\\frac{epochNum}{timeInterval}\\rfloor} \\alpha_{0}\\)\\)</p>"},{"location":"Notes/DL/Optimization_Methods/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Optimization Methods</li> <ol><li>Gradient Descent</li> <ol><li>Stochastic Gradient Descent</li> <li>Mini-Batch Gradient Descent</li> </ol><li>Momentum</li> <li>RMSProp</li> <li>Adam</li> </ol> <p><li>Learning Rate Decay and Scheduling</li></p> <ol><li>Decay on every iteration</li> <li>Fixed Interval Scheduling</li> </ol>"},{"location":"Notes/DL/Optimization_Methods/#imports","title":"Imports","text":""},{"location":"Notes/DL/Optimization_Methods/#optimization-methods","title":"Optimization Methods","text":""},{"location":"Notes/DL/Optimization_Methods/#gradient-descent","title":"Gradient Descent","text":""},{"location":"Notes/DL/Optimization_Methods/#stochastic-gradient-descent","title":"Stochastic Gradient Descent","text":""},{"location":"Notes/DL/Optimization_Methods/#mini-batch-gradient-descent","title":"Mini-Batch Gradient Descent","text":""},{"location":"Notes/DL/Optimization_Methods/#momentum","title":"Momentum","text":""},{"location":"Notes/DL/Optimization_Methods/#rmsprop","title":"RMSProp","text":""},{"location":"Notes/DL/Optimization_Methods/#adam","title":"Adam","text":""},{"location":"Notes/DL/Optimization_Methods/#learning-rate-decay-and-scheduling","title":"Learning Rate Decay and Scheduling","text":""},{"location":"Notes/DL/Optimization_Methods/#decay-on-every-iteration","title":"Decay on every iteration","text":""},{"location":"Notes/DL/Optimization_Methods/#fixed-interval-scheduling","title":"Fixed Interval Scheduling","text":""},{"location":"Notes/DL/Sequence_Models/","title":"Sequence Models","text":"<p>Sequence models are the machine learning models that input or output sequences of data. Sequential data includes text streams, audio clips, video clips, time-series data and etc. Some examples of sequnce models are: - Recurrent Neural Networks (RNNs) - Gated Recurrent Unit (GRU) - Long Short-Term Memory (LSTM)</p> <p>There are many types of sequence problems:</p> <p></p> <p>Traditional neural networks have some limitations which makes them inefficient for processing sequential data. For example, a network cannot process an input of variable length. This is because the input of a network must be of the same size. Another limitation is that a network cannot remember information from a long time ago. This is because a network has no memory. Furthermore, traditional NN's don't share features learned across different positions of text/sequence (like CNN's do). In order to solve these problems, we need to use a sequence model.</p> <p></p> <p>Recurrent neural networks address the issue related to memory. They are networks with loops in them, allowing information to persist. In RNN, output at time \\(t\\) depend not only on the input at time \\(t\\) but also on the outputs from previous times.</p> <p>There are three weight matrices here: Wax, Waa, and Wya with shapes: - Wax: (NoOfHiddenNeurons, nx) - Waa: (NoOfHiddenNeurons, NoOfHiddenNeurons) - Wya: (ny, NoOfHiddenNeurons)</p> <p>These matrices are shared across all the time step. The weight matrix Waa is the memory the RNN is trying to maintain from the previous layers.</p> <p>The equations for forward propagation are: - \\(a^{&lt;t&gt;}=g_1(W_{ax}x^{&lt;t&gt;}+W_{aa}a^{&lt;t-1&gt;}+b_a)\\) - \\(y^{&lt;t&gt;}=g_2(W_{ya}a^{&lt;t&gt;}+b_y)\\)</p> <p>Usually, \\(g_1\\) is a tanh function and \\(g_2\\) is a softmax function. \\(a^0\\) is initialized to zero.</p> <p></p> <p>We can clean the RNN equations by using some notations. First, we stack \\(W_{aa}\\) and \\(W_{ax}\\) horizontally into a single matrix \\(W_a\\) as: - \\(W_a = [W_{aa} W_{ax}]\\)</p> <p>Then, we stack \\(x^{&lt;t&gt;}\\) and \\(a^{&lt;t-1&gt;}\\) vertically into a single vector \\(a^{&lt;t&gt;}\\) as: - \\(a^{&lt;t&gt;} = [\\frac{a^{&lt;t-1&gt;}}{x^{&lt;t&gt;}}]\\)</p> <p>Then, we can rewrite the equations as: \\(\\(a^{&lt;t&gt;} = g_1(W_a a^{&lt;t-1&gt;} + b_a)\\)\\) \\(\\(y^{&lt;t&gt;} = g_2(W_y a^{&lt;t&gt;} + b_y)\\)\\)</p> <p>In the case of a recurrent neural network, the loss function \\(\\mathcal{L}\\) of all time steps is defined based on the loss at every time step as follows: $$ \\mathcal{L} = \\sum_{t=1}^{T_y} \\mathcal{L}^{} $$ Where \\(\\mathcal{L}^{&lt;t&gt;}\\) is the loss at time step \\(t\\), given by $$ \\mathcal{L}^{} = -y^{}\\log{\\hat{y}^{}} - (1-y^{})\\log{(1-\\hat{y}^{})} $$ <p>Backpropagation is done at each point in time. At timestep \\(T\\), the derivative of the loss \\(\\mathcal{L}\\) with respect to weight matrix \\(W\\) is expressed as follows: $$ \\frac{\\partial \\mathcal{L}}{\\partial W} = \\sum_{t=1}^{T_y} \\frac{\\partial \\mathcal{L}^{}}{\\partial W} $$ Where \\(\\frac{\\partial \\mathcal{L}^{&lt;t&gt;}}{\\partial W}\\) is the derivative of the loss at time step \\(t\\) with respect to weight matrix \\(W\\). <p></p> <p>The backpropagation here is called backpropagation through time because we pass activation <code>a</code> from one sequence element to another like backwards in time.</p> <p>There are many other sequence learning tasks contexts where it\u2019s perfectly fine to condition the prediction at every time step on both the leftward and the rightward context. Consider, for example, part of speech detection. For example, consider the three sentences: - I am . - I am  hungry. - I am ___ hungry, and I can eat half a pig.</p> <p>In the first sentence \u201chappy\u201d seems to be a likely candidate. The words \u201cnot\u201d and \u201cvery\u201d seem plausible in the second sentence, but \u201cnot\u201d seems incompatible with the third sentences.</p> <p>Due to this reason, we need to use a bidirectional RNN. In a bidirectional RNN, we have two RNNs, one that processes the input sequence from left to right and one that processes the input sequence from right to left. The output of the two RNNs are then concatenated and fed to a softmax layer. For the first RNN layer, the first input is \\(x_1\\) and the last input is \\(x_t\\), but for the second RNN layer, the first input is \\(x_t\\) and the last input is \\(x_1\\). To produce the output of this bidirectional RNN layer, we simply concatenate together the corresponding outputs of the two underlying unidirectional RNN layers.</p> <p></p> <p>Mathematically, we can write the equations as: $$ \\begin{align} a^{}{fwd} &amp;= g_1(W{a}^{fwd} a^{}{fwd} + W{x}^{fwd} x^{} + b_a^{fwd}) \\ a^{}{bwd} &amp;= g_1(W{a}^{bwd} a^{}{bwd} + W{x}^{bwd} x^{} + b_a^{bwd}) \\ \\hat{y}^{} &amp;= g_2(W_{y} a^{}{fwd} + W{y} a^{}_{bwd} + b_y) \\end{align} $$ <p>Sometimes, we only need to look at recent information to perform the present task. For example, consider a language model trying to predict the next word based on the previous ones. If we are trying to predict the last word in \u201cthe clouds are in the sky,\u201d we don\u2019t need any further context \u2013 it\u2019s pretty obvious the next word is going to be sky. In such cases, where the gap between the relevant information and the place that it\u2019s needed is small, RNNs can learn to use the past information.</p> <p></p> <p>But there are also cases where we need more context. Consider trying to predict the last word in the text \u201cI grew up in France\u2026 I speak fluent French.\u201d Recent information suggests that the next word is probably the name of a language, but if we want to narrow down which language, we need the context of France, from further back. It\u2019s entirely possible for the gap between the relevant information and the point where it is needed to become very large.</p> <p>Unfortunately, as that gap grows, RNNs become unable to learn to connect the information.</p> <p></p> <p>The vanishing and exploding gradient phenomena are often encountered in the context of RNNs. The reason why they happen is that it is difficult to capture long term dependencies because of multiplicative gradient that can be exponentially decreasing/increasing with respect to the number of layers. One way to counter the problem of exploding gradient is to use gradient clipping.</p> <p></p> <p>Due to all these problems, other architectures have been proposed to overcome these problems. The most popular one is the Long Short-Term Memory (LSTM) network and Gate Recurrent Unit (GRU) network.</p> <p></p> <p>Each layer in GRUs has a new variable \\(c\\) which is the memory cell. It can tell to whether memorize something or not. In GRU's \\(c^{&lt;t&gt;} = a^{&lt;t&gt;}\\). In GRU, we have two gates and the cell state. The cell state is kind of like a conveyor belt. It runs straight down the entire chain, with only some minor linear interactions. It\u2019s very easy for information to just flow along it unchanged. Also, as \\(c^{&lt;t&gt;} = a^{&lt;t&gt;}\\), we no longer have the vanishing gradient problem. See LSTM for details.</p> <p>The update gate acts similar to the forget and input gate of an LSTM. It decides what information to throw away and what new information to add. The calculation of the update gate is as follows: $$ \\Gamma_u^{} = \\sigma(W_u [a^{}, x^{}] + b_u) $$ <p>The Reset Gate is responsible for the short-term memory of the network. This is used to calculate the candidate value of the new cell state. The calculation performed in this gate is very similar to the above: $$ \\Gamma_r^{} = \\sigma(W_r [a^{}, x^{}] + b_r) $$ <p>Using the above two gates, the candidate cell state is updated as: $$ \\tilde{c}^{} = \\tanh(W_c [\\Gamma_r c^{}, x^{}] + b_c) $$ The updated cell state is $$ c^{} = \\Gamma_u \\tilde{c}^{} + (1-\\Gamma_u)c^{} $$ <p>Long Short Term Memory networks \u2013 usually just called \u201cLSTMs\u201d \u2013 are a special kind of RNN, capable of learning long-term dependencies. LSTMs are explicitly designed to avoid the long-term dependency problem. Remembering information for long periods of time is practically their default behavior, not something they struggle to learn!</p> <p>LSTMs have the same chain like structure like RNN, but the repeating module has a different structure. Instead of having a single neural network layer, there are four, interacting in a very special way.</p> <p></p> <p>The key to LSTMs is the cell state, the horizontal line running through the top of the diagram.</p> <p>The cell state is kind of like a conveyor belt. It runs straight down the entire chain, with only some minor linear interactions. It\u2019s very easy for information to just flow along it unchanged.</p> <p></p> <p>The LSTM does have the ability to remove or add information to the cell state, carefully regulated by structures called gates.</p> <p>Gates are a way to optionally let information through. They are composed out of a sigmoid neural net layer and a pointwise multiplication operation. The sigmoid layer outputs numbers between zero and one, describing how much of each component should be let through. A value of zero means \u201clet nothing through,\u201d while a value of one means \u201clet everything through!\u201d An LSTM has three of these gates, to protect and control the cell state.</p> <p>LSTM has three gates which decide which information to keep and which to discard.. The first part is called Forget gate, the second part is known as the Input gate and the last one is the Output gate.</p> <p></p> <p>The first gate decides what information we\u2019re going to throw away from the cell state. This decision is made by a sigmoid layer called the \u201cforget gate layer.\u201d It looks at \\(h_{t\u22121}\\) and \\(x^t\\), and outputs a number between 0 and 1 for each number in the cell state \\(C_{t\u22121}\\). A 1 represents \u201ccompletely keep this\u201d while a 0 represents \u201ccompletely get rid of this.\u201d For example, the cell state might include the gender of the present subject, so that the correct pronouns can be used. When we see a new subject, we want to forget the gender of the old subject.</p> <p></p> <p></p> <p>This gate decides what new information we\u2019re going to store in the cell state. This has two parts. First, a sigmoid layer called the \u201cinput gate layer\u201d decides which values we\u2019ll update. Next, a tanh layer creates a vector of new candidate values, \\(\\tilde{C}_t\\), that could be added to the state. For example, we\u2019d want to add the gender of the new subject to the cell state, to replace the old one we\u2019re forgetting.</p> <p></p> <p>This cell is responsible for updating the old cell state, \\(C_{t\u22121}\\), into the new cell state \\(C_t\\). We multiply the old state by \\(f_t\\), forgetting the things we decided to forget earlier. Then we add \\(i_t*\\tilde{C}_t\\). This is the new candidate values, scaled by how much we decided to update each state value. For example, this is where we\u2019d actually drop the information about the old subject\u2019s gender and add the new information, as we decided in the previous steps.</p> <p></p> <p>Finally, we need to decide what we\u2019re going to output. This output will be based on our cell state, but will be a filtered version. First, we run a sigmoid layer which decides what parts of the cell state we\u2019re going to output. Then, we put the cell state through tanh (to push the values to be between \u22121 and 1) and multiply it by the output of the sigmoid gate, so that we only output the parts we decided to.</p> <p>For the language model example, since it just saw a subject, it might want to output information relevant to a verb, in case that\u2019s what is coming next. For example, it might output whether the subject is singular or plural, so that we know what form a verb should be conjugated into if that\u2019s what follows next.</p> <p></p> <p></p> <p></p> <p>A variant of LSTM is gotten using peephole connections. This means that we let the gate layers look at the cell state. The above diagram adds peepholes to all the gates, but many papers will give some peepholes and not others.</p> <p>Another variation is to use coupled forget and input gates. Instead of separately deciding what to forget and what we should add new information to, we make those decisions together. We only forget when we\u2019re going to input something in its place. We only input new values to the state when we forget something older.</p> <p></p> <p>We studied GRU earlier. GRU is nothing but a special type of LSTM. It combines the forget and input gates into a single \u201cupdate gate.\u201d It also merges the cell state and hidden state, and makes some other changes. </p> <p></p> <ul> <li>CS 230 - Deep Learning</li> <li>Understanding LSTM Networks</li> <li>The Unreasonable Effectiveness of Recurrent Neural Networks</li> <li>Sequence Model (Andrew NG)</li> <li>Backpropagation in RNN Explained</li> <li>Introduction to Long Short Term Memory (LSTM)</li> <li>Illustrated Guide to LSTM\u2019s and GRU\u2019s: A step by step explanation</li> </ul>"},{"location":"Notes/DL/Sequence_Models/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Sequence-Models\"&gt;Sequence Models&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Why Sequence Models?</li> <li>RNN</li> <ol><li>Forward Propagation</li> <li>Simplified RNN</li> <li>Backward Propagation (Backpropagation through time!)</li> <li>Bidirectional RNN (BRNN)</li> <li>Problem with RNN</li> <ol><li>Long-Term Dependencies</li> <li>Vanishing/Exploding Gradient</li> </ol> </ol><li>GRU</li> <ol><li>Update Gate</li> <li>Reset Gate</li> <li>Cell State Calculation</li> </ol><li>LSTM</li> <ol><li>Cell State</li> <li>Gates</li> <ol><li>Forget Gate</li> <li>Input Gate</li> <li>Output Gate</li> </ol><li>Variants of LSTM</li> <ol><li>Peephole Connections</li> <li>Coupled Input and Forget Gates</li> <li>GRU</li> </ol><li>References</li> </ol> </ol>"},{"location":"Notes/DL/Sequence_Models/#sequence-models","title":"Sequence Models","text":""},{"location":"Notes/DL/Sequence_Models/#why-sequence-models","title":"Why Sequence Models?","text":""},{"location":"Notes/DL/Sequence_Models/#rnn","title":"RNN","text":""},{"location":"Notes/DL/Sequence_Models/#forward-propagation","title":"Forward Propagation","text":""},{"location":"Notes/DL/Sequence_Models/#simplified-rnn","title":"Simplified RNN","text":""},{"location":"Notes/DL/Sequence_Models/#backward-propagation-backpropagation-through-time","title":"Backward Propagation (Backpropagation through time!)","text":""},{"location":"Notes/DL/Sequence_Models/#bidirectional-rnn-brnn","title":"Bidirectional RNN (BRNN)","text":""},{"location":"Notes/DL/Sequence_Models/#problem-with-rnn","title":"Problem with RNN","text":""},{"location":"Notes/DL/Sequence_Models/#long-term-dependencies","title":"Long-Term Dependencies","text":""},{"location":"Notes/DL/Sequence_Models/#vanishingexploding-gradient","title":"Vanishing/Exploding Gradient","text":""},{"location":"Notes/DL/Sequence_Models/#gru","title":"GRU","text":""},{"location":"Notes/DL/Sequence_Models/#update-gate","title":"Update Gate","text":""},{"location":"Notes/DL/Sequence_Models/#reset-gate","title":"Reset Gate","text":""},{"location":"Notes/DL/Sequence_Models/#cell-state-calculation","title":"Cell State Calculation","text":""},{"location":"Notes/DL/Sequence_Models/#lstm","title":"LSTM","text":""},{"location":"Notes/DL/Sequence_Models/#cell-state","title":"Cell State","text":""},{"location":"Notes/DL/Sequence_Models/#gates","title":"Gates","text":""},{"location":"Notes/DL/Sequence_Models/#forget-gate","title":"Forget Gate","text":""},{"location":"Notes/DL/Sequence_Models/#input-gate","title":"Input Gate","text":""},{"location":"Notes/DL/Sequence_Models/#output-gate","title":"Output Gate","text":""},{"location":"Notes/DL/Sequence_Models/#variants-of-lstm","title":"Variants of LSTM","text":""},{"location":"Notes/DL/Sequence_Models/#peephole-connections","title":"Peephole Connections","text":""},{"location":"Notes/DL/Sequence_Models/#coupled-input-and-forget-gates","title":"Coupled Input and Forget Gates","text":""},{"location":"Notes/DL/Sequence_Models/#gru_1","title":"GRU","text":""},{"location":"Notes/DL/Sequence_Models/#references","title":"References","text":""},{"location":"Notes/DL/temp/","title":"Temp","text":"<pre><code>import sys\nsys.path.append('../../tools')\n</code></pre> <pre><code>from files.notebook import Notebook\n</code></pre> <pre><code>nb = Notebook()\n</code></pre> <pre><code>nb.notebooks\n</code></pre> <pre>\n<code>['./CNN.ipynb',\n './Creating_NN_From_Scratch.ipynb',\n './Different_Initializations.ipynb',\n './Neural_Networks.ipynb',\n './Optimization_Methods.ipynb',\n './Sequence_Models.ipynb',\n './temp.ipynb']</code>\n</pre> <pre><code>content = nb.create_content(nb.notebooks[-2], return_string = True)\n</code></pre> <pre>\n<code>Converting the Notebook to HTML.\nLooking for the Headers and their positions.\nGetting correct order of the Headers.\nCreating the Contents.\nContent copied to clipboard.\n</code>\n</pre> <pre>\n<code>QXcbClipboard::setMimeData: Cannot set X11 selection owner\n</code>\n</pre> <pre><code>print(content)\n</code></pre> <pre>\n<code>&lt;h2 id=\"Contents\"&gt;Contents&lt;a href=\"#Contents\"&gt;&lt;/a&gt;&lt;/h2&gt;\n        &lt;ol&gt;\n        &lt;li&gt;&lt;a class=\"\" href=\"#Sequence-Models\"&gt;Sequence Models&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Why-Sequence-Models?\"&gt;Why Sequence Models?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#RNN\"&gt;RNN&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Forward-Propagation\"&gt;Forward Propagation&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Simplified-RNN\"&gt;Simplified RNN&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Backward-Propagation-(Backpropagation-through-time!)\"&gt;Backward Propagation (Backpropagation through time!)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Bidirectional-RNN-(BRNN)\"&gt;Bidirectional RNN (BRNN)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Problem-with-RNN\"&gt;Problem with RNN&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Long-Term-Dependencies\"&gt;Long-Term Dependencies&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Vanishing/Exploding-Gradient\"&gt;Vanishing/Exploding Gradient&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#GRU\"&gt;GRU&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Update-Gate\"&gt;Update Gate&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Reset-Gate\"&gt;Reset Gate&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Cell-State-Calculation\"&gt;Cell State Calculation&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#LSTM\"&gt;LSTM&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Cell-State\"&gt;Cell State&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Gates\"&gt;Gates&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Forget-Gate\"&gt;Forget Gate&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Input-Gate\"&gt;Input Gate&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Output-Gate\"&gt;Output Gate&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Variants-of-LSTM\"&gt;Variants of LSTM&lt;/a&gt;&lt;/li&gt;\n&lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Peephole-Connections\"&gt;Peephole Connections&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#Coupled-Input-and-Forget-Gates\"&gt;Coupled Input and Forget Gates&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a class=\"\" href=\"#GRU\"&gt;GRU&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#References\"&gt;References&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code>\n</pre> <pre><code>files = nb.export_directory()\n</code></pre> <pre>\n<code>Exporting notebooks...: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:02&lt;00:00,  3.17it/s]\n</code>\n</pre> <pre><code>files\n</code></pre> <pre>\n<code>['././CNN.html',\n '././Creating_NN_From_Scratch.html',\n '././Different_Initializations.html',\n '././Neural_Networks.html',\n '././Optimization_Methods.html',\n '././temp.html']</code>\n</pre> <pre><code>start = \"&lt;ul&gt;\"\nend = \"&lt;/ul&gt;\"\nfor f in files:\n    if \"temp\" in f:\n        continue\n    file = f.split(\"/\")[-1]\n    name = file.split(\".\")[0]\n    name = name.replace(\"_\", \" \")\n    start+=f\"\"\"&lt;li&gt;\n            &lt;a href=\"Notes/DL/{file}\" target=\"blank\" class=\"links\"&gt;{name}&lt;/a&gt;\n          &lt;/li&gt;\"\"\"\nstart+=end\nprint(start)\n</code></pre> <pre>\n<code>&lt;ul&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/CNN.html\" target=\"blank\" class=\"links\"&gt;CNN&lt;/a&gt;\n          &lt;/li&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/Creating_NN_From_Scratch.html\" target=\"blank\" class=\"links\"&gt;Creating NN From Scratch&lt;/a&gt;\n          &lt;/li&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/Different_Initializations.html\" target=\"blank\" class=\"links\"&gt;Different Initializations&lt;/a&gt;\n          &lt;/li&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/Neural_Networks.html\" target=\"blank\" class=\"links\"&gt;Neural Networks&lt;/a&gt;\n          &lt;/li&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/Optimization_Methods.html\" target=\"blank\" class=\"links\"&gt;Optimization Methods&lt;/a&gt;\n          &lt;/li&gt;&lt;li&gt;\n            &lt;a href=\"Notes/DL/Sequence_Models.html\" target=\"blank\" class=\"links\"&gt;Sequence Models&lt;/a&gt;\n          &lt;/li&gt;&lt;/ul&gt;\n</code>\n</pre> <pre><code>import bs4\nimport os\nimport requests\n</code></pre> <pre><code>html_notebooks = [file for file in os.listdir() if file.endswith(\".html\")]\nhtml_notebooks\n</code></pre> <pre>\n<code>['CNN.html',\n 'Creating_NN_From_Scratch.html',\n 'Different_Initializations.html',\n 'Neural_Networks.html',\n 'Optimization_Methods.html',\n 'Sequence_Models.html',\n 'temp.html']</code>\n</pre> <pre><code>notebook = html_notebooks[-2]\n</code></pre> <pre><code>with open(notebook, \"r\") as f:\n    content = f.read()\n</code></pre> <pre><code>soup = bs4.BeautifulSoup(content, \"html.parser\")\n</code></pre> <pre><code>soup.findAll(\"img\")[0].attrs[\"src\"]\n</code></pre> <pre>\n<code>'images/0601.jpeg'</code>\n</pre> <pre><code>image_url = [img.attrs[\"src\"] for img in soup.findAll(\"img\")]\nweb_image_url = [img for img in image_url if \"http\" in img]\nweb_image_url\n</code></pre> <pre>\n<code>['http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-shorttermdepdencies.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-longtermdependencies.png',\n 'https://stanford.edu/~shervine/teaching/cs-230/illustrations/gradient-clipping-en.png?6c3de441dc56aad634dc1a91accb48f2',\n 'https://stanford.edu/~shervine/teaching/cs-230/illustrations/gru-ltr.png?00f278f71b4833d32a87ed53d86f251c',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-chain.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-C-line.png',\n 'https://cdn.analyticsvidhya.com/wp-content/uploads/2021/03/Screenshot-from-2021-03-16-13-41-03-768x342.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-f.png',\n 'https://cdn.analyticsvidhya.com/wp-content/uploads/2021/03/Screenshot-from-2021-03-16-14-46-28.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-i.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-C.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-focus-o.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-var-peepholes.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-var-tied.png',\n 'http://colah.github.io/posts/2015-08-Understanding-LSTMs/img/LSTM3-var-GRU.png']</code>\n</pre> <pre><code>def download_image(url, file_name):\n    url = url.split(\"?\")[0]\n    extension = url.split(\".\")[-1]\n    file_name = file_name + \".\" + extension\n    with open(file_name, \"wb\") as f:\n        f.write(requests.get(url).content)\n    return file_name\n</code></pre> <pre><code>file_name = os.path.join(\"images\", \"temp\")\ndownload_image(web_image_url[0], file_name)\n</code></pre> <pre>\n<code>'images/temp.png'</code>\n</pre> <pre><code>SEQUENCE = \"07\"\nfinal_image_paths = []\nfor i, url in enumerate(web_image_url):\n    print(i, end=\"\\r\")\n    file_name = os.path.join(\"images\", f\"{SEQUENCE}{i+1:02d}\")\n    file_name = download_image(url, file_name)\n    final_image_paths.append(file_name)\n</code></pre> <pre>\n<code>14\n</code>\n</pre> <pre><code>raw_html = soup.prettify()\nfor i in range(len(final_image_paths)):\n    raw_html = raw_html.replace(web_image_url[i], final_image_paths[i])\n</code></pre> <pre><code>with open(notebook, \"w\") as f:\n    f.write(raw_html)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Notes/DL/temp/#html-images-change","title":"HTML Images Change","text":""},{"location":"Notes/DSA/Bitwise_operators/","title":"Bitwise operators","text":"<p>Operators are used to perform operations on values and variables. These are the special symbols that carry out arithmetic and logical computations. The value the operator operates on is known as Operand.  </p> <p>In Python, bitwise operators are used to performing bitwise calculations on integers. The integers are first converted into binary and then operations are performed on bit by bit, hence the name bitwise operators. Then the result is returned in decimal format. Following is the list of bitwise operators in Python.</p> OPERATORDESCRIPTIONSYNTAX&amp;Bitwise ANDx &amp; y|Bitwise ORx | y~Bitwise NOT~x^Bitwise XORx ^ y&gt;&gt;Bitwise right shiftx&gt;&gt;&lt;&lt;Bitwise left shiftx&lt;&lt; <p>Returns 1 if both the bits are 1 else 0. For example:</p> <pre>a = 10 = 1010 (Binary)\nb = 4 =  0100 (Binary)\n\na &amp; b = 1010\n         &amp;\n        0100\n      = 0000\n      = 0 (Decimal)</pre> <pre><code>a = 10\nb = 4\na&amp;b\n</code></pre> <pre>\n<code>0</code>\n</pre> <p>Returns 1 if either of the bit is 1 else 0. eg:</p> <pre>a = 10 = 1010 (Binary)\nb = 4 =  0100 (Binary)\n\na | b = 1010\n         |\n        0100\n      = 1110\n      = 14 (Decimal)\n</pre> <pre><code>a|b\n</code></pre> <pre>\n<code>14</code>\n</pre> <p>Returns one\u2019s complement of the number. eg.</p> <pre>\na = 10 = 1010 (Binary)\n\n~a = ~1010\n   = -(1010 + 1)\n   = -(1011)\n   = -11 (Decimal)\n</pre> <p>Returns 1 if one of the bits is 1 and the other is 0 else returns 0. eg.</p> <pre>\na = 10 = 1010 (Binary)\nb = 4 =  0100 (Binary)\n\na ^ b = 1010\n         ^\n        0100\n      = 1110\n      = 14 (Decimal)\n</pre> <pre><code>a^b\n</code></pre> <pre>\n<code>14</code>\n</pre> <p>Shifts the bits of the number to the right and fills 0 on voids left( fills 1 in the case of a negative number) as a result. Similar effect as of dividing the number with some power of two. eg.</p> <pre>\n1:\na = 10 = 0000 1010 (Binary)\na &gt;&gt; 1 = 0000 0101 = 5\n\n2:\na = -10 = 1111 0110 (Binary)\na &gt;&gt; 1 = 1111 1011 = -5 \n<pre>\n</pre></pre> <pre><code>a = 10\na&gt;&gt;1\n</code></pre> <pre>\n<code>5</code>\n</pre> <pre><code>a = 25\na&gt;&gt;3\n</code></pre> <pre>\n<code>3</code>\n</pre> <p>Shifts the bits of the number to the left and fills 0 on voids right as a result. Similar effect as of multiplying the number with some power of two. eg.</p> <pre>\n1:\na = 5 = 0000 0101 (Binary)\na &lt;&lt; 1 = 0000 1010 = 10\na &lt;&lt; 2 = 0001 0100 = 20 \n\n2:\nb = -10 = 1111 0110 (Binary)\nb &lt;&lt; 1 = 1110 1100 = -20\nb &lt;&lt; 2 = 1101 1000 = -40 \n</pre> <pre><code>a = 10\na&lt;&lt;1\n</code></pre> <pre>\n<code>20</code>\n</pre> <pre><code>a = 10\na&lt;&lt;3\n</code></pre> <pre>\n<code>80</code>\n</pre> <p>Python implements these operators with 'magic methods' These methods are:</p> Magic Method Operator Syntax <code>__and__</code> Bitwise AND x &amp; y <code>__or__</code> Bitwise OR x | y <code>__invert__</code> Bitwise NOT ~x <code>__xor__</code> Bitwise XOR x ^ y <code>__lshift__</code> Bitwise right shift x&gt;&gt; <code>__rshift__</code> Bitwise left shift x&lt;&lt;"},{"location":"Notes/DSA/Bitwise_operators/#python-bitwise-operators","title":"Python Bitwise Operators","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-and","title":"Bitwise AND","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-or-operator","title":"Bitwise OR Operator","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-not-operator","title":"Bitwise NOT Operator","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-xor-operator","title":"Bitwise XOR Operator","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-right-shift","title":"Bitwise Right Shift","text":""},{"location":"Notes/DSA/Bitwise_operators/#bitwise-left-shift","title":"Bitwise Left Shift","text":""},{"location":"Notes/DSA/Bitwise_operators/#the-methods-underlying-these-operators","title":"The Methods Underlying These Operators","text":""},{"location":"Notes/DSA/Doubly_Linked_List/","title":"Doubly Linked List","text":"<p>A Doubly Linked List (DLL) contains an extra pointer, typically called previous pointer, together with next pointer and data which are there in singly linked list.</p> <pre><code># EMPTY ERROR CLASS\nclass Empty(Exception):\n\"\"\"\n    To be raised when the list is empty and user want to access it\n    \"\"\"\n\n    pass\n\n\n# NONETYPE ERROR CLASS\nclass NoneType(Exception):\n\"\"\"\n    To be raised when the user wants to access a node that is not in the list\n    \"\"\"\n\n    pass\n\n\nclass Node:\n\"\"\"\n    A lightweighted node class to be used for other ADT's.\n    \"\"\"\n\n    def __init__(self, data, next=None, prev=None):\n\"\"\"\n        Initialize a node with data and next/prev pointers.\n\n        Parameters:\n        -----------\n        data: Any\n            The data to be stored in the node.\n        next: Node optional\n            The next node in the list.\n        prev: Node optional\n            The previous node in the list.\n\n        Returns:\n        --------\n        None\n        \"\"\"\n        self.data = data\n        self.next = next\n        self.prev = prev\n\n    def __str__(self) -&gt; str:\n        return str(self.data)\n</code></pre> <p>Here are the steps to add a new node to the beginning of the DLL. 1. Create the new node. 2. Set the next of the new_node to the current head. 3. If the current head is not none, set the prev of the current head to the new_node. 4. Set the new_node as the head. 5. Increment the lenght.</p> <pre><code>def push(self, data):\n\"\"\"\n    Pushes a node to the beginning of the linked list\n\n    Parameters:\n    -----------\n    data: Any\n        The data to be stored in the node.\n\n    Returns:\n    --------\n    None\n    \"\"\"\n    # Create a new node\n    new_node = Node(data)\n    # Check whether the list is empty\n    if self.head is None:\n        # Set the new_node as the head\n        self.head = new_node\n    else:\n        # Set the prev of head to new_node\n        self.head.prev = new_node\n        # Set the next of new_node to head\n        new_node.next = self.head\n</code></pre> <p>Steps are as follows: 1. Create the new node. 2. If prev_node is None, raise error. 3. Set the new_node's next as the next of the prev_node. 4. Set the next of the prev_node to the new_node. 5. Set the prev of the new_node to the prev_node. 6. Set the prev of the new_node's next to the new_node after making sure that it is not None. 7. Increment the length.</p> <pre><code>def insert_after(self, prev, data):\n\"\"\"\n    Inserts a new node after the given previous node.\n\n    Parameters:\n    -----------\n    prev: Node\n        The node before the new node.\n    data: Any\n        The data to be stored in the node.\n\n    Returns:\n    --------\n    None\n    \"\"\"\n    # Check if the given node is not None\n    if prev is None:\n        raise NoneType(\"The given node is None.\")\n    # Create a new node\n    new_node = Node(data)\n    # Set the new_node's next to the prev_node's next\n    new_node.next = prev.next\n    # Set the prev_node's next to the new node\n    prev.next = new_node\n    # Set the new_node's prev to the prev_node\n    new_node.prev = prev\n    # Check if the new_node's next is not None\n    if new_node.next is not None:\n        # Set the new_node's next's prev to the new node\n        new_node.next.prev = new_node\n    # Increment the length\n    self._length += 1\n</code></pre> <p>Here are the steps: 1. Create the new node. 2. Check if the current head is None. If yes then make the new_node as head. 3. If not then navigate to the last node. 4. Set the next of the last node the new_node. 5. Set the prev of the new_node to the last node.</p> <pre><code>def append(self, data):\n\"\"\"\n    Appends a new node to the end of the DLL\n\n    Parameters:\n    -----------\n    data: Any\n        The data to be stored in the node.\n\n    Returns:\n    --------\n    None\n    \"\"\"\n    # Create a new node\n    new_node = Node(data)\n    # Check if the head is None\n    if self.head is None:\n        # Set the head to the new node\n        self.head = new_node\n    else:\n        # Set the current node to the head\n        current = self.head\n        # Loop until the current node's next is None ie the end of the list\n        while current.next is not None:\n            # Set the current node to the current node's next\n            current = current.next\n        # Set the current node's next to the new node\n        current.next = new_node\n        # Set the new_node's prev to the current node\n        new_node.prev = current\n    # Increment the length\n    self._length += 1\n</code></pre> <p>Here are the steps: 1. If the given next_node is None, raise NoneType Error. 2. Create the new node. 3. Set the next of the new_node to the next_node. 4. Check if the prev of the next_node is None which will entail that it is the head. In this case, set the new_node as the head. 5. Else, set the next of the prev of the new_node to the new_node. 6. Set the prev of the next_node to the new_node. 7. Increment the length.</p> <pre><code>def insert_before(self, next_node, data):\n\"\"\"\n    Inserts a node before the given node.\n\n    Parameters:\n    -----------\n    next_node: Node\n        The node after the new node.\n    data: Any\n        The data to be stored in the node.\n\n    Returns:\n    --------\n    None\n    \"\"\"\n    # Check if the given node is not None\n    if next_node is None:\n        raise NoneType(\"The given node is None.\")\n    # Create a new node\n    new_node = Node(data)\n    # Set the next of the new node to the next_node\n    new_node.next = next_node\n    # Set the new_node's prev to the next_node's prev\n    new_node.prev = next_node.prev\n    # Check if the next_node's prev is None\n    if next_node.prev is None:\n        # Set the head to the new node\n        self.head = new_node\n    else:\n        # Set the new_node's prev's next to the new node\n        new_node.prev.next = new_node\n    # set the prev of the next_node to the new node\n    next_node.prev = new_node\n    # Increment the length\n    self._length += 1\n</code></pre> <p>Here are the steps: 1. Raise error if the DLL is empty. 2. Loop through the DLL to reach the last node. 3. Make the next of the prev of the last node to None 4. Get the data of the last_node to return. 5. Decrement the length.</p> <pre><code>def pop(self):\n\"\"\"\n    Removes the last node from the DLL.\n\n    Parameters:\n    -----------\n    None\n\n    Returns:\n    --------\n    data: Any\n        The data of the removed node.\n    \"\"\"\n    # Check if the head is None\n    if self.head is None:\n        raise Empty(\"The linked list is empty.\")\n    # Set the current node to the head\n    current = self.head\n    # Loop until the current node's next is None ie the end of the list\n    while current.next is not None:\n        # Set the current node to the current node's next\n        current = current.next\n    # Set the current node's prev's next to None\n    current.prev.next = None\n    # Get the data\n    data = current.data\n    # Decrement the length\n    self._length -= 1\n    # Return the data\n    return data\n</code></pre> <pre><code>from ADT import DoublyLinkedList\n</code></pre> <pre><code>dll = DoublyLinkedList()\n</code></pre> <pre><code>dll.push(\"ONE\")\ndll.insert_before(dll.head, \"TWO\")\ndll.insert_after(dll.head.next, \"THREE\")\n</code></pre> <pre><code>dll.print_list()\n</code></pre> <pre>\n<code>TWO\nONE\nTHREE\n</code>\n</pre> <pre><code>len(dll)\n</code></pre> <pre>\n<code>3</code>\n</pre> <pre><code>dll.pop()\n</code></pre> <pre>\n<code>THREE\n</code>\n</pre> <pre>\n<code>'THREE'</code>\n</pre> <pre><code>len(dll)\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code>dll.pop()\n</code></pre> <pre>\n<code>ONE\n</code>\n</pre> <pre>\n<code>'ONE'</code>\n</pre> <pre><code>dll.print_list()\n</code></pre> <pre>\n<code>TWO\n</code>\n</pre> <pre><code>dll.head.next\n</code></pre> <pre><code>dll.pop()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nEmpty                                     Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/Doubly_Linked_List.ipynb Cell 30 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/Doubly_Linked_List.ipynb#ch0000029?line=0'&gt;1&lt;/a&gt; dll.pop()\n\nFile /media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/ADT.py:430, in DoublyLinkedList.pop(self)\n    428 # Check if the head is None\n    429 if self.head is None:\n--&gt; 430     raise Empty(\"The linked list is empty.\")\n    431 # Set the current node to the head\n    432 current = self.head\n\nEmpty: The linked list is empty.</pre> <pre><code>len(dll)\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code>dll.print_list()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nEmpty                                     Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/Doubly_Linked_List.ipynb Cell 32 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/Doubly_Linked_List.ipynb#ch0000031?line=0'&gt;1&lt;/a&gt; dll.print_list()\n\nFile /media/hari31416/Hari_SSD/Users/harik/Desktop/summer-2022/Problems/Notes/ADT.py:405, in DoublyLinkedList.print_list(self)\n    403 # Check if the head is None\n    404 if self.head is None:\n--&gt; 405     raise Empty(\"The linked list is empty.\")\n    406 # Set the current node to the head\n    407 current = self.head\n\nEmpty: The linked list is empty.</pre>"},{"location":"Notes/DSA/Doubly_Linked_List/#doubly-linked-list","title":"Doubly Linked List","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#adding-a-node-at-front","title":"Adding A Node at Front","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#inserting-a-node-after-a-given-node","title":"Inserting a Node After a Given Node","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#add-a-node-at-end","title":"Add A Node at End","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#add-a-node-before-a-given-node","title":"Add a Node Before a Given Node","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#deleting-the-last-node","title":"Deleting the Last Node","text":""},{"location":"Notes/DSA/Doubly_Linked_List/#the-class-from-adt-module","title":"The Class from ADT Module","text":""},{"location":"Notes/DSA/LinkedList/","title":"LinkedList","text":"<p>A linked list is represented by a pointer to the first node of the linked list. The first node is called the head. If the linked list is empty, then the value of the head points to NULL.</p> <ol> <li>Each node in a list consists of at least two parts:</li> <li>A Data Item (we can store integer, strings or any type of data).    Pointer (Or Reference) to the next node (connects one node to another) or An address of another node</li> </ol> <pre><code>class Node:\n\n    # Function to initialize the node object\n    def __init__(self, data, next=None):\n        self.data = data  # Assign data\n        self.next = next  # Initialize \n                          # next as null\n    def __str__(self):\n        return str(self.data)\n# Linked List class\nclass LinkedList:\n\n    # Function to initialize the Linked \n    # List object\n    def __init__(self): \n        self.head = None\n</code></pre> <pre><code>llist = LinkedList()\nllist.head = Node(1)\nsecond = Node(\"two\")\nthird = Node(3)\nllist.head.next = second\nsecond.next = third\n</code></pre> <pre><code>while llist.head:\n    print(llist.head.data)\n    llist.head = llist.head.next\n</code></pre> <pre>\n<code>1\ntwo\n3\n</code>\n</pre> <pre><code>def push(self, data):\n    new_node = Node(data)\n    new_node.next = self.head\n    self.head = new_node\n    return self\n</code></pre> <pre><code>def insert_after(self, prev_node, data):\n    if prev_node is None:\n        return None\n    new_nod = Node(data)\n    new_nod.next = prev_node.next\n    prev_node.next = new_nod\n</code></pre> <pre><code>def append(self, data):\n    new_node = Node(data)\n    if self.head is None:\n        self.head = new_node\n        return None\n    last = self.head\n    while last.next:\n        last = last.next\n    last.next = new_node\n</code></pre> <pre><code>def remove_first(self):\n    if self.head is None:\n        return None\n    self.head = self.head.next\n</code></pre> <pre><code>def pop(self):\n    if self.head is None:\n        return None\n    temp = self.head\n    while temp.next.next:\n        temp = temp.next\n    temp.next = None\n</code></pre> <pre><code>def remove(self, key):\n    head_node = self.next\n    if head_node is not None:\n        if head_node.data == key:\n            self.head = head_node.next\n            head_node = None\n            return None\n    while head_node is not None:\n        if head_node.data == key:\n            break\n        prev = head_node\n        head_node = head_node.next\n    if head_node is None:\n        return -1\n    prev.next = head_node.next\n    head_node = None\n</code></pre> <pre><code>class Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\n    def __str__(self):\n        return str(self.data)\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return None\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_after(self, prev_node, data):\n        if prev_node is None:\n            return None\n        new_nod = Node(data)\n        new_nod.next = prev_node.next\n        prev_node.next = new_nod\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return None\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def transverse(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\n    def remove_first(self):\n        if self.head is None:\n            return None\n        self.head = self.head.next\n\n    def pop(self):\n        if self.head is None:\n            return None\n        temp = self.head\n        while temp.next.next:\n            temp = temp.next\n        temp.next = None\n\n    def remove(self, key):\n        head_node = self.head\n        if head_node is not None:\n            if head_node.data == key:\n                self.head = head_node.next\n                head_node = None\n                return None\n        while head_node is not None:\n            if head_node.data == key:\n                break\n            prev = head_node\n            head_node = head_node.next\n        if head_node is None:\n            return -1\n        prev.next = head_node.next\n        head_node = None\n</code></pre> <pre><code>llist = LinkedList()\nllist.push(1)\n</code></pre> <pre><code>llist = LinkedList()\n# llist.append(1)\nllist.push(1)\nllist.push(2)\nllist.insert_after(llist.head, 3)\n</code></pre> <pre><code>llist.append(4)\nllist.transverse()\n</code></pre> <pre>\n<code>2\n3\n1\n4\n</code>\n</pre> <pre><code>llist.remove(2)\n</code></pre> <pre><code># llist.append(4)\nllist.transverse()\n</code></pre> <pre>\n<code>3\n1\n4\n</code>\n</pre> <pre><code>llist.remove_first()\n</code></pre> <pre><code>llist.transverse()\n</code></pre> <p>Write a <code>remove_duplicates()</code> function that takes a list and deletes any duplicate nodes from the list. The list is not sorted.  For example if the linked list is 12-&gt;11-&gt;12-&gt;21-&gt;41-&gt;43-&gt;21 then <code>remove_duplicates()</code> should convert the list to 12-&gt;11-&gt;21-&gt;41-&gt;43. </p> <pre><code>def remove_duplicates(self):\n    temp = self.head\n    hash = []\n    while temp.next:\n        if temp.next.data in hash:\n            temp.next = temp.next.next\n            # temp.next.next = None\n        else:\n            hash.append(temp.next.data)\n            temp2 = temp\n            temp = temp.next\n    # if temp:\n    #     if temp.data in hash:\n    #         temp2.next = None\n    print(hash)\n</code></pre> <pre><code>list = LinkedList()\nlist.head = Node(10)\nlist.head.next = Node(12)\nlist.head.next.next = Node(11)\nlist.head.next.next.next = Node(11)\nlist.head.next.next.next.next = Node(12)\nlist.head.next.next.next.next.next = Node(11)\nlist.head.next.next.next.next.next.next = Node(10)\n</code></pre> <pre><code>print(\"Linked List before removing duplicates :\")\nlist.transverse()\nremove_duplicates(list)\nprint(\"Linked List after removing duplicates :\")\nlist.transverse()\n</code></pre> <pre>\n<code>Linked List before removing duplicates :\n10\n12\n11\n11\n12\n11\n10\n[12, 11, 10]\nLinked List after removing duplicates :\n10\n12\n11\n10\n</code>\n</pre> <pre><code>list = LinkedList()\nlist.head = Node(2)\nlist.head.next = Node(2)\nlist.head.next.next = Node(2)\nlist.head.next.next.next = Node(11)\nlist.head.next.next.next.next = Node(2)\nlist.head.next.next.next.next.next = Node(11)\nlist.head.next.next.next.next.next.next = Node(10)\n\nprint(\"Linked List before removing duplicates :\")\nlist.transverse()\nremove_duplicates(list)\nprint(\"Linked List after removing duplicates :\")\nlist.transverse()\n</code></pre> <pre>\n<code>Linked List before removing duplicates :\n2\n2\n2\n11\n2\n11\n10\n[2, 11, 10]\nLinked List after removing duplicates :\n2\n2\n11\n10\n</code>\n</pre> <pre><code>from ADT import LinkedList\n</code></pre> <pre><code>ll = LinkedList()\n</code></pre> <pre><code>ll.push(1)\nll.push(\"Two\")\nll.insert_after(ll.head, 2)\nll.print_list()\n</code></pre> <pre>\n<code>Two\n2\n1\n</code>\n</pre> <pre><code>ll.remove(2)\n</code></pre> <pre><code>ll.print_list()\n</code></pre> <pre>\n<code>Two\n1\n</code>\n</pre> <pre><code>len(ll)\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code>ll.pop()\n</code></pre> <pre>\n<code>'Two'</code>\n</pre> <pre><code>ll.print_list()\n</code></pre> <pre>\n<code>1\n</code>\n</pre> <pre><code>\n</code></pre>"},{"location":"Notes/DSA/LinkedList/#linkedlist","title":"LinkedList","text":""},{"location":"Notes/DSA/LinkedList/#transverse-a-linked-list","title":"Transverse a Linked List","text":""},{"location":"Notes/DSA/LinkedList/#inserting-a-node","title":"Inserting a Node","text":""},{"location":"Notes/DSA/LinkedList/#insert-at-the-beginning","title":"Insert at the Beginning","text":""},{"location":"Notes/DSA/LinkedList/#insert-after-a-node","title":"Insert After a Node","text":""},{"location":"Notes/DSA/LinkedList/#insert-at-the-end","title":"Insert at the End","text":""},{"location":"Notes/DSA/LinkedList/#deleting-a-node","title":"Deleting a Node","text":""},{"location":"Notes/DSA/LinkedList/#from-beginning","title":"From Beginning","text":""},{"location":"Notes/DSA/LinkedList/#from-end","title":"From End","text":""},{"location":"Notes/DSA/LinkedList/#remove-a-value","title":"Remove a Value","text":""},{"location":"Notes/DSA/LinkedList/#putting-all-together","title":"Putting All Together","text":""},{"location":"Notes/DSA/LinkedList/#using-the-linkedlist-class","title":"Using the <code>LinkedList</code> Class","text":""},{"location":"Notes/DSA/LinkedList/#remove-duplicates-from-an-unsorted-linked-list","title":"Remove duplicates from an unsorted linked list","text":""},{"location":"Notes/DSA/LinkedList/#the-linkedlist-class-from-adt","title":"The LinkedList Class from ADT","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/","title":"Problems GfG Easy 1","text":"<p>Given an unsorted array A of size N that contains only\u00a0non-negative integers, find a continuous sub-array which adds to a given number S.</p> <p>In case of multiple subarrays, return the subarray which comes first on moving from left to right.</p> <p> </p> <p>Example 1:</p> <pre>Input:\nN = 5, S = 12\nA[] = {1,2,3,7,5}\nOutput: 2 4\nExplanation: The sum of elements \nfrom 2nd position to 4th position \nis 12.</pre> <p> </p> <p>Example 2:</p> <pre>Input:\nN = 10, S = 15\nA[] = {1,2,3,4,5,6,7,8,9,10}\nOutput: 1 5\nExplanation: The sum of elements \nfrom 1st position to 5th position\nis 15.\n</pre> <p> </p> <p>Your Task: You don't need to read input or print anything. The task is to complete the function subarraySum() which takes arr, N and S as input parameters and returns an arraylist\u00a0containing the\u00a0starting and ending positions\u00a0of the\u00a0first such occurring subarray from the left where sum equals to S. The two indexes in the array should be according to 1-based indexing. If no such subarray is found, return an array consisting only one element that is -1.</p> <p> </p> <p>Expected Time Complexity:\u00a0O(N) Expected Auxiliary Space:\u00a0O(1)</p> <p> </p> <p>Constraints: 1 &lt;= N &lt;= 105 1 &lt;= Ai &lt;= 109</p> <p> </p> <pre><code>def subarray_sum(arr, n, s):\n    start, end, current_sum = 0, 0, 0\n    while True:\n        if end&gt;n:\n            return [-1]\n        if current_sum&lt;s:\n            current_sum+=arr[end]\n            end+=1\n        elif current_sum&gt;s:\n            current_sum-=arr[start]\n            start+=1\n        else:\n            return (start+1, end)\n        # print(start, end, current_sum)\n</code></pre> <pre><code>arr = [1,2,3,7,5]\nn = len(arr)\ns = 12\nsubarray_sum(arr, n, s)\n</code></pre> <pre>\n<code>(2, 4)</code>\n</pre> <pre><code>arr = [2,3,7]\nn = len(arr)\ns = 12\nsubarray_sum(arr, n, s)\n</code></pre> <pre>\n<code>(1, 3)</code>\n</pre> <pre><code>arr = \"135 101 170 125 79 159 163 65 106 146 82 28 162 92 196 143 28 37 192 5 103 154 93 183 22 117 119 96 48 127 172 139 70 113 68 100 36 95 104 12 123 134\".split()\narr = list(map(int, arr))\nn = len(arr)\ns = 468\nsubarray_sum(arr, n, s)\n</code></pre> <pre>\n<code>(38, 42)</code>\n</pre> <p>Given the root of a\u00a0binary tree. Check whether it is a BST or not. Note: We are considering that BSTs can not contain duplicate Nodes. A\u00a0BST\u00a0is defined as follows:</p> <ul> <li> The left subtree of a node contains only nodes with keys less than the node's key. <pre><code>&lt;/li&gt;\n&lt;li&gt;\n&lt;div&gt;&lt;span style=\"font-size:18px\"&gt;The right subtree of a node contains only nodes with keys &lt;strong&gt;greater than&lt;/strong&gt; the node's key.&lt;/span&gt;\n</code></pre> <pre><code>&lt;/li&gt;\n&lt;li&gt;\n&lt;div&gt;&lt;span style=\"font-size:18px\"&gt;Both the left and right subtrees must also be binary search trees.&lt;/span&gt;\n</code></pre> <pre><code>&lt;/li&gt;\n</code></pre> <p> </p> <p>Example 1:</p> <pre>Input:\n\u00a0 \u00a02\n /\u00a0 \u00a0 \\\n1\u00a0 \u00a0 \u00a0 3\nOutput: 1 \nExplanation: \nThe left subtree of root node contains node\nwith key lesser than the root nodes key and \nthe right subtree of root node contains node \nwith key greater than the root nodes key.\nHence, the tree is a BST.\n</pre> <p>Example 2:</p> <pre>Input:\n  2\n\u00a0  \\\n\u00a0   7\n\u00a0    \\\n\u00a0     6\n\u00a0      \\\n\u00a0       5\n\u00a0        \\\n\u00a0         9\n\u00a0          \\\n\u00a0           2\n\u00a0            \\\n\u00a0             6\nOutput: 0 \nExplanation: \nSince the node with value 7 has right subtree \nnodes with keys less than 7, this is not a BST.\n</pre> <p>Your Task: You don't need to read input or print anything. Your task is to complete the function\u00a0isBST() which takes the root of the tree as a parameter and returns true\u00a0if the given binary tree is BST, else returns false.\u00a0</p> <p>Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(Height of the BST).</p> <p>Constraints: 0 &lt;= Number of edges &lt;= 100000</p> <p> </p> <pre><code>MIN = -4294967296\nMAX = 4294967296\ndef isBSTHelper(root, min, max):\n    if not root:\n        return True\n    if root.data&lt;min or root.data&gt;max:\n        return False\n    return isBSTHelper(root.left, min,root.data-1) and isBSTHelper(root.right, root.data+1, max)\ndef isBST( root):\n    return isBSTHelper(root, MIN, MAX)\n</code></pre> <p>Given an array of size\u00a0N-1\u00a0such that it only contains distinct integers in the range of\u00a01\u00a0to N. Find the missing element.</p> <p>Example 1:</p> <pre>Input:\nN = 5\nA[] = {1,2,3,5}\nOutput: 4\n</pre> <p>Example 2:</p> <pre>Input:\nN = 10\nA[] = {6,1,2,8,3,4,7,10,5}\nOutput: 9</pre> <p> Your Task : You don't need to read input or print anything.\u00a0Complete the function\u00a0MissingNumber()\u00a0that takes array and N as input \u00a0parameters and returns the value of the missing number.</p> <p> Expected Time Complexity:\u00a0O(N) Expected Auxiliary Space:\u00a0O(1)</p> <p> Constraints: 1 \u2264 N \u2264 106 1 \u2264 A[i] \u2264 106</p> <pre><code>def missing_number(arr):\n    arr_set = set(arr)\n    if 1 not in arr:\n        return 1\n    for i in range(1, len(arr)+2):\n        if i not in arr_set:\n            return i \n</code></pre> <pre><code>arr = [6,1,2,8,3,4,7,10,5]\nmissing_number(arr)\n</code></pre> <pre>\n<code>9</code>\n</pre> <pre><code>arr = [1, 2, 3, 5]\nmissing_number(arr)\n</code></pre> <pre>\n<code>4</code>\n</pre> <pre><code>arr = [1, 2, 3, 4]\nmissing_number(arr)\n</code></pre> <pre>\n<code>5</code>\n</pre> <pre><code>arr = [2, 3, 4]\nmissing_number(arr)\n</code></pre> <pre>\n<code>1</code>\n</pre> <p>Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument.</p> <p>Left view of following tree is 1 2 4 8.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0\u00a0\u00a0 2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 3 \u00a0\u00a0 /\u00a0\u00a0 \u00a0 \\ \u00a0\u00a0 /\u00a0\u00a0\u00a0 \\ \u00a0 4\u00a0\u00a0\u00a0\u00a0 5\u00a0\u00a0 6\u00a0\u00a0\u00a0 7 \u00a0\u00a0 \\ \u00a0\u00a0\u00a0\u00a0 8\u00a0 \u00a0</p> <p>Example 1:</p> <pre>Input:\n\u00a0  1\n\u00a0/\u00a0 \\\n3\u00a0 \u00a0 2\nOutput: 1 3\n</pre> <p>Example 2:</p> <pre>Input:\n\nOutput: 10 20 40\n</pre> <p>Your Task: You just have to complete the function leftView() that returns an array containing the nodes that are in\u00a0the left view. The newline is automatically appended by the driver code. Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(N).</p> <p>Constraints: 0 &lt;= Number of nodes &lt;= 100 1 &lt;= Data of a node &lt;= 1000</p> <p>Given a linked list of N nodes. The task is to check if the\u00a0linked list has a loop. Linked list can contain\u00a0self loop.</p> <p>Example 1:</p> <pre>Input:\nN = 3\nvalue[] = {1,3,4}\nx(position at which tail is connected) = 2\nOutput: True\nExplanation: In above test case N = 3.\nThe linked list with nodes N = 3 is\ngiven. Then value of\u00a0x=2 is given which\nmeans last node is connected with xth\nnode of linked list. Therefore, there\nexists a loop.</pre> <p>Example 2:</p> <pre>Input:\nN = 4\nvalue[] = {1,8,3,4}\nx = 0\nOutput: False\nExplanation: For N = 4 ,x = 0 means\nthen lastNode-&gt;next = NULL, then\nthe\u00a0Linked list does not contains\nany loop.</pre> <p>Your Task: The task is to complete the function detectloop() which contains reference to the head as only argument. This function should return true\u00a0if linked list contains loop, else return false.</p> <p>Expected Time Complexity:\u00a0O(N) Expected Auxiliary Space:\u00a0O(1)</p> <p>Constraints: 1 \u2264 N \u2264 104 1 \u2264 Data on Node \u2264 103</p> <pre><code>def detect_loop(head):\n    nodes = set()\n    current = head\n    while current.next:\n        if current in nodes:\n            return True\n        else:\n            nodes.add(current)\n        current = current.next\n    return False\n</code></pre> <p>Given an array a[] of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array.</p> <p>Example 1:</p> <pre>Input:\nN = 4\na[] = {0,3,1,2}\nOutput: -1\nExplanation: N=4 and all elements from 0\nto (N-1 = 3) are present in the given\narray. Therefore output is -1.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 5\na[] = {2,3,1,2,3}\nOutput: 2 3\u00a0\nExplanation: 2 and 3 occur more than once\nin the given array.</pre> <p>Your Task: Complete the function duplicates()\u00a0which takes array a[] and n as input as parameters and returns a list of elements that occur more than once in the given array in sorted manner. If no such element is found, return list containing [-1].\u00a0</p> <p>Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Note : The extra space is only for the array to be returned. Try and perform all operation withing the provided array.\u00a0</p> <p>Constraints: 1 &lt;= N &lt;= 105 0 &lt;= A[i] &lt;= N-1, for each valid i</p> <pre><code>def duplicates(arr):\n    duplis = set()\n    already_in = set()\n    for a in arr:\n        if a in already_in:\n            duplis.add(a)\n        else:\n            already_in.add(a)\n    duplis = list(duplis)\n    duplis.sort()\n    return duplis if len(duplis)&gt;=1 else [-1]\n</code></pre> <pre><code>arr = [2, 3, 1, 2, 3]\nduplicates(arr) \n</code></pre> <pre>\n<code>[2, 3]</code>\n</pre> <pre><code>arr = [2, 3, 1]\nduplicates(arr)\n</code></pre> <pre>\n<code>[-1]</code>\n</pre> <pre><code>arr = [2]\nduplicates(arr)\n</code></pre> <pre>\n<code>[-1]</code>\n</pre> <p>Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.</p> <p> Example 1:</p> <pre>Input: \nN = 5\narr[]= {0 2 1 2 0}\nOutput:\n0 0 1 2 2\nExplanation:\n0s 1s and 2s are segregated \ninto ascending order.</pre> <p>Example 2:</p> <pre>Input: \nN = 3\narr[] = {0 1 0}\nOutput:\n0 0 1\nExplanation:\n0s 1s and 2s are segregated \ninto ascending order.</pre> <p> Your Task: You don't need to read input or print anything. Your task is to complete the function sort012() that takes an array arr and N as input parameters and sorts the array in-place. </p> <p> Expected Time Complexity: O(N) Expected Auxiliary Space: O(1)</p> <p> Constraints: 1 &lt;= N &lt;= 10^6 0 &lt;= A[i] &lt;= 2</p> <pre><code>def sort012(arr, N):\n    counts = {\n        0:0,\n        1:0,\n        2:0\n    }\n    for a in arr:\n        counts[a]+=1\n    print(counts)\n    for i in range(N):\n        if i&lt;counts[0]:\n            arr[i] = 0\n        elif counts[0]&lt;=i&lt;counts[0]+counts[1]:\n            arr[i] = 1\n        else:\n            arr[i] = 2\n</code></pre> <pre><code>arr = [0, 2, 1, 2, 0]\nsort012(arr, len(arr))\nprint(arr)\n</code></pre> <pre>\n<code>{0: 2, 1: 1, 2: 2}\n[0, 0, 1, 2, 2]\n</code>\n</pre> <p>Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.</p> <p>Example 1:</p> <pre>Input:\nN = 2\nLinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9\nOutput: 8\nExplanation: In the first example, there\nare 9 nodes in linked list and we need\nto find 2nd node from end.\u00a02nd node\nfrom end os 8.\u00a0\u00a0\n</pre> <p>Example 2:</p> <pre>Input:\nN = 5\nLinkedList: 10-&gt;5-&gt;100-&gt;5\nOutput: -1\nExplanation: In the second example, there\nare 4 nodes in the linked list and we\nneed to find 5th from the end.\u00a0Since 'n'\nis more than the number of nodes in the\nlinked list, the output is -1.</pre> <p>Your Task: The task is to complete the function getNthFromLast() which takes two arguments: reference to head and N and you need to return Nth from the end or -1 in case node doesn't exist..</p> <p>Note: Try to solve in single traversal.</p> <p>Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(1).</p> <p>Constraints: 1 &lt;= L &lt;= 106 1 &lt;= N &lt;= 106</p> <pre><code>def get_nth_from_last(head, n):\n    left, right = head, head\n    for _ in range(n):\n        if left is None:\n            return -1\n        left = left.next\n    while left:\n        right = right.next\n        left = left.next\n    return right.data\n</code></pre> <p>Given a singly linked list of N nodes. The task is to find the middle\u00a0of the linked list. For example, if the\u00a0linked list is 1-&gt; 2-&gt;3-&gt;4-&gt;5, then the middle node of the list is\u00a03. If there are\u00a0two middle nodes(in case, when\u00a0N\u00a0is even),\u00a0print the second middle element. For example, if the linked list given is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6, then the middle node of the list is 4.</p> <p>Example 1:</p> <pre>Input:\nLinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\nOutput: 3 \nExplanation: \nMiddle of linked list is 3.\n</pre> <p>Example 2:\u00a0</p> <pre>Input:\nLinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1\nOutput: 7 \nExplanation: \nMiddle of linked list is 7.\n</pre> <p>Your Task: The task is to complete the function getMiddle() which takes a head reference as the only argument and should return the data at the middle node of the linked list.</p> <p>Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(1).</p> <p>Constraints: 1 &lt;= N &lt;= 5000</p> <pre><code>def get_middle(head):\n    left, right = head, head\n    i = 0\n    while left:\n        if i%2:\n            right = right.next\n        left = left.next\n        i+=1\n    return right.data\n</code></pre> <p>Given a linked list of N nodes. The task is to reverse this list.</p> <p>Example 1:</p> <pre>Input:\nLinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6\nOutput: 6 5 4 3 2 1\nExplanation: After reversing the list, \nelements are 6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1.\n</pre> <p>Example 2:</p> <pre>Input:\nLinkedList: 2-&gt;7-&gt;8-&gt;9-&gt;10\nOutput: 10 9 8 7 2\nExplanation: After reversing the list,\nelements are\u00a010-&gt;9-&gt;8-&gt;7-&gt;2.</pre> <p>Your\u00a0Task: The task is to complete the function reverseList() with\u00a0head reference as the only argument and should return new head after reversing the list.</p> <p>Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(1).</p> <p>Constraints: 1 &lt;= N &lt;= 104</p> <p> </p> <pre><code>def reverse_list(head):\n    prev = None\n    current = head\n    next_ = None\n    while current:\n        next_ = current.next\n        current.next = prev\n        prev = current\n        current = next_\n    return prev\n</code></pre>"},{"location":"Notes/DSA/Problems_GfG_Easy_1/#1-subarray-with-given-sum","title":"1. Subarray with given sum","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#2-check-for-bst","title":"2. Check for BST","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#3-missing-number-in-array","title":"3. Missing number in array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#4-left-view-of-binary-tree","title":"4. Left View of Binary Tree","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#5-detect-loop-in-linked-list","title":"5. Detect Loop in linked list","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#6-find-duplicates-in-an-array","title":"6. Find duplicates in an array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#7-sort-an-array-of-0s-1s-and-2s","title":"7. Sort an array of 0s, 1s and 2s","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#8-nth-node-from-end-of-linked-list","title":"8. Nth node from end of linked list","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#9-finding-middle-element-in-a-linked-list","title":"9. Finding middle element in a linked list","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_1/#10-reverse-a-linked-list","title":"10. Reverse a linked list","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/","title":"Problems GfG Easy 2","text":"<p>An element is called a peak element if its value\u00a0is not smaller than the value of\u00a0its adjacent elements(if they exists). Given an array arr[] of size\u00a0N,\u00a0Return the index of any one of its\u00a0peak elements. Note:\u00a0The generated output will always be\u00a01 if the index that you\u00a0return is correct. Otherwise output will be 0.\u00a0</p> <p> Example 1:</p> <pre>Input: \nN = 3\narr[] = {1,2,3}\nPossible Answer: 2\nGenerated Output: 1\nExplanation: index 2 is 3.\nIt is the peak element as it is \ngreater than its neighbour 2.\nIf 2 is returned then the generated output will be 1 else 0.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 2\narr[] = {3,4}\nPossible Answer: 1\nOutput: 1\nExplanation: 4 (at index 1) is the \npeak element as it is greater than \nits only neighbour element 3.\nIf 2 is returned then the generated output will be 1 else 0.\n</pre> <p> </p> <p>Your Task: You don't have to read\u00a0input or print anything. Complete the function peakElement() which takes the array arr[] and its size N as input parameters and return the\u00a0index of any one of its peak elements.  Can you solve the problem in expected time complexity?</p> <p> </p> <p>Expected Time Complexity:\u00a0O(log N) Expected Auxiliary Space:\u00a0O(1)</p> <p> Constraints: 1 \u2264 N \u2264 105 1 \u2264 A[] \u2264 106</p> <pre><code>def peak_element(arr, n):\n    if n ==1:\n        return 0\n    if arr[-1]&gt;arr[-2]:\n        return len(arr)-1\n    if arr[0]&gt;arr[1]:\n        return 0\n    for i in range(1, n-1):\n        if arr[i-1]&lt;arr[i] and arr[i]&gt; arr[i+1]:\n            return i\n    return 0\n</code></pre> <pre><code>arr = [1,2,3]\npeak_element(arr, 3)\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code>arr = [1,13]\npeak_element(arr, 2)\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code>arr = [2,1, 3]\npeak_element(arr, 3)\n</code></pre> <pre>\n<code>2</code>\n</pre> <p>Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.</p> <p>Example 1:</p> <pre>Input:\nN = 3\nvalue[] = {1,2,1}\nOutput: 1\nExplanation: The given linked list is\n1 2 1 , which is a palindrome and\nHence, the output is 1.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 4\nvalue[] = {1,2,3,4}\nOutput: 0\nExplanation: The given linked list\nis 1 2 3 4 , which is not a palindrome\nand Hence, the output is 0.</pre> <p>Your Task: The task is to complete the function\u00a0isPalindrome() which takes head as reference as the only parameter and returns true or false if linked list is palindrome\u00a0or not respectively.</p> <p>Expected Time Complexity: O(N) Expected Auxialliary Space Usage: O(1)\u00a0 (ie, you should not use the recursive stack space as well)</p> <p>Constraints: 1 &lt;= N\u00a0&lt;= 105</p> <pre><code>def is_palindrom(head):\n    h = head\n    string = \"\"\n    while h:\n        string+=str(h.data)\n        h = h.next\n    return string == string[::-1]\n</code></pre> <p>The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes. The diagram below shows two trees each with diameter nine, the leaves that form the ends of the longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes).\u00a0</p> <p></p> <p>Example 1:</p> <pre>Input:\n\u00a0\u00a0\u00a0\u00a0   1\n \u00a0\u00a0\u00a0 /\u00a0\u00a0\\\n \u00a0\u00a0 2 \u00a0\u00a0 3\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /\u00a0\u00a0 \\\n \u00a0\u00a0\u00a0\u00a0 20\u00a0\u00a0\u00a0 30\n \u00a0\u00a0 /\u00a0\u00a0 \\ \n\u00a0\u00a0 40\u00a0\u00a0 60\nOutput: 4\n</pre> <p>Your Task: You need to complete the function diameter()\u00a0that takes root\u00a0as parameter and returns the diameter. Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(Height of the Tree).</p> <p>Constraints: 1 &lt;= Number of nodes &lt;= 10000 1 &lt;= Data of a node &lt;= 1000</p> <p> </p> <p>Given an array A of n\u00a0positive numbers. The task is to find the first Equilibium Point in the array.\u00a0 Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.</p> <p>Note: Retun the index of Equilibrium point. (1-based index)</p> <p>Example 1:</p> <pre>Input: \nn = 5 \nA[] = {1,3,5,2,2} \nOutput: 3 \nExplanation: For second test case \nequilibrium point is at position 3 \nas elements before it (1+3) = \nelements after it (2+2). </pre> <p> </p> <p>Example 2:</p> <pre>Input:\nn = 1\nA[] = {1}\nOutput: 1\nExplanation:\nSince its the only element hence\nits the only equilibrium point.</pre> <p> </p> <p>Your\u00a0Task: The task is to complete the function equilibriumPoint() which takes the array and n\u00a0as input parameters and returns the point of equilibrium. Return -1 if no such point exists. </p> <p>Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)</p> <p>Constraints: 1 &lt;= n\u00a0&lt;= 106 1 &lt;= A[i]\u00a0&lt;= 108</p> <pre><code>def equilibrium_point(A, N):\n    left_sum = 0\n    right_sum = sum(A)\n    for i in range(N):\n        right_sum -= A[i]\n        if left_sum == right_sum:\n            return i+1\n        left_sum += A[i]\n    return -1\n</code></pre> <pre><code>A = [1,3,5,2,2]\nN = 5\nequilibrium_point(A, N)\n</code></pre> <pre>\n<code>3</code>\n</pre> <p>Given an expression string x. Examine whether the pairs and the orders of \u201c{\u201c,\u201d}\u201d,\u201d(\u201c,\u201d)\u201d,\u201d[\u201c,\u201d]\u201d are correct in exp. For example, the function should return 'true' for exp = \u201c[()]{}{[()()]()}\u201d and 'false' for exp = \u201c[(])\u201d.</p> <p>Example 1:</p> <pre>Input:\n{([])}\nOutput: \ntrue\nExplanation: \n{ ( [ ] ) }. Same colored brackets can form \nbalaced pairs, with 0 number of \nunbalanced bracket.\n</pre> <p>Example 2:</p> <pre>Input: \n()\nOutput: \ntrue\nExplanation: \n(). Same bracket can form balanced pairs, \nand here only 1 type of bracket is \npresent and in balanced way.\n</pre> <p>Example 3:</p> <pre>Input: \n([]\nOutput: \nfalse\nExplanation: \n([]. Here square bracket is balanced but \nthe small bracket is not balanced and \nHence , the output will be unbalanced.</pre> <p>Your Task: This is a function problem. You only need to complete the function ispar()\u00a0that takes a\u00a0string as a\u00a0parameter and returns a boolean value\u00a0true if brackets are balanced else returns false. The printing is done automatically by the driver code. Expected Time Complexity: O(|x|) Expected Auixilliary Space: O(|x|) Constraints: 1 \u2264 |x| \u2264 32000</p> <p>Note: The drive code prints \"balanced\" if function return true, otherwise it prints \"not balanced\".</p> <pre><code>def ispar(x):\n    lefty = [\"(\", \"{\", \"[\"]\n    righty = [\")\", \"}\", \"]\"]\n    brackets = []\n    for bar in x:\n        if bar in lefty:\n            brackets.append(bar)\n        elif bar in righty:\n            if not brackets:\n                return False\n            if righty[lefty.index(brackets.pop())] != bar:\n                return False\n    return not len(brackets)  \n</code></pre> <pre><code>s = \"{()[]}\"\nispar(s)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>s = \"{(){[]}\"\nispar(s)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>s = \"[()]{}{[()()]()}\"\nispar(s)\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>Given an array\u00a0of N integers, and an integer\u00a0K, find the number of pairs of elements\u00a0in the array whose sum is equal to K.</p> <p> Example 1:</p> <pre>Input:\nN = 4, K = 6\narr[] = {1,\u00a05,\u00a07, 1}\nOutput: 2\nExplanation: \narr[0] + arr[1] = 1 + 5 = 6 \nand arr[1] + arr[3] = 5 + 1 = 6.\n</pre> <p> Example 2:</p> <pre>Input:\nN = 4, K = 2\narr[] = {1, 1, 1, 1}\nOutput: 6\nExplanation:\u00a0\nEach 1 will produce sum 2 with any 1.</pre> <p> Your Task: You don't need to read input or print anything. Your task is to complete the function\u00a0getPairsCount()\u00a0which takes\u00a0arr[], n\u00a0and\u00a0k\u00a0as input parameters and returns the number of pairs that have sum K.</p> <p> Expected Time Complexity:\u00a0O(N) Expected Auxiliary Space:\u00a0O(N) Constraints: 1 &lt;= N &lt;= 105 1 &lt;= K &lt;= 108 1 &lt;= Arr[i] &lt;= 106</p> <p> </p> <pre><code>def get_pairs_count(arr, n, k):\n    sums = {k-key for key in arr}\n    print(sums)\n    count = 0\n    for a in arr:\n        if a in sums:\n            count+=1\n    return count\n</code></pre> <pre><code>arr = [1, 5, 7, 1]\nn = len(arr)\nk = 6\nget_pairs_count(arr, n, k)\n</code></pre> <pre>\n<code>{1, 5, -1}\n</code>\n</pre> <pre>\n<code>3</code>\n</pre> <pre><code>arr = [1, 5, 7, 1]\nn = len(arr)\nk = 6\nget_pairs_count(arr, n, k)\n</code></pre> <p>Given an array A of positive integers. Your task is to find the leaders in the array.\u00a0An element of array is leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>Input:\nn = 6\nA[] = {16,17,4,3,5,2}\nOutput: 17 5 2\nExplanation: The first leader is 17 \nas it is greater than all the elements\nto its right.\u00a0 Similarly, the next \nleader is 5. The right most element \nis always a leader so it is also \nincluded.\n</pre> <p> </p> <p>Example 2:</p> <pre>Input:\nn = 5\nA[] = {1,2,3,4,0}\nOutput: 4 0\n</pre> <p> </p> <p>Your Task: You don't need to read input or print anything.\u00a0The task is to complete the function leader() which takes array A and n\u00a0as input parameters and\u00a0returns an array of leaders in order of their appearance.</p> <p> </p> <p>Expected Time Complexity:\u00a0O(n) Expected Auxiliary Space:\u00a0O(n)</p> <p> </p> <p>Constraints: 1 &lt;= n\u00a0&lt;= 107 0 &lt;= Ai &lt;= 107</p> <pre><code>def leader(A):\n    leaders = []\n    greatest = -1\n    for i in range(len(A)):\n        term = A[-i-1]\n        if term &gt;=greatest:\n            leaders.append(term)\n            greatest = term\n        # sum+=term\n    return leaders\n</code></pre> <pre><code>A = [16,17,4,3,5,2]\nleader(A)\n</code></pre> <pre>\n<code>[2, 5, 17]</code>\n</pre> <pre><code>A = [1,2,3,4,0]\nleader(A)\n</code></pre> <pre>\n<code>[0, 4]</code>\n</pre> <p>Given a binary tree, find if it is height balanced or not.\u00a0 A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree.\u00a0</p> <p>A height balanced tree \u00a0 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0\u00a0 /\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0 10\u00a0\u00a0\u00a0\u00a0\u00a0 39 \u00a0 / 5</p> <p>An unbalanced tree \u00a0 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0\u00a0 /\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 10\u00a0\u00a0\u00a0 \u00a0 / 5</p> <p>Example 1:</p> <pre>Input:\n\u00a0\u00a0\u00a0\u00a0\u00a0 1\n \u00a0\u00a0\u00a0/\n\u00a0\u00a0 2\n \u00a0 \u00a0\\\n \u00a0 \u00a0 3\u00a0\nOutput: 0\nExplanation: The max difference in height\nof left subtree and right subtree is 2,\nwhich is greater than 1. Hence unbalanced\n</pre> <p>Example 2:</p> <pre>Input:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010\n \u00a0\u00a0\u00a0\u00a0/\u00a0\u00a0 \\\n \u00a0\u00a0\u00a020\u00a0\u00a0 30 \n\u00a0\u00a0/\u00a0\u00a0 \\\n 40\u00a0\u00a0 60\nOutput: 1\nExplanation: The max difference in height\nof left subtree and right subtree is 1.\nHence balanced. </pre> <p>Your Task: You don't need to take input. Just complete the function isBalanced() that takes root node as parameter and returns true, if the tree is balanced else returns false.</p> <p>Constraints: 1 &lt;= Number of nodes &lt;= 105 0 &lt;= Data of a node &lt;= 106</p> <p>Expected time complexity:\u00a0O(N) Expected auxiliary space:\u00a0O(h) , where h = height of tree</p> <p>Given a singly linked list consisting of N nodes. The task is to remove duplicates (nodes with duplicate values) from the given list (if exists). Note: Try not to use extra space. Expected time complexity is O(N). The nodes are arranged in a sorted way.</p> <p>Example 1:</p> <pre>Input:\nLinkedList: 2-&gt;2-&gt;4-&gt;5\nOutput: 2 4 5\nExplanation: In the given linked list \n2 -&gt;2 -&gt; 4-&gt; 5, only 2 occurs more \nthan 1 time.\n</pre> <p>Example 2:</p> <pre>Input:\nLinkedList: 2-&gt;2-&gt;2-&gt;2-&gt;2\nOutput: 2\nExplanation: In the given linked list \n2 -&gt;2 -&gt;2 -&gt;2 -&gt;2, 2 is the only element\nand is repeated 5 times.</pre> <p>Your Task: The task is to complete the function\u00a0removeDuplicates() which should remove the duplicates from linked list and return the head of the linkedlist.</p> <p>Expected Time Complexity : O(N) Expected Auxilliary Space : O(1)</p> <p>Constraints: 1 &lt;= Number of nodes &lt;= 104</p> <p> </p> <pre><code>def remove_duplicates(head):\n    current = head\n    current_data = current.data\n    while current.next:\n        next_data = current.next.data\n        if next_data == current_data:\n            current.data = current.next.data\n            current.next = current.next.next\n        else:\n            current_data = next_data\n            current = current.next\n    return head\n</code></pre> <p>Given a sorted array containing only 0s and 1s, find the transition point.\u00a0</p> <p> Example 1:</p> <pre>Input:\nN = 5\narr[] = {0,0,0,1,1}\nOutput: 3\nExplanation: index 3 is the transition \npoint where 1 begins.</pre> <p> Example 2:</p> <pre>Input:\nN = 4\narr[] = {0,0,0,0}\nOutput: -1\nExplanation: Since, there is no \"1\",\nthe answer is -1.</pre> <p> Your Task: You don't need to read input or print anything. The task is to complete the function transitionPoint() that takes array and N as input parameters and returns the 0 based index of the position where \"0\" ends and \"1\" begins. If array does not have any 1s, return -1. If array does not have any 0s, return 0.</p> <p> Expected Time Complexity: O(LogN) Expected Auxiliary Space: O(1)</p> <p> Constraints: 1 \u2264 N \u2264 500000 0 \u2264 arr[i] \u2264 1</p> <pre><code>def transition_point(arr, n):\n    pos = n-1\n    if not arr[pos]:\n        return -1\n    if not arr[pos]:\n        return -1\n    while arr[pos]==1:\n        pos -=1\n    return pos+1\n</code></pre> <pre><code>arr = [0, 0, 0, 1, 1]\nn = 4\ntransition_point(arr, n)\n</code></pre> <pre>\n<code>3</code>\n</pre>"},{"location":"Notes/DSA/Problems_GfG_Easy_2/#1-peak-element","title":"1. Peak element","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#2-check-if-linked-list-is-palindrome","title":"2. Check if Linked List is Palindrome","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#3-diameter-of-a-binary-tree","title":"3. Diameter of a Binary Tree","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#4-equilibrium-point","title":"4. Equilibrium Point","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#5-parenthesis-checker","title":"5. Parenthesis Checker","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#6-count-pairs-with-given-sum","title":"6. Count pairs with given sum","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#7-leaders-in-an-array","title":"7. Leaders in an array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#8-check-for-balanced-tree","title":"8. Check for Balanced Tree","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#9-remove-duplicate-element-from-sorted-linked-list","title":"9. Remove duplicate element from sorted Linked List","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_2/#10-find-transition-point","title":"10. Find Transition Point","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/","title":"Problems GfG Easy 3","text":"<p>You are given a pointer/ reference to the node which is to be deleted from the\u00a0linked list of N\u00a0nodes. The task is to delete the node. Pointer/ reference to head node is not given.\u00a0 Note: No head reference is given to you. It is\u00a0guaranteed\u00a0that the node to be deleted is not a tail node in the linked list.</p> <p>Example 1:</p> <pre>Input:\nN = 2\nvalue[] = {1,2}\nnode = 1\nOutput: 2\nExplanation: After deleting 1 from the\nlinked list, we have remaining nodes\nas 2.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 4\nvalue[] = {10,20,4,30}\nnode = 20\nOutput: 10 4 30\nExplanation: After deleting 20 from\nthe linked list, we have remaining\nnodes as 10, 4 and 30.</pre> <p>Your Task: You only need to complete the function deleteNode that takes reference to the node that needs to be deleted. The printing is done automatically by the driver code.</p> <p>Expected Time Complexity : O(1) Expected Auxilliary Space : O(1)</p> <p>Constraints: 2 &lt;= N &lt;= 103</p> <pre><code>def delete_node(self,curr_node):\n    curr_node.data = curr_node.next.data\n    curr_node.next = curr_node.next.next\n</code></pre> <p>Given an unsorted array arr[] of size N.\u00a0Rotate the array to the left (counter-clockwise direction) by D steps, where\u00a0D\u00a0is a positive integer.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>Input:\nN = 5, D = 2\narr[] = {1,2,3,4,5}\nOutput: 3 4 5 1 2\nExplanation: 1 2 3 4 5\u00a0 when rotated\nby 2 elements, it becomes 3 4 5 1 2.</pre> <p>Example 2:</p> <pre>Input:\nN = 10, D = 3\narr[] = {2,4,6,8,10,12,14,16,18,20}\nOutput: 8 10 12 14 16 18 20 2 4 6\nExplanation: 2 4 6 8 10 12 14 16 18 20\u00a0\nwhen rotated by 3 elements, it becomes \n8 10 12 14 16 18 20 2 4 6.\n</pre> <p> </p> <p>Your\u00a0Task: Complete the function rotateArr() which takes the array, D and N as input parameters and\u00a0rotates the array by D elements. The array must be modified in-place without using extra space.\u00a0</p> <p> </p> <p>Expected Time Complexity:\u00a0O(N) Expected Auxiliary Space:\u00a0O(1)</p> <p> </p> <p>Constraints: 1 &lt;= N &lt;= 106 1 &lt;= D &lt;= 106 0 &lt;=\u00a0arr[i] &lt;= 105</p> <pre><code>A = [2,4,6,8,10,12,14,16,18, 20]\nD = 3\ni = 0\nj = D\nN = len(A)\nprint(A)\nwhile True:\n    for _ in range(D):\n        A[i], A[j] = A[j], A[i]\n        i+=1\n        j+=1\n    print(A)\n    if j&gt;N-D:\n        break\nif j!=N:\n    while True:\n        A[i], A[-1]=A[-1], A[i]\n        i+=1\n        if i&gt;N-1:\n            break\n</code></pre> <pre>\n<code>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n[8, 10, 12, 2, 4, 6, 14, 16, 18, 20]\n[8, 10, 12, 14, 16, 18, 2, 4, 6, 20]\n</code>\n</pre> <pre><code>A\n</code></pre> <pre>\n<code>[8, 10, 12, 14, 16, 18, 20, 2, 4, 6]</code>\n</pre> <pre><code>def rotate()\n</code></pre> <pre><code>def rotate(A, D, N):\n    i = 0\n    j = D\n    N = len(A)\n    print(A)\n    if not D:\n        return \n    while True:\n        if j&gt;N-D:\n            break\n        for _ in range(D):\n            A[i], A[j] = A[j], A[i]\n            i+=1\n            j+=1\n        print(A)\n    if j!=N:\n        while True:\n            A[i], A[-1]=A[-1], A[i]\n            i+=1\n            if i&gt;N-1:\n                break\n</code></pre> <pre><code>with open(\"fileInput.txt\") as f:\n    lines = f.readlines()\n    N = int(lines[0].split(\" \")[0])\n    D = int(lines[0].split(\" \")[1])\n    A = lines[1].split(\" \")\n    A = map(lambda x: int(x), A)\n    A = list(A)\n</code></pre> <pre><code>rotate(A, D, N)\nfor a in A:\n    print(a, end=\" \")\n</code></pre> <pre>\n<code>[40, 13, 27, 87, 95, 40, 96, 71, 35, 79, 68, 2, 98, 3, 18, 93, 53, 57, 2, 81, 87, 42, 66, 90, 45, 20, 41, 30, 32, 18, 98, 72, 82, 76, 10, 28, 68, 57, 98, 54, 87, 66, 7, 84, 20, 25, 29, 72, 33, 30, 4, 20, 71, 69, 9, 16, 41, 50, 97, 24, 19, 46, 47, 52, 22, 56, 80, 89, 65, 29, 42, 51, 94, 1, 35, 65, 25]\n25 40 13 27 87 95 40 96 71 35 79 68 2 98 3 18 93 53 57 2 81 87 42 66 90 45 20 41 30 32 18 98 72 82 76 10 28 68 57 98 54 87 66 7 84 20 25 29 72 33 30 4 20 71 69 9 16 41 50 97 24 19 46 47 52 22 56 80 89 65 29 42 51 94 1 35 65 </code>\n</pre> <p>Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers. </p> <p>For example, the number 190 will be represented by the linked list, 1-&gt;9-&gt;0-&gt;null, similarly 25 by 2-&gt;5-&gt;null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2-&gt;1-&gt;5-&gt;null. You are required to return the head of the linked list 2-&gt;1-&gt;5-&gt;null.</p> <p>Example 1:</p> <pre>Input:\nN = 2\nvalueN[] = {4,5}\nM = 3\nvalueM[] = {3,4,5}\nOutput: 3 9 0\u00a0\u00a0\nExplanation: For the given two linked\nlist (4 5) and (3 4 5), after adding\nthe two linked list\u00a0resultant linked\nlist will be (3\u00a09 0).</pre> <p>Example 2:</p> <pre>Input:\nN = 2\nvalueN[] = {6,3}\nM = 1\nvalueM[] = {7}\nOutput: 7 0\nExplanation: For the given two linked\nlist (6 3) and (7), after adding the\ntwo linked list\u00a0resultant linked list\nwill be (7 0).</pre> <p>Your\u00a0Task: The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list. \u00a0\u00a0</p> <p>Expected Time Complexity:\u00a0O(N+M) Expected Auxiliary Space:\u00a0O(Max(N,M)) for the resultant list.</p> <p>Constraints: 1 &lt;= N, M &lt;= 5000</p> <pre><code>def reverse_list(head):\n    prev = None\n    current = head\n    next = None\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev\ndef addTwoNumbers(l1, l2):\n    sum_node = ListNode()\n    s_head = sum_node\n    carry = 0\n    h1 = l1\n    h2 = l2\n    while h1 and h2:\n        sum_ = h1.data + h2.data + carry\n        carry = sum_ // 10\n        s_head.data = sum_ % 10\n        s_head.next = ListNode()\n        s_head = s_head.next\n        h1, h2 = h1.next, h2.next\n    h = h1 if h1 else h2\n    while h:\n        sum_ = h.data + carry\n        carry = sum_ // 10\n        s_head.data = sum_ % 10\n        s_head.next = ListNode()\n        s_head = s_head.next\n        h = h.next\n    s_head = sum_node\n    if carry:\n        while s_head.next:\n            s_head = s_head.next\n        s_head.data = carry\n    else:\n        while s_head.next.next:\n            s_head = s_head.next\n        s_head.next = None\n    return sum_node\n\n    first_r = reverse_list(first)\n    second_r = reverse_list(second)\n    return reverse_list(addTwoNumbers(first_r, second_r))\n</code></pre> <p>Given three arrays sorted in increasing order. Find the elements that are common in all three arrays. Note:\u00a0can you take care of the duplicates without using any additional Data Structure?</p> <p>Example 1:</p> <pre>Input:\nn1 = 6; A = {1, 5, 10, 20, 40, 80}\nn2 = 5; B = {6, 7, 20, 80, 100}\nn3 = 8; C = {3, 4, 15, 20, 30, 70, 80, 120}\nOutput: 20 80\nExplanation: 20 and 80 are the only\ncommon elements in A, B and C.</pre> <p> </p> <p>Your Task: \u00a0 You don't need to read input or print anything. Your task is to complete the function commonElements() which take the 3 arrays A[], B[], C[] and their respective sizes n1, n2 and n3 as inputs and returns an array containing the common element present in all the 3 arrays in sorted order.\u00a0 If there are no such elements return an empty array. In this case the output will be printed as -1.</p> <p> </p> <p>Expected Time Complexity: O(n1 + n2 + n3) Expected Auxiliary Space: O(n1 + n2 + n3)</p> <p> </p> <p>Constraints: 1 &lt;= n1, n2, n3 &lt;= 10^5 The array elements can be both positive or negative integers. </p> <pre><code>def common(A, B, C, n1, n2, n3):\n    commons = []\n    arrays = {\n        n1:A,\n        n2:B,\n        n3:C,\n    }\n    if n1==n2 and n2==n3:\n        smallest = A\n        first = B\n        second = C\n    else:\n        smallest_index = [n1,n2,n3].index(min([n1,n2,n3]))\n        smallest = arrays[[n1, n2, n3][smallest_index]]\n        all = [n1, n2, n3]\n        all.remove(all[smallest_index])\n        first = arrays[all[0]]\n        second = arrays[all[1]]\n    l1, l2, l3 = 0, 0, 0\n    # print(smallest, first, second)\n    while l3&lt;len(smallest):\n        # print(commons)\n        if l1&gt;=len(first) or l2&gt;=len(second):\n            break\n        curr_num = smallest[l3]\n        # print(curr_num, first[l1], second[l2])\n        if curr_num==first[l1] and curr_num==second[l2]:\n            commons.append(curr_num)\n            l1+=1\n            l2+=1\n            l3+=1\n            continue\n        if curr_num&lt;first[l1] and curr_num&lt;second[l2]:\n            l3+=1\n        if curr_num&gt;first[l1]:\n            l1+=1\n        if curr_num&gt;second[l2]:\n            l2+=1\n    if not commons:\n        return []\n    if len(commons)==1:\n        return commons\n    already_in = set()\n    result = []\n    for el in commons:\n        if el not in already_in:\n            already_in.add(el)\n            result.append(el)\n    # result = list(set(commons))\n    # result.sort()\n\n    return result\n</code></pre> <pre><code>A = [1, 5, 10, 20, 40, 80]\nB = [6, 7, 20, 80, 100]\nC = [3, 4, 15, 20, 30, 70, 80, 120]\nn1 = len(A)\nn2 = len(B)\nn3 = len(C)\ncommon(A, B, C, n1, n2, n3)\n</code></pre> <pre>\n<code>[20, 80]</code>\n</pre> <pre><code>%%timeit\nA = [3, 3, 3]\nB = [3, 3, 3]\nC = [3, 3, 3]\nn1 = len(A)\nn2 = len(B)\nn3 = len(C)\ncommon(A, B, C, n1, n2, n3)\n</code></pre> <pre>\n<code>2.06 \u00b5s \u00b1 30.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\n</code>\n</pre> <p>Given an array having both positive and negative integers. The task is to compute the\u00a0length of the largest subarray with sum 0.</p> <p>Example 1:</p> <pre>Input:\nN = 8\nA[] = {15,-2,2,-8,1,7,10,23}\nOutput: 5\nExplanation: The largest subarray with\nsum 0 will be\u00a0-2 2 -8 1 7.</pre> <p>Your Task: You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and\u00a0returns\u00a0the length of the largest\u00a0subarray with 0 sum.</p> <p>Expected Time Complexity:\u00a0O(N*log(N)). Expected Auxiliary Space:\u00a0O(N).</p> <p>Constraints: 1 &lt;= N &lt;= 105 -1000 &lt;= A[i] &lt;= 1000, for each valid i</p> <pre><code>def max_len_b(arr, n):\n    max_l = 0\n    for i in range(n+1):\n        for j in range(i,n+1):\n            if i==j:\n                continue\n            if sum(arr[i:j]) ==0:\n                max_l = max(max_l, j-i)\n    return max_l\n</code></pre> <pre><code>arr = [15,-2,2,-8,1,7,10,23]\nn = len(arr)\nmax_len_b(arr,n)\n</code></pre> <pre>\n<code>5</code>\n</pre> <pre><code>arr = [1, -1, -1, 1]\nn = len(arr)\nmax_len_b(arr,n)\n</code></pre> <pre>\n<code>4</code>\n</pre> <p>Given a array of N strings, find the longest common prefix among all strings present in the array.</p> <p> Example 1:</p> <pre>Input:\nN = 4\narr[] = {geeksforgeeks, geeks, geek,\n\u00a0        geezer}\nOutput: gee\nExplanation: \"gee\" is the longest common\nprefix in all the given strings.\n</pre> <p>Example 2:</p> <pre>Input: \nN = 2\narr[] = {hello, world}\nOutput: -1\nExplanation: There's no common prefix\nin the given strings.\n</pre> <p> Your Task: You don't need to read input or print anything. Your task is to complete the function\u00a0longestCommonPrefix()\u00a0which takes the string array arr[] and its size N as inputs and returns the longest common prefix common in all the strings in the array. If there's no prefix common in all the strings, return \"-1\".</p> <p> Expected Time Complexity:\u00a0O(N*max(|arri|)). Expected Auxiliary Space:\u00a0O(max(|arri|)) for result.</p> <p> Constraints: 1 \u2264 N \u2264 103 1 \u2264 |arri| \u2264 103</p> <pre><code>def longest_common_prefix(arr, n):\n    matched = \"\"\n    j = 0\n    for i in range(len(arr[0])):\n        char = arr[0][i]\n        match = True\n        for word in arr:\n            try:\n                if word[j]!=char:\n                    match = False\n                    break\n            except IndexError:\n                return matched if matched else -1\n        if match:\n            matched+=char\n        else:\n            return matched if matched else -1\n        j+=1\n    return matched if matched else -1\n</code></pre> <pre><code>arr = ['geeksforgeeks', 'geeks', 'geek', 'eeezer']\nn = len(arr)\nlongest_common_prefix(arr, n)\n</code></pre> <pre>\n<code>-1</code>\n</pre> <p>Given two arrays of integers A[] and B[] of size N and M, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.</p> <p> </p> <p>Example 1:</p> <pre>Input: N = 6, M = 4\nA[] = {4, 1, 2, 1, 1, 2}\nB[] = (3, 6, 3, 3)\nOutput: 1\nExplanation: Sum of elements in A[] = 11\nSum of elements in B[] = 15, To get same \nsum from both arrays, we can swap following \nvalues: 1 from A[] and 3 from B[]</pre> <p>Example 2:</p> <pre>Input: N = 4, M = 4\nA[] = {5, 7, 4, 6}\nB[] = {1, 2, 3, 8}\nOutput: 1\nExplanation: We can swap 6 from array \nA[] and 2 from array B[]</pre> <p>Your Task: This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function findSwapValues() that takes array A, array B,\u00a0integer N, and integer M\u00a0as parameters and returns 1\u00a0if there exists any such pair otherwise returns\u00a0-1.</p> <p> </p> <p>Expected Time Complexity: O(MlogM+NlogN). Expected Auxiliary Space: O(1).</p> <p> </p> <p>Constraints: 1 \u2264 N, M \u2264 106</p> <p>Given a boolean 2D array, where each row is sorted. Find the row with the maximum number of 1s.</p> <p>Example 1:</p> <pre>Input:\nN = 3, M = 4\nMat[] = {{0 1 1 1},\n         {0 0 1 1},\n\u00a0        {0 0 1 1}}\nOutput: 0\nExplanation: Row 0 has 3 ones whereas\nrows 1 and 2 have just 2 ones.\n\n</pre> <p>Example 2:</p> <pre>Input: \nN = 2, M = 2\nMat[] = {{0 1},\n\u00a0        {1 1}}\nOutput: 1\nExplanation: Row 1 has 2 ones whereas\nrow 0 has just a single one. \n</pre> <p> Your Task: You don't need to read input or print anything. Your task is to complete the function\u00a0maxOnes ()\u00a0which takes a 2D array Mat[][] and its dimensions N\u00a0and M\u00a0as inputs and returns the row index with the maximum number of 1s (0-based index). If there are multiple rows with the maximum number of ones, then return the row with the smaller index.</p> <p> Expected Time Complexity:\u00a0O(NLogM). Expected Auxiliary Space:\u00a0O(1).</p> <p> Constraints: 1 &lt;= N, M &lt;= 40 0 &lt;= M[ ][ ] &lt;= 1</p> <pre><code>def max_ones(Mat):\n    sums = []\n    for arr in Mat:\n        sums.append(sum(arr))\n    return sums.index(max(sums))\n</code></pre> <pre><code>Mat = [[0,1,1,1],\n        [1,1,0,0],\n        [1,1,1,1],\n        [0,0,0,1]]\nmax_ones(Mat)\n</code></pre> <pre>\n<code>2</code>\n</pre> <p>Given two strings\u00a0a\u00a0and\u00a0b\u00a0consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, act and tac are an anagram of each other.</p> <p>Example 1:</p> <pre>Input:a = geeksforgeeks, b = forgeeksgeeks\nOutput: YES\nExplanation: Both the string have same characters with\n        same frequency. So, both are anagrams.</pre> <p>Example 2:</p> <pre>Input:a = allergy, b = allergic\nOutput: NO\nExplanation: Characters in both the strings are \n\u00a0       not same, so they are not anagrams.</pre> <p>Your Task: You don't need to read input or print anything. Your\u00a0task is to complete the function\u00a0isAnagram() which takes the string a and string b as input parameter and check if the two strings are an anagram of each other. The function returns true if the strings are anagram else it returns false.</p> <p>Note: In python, you have to return True or False.</p> <p>Expected Time Complexity:O(|a|+|b|). Expected Auxiliary Space:O(Number of distinct characters).</p> <p>Note: |s| represents the length of string s.</p> <p>Constraints: 1 \u2264 |a|,|b| \u2264 105</p> <pre><code>def is_anagram(a, b):\n    if len(a)!=len(b):\n        return False\n    chars_a = {}\n    chars_b = {}\n    for c in a:\n        if c in chars_a:\n            chars_a[c]+=1\n        else:\n            chars_a[c] = 1\n    for c in b:\n        if c in chars_b:\n            chars_b[c]+=1\n        else:\n            chars_b[c] = 1\n    for k,v in chars_a.items():\n        if k not in chars_b:\n            return False\n        if chars_b[k]!=v:\n            return False\n    return True\n</code></pre> <p>Given an array arr[ ] of length N consisting cost of N toys and\u00a0an integer K depicting the amount with you. Your task is to find maximum number of toys you can buy\u00a0with K amount.\u00a0</p> <p>Example 1:</p> <pre>Input: \nN = 7 \nK = 50\narr[] = {1, 12, 5, 111, 200, 1000, 10}\nOutput: 4\nExplaination: The costs of the toys \nyou can buy are 1, 12, 5 and 10.</pre> <p>Example 2:</p> <pre>Input: \nN = 3 \nK = 100\narr[] = {20, 30, 50}\nOutput: 3\nExplaination: You can buy all toys.</pre> <p>Your Task: You do not need to read input or print anything. Your task is to complete the function toyCount() which takes the integer N,\u00a0integer K and the array arr[ ] as input parameters\u00a0and returns the maximum count of toys you can have.</p> <p>Expected Time Complexity: O(N * Log(N)) Expected Auxiliary Space: O(1)</p> <p>Constraints: 1 \u2264 N \u2264 105 1 \u2264 K, arr[i] \u2264 109</p> <pre><code>def toy_count(N, K, arr):\n    arr.sort()\n    i = 0\n    while K&gt;0 and i&lt;N:\n        K-=arr[i]\n        i+=1\n    return i if i==N else i-1\n</code></pre>"},{"location":"Notes/DSA/Problems_GfG_Easy_3/#1-delete-without-head-pointer","title":"1. Delete without head pointer","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#2-rotate-array","title":"2. Rotate Array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#3-add-two-numbers-represented-by-linked-lists","title":"3. Add two numbers represented by linked lists","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#4-common-elements","title":"4. Common elements","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#5-largest-subarray-with-0-sum","title":"5. Largest subarray with 0 sum","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#brute-force","title":"Brute Force","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#6-longest-common-prefix-in-an-array","title":"6. Longest Common Prefix in an Array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#7-swapping-pairs-make-sum-equal","title":"7. Swapping pairs make sum equal","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#8-maximum-no-of-1s-row","title":"8. Maximum no of 1's row","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#9-anagram","title":"9. Anagram","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_3/#10-maximize-toys","title":"10. Maximize Toys","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_4/","title":"Problems GfG Easy 4","text":"<p>The cost of stock on each day is given in an array A[] of size N. Find all the segment of days on which you buy and sell the stock so that in between those days your profit is maximum. Note: Since there can be multiple solutions, the driver code will return 1 if your answer is correct, otherwise, it will return 0. In case there's no profit the driver code will return the string \"No Profit\" for a correct solution. Example 1:</p> <pre>Input:\nN = 7\nA[] = {100,180,260,310,40,535,695}\nOutput:\n1\nExplanation:\nOne possible solution is (0 3) (4 6)\nWe can buy stock on day 0,\nand sell it on 3rd day, which will \ngive us maximum profit. Now, we buy \nstock on day 4 and sell it on day 6.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 5\nA[] = {4,2,2,2,4}\nOutput:\n1\nExplanation:\nThere are multiple possible solutions.\none of them is (3 4)\nWe can buy stock on day 3,\nand sell it on 4th day, which will \ngive us maximum profit.</pre> <p> Your Task: The task is to complete the function stockBuySell() which takes an array A[] and N as input parameters and finds the days of buying and selling stock. The function must return a 2D list of integers containing all the buy-sell pairs i.e. first value of pair will represent the day on which you buy\u00a0the stock and second value represent the day on which you sell that stock. If there is No Profit, return an empty list. </p> <p> Expected Time Complexity: O(N) Expected Auxiliary Space: O(N)</p> <p> Constraints: 2 \u2264\u00a0N \u2264\u00a0106 0 \u2264\u00a0A[i] \u2264\u00a0106</p> <p>Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted.\u00a0 </p> <p>Example 1:</p> <pre>Input:\na1[] = {11, 1, 13, 21, 3, 7}\na2[] = {11, 3, 7, 1}\nOutput:\nYes\nExplanation:\na2[] is a subset of a1[]</pre> <p> Example 2:</p> <pre>Input:\na1[] = {1, 2, 3, 4, 5, 6}\na2[] = {1, 2, 4}\nOutput:\nYes\nExplanation:\na2[] is a subset of a1[]</pre> <p> Example 3:</p> <pre>Input:\na1[] = {10, 5, 2, 23, 19}\na2[] = {19, 5, 3}\nOutput:\nNo\nExplanation:\na2[] is not a subset of a1[]</pre> <p> </p> <p>Your Task:\u00a0\u00a0 You don't need to read input or print anything. Your task is to complete the function isSubset()\u00a0which takes the array a1[], a2[], its size n and m as inputs and return \"Yes\" if arr2 is subset of arr1 else return \"No\" if arr2 is not subset of arr1.</p> <p> </p> <p>Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 &lt;= n,m &lt;= 105 1 &lt;= a1[i], a2[j] &lt;= 105 </p> <pre><code>def is_subset( a1, a2, n, m):\n    seta1 = set(a1)\n    seta2 = set(a2)\n    duplicates = m-len(seta2)\n    set_all = seta1.union(seta2)\n    if len(set_all)+duplicates&gt;n:\n        return \"No\"\n    return \"Yes\"\n</code></pre> <p>Given two unsorted arrays A of size N and B of size M of distinct elements, the task is to find all pairs from both arrays whose sum is equal to X.</p> <p> </p> <p>Example 1:</p> <pre>Input:\nA[] = {1, 2, 4, 5, 7}\nB[] = {5, 6, 3, 4, 8} \nX = 9 \nOutput: \n1 8\n4 5 \n5 4\nExplanation:\n(1, 8), (4, 5), (5, 4) are the\npairs which sum to 9.\n</pre> Example 2: <pre>Input:\nA[] = {-1, -2, 4, -6, 5, 7}\nB[] = {6, 3, 4, 0} \nX = 8 \nOutput:\n4 4 \n5 3\n</pre> <p> Your Task:\u00a0\u00a0 You don't need to read input or print anything. Your task is to complete the function allPairs()\u00a0which takes the array A[], B[], its size N and M respectively and an integer X\u00a0as inputs and returns the sorted vector pair values of all the pairs u,v\u00a0where u\u00a0belongs to array\u00a0A and v\u00a0belongs to array B. If no such pair exist return empty vector pair. Note :\u00a0All pairs should be printed in increasing order of u. For eg. for two pairs (u1,v1) and (u2,v2), if u1&lt;u2\u00a0then (u1,v1) should be printed first else second.</p> <p> Expected Time Complexity: O(NLog(N)) Expected Auxiliary Space: O(N)</p> <p> Constraints: 1 \u2264 N, M\u00a0\u2264 106 -106 \u2264 X, A[i], B[i] \u2264 106</p> <pre><code> def all_pairs(A, B, X):\n    # Your code goes here \n    B_set = set(B)\n    A.sort()\n    pairs = []\n    for el in A:\n        if (X-el) in B_set:\n            pairs.append((el, X-el))\n    return pairs\n</code></pre> <p>Given an array of integers and a number K. Find the count of distinct elements in every window of size K in the array.</p> <p>Example 1:</p> <pre>Input:\nN = 7, K = 4\nA[] = {1,2,1,3,4,2,3}\nOutput: 3 4 4 3\nExplanation: Window 1 of size k = 4 is\n1 2 1 3. Number of distinct elements in\nthis window are 3.\u00a0\nWindow 2\u00a0of size k = 4 is\u00a02 1 3 4.\u00a0Number\nof distinct elements in this window are 4.\nWindow 3\u00a0of size k = 4 is\u00a01 3 4 2.\u00a0Number\nof distinct elements in this window are 4.\nWindow 4\u00a0of size k = 4 is\u00a03 4 2 3.\u00a0Number\nof distinct elements in this window are 3.\n</pre> <p>Example 2:</p> <pre>Input:\nN = 3, K = 2\nA[] = {4,1,1}\nOutput: 2 1</pre> <p>Your Task: Your task is to complete the function\u00a0countDistinct()\u00a0which takes the array A[], the size of the array(N) and the window size(K) as inputs and returns an array containing the count of distinct elements in every contiguous window of size K in the array A[].</p> <p>Expected Time Complexity:\u00a0O(N). Expected Auxiliary Space:\u00a0O(N).</p> <p>Constraints: 1 &lt;= K\u00a0&lt;= N\u00a0&lt;= 105 1 &lt;= A[i] &lt;= 105\u00a0, for each valid i</p> <pre><code>def count_distinct_b(A, N, K):\n    start = 0\n    end = start+K\n    distincts = []\n    def get_distinct(arr):\n        return len(set(arr))\n    while True:\n        if end&gt;N:\n            return distincts\n        distinct = get_distinct(A[start:end])\n        distincts.append(distinct)\n        start+=1\n        end+=1\n    return distincts\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Notes/DSA/Problems_GfG_Easy_4/#1-stock-buy-and-sell","title":"1. Stock buy and sell","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_4/#2-array-subset-of-another-array","title":"2. Array Subset of another array","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_4/#3-find-all-pairs-with-a-given-sum","title":"3. Find all pairs with a given sum","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_4/#4-count-distinct-elements-in-every-window","title":"4. Count distinct elements in every window","text":""},{"location":"Notes/DSA/Problems_GfG_Easy_4/#brute-force","title":"Brute Force","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/","title":"Problems Leetcode Easy 1","text":"<p>Roman numerals are represented by seven different symbols:\u00a0<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p> <pre>Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> <p>For example,\u00a0<code>2</code> is written as <code>II</code>\u00a0in Roman numeral, just two ones added together. <code>12</code> is written as\u00a0<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.\u00a0</li> <li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.\u00a0</li> <li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li> </ul> <p>Given a roman numeral, convert it to an integer.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n</pre> <p>Example 2:</p> <pre>Input: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n</pre> <p>Example 3:</p> <pre>Input: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 15</code></li> <li><code>s</code> contains only\u00a0the characters <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code>.</li> <li>It is guaranteed\u00a0that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li> </ul> <p>Here are the steps:</p> <ol> <li>Define two dictionaries to store the values of the roman numerals, one storing the usual roman numbers like I, X, V and other the special roman numbers like IV, CM, CD, etc.</li> <li>Initialize the sum to 0.</li> <li>Loop through the keys of the second dictionary and if the string contain the key, add the corresponding number to the sum. Also, remove the key from the string.</li> <li>Loop through the first keys of the dictionary and add the corresponding number to the sum if the string contains the key.</li> </ol> <pre><code>def romanToInt(s):\n\"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    R_to_N = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    special_nums = {\"IV\": 4, \"IX\": 9, \"XL\": 40, \"XC\": 90, \"CD\": 400, \"CM\": 900}\n    sum = 0\n    s_list = list(s)\n    for key, value in special_nums.items():\n        if key in s:\n            id = s.index(key)\n            s_list[id] = \"Z\"\n            s_list[id + 1] = \"Z\"\n            sum += value\n    for char in s_list:\n        if char == \"Z\":\n            continue\n        sum += R_to_N[char]\n    return sum\n</code></pre> <pre><code>string = \"MCMXCIV\"\nromanToInt(string)\n</code></pre> <pre>\n<code>1994</code>\n</pre> <p>Write a function to find the longest common prefix string amongst an array of strings.</p> <p>If there is no common prefix, return an empty string <code>\"\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n</pre> <p>Example 2:</p> <pre>Input: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 200</code></li> <li><code>0 &lt;= strs[i].length &lt;= 200</code></li> <li><code>strs[i]</code> consists of only lowercase English letters.</li> </ul> <p>Steps: 1. Initialize the longest common prefix to be empty string. 2. Loop through the strings in the array and if the first character of all the strings are the same, add it to the longest common prefix. 3. Repeat till you get the end of any string or the character does not match.</p> <pre><code>def longestCommonPrefix(strs):\n\"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    longest_prefix = \"\"\n    strs_lengths = [len(string) for string in strs]\n    min_len = min(strs_lengths)\n    if min_len==0:\n        return \"\"\n    first_string = strs[0]\n    for j in range(min_len):\n        for string in strs:\n            is_prefix = True\n            if string[j] != first_string[j]:\n                is_prefix = False\n                return longest_prefix\n        if is_prefix:\n            longest_prefix+=first_string[j]\n    return longest_prefix\n</code></pre> <pre><code>strs = [\"flower\",\"flow\",\"flight\"]\nlongestCommonPrefix(strs)\n</code></pre> <pre>\n<code>'fl'</code>\n</pre> <pre><code>strs = [\"dog\",\"racecar\",\"car\"]\nlongestCommonPrefix(strs)\n</code></pre> <pre>\n<code>''</code>\n</pre> <pre><code>strs = [\"H\", \"\"]\nlongestCommonPrefix(strs)\n</code></pre> <pre>\n<code>''</code>\n</pre> <pre><code>strs = [\"flower\",\"flower\",\"flower\",\"flower\"]\nlongestCommonPrefix(strs)\n</code></pre> <pre>\n<code>'flower'</code>\n</pre> <p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> </ol> <p> </p> <p>Example 1:</p> <pre>Input: s = \"()\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"()[]{}\"\nOutput: true\n</pre> <p>Example 3:</p> <pre>Input: s = \"(]\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> consists of parentheses only <code>'()[]{}'</code>.</li> </ul> <p>The idea is: If a type of bracket is closed then the next bracket should either be of a different type or be closed.</p> <pre><code>def isValid(s):\n\"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if not s:\n        return False\n    l_brackets = [\"(\", \"{\", \"[\"]\n    r_brackets = [\")\", \"}\", \"]\"]\n    llist = []\n    for b in s:\n        if b in l_brackets:\n            llist.append(b)\n        elif b in r_brackets:\n            if len(llist)==0:\n                return False\n            if r_brackets.index(b)!=l_brackets.index(llist.pop()):\n                return False\n    return len(llist)==0\n</code></pre> <pre><code>s = \"()[]{}\"\nisValid(s)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>s = \"([)]\"\nisValid(s)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>s = \"()]\"\nisValid(s)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p> <p>Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return the head of the merged linked list.</p> <p> </p> <p>Example 1:</p> <pre>Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n</pre> <p>Example 2:</p> <pre>Input: list1 = [], list2 = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>Input: list1 = [], list2 = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>Both <code>list1</code> and <code>list2</code> are sorted in non-decreasing order.</li> </ul> <p>Here are the steps: 1. Return empty LL is both the LL are empty. 2. Return the second LL if the first one is empty. 3. Create and empty LL. 4. Start a loop till one of the two LL is None. 5. Set the head of the empty LL to the head of the whichever LL having the greater value. 6. Move the head of that LL to the next node. 7. Once out of loop, set the head of the empty (not anymore) LL to the head of the no-empty LL's head.</p> <pre><code>class ListNode(object):\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n</code></pre> <pre><code>def merge_two_lists(list1, list2):\n    if not list1 and not list2:\n        return None\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    new_ll = ListNode()\n    current = new_ll\n    while list1 and list2:\n        if list1.val&gt;list2.val:\n            current.next = list2.val\n            current = list2\n            list2 = list2.next\n            current = current.next\n        else:\n            current.next = list1.val\n            current = list1\n            list1 = list1.next\n            current = current.next\n    if list1:\n        current.next = list1\n    if list2:\n        current.next = list2\n    return new_ll\n</code></pre> <pre><code>def mergeTwoLists(list1, list2):\n\"\"\"\n    :type list1: Optional[ListNode]\n    :type list2: Optional[ListNode]\n    :rtype: Optional[ListNode]\n    \"\"\"\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    while list1 or list2:\n        if list1.val &lt; list2.val:\n            list1.next = mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = mergeTwoLists(list1, list2.next)\n            return list2\n</code></pre> <pre><code>def mergeTwoLists(list1, list2):\n\"\"\"\n    :type list1: Optional[ListNode]\n    :type list2: Optional[ListNode]\n    :rtype: Optional[ListNode]\n    \"\"\"\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    if list1.data &lt; list2.data:\n        list1.next = mergeTwoLists(list1.next, list2)\n        return list1\n    else:\n        list2.next = mergeTwoLists(list1, list2.next)\n        return list2\n</code></pre> <p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0<code>k</code>\u00a0elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array     in-place  with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre>int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre> <p>If all assertions pass, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul> <pre><code>def remove_duplicates(nums):\n    k = len(nums)\n    j=0\n    current_num = nums[0]\n    for i in range(1, len(nums)):\n        num = nums[i-j]\n        if num == current_num:\n            nums.pop(i-j)\n            k-=1\n            j+=1\n        current_num = num\n    return k\n</code></pre> <pre><code>nums = [1,1, 2]\ndups = remove_duplicates(nums)\nassert dups == 2\n</code></pre> <pre><code>def remove_duplicates(nums):\n    k = len(nums)\n    current_num = nums[0]\n    nums.append(current_num)\n    for i in range(1, k):\n        num = nums[i]\n        if num != current_num:\n            nums.append(num)\n        current_num = num\n    nums = nums[k:]\n    print(nums)\n    return len(nums)\n</code></pre> <pre><code>nums = [1,1, 2]\ndups = remove_duplicates(nums)\nprint(dups)\n</code></pre> <pre>\n<code>[1, 2]\n2\n</code>\n</pre> <pre><code>nums\n</code></pre> <pre>\n<code>[1, 1, 2, 1, 2]</code>\n</pre> <p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p> <p>Clarification:</p> <p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p> <p> </p> <p>Example 1:</p> <pre>Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= haystack.length, needle.length &lt;= 104</code></li> <li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li> </ul> <p> </p> <pre><code>def strStr(haystack, needle):\n\"\"\"\n    :type haystack: str\n    :type needle: str\n    :rtype: int\n    \"\"\"\n    if not haystack:\n        return 0\n    if len(haystack)&lt;len(needle):\n        return -1 \n    for i in range(len(haystack)-len(needle)+1):\n        for j in range(len(needle)):\n            matched = True\n            if haystack[i+j] != needle[j]:\n                matched = False\n                break\n        if matched:\n            break\n    return i if matched else -1\n</code></pre> <pre><code># haystack = \"hello\"\n# needle = \"llo\"\nhaystack = \"aaa\"\nneedle = \"aaaa\"\nstrStr(haystack, needle)\n</code></pre> <pre>\n<code>-1</code>\n</pre> <p>You are given a large integer represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>ith</code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>'s.</p> <p>Increment the large integer by one and return the resulting array of digits.</p> <p> </p> <p>Example 1:</p> <pre>Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</pre> <p>Example 2:</p> <pre>Input: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</pre> <p>Example 3:</p> <pre>Input: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> <li><code>digits</code> does not contain any leading <code>0</code>'s.</li> </ul> <pre><code>def plus_one(nums):\n    nums = [str(i) for i in nums]\n    num_int = int(\"\".join(nums))\n    num_int+=1\n    num_list = list(str(num_int))\n    num_list = [int(i) for i in num_list]\n    return num_list\n</code></pre> <pre><code>plus_one([1,2, 9])\n</code></pre> <pre>\n<code>[1, 3, 0]</code>\n</pre> <p>Given a non-negative integer <code>x</code>,\u00a0compute and return the square root of <code>x</code>.</p> <p>Since the return type\u00a0is an integer, the decimal digits are truncated, and only the integer part of the result\u00a0is returned.</p> <p>Note:\u00a0You are not allowed to use any built-in exponent function or operator, such as <code>pow(x, 0.5)</code> or\u00a0<code>x ** 0.5</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: x = 4\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= x &lt;= 231 - 1</code></li> </ul> <p> </p> <pre><code>(2**31)**0.5, (2**31)\n</code></pre> <pre>\n<code>(46340.95001184158, 2147483648)</code>\n</pre> <pre><code>def sqrt(x):\n    num_digits = len(str(x))\n    start = int(str(x)[:num_digits//2])\n    print(start)\n    while True:\n        if start*start&gt;x:\n            return start-1\n        start+=1\n</code></pre> <pre><code>x = 2**31-1\nsqrt(x)\n</code></pre> <pre>\n<code>21474\n</code>\n</pre> <pre>\n<code>46340</code>\n</pre> <pre><code>def sqrt(x):\n    start = x//2\n    while True:\n        if start*start&gt;x:\n            start = start//2\n        else:\n            start = start\n            break\n    while True:\n        if start*start&gt;x:\n            return start-1\n        start+=1\n</code></pre> <pre><code>num = 2**31-1\nsqrt(num), num**0.5\n</code></pre> <pre>\n<code>(46340, 46340.950001051984)</code>\n</pre> <pre><code>sqrt(1000), 1000**0.5\n</code></pre> <pre>\n<code>(31, 31.622776601683793)</code>\n</pre> <p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre> <p>Example 2:</p> <pre>Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 45</code></li> </ul> <pre><code>def climb_stairs(n):\n    if n == 1 or n==2:\n        return n   \n    nums = [1,2]\n    for i in range(2, n):\n        nums.append(nums[i-1]+nums[i-2])\n    return nums[-1]\n</code></pre> <pre><code>climb_stairs(8)\n</code></pre> <pre>\n<code>34</code>\n</pre> <pre><code>def climb_stairs(n):\n    if n == 1 or n==2:\n        return n   \n    a_prevv = 1\n    a_prev = 2\n    for i in range(2, n):\n        a_cur = a_prev+a_prevv\n        a_prevv = a_prev\n        a_prev = a_cur\n    return a_cur\n</code></pre> <pre><code>climb_stairs(8)\n</code></pre> <pre>\n<code>34</code>\n</pre> <p>Given an array of integers <code>nums</code>\u00a0and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre> <p>Example 2:</p> <pre>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</pre> <p>Example 3:</p> <pre>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> <li>Only one valid answer exists.</li> </ul> <p> </p> Follow-up:\u00a0Can you come up with an algorithm that is less than\u00a0<code>O(n2)\u00a0</code>time complexity? <pre><code>def twoSum(nums, target):\n\"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    length = len(nums)\n    for i in range(length):\n        for j in range(length):\n            if i == j:\n                continue\n            if nums[i] + nums[j] == target:\n                return [i, j]\n</code></pre> <pre><code>nums = [2, 7, 11, 15]\ntarget = 9\nprint(twoSum(nums, target))\nnums = [3, 2, 4]\ntarget = 6\nprint(twoSum(nums, target))\n</code></pre> <pre>\n<code>[0, 1]\n[1, 2]\n</code>\n</pre> <pre><code>def twoSum(nums, target):\n\"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    hash = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if num in hash.keys():\n            return [hash[num], i]\n        hash[complement] = i\n</code></pre> <pre><code>nums = [2, 7, 11, 15]\ntarget = 9\nprint(twoSum(nums, target))\nnums = [3, 2, 4]\ntarget = 6\nprint(twoSum(nums, target))\n</code></pre> <pre>\n<code>[0, 1]\n[1, 2]\n</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#2-roman-to-integer","title":"2. Roman to Integer","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#3-longest-common-prefix","title":"3. Longest Common Prefix","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#4-valid-parentheses","title":"4. Valid Parentheses","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#5-merge-two-sorted-lists","title":"5. Merge Two Sorted Lists","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#6-remove-duplicates-from-sorted-array","title":"6. Remove Duplicates from Sorted Array","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#7-implement-strstr","title":"7. Implement strStr()","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#8-plus-one","title":"8. Plus One","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#9-sqrtx","title":"9. Sqrt(x)","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#10-climbing-stairs","title":"10. Climbing Stairs","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_1/#1-two-sum","title":"1. Two Sum","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/","title":"Problems Leetcode Easy 2","text":"<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p> <p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n</pre> <p>Example 2:</p> <pre>Input: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre> <p>Example 3:</p> <pre>Input: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums1.length == m + n</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= m + n &lt;= 200</code></li> <li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li> </ul> <p> </p> <p>Follow up: Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p> <pre><code>def merge(nums1, nums2,):\n\"\"\"\n    :type nums1: List[int]\n    :type m: int\n    :type nums2: List[int]\n    :type n: int\n    :rtype: None Do not return anything, modify nums1 in-place instead.\n    \"\"\"\n    n = len(nums2)\n    m = len(nums1) - n\n    for i in range(n):\n        nums1[m+i] = nums2[i]\n    nums1.sort()\n</code></pre> <pre><code>nums1 = [1,2,3,0,0,0]\nnums2 = [2,5,6]\nmerge(nums1, nums2)\n</code></pre> <pre><code>def merge(nums1, nums2):\n</code></pre> <p>Given an integer <code>numRows</code>, return the first numRows of Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p> <p> </p> <p>Example 1:</p> <pre>Input: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre><p>Example 2:</p> <pre>Input: numRows = 1\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numRows &lt;= 30</code></li> </ul> <pre><code>def sum_list(list_):\n    new_list = []\n    for i in range(len(list_)-1):\n        new_list.append(list_[i]+list_[i+1])\n    return [1]+ new_list+[1]\n</code></pre> <pre><code>sum_list([1, 1])\n</code></pre> <pre>\n<code>[1, 2, 1]</code>\n</pre> <pre><code>def generate(numRows):\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1], [1, 1]]\n    def sum_list_(list_):\n        new_list = []\n        for i in range(len(list_)-1):\n            new_list.append(list_[i]+list_[i+1])\n        return [1]+ new_list+[1]\n    the_list = [[1], [1,1]]\n    for i in range(numRows-2):\n        the_list.append(sum_list_(the_list[-1]))\n    return the_list\n</code></pre> <pre><code>generate(5)\n</code></pre> <pre>\n<code>[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]</code>\n</pre> <p>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n</pre> <p>Example 2:</p> <pre>Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n</pre> <p>Example 3:</p> <pre>Input: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 105</code></li> <li><code>s</code> consists only of printable ASCII characters.</li> </ul> <pre><code>def is_palindrom(s):\n    valids = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    s = s.strip()\n    s = s.lower()\n    string = \"\"\n    for letter in s:\n        if letter in valids:\n            string+=letter\n    return string == string[::-1]\n</code></pre> <pre><code>%time\ns = \"A man, a plan, a canal: Panama\"\nis_palindrom(s)\n</code></pre> <pre>\n<code>CPU times: user 6 \u00b5s, sys: 0 ns, total: 6 \u00b5s\nWall time: 13.6 \u00b5s\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre> <p>Example 2:</p> <pre>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 105</code></li> <li><code>0 &lt;= prices[i] &lt;= 104</code></li> </ul> <pre><code>def max_profit(prices):\n    minimum = min(prices)\n    min_pos = prices.index(minimum)\n    maximum = max(prices[min_pos:])\n    if maximum&lt;minimum:\n        return 0\n    return maximum-minimum\n</code></pre> <pre><code>def max_profit(prices):\n    maximum = 0\n    minimum = prices[0]\n    profit = max(0, maximum-minimum)\n    for i in range(len(prices)-1):\n        if prices[i+1]&gt;minimum:\n            maximum = prices[i+1]\n        if prices[i+1]&lt;minimum:\n            minimum = prices[i+1]\n            maximum = 0\n        if max(0, maximum-minimum)&gt;profit:\n            profit = max(0, maximum-minimum)\n    return profit\n</code></pre> <pre><code>prices = [7,1,5,3,6,4]\nmax_profit(prices)\n</code></pre> <pre>\n<code>5</code>\n</pre> <pre><code>prices = [7,6,4,3,1]\nmax_profit(prices)\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code>prices = [2,4,1]\nmax_profit(prices)\n</code></pre> <pre>\n<code>2</code>\n</pre> <p>Given a non-empty\u00a0array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>You must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [2,2,1]\nOutput: 1\n</pre><p>Example 2:</p> <pre>Input: nums = [4,1,2,1,2]\nOutput: 4\n</pre><p>Example 3:</p> <pre>Input: nums = [1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li> <li><code>-3 * 104 &lt;= nums[i] &lt;= 3 * 104</code></li> <li>Each element in the array appears twice except for one element which appears only once.</li> </ul> <pre><code>def single_number(nums):\n    num = nums[0]\n    for i in nums[1:]:\n        num = num^i\n    return num\n</code></pre> <pre><code>nums = [4,1,2,1,2]\nsingle_number(nums)\n</code></pre> <pre>\n<code>4</code>\n</pre> <p>Given an array <code>nums</code> of size <code>n</code>, return the majority element.</p> <p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,2,3]\nOutput: 3\n</pre><p>Example 2:</p> <pre>Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul> <p> </p> Follow-up: Could you solve the problem in linear time and in <code>O(1)</code> space? <pre><code>def majority(nums):\n    nums.sort()\n    el_c = nums[0]\n    cnt = 1\n    for i in range(1, len(nums)):\n        if nums[i] == el_c:\n            cnt += 1\n        else:\n            cnt = 1\n            el_c = nums[i]\n\n        if cnt &gt; len(nums) // 2:\n            return el_c\n    return -1\n</code></pre> <pre><code>nums = [2,2,1,1,1,2,2]\nmajority(nums)\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code>nums = [3, 2, 3]\nmajority(nums)\n</code></pre> <pre>\n<code>3</code>\n</pre> <p>Given the <code>root</code> of a binary tree, return the inorder traversal of its nodes' values.</p> <p> </p> <p>Example 1:</p> <pre>Input: root = [1,null,2,3]\nOutput: [1,3,2]\n</pre> <p>Example 2:</p> <pre>Input: root = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>Input: root = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> Follow up: Recursive solution is trivial, could you do it iteratively? <p>Given a string <code>columnTitle</code> that represents the column title as appears in an Excel sheet, return its corresponding column number.</p> <p>For example:</p> <pre>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre> <p> </p> <p>Example 1:</p> <pre>Input: columnTitle = \"A\"\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: columnTitle = \"AB\"\nOutput: 28\n</pre> <p>Example 3:</p> <pre>Input: columnTitle = \"ZY\"\nOutput: 701\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= columnTitle.length &lt;= 7</code></li> <li><code>columnTitle</code> consists only of uppercase English letters.</li> <li><code>columnTitle</code> is in the range <code>[\"A\", \"FXSHRXW\"]</code>.</li> </ul> <pre><code>def title_to_number(columnTitle):\n    alphabate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    alphabate_to_num = {alphabate[i]: i+1 for i in range(len(alphabate))}\n    num = 0\n    columnTitle = columnTitle[::-1]\n    for i, a in enumerate(list(columnTitle)):\n        num+= 26**i*alphabate_to_num[a]\n    return num\n</code></pre> <pre><code>title_to_number(\"ZY\")\n</code></pre> <pre>\n<code>701</code>\n</pre> <p>Reverse bits of a given 32 bits unsigned integer.</p> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n</pre> <p>Example 2:</p> <pre>Input: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code></li> </ul> <p> </p> <p>Follow up: If this function is called many times, how would you optimize it?</p> <pre><code>def reverse_bits(n):\n    str_n = f\"{n:b}\"\n    for _ in range(len(str_n), 32):\n        str_n = \"0\"+str_n\n    sum = 0\n    for i, bit in enumerate(str_n):\n        sum += 2**i*int(bit)\n    return sum\n</code></pre> <pre><code>n = 43261596\nreverse_bits(n)\n</code></pre> <pre>\n<code>964176192</code>\n</pre> <p>Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).</p> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. <code>-3</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n</pre> <p>Example 2:</p> <pre>Input: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n</pre> <p>Example 3:</p> <pre>Input: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code>.</li> </ul> <p> </p> Follow up: If this function is called many times, how would you optimize it? <pre><code>def hamming_weight(n):\n    str_n = f\"{n:b}\"\n    return str_n.count(\"1\")\n</code></pre> <pre><code>hamming_weight(3)\n</code></pre> <pre>\n<code>2</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#1-merge-sorted-array","title":"1. Merge Sorted Array","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#2-pascals-triangle","title":"2. Pascal's Triangle","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#3-valid-palindrome","title":"3. Valid Palindrome","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#4-best-time-to-buy-and-sell-stock","title":"4. Best Time to Buy and Sell Stock","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#5-single-number","title":"5. Single Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#6-majority-element","title":"6. Majority Element","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#7-binary-tree-inorder-traversal","title":"7. Binary Tree Inorder Traversal","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#8-excel-sheet-column-number","title":"8. Excel Sheet Column Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#9-reverse-bits","title":"9. Reverse Bits","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_2/#10-number-of-1-bits","title":"10. Number of 1 Bits","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/","title":"Problems Leetcode Easy 3","text":"<p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n</pre> <p>Example 2:</p> <pre>Input: n = 2\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 231 - 1</code></li> </ul> <pre><code>def sum_of_square(num):\n    num_str = str(num)\n    num = 0\n    for i in num_str:\n        num+= int(i)**2\n    return num\n</code></pre> <pre><code>sum_of_square(19)\n</code></pre> <pre>\n<code>82</code>\n</pre> <pre><code>def is_happy(n):\n    def sum_of_square(num):\n        num_str = str(num)\n        num = 0\n        for i in num_str:\n            num+= int(i)**2\n        return num\n    nums = []\n    while True:\n        new_num = sum_of_square(n)\n        print(new_num)\n        list_new_num = list(str(new_num))\n        list_new_num = [int(i) for i in list_new_num]\n        if sum(list_new_num) == 1:\n            return True\n        if new_num in nums:\n            return False\n        nums.append(new_num)\n        n = new_num\n</code></pre> <pre><code>is_happy(13)\n</code></pre> <pre>\n<code>10\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <p>Write a function to delete a node in a singly-linked list. You will not be given access to the <code>head</code> of the list, instead you will be given access to the node to be deleted directly.</p> <p>It is guaranteed that the node to be deleted is not a tail node in the list.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n</pre> <p>Example 2:</p> <pre>Input: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li>The value of each node in the list is unique.</li> <li>The <code>node</code> to be deleted is in the list and is not a tail node</li> </ul> <pre><code>def delete_node(node):\n    node.val = node.next.val\n    node.next = node.next.next\n</code></pre> <p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0<code>next</code>\u00a0pointer. Internally, <code>pos</code>\u00a0is used to denote the index of the node that\u00a0tail's\u00a0<code>next</code>\u00a0pointer is connected to.\u00a0Note that\u00a0<code>pos</code>\u00a0is not passed as a parameter.</p> <p>Return\u00a0<code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre> <p>Example 2:</p> <pre>Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre> <p>Example 3:</p> <pre>Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range <code>[0, 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul> <p> </p> <p>Follow up: Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p> <pre><code>def has_cycle(head):\n    if not head:\n            return False\n    vals = [head]\n    current = head\n    while current.next:\n        if current.next in vals:\n            return True\n        vals.append(current.next)\n        current = current.next\n    return False\n</code></pre> <p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return <code>null</code>.</p> <p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p> <p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p> <p>Note that the linked lists must retain their original structure after the function returns.</p> <p>Custom Judge:</p> <p>The inputs to the judge are given as follows (your program is not given these inputs):</p> <ul> <li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li> <li><code>listA</code> - The first linked list.</li> <li><code>listB</code> - The second linked list.</li> <li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li> <li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li> </ul> <p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code>\u00a0to your program. If you correctly return the intersected node, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n</pre> <p>Example 2:</p> <pre>Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</pre> <p>Example 3:</p> <pre>Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li> <li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li> <li><code>1 &lt;= m, n &lt;= 3 * 104</code></li> <li><code>1 &lt;= Node.val &lt;= 105</code></li> <li><code>0 &lt;= skipA &lt;\u00a0m</code></li> <li><code>0 &lt;= skipB &lt;\u00a0n</code></li> <li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li> <li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li> </ul> <p> </p> Follow up: Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory? <p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n</pre> <p>Example 2:</p> <pre>Input: head = [1,2]\nOutput: [2,1]\n</pre> <p>Example 3:</p> <pre>Input: head = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p> </p> <p>Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?</p> <pre><code>def reverse_list(head):\n    prev = None\n    current = head\n    next = None\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    return prev\n</code></pre> <p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears at least twice in the array, and return <code>false</code> if every element is distinct.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3,1]\nOutput: true\n</pre><p>Example 2:</p> <pre>Input: nums = [1,2,3,4]\nOutput: false\n</pre><p>Example 3:</p> <pre>Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul> <pre><code>def contains_duplicates(nums):\n    already_in = set()\n    for num in nums:\n        if num in already_in:\n            return True\n        already_in.add(num)\n    return False\n</code></pre> <pre><code>%time\nnums = [1,2,3,1]\ncontains_duplicates(nums)\n</code></pre> <pre>\n<code>CPU times: user 11 \u00b5s, sys: 0 ns, total: 11 \u00b5s\nWall time: 21.7 \u00b5s\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <pre><code>nums = list(range(10000))\n</code></pre> <pre><code>%time\ncontains_duplicates(nums)\n</code></pre> <pre>\n<code>CPU times: user 6 \u00b5s, sys: 0 ns, total: 6 \u00b5s\nWall time: 12.6 \u00b5s\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <pre><code>nums = [0]\ncontains_duplicates(nums)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Given the <code>head</code> of a singly linked list, return <code>true</code> if it is a palindrome.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,2,1]\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: head = [1,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 105]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> </ul> <p> </p> Follow up: Could you do it in <code>O(n)</code> time and <code>O(1)</code> space? <pre><code>def is_palindrome(head):\n    nums = []\n    current = head\n    while current:\n        nums.append(current.val)\n        current = current.next\n    return nums == nums[::-1]\n</code></pre> <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\n</pre><p>Example 2:</p> <pre>Input: s = \"rat\", t = \"car\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul> <p> </p> <p>Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p> <pre><code>def is_anagram(s, t):\n    if len(s)!=len(t):\n        return False\n    count_s = {}\n    count_t = {}\n    for i in range(len(s)):\n        if s[i] in count_s.keys():\n            count_s[s[i]] +=1\n        else:\n            count_s[s[i]] = 1\n        if t[i] in count_t.keys():\n            count_t[t[i]] +=1\n        else:\n            count_t[t[i]] = 1\n    if count_s.keys()!=count_t.keys():\n        return False\n    for char in count_s.keys():\n        if count_s[char]!=count_t[char]:\n            return False\n    return True\n</code></pre> <pre><code>s = \"anagram\"\nt = \"nagaram\"\nis_anagram(s, t)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>s = \"anagram\"\nt = \"naggram\"\nis_anagram(s, t)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</pre> <p>Example 3:</p> <pre>Input: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 104</code></li> <li><code>0 &lt;= nums[i] &lt;= n</code></li> <li>All the numbers of <code>nums</code> are unique.</li> </ul> <p> </p> <p>Follow up: Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p> <pre><code>def missing_number(nums):\n    nums_set = set(nums)\n    for num in range(len(nums)+1):\n        if num not in nums_set:\n            return num\n</code></pre> <p>Given an integer array <code>nums</code>, move all <code>0</code>'s to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n</pre><p>Example 2:</p> <pre>Input: nums = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> </ul> <p> </p> Follow up: Could you minimize the total number of operations done? <pre><code>def move_zeros(nums):\n    i=0\n    zeros = 0\n    for num in nums:\n        if num:\n            nums[i] = num\n            i+=1\n        else:\n            zeros+=1\n        print(nums)\n    if zeros:\n        nums[-zeros:] = [0]*zeros\n</code></pre> <pre><code>nums = [0,1,0,3,12]\nmove_zeros(nums)\nnums\n</code></pre> <pre>\n<code>[0, 1, 0, 3, 12]\n[1, 1, 0, 3, 12]\n[1, 1, 0, 3, 12]\n[1, 3, 0, 3, 12]\n[1, 3, 12, 3, 12]\n</code>\n</pre> <pre>\n<code>[1, 3, 12, 0, 0]</code>\n</pre> <pre><code>nums = [1]\nmove_zeros(nums)\nnums\n</code></pre> <pre>\n<code>[1]\n</code>\n</pre> <pre>\n<code>[1]</code>\n</pre> <pre><code>nums[-0:]\n</code></pre> <pre>\n<code>[]</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#1-happy-number","title":"1. Happy Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#2-delete-node-in-a-linked-list","title":"2. Delete Node in a Linked List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#3-linked-list-cycle","title":"3. Linked List Cycle","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#4-intersection-of-two-linked-lists","title":"4. Intersection of Two Linked Lists","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#5-reverse-linked-list","title":"5. Reverse Linked List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#6-contains-duplicate","title":"6. Contains Duplicate","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#7-palindrome-linked-list","title":"7. Palindrome Linked List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#8-valid-anagram","title":"8. Valid Anagram","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#9-missing-number","title":"9. Missing Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_3/#10-move-zeroes","title":"10 Move Zeroes","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/","title":"Problems Leetcode Easy 4","text":"<p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is palindrome integer.</p> <p>An integer is a palindrome when it reads the same backward as forward.</p> <ul> <li>For example, <code>121</code> is a palindrome while <code>123</code> is not.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n</pre> <p>Example 2:</p> <pre>Input: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre> <p>Example 3:</p> <pre>Input: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231\u00a0&lt;= x &lt;= 231\u00a0- 1</code></li> </ul> <p> </p> Follow up: Could you solve it without converting the integer to a string? <pre><code>def is_palindrome(x):\n    if x&lt;0:\n        return False\n    num = x\n    nums = []\n    while num:\n        nums.append(num%10)\n        new_x = num//10\n        num = new_x\n    new_num = 0\n    print(nums)\n    for i in range(len(nums)):\n        new_num+=10**(len(nums)-i-1)*nums[i]\n    return new_num == x\n</code></pre> <pre><code>is_palindrome(121)\n</code></pre> <pre>\n<code>[1, 2, 1]\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <pre><code>is_palindrome(122)\n</code></pre> <pre>\n<code>[2, 2, 1]\n</code>\n</pre> <pre>\n<code>False</code>\n</pre> <pre><code>is_palindrome(-121)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>is_palindrome(10)\n</code></pre> <pre>\n<code>[0, 1]\n</code>\n</pre> <pre>\n<code>False</code>\n</pre> <p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> in-place. The relative order of the elements may be changed.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre>int[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre> <p>If all assertions pass, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> </ul> <pre><code>def remove_element(nums, val):\n    duplis = 0\n    i = 0\n    for _ in range(len(nums)):\n        if nums[i] == val:\n            nums[-1-duplis], nums[i] = \"_\", nums[-1-duplis]\n            duplis+=1\n            i-=1\n        i+=1\n</code></pre> <pre><code>nums = [3,2,2,3]\nval = 3\nremove_element(nums, val)\nnums\n</code></pre> <pre>\n<code>[2, 2, '_', '_']</code>\n</pre> <pre><code>nums = [0,1,2,2,3,0,4,2]\nval = 2\nremove_element(nums, val)\nnums\n</code></pre> <pre>\n<code>[0, 1, 4, 0, 3, '_', '_', '_']</code>\n</pre> <p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p> <p>You must\u00a0write an algorithm with\u00a0<code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,3,5,6], target = 5\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,3,5,6], target = 2\nOutput: 1\n</pre> <p>Example 3:</p> <pre>Input: nums = [1,3,5,6], target = 7\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>nums</code> contains distinct values sorted in ascending order.</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul> <pre><code>def search_index(nums, target):\n    start = 0\n    end = len(nums)\n    def search(nums, target, start, end):\n        print(nums[start: end], start, end)\n        if end-start&lt;=0:\n            return start\n        mid = start + (end-start)//2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid]&gt;target:\n            return search(nums, target, start, mid)\n        else:\n            return search(nums, target, mid+1, end)\n    return search(nums, target, start, end)\n</code></pre> <pre><code>nums = [1,3,5,6]\ntarget = 5\nsearch_index(nums, target)\n</code></pre> <pre>\n<code>[1, 3, 5, 6] 0 4\n</code>\n</pre> <pre>\n<code>2</code>\n</pre> <pre><code>nums = [1,3,5,6]\ntarget = 7\nsearch_index(nums, target)\n</code></pre> <pre>\n<code>[1, 3, 5, 6] 0 4\n[6] 3 4\n[] 4 4\n</code>\n</pre> <pre>\n<code>4</code>\n</pre> <pre><code>nums = [1,3]\ntarget = 2\nsearch_index(nums, target)\n</code></pre> <pre>\n<code>[1, 3] 0 2\n[1] 0 1\n[] 1 1\n</code>\n</pre> <pre>\n<code>1</code>\n</pre> <p>Given a string <code>s</code> consisting of words and spaces, return the length of the last word in the string.</p> <p>A word is a maximal substring consisting of non-space characters only.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n</pre> <p>Example 2:</p> <pre>Input: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n</pre> <p>Example 3:</p> <pre>Input: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> consists of only English letters and spaces <code>' '</code>.</li> <li>There will be at least one word in <code>s</code>.</li> </ul> <pre><code>def len_of_last_word(s):\n    s = s.strip()\n    len_s = len(s)\n    j = 0\n    len_ = 0\n    i = -1\n    s0 = s[i]\n    while True:\n        if s0 == \" \":\n            return len_\n        elif j&gt;=len_s-1:\n            return len_+1\n        else:\n            i-=1\n            len_+=1\n            s0 = s[i]\n        j+=1\n</code></pre> <pre><code>s = \"luffy is still joyboy\"\nlen_of_last_word(s)\n</code></pre> <pre>\n<code>6</code>\n</pre> <pre><code>s = \"a\"\nlen_of_last_word(s)\n</code></pre> <pre>\n<code>1</code>\n</pre> <p>Given two binary strings <code>a</code> and <code>b</code>, return their sum as a binary string.</p> <p> </p> <p>Example 1:</p> <pre>Input: a = \"11\", b = \"1\"\nOutput: \"100\"\n</pre><p>Example 2:</p> <pre>Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 104</code></li> <li><code>a</code> and <code>b</code> consist\u00a0only of <code>'0'</code> or <code>'1'</code> characters.</li> <li>Each string does not contain leading zeros except for the zero itself.</li> </ul> <pre><code>def add_binary(a, b):\n    max_len = max(len(a), len(b))\n    min_len = min(len(a), len(b))\n    for i in range(max_len-min_len):\n        if len(a)==max_len:\n            b = \"0\"+b\n        elif len(b)==max_len:\n            a = \"0\"+a\n    print(a, b)\n    carry = 0\n    sum_ = \"\"\n    for i in range(max_len):\n        current_digit = carry + int(a[-i-1])+int(b[-i-1])\n        carry = current_digit//2\n        sum_+=str(current_digit%2)\n        print(sum_)\n    if carry:\n        sum_+=\"1\"\n    return sum_[::-1]\n</code></pre> <pre><code>a = \"11\"\nb = \"1\"\nadd_binary(a, b)\n</code></pre> <pre>\n<code>11 01\n0\n00\n</code>\n</pre> <pre>\n<code>'100'</code>\n</pre> <p>Given the <code>head</code> of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,1,2]\nOutput: [1,2]\n</pre> <p>Example 2:</p> <pre>Input: head = [1,1,2,3,3]\nOutput: [1,2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be sorted in ascending order.</li> </ul> <pre><code>def remove_duplicates(head):\n    current = head\n    current_val = current.val\n    while current.next:\n        next_val = current.next.val\n        if next_val == current_val:\n            current.val = current.next.val\n            current.next = current.next.next\n        else:\n            current_val = next_val\n            current = current.next\n    return head\n</code></pre> <p>Given an integer <code>rowIndex</code>, return the <code>rowIndexth</code> (0-indexed) row of the Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p> <p> </p> <p>Example 1:</p> <pre>Input: rowIndex = 3\nOutput: [1,3,3,1]\n</pre><p>Example 2:</p> <pre>Input: rowIndex = 0\nOutput: [1]\n</pre><p>Example 3:</p> <pre>Input: rowIndex = 1\nOutput: [1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= rowIndex &lt;= 33</code></li> </ul> <p> </p> <p>Follow up: Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p> <pre><code>def get_row(rowIndex):\n    if rowIndex&lt;=1:\n        return [1]*(rowIndex+1)\n    current_array = [1, 1]\n    for i in range(rowIndex-2):\n        temp_list = []\n        for i in range(len(current_array)-1):\n            temp_list.append(current_array[i]+current_array[i+1])\n        current_array = [1]+temp_list+[1]\n    return current_array\n</code></pre> <pre><code>get_row(20)\n</code></pre> <pre>\n<code>[1,\n 19,\n 171,\n 969,\n 3876,\n 11628,\n 27132,\n 50388,\n 75582,\n 92378,\n 92378,\n 75582,\n 50388,\n 27132,\n 11628,\n 3876,\n 969,\n 171,\n 19,\n 1]</code>\n</pre> <p>Given an integer <code>columnNumber</code>, return its corresponding column title as it appears in an Excel sheet.</p> <p>For example:</p> <pre>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre> <p> </p> <p>Example 1:</p> <pre>Input: columnNumber = 1\nOutput: \"A\"\n</pre> <p>Example 2:</p> <pre>Input: columnNumber = 28\nOutput: \"AB\"\n</pre> <p>Example 3:</p> <pre>Input: columnNumber = 701\nOutput: \"ZY\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= columnNumber &lt;= 231 - 1</code></li> </ul> <pre><code>def convert_to_title(columnNumber):\n    digit_to_alphabate = {i+1:k for i, k in enumerate(\"abcdefghijklmnopqrstuvwxyz\".upper())}\n    columnTitle = \"\"\n    while columnNumber:\n        num = columnNumber%26\n        subtract = 0\n        if not num:\n            num=26\n            subtract = 1\n        columnTitle = digit_to_alphabate[num]+columnTitle\n        columnNumber = (columnNumber)//26-subtract\n    return columnTitle\n</code></pre> <pre><code>convert_to_title(28)\n</code></pre> <pre>\n<code>'AB'</code>\n</pre> <pre><code>convert_to_title(701)\n</code></pre> <pre>\n<code>'ZY'</code>\n</pre> <pre><code>convert_to_title(26)\n</code></pre> <pre>\n<code>'Z'</code>\n</pre> <p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return the new head.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n</pre> <p>Example 2:</p> <pre>Input: head = [], val = 1\nOutput: []\n</pre> <p>Example 3:</p> <pre>Input: head = [7,7,7,7], val = 7\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 104]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 50</code></li> </ul> <pre><code>def remove_element(head, val):\n    dummy_head = ListNode(-1)\n    dummy_head.next = head\n\n    current_node = dummy_head\n    while current_node.next:\n        if current_node.next.val == val:\n            current_node.next = current_node.next.next\n        else:\n            current_node = current_node.next\n\n    return dummy_head.next\n</code></pre> <p>Given two strings <code>s</code> and <code>t</code>, determine if they are isomorphic.</p> <p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p> <p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"egg\", t = \"add\"\nOutput: true\n</pre><p>Example 2:</p> <pre>Input: s = \"foo\", t = \"bar\"\nOutput: false\n</pre><p>Example 3:</p> <pre>Input: s = \"paper\", t = \"title\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>t.length == s.length</code></li> <li><code>s</code> and <code>t</code> consist of any valid ascii character.</li> </ul> <pre><code>def is_isomorphic(s, t):\n    if len(s)!=len(t):\n        return False\n    hash_ = {}\n    for i, j in zip(s, t):\n        if i in hash_:\n            if hash_[i]!=j:\n                return False\n        else:\n            hash_[i]=j\n    hash_ = {}\n    for j, i in zip(s, t):\n        if i in hash_:\n            if hash_[i]!=j:\n                return False\n        else:\n            hash_[i]=j\n    return True \n</code></pre> <pre><code>is_isomorphic(\"egg\", \"add\")\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>is_isomorphic(\"foo\", \"bar\")\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>is_isomorphic(\"foo\", \"bar\")\n</code></pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#1-palindrome-number","title":"1. Palindrome Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#2-remove-element","title":"2. Remove Element","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#3-search-insert-position","title":"3. Search Insert Position","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#4-length-of-last-word","title":"4. Length of Last Word","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#5-add-binary","title":"5. Add Binary","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#6-remove-duplicates-from-sorted-list","title":"6. Remove Duplicates from Sorted List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#7-pascals-triangle-ii","title":"7. Pascal's Triangle II","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#8-excel-sheet-column-title","title":"8. Excel Sheet Column Title","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#9-remove-linked-list-elements","title":"9. Remove Linked List Elements","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_4/#10-isomorphic-strings","title":"10. Isomorphic Strings","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/","title":"Problems Leetcode Easy 5","text":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if there are two distinct indices <code>i</code> and <code>j</code> in the array such that <code>nums[i] == nums[j]</code> and <code>abs(i - j) &lt;= k</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3,1], k = 3\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,0,1,1], k = 1\nOutput: true\n</pre> <p>Example 3:</p> <pre>Input: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>0 &lt;= k &lt;= 105</code></li> </ul> <pre><code>[1,2,3,1][3:-3]\n</code></pre> <pre>\n<code>[]</code>\n</pre> <pre><code>def contains_duplicates(nums):\n</code></pre> <pre>\n<code>5</code>\n</pre> <p>You are given a sorted unique integer array <code>nums</code>.</p> <p>A range <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p> <p>Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p> <p>Each range <code>[a,b]</code> in the list should be output as:</p> <ul> <li><code>\"a-&gt;b\"</code> if <code>a != b</code></li> <li><code>\"a\"</code> if <code>a == b</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: nums = [0,1,2,4,5,7]\nOutput: [\"0-&gt;2\",\"4-&gt;5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --&gt; \"0-&gt;2\"\n[4,5] --&gt; \"4-&gt;5\"\n[7,7] --&gt; \"7\"\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2-&gt;4\",\"6\",\"8-&gt;9\"]\nExplanation: The ranges are:\n[0,0] --&gt; \"0\"\n[2,4] --&gt; \"2-&gt;4\"\n[6,6] --&gt; \"6\"\n[8,9] --&gt; \"8-&gt;9\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 20</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> <li>All the values of <code>nums</code> are unique.</li> <li><code>nums</code> is sorted in ascending order.</li> </ul> <pre><code>def summary(nums):\n    if not nums:\n        return nums\n    start = [nums[0]]\n    end = []\n    for i in range(1, len(nums)):\n        if nums[i]-nums[i-1]&gt;1:\n            end.append(nums[i-1])\n            start.append(nums[i])\n    end.append(nums[-1])\n    output = []\n    for a, b in zip(start, end):\n        if a==b:\n            text = str(a)\n        else:\n            text = f\"{a}-&gt;{b}\"\n        output.append(text)\n    return output\n</code></pre> <pre><code>nums = [0, 1,2,4,5,7]\nsummary(nums)\n</code></pre> <pre>\n<code>['0-&gt;2', '4-&gt;5', '7']</code>\n</pre> <pre><code>nums = [0,2,3,4,6,8,9]\nsummary(nums)\n</code></pre> <pre>\n<code>['0', '2-&gt;4', '6', '8-&gt;9']</code>\n</pre> <pre><code>nums = [1,2,3,5,6,7]\nsummary(nums)\n</code></pre> <pre>\n<code>['1-&gt;3', '5-&gt;7']</code>\n</pre> <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of two. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2x</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 1\nOutput: true\nExplanation: 20 = 1\n</pre> <p>Example 2:</p> <pre>Input: n = 16\nOutput: true\nExplanation: 24 = 16\n</pre> <p>Example 3:</p> <pre>Input: n = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= n &lt;= 231 - 1</code></li> </ul> <p> </p> Follow up: Could you solve it without loops/recursion? <pre><code>def power_of_two(n):\n    if n&lt;0:\n        return False\n    n_binary = bin(n)\n    return n_binary.count(\"1\")==1\n</code></pre> <pre><code>power_of_two(16)\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p> <p> </p> <p>Example 1:</p> <pre>Input: num = 38\nOutput: 2\nExplanation: The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre> <p>Example 2:</p> <pre>Input: num = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 231 - 1</code></li> </ul> <p> </p> <p>Follow up: Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p> <pre><code>def add_digits(num):\n    def sum_num(str_num):\n        sum = 0\n        for i in str_num:\n            sum+=int(i)\n        return str(sum)\n    num = str(num)\n    while len(num)&gt;1:\n        num = sum_num(num)\n    return num\n</code></pre> <pre><code>add_digits(38)\n</code></pre> <pre>\n<code>'2'</code>\n</pre> <p>An ugly number is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p> <p>Given an integer <code>n</code>, return <code>true</code> if <code>n</code> is an ugly number.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 6\nOutput: true\nExplanation: 6 = 2 \u00d7 3\n</pre> <p>Example 2:</p> <pre>Input: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre> <p>Example 3:</p> <pre>Input: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= n &lt;= 231 - 1</code></li> </ul> <pre><code>def ugly_number(n):\n    if n&lt;=0:\n        return False\n    factors = [2,3,5]\n    n_copy = n\n    for factor in factors:\n        while not n_copy%factor:\n            print(n_copy)\n            n_copy = n_copy//factor\n    return n_copy==1\n</code></pre> <pre><code>ugly_number(6)\n</code></pre> <pre>\n<code>6\n3\n</code>\n</pre> <pre>\n<code>True</code>\n</pre> <pre><code>ugly_number(1)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>ugly_number(14)\n</code></pre> <pre>\n<code>14\n</code>\n</pre> <pre>\n<code>False</code>\n</pre> <pre><code>2**5*3**5*5**2\n</code></pre> <pre>\n<code>194400</code>\n</pre> <p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p> <p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p> <p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)\u00a0-&gt; true\ncall isBadVersion(4)\u00a0-&gt; true\nThen 4 is the first bad version.\n</pre> <p>Example 2:</p> <pre>Input: n = 1, bad = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= bad &lt;= n &lt;= 231 - 1</code></li> </ul> <pre><code>def firstBadVersion(n: int) -&gt; int:\n    r = n-1\n    l = 0\n    while(l&lt;=r):\n        mid = l + (r-l)//2\n        if isBadVersion(mid)==False:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\n</code></pre> <p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>\u00a0follows the same pattern.</p> <p>Here follow means a full match, such that there is a bijection between a letter in <code>pattern</code> and a non-empty word in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pattern.length &lt;= 300</code></li> <li><code>pattern</code> contains only lower-case English letters.</li> <li><code>1 &lt;= s.length &lt;= 3000</code></li> <li><code>s</code> contains only lowercase English letters and spaces <code>' '</code>.</li> <li><code>s</code> does not contain any leading or trailing spaces.</li> <li>All the words in <code>s</code> are separated by a single space.</li> </ul> <pre><code>def word_pattern(pattern, s):\n    s_list = s.split()\n    if len(s_list)!=len(pattern):\n        return False\n    hash_ = {}\n    for c, w in zip(pattern, s_list):\n        if  w in hash_:\n            if hash_[w]!=c:\n                return False\n        else:\n            hash_[w]=c\n    print(hash_)\n    hash_ = {}\n    for w, c in zip(pattern, s_list):\n        if  w in hash_:\n            if hash_[w]!=c:\n                return False\n        else:\n            hash_[w]=c\n    return True\n</code></pre> <pre><code>pattern = \"abba\"\ns = \"dog cat cat cat\"\nword_pattern(pattern, s)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p> <ol> <li>Calculate the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive where <code>left &lt;= right</code>.</li> </ol> <p>Implement the <code>NumArray</code> class:</p> <ul> <li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>int sumRange(int left, int right)</code> Returns the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-105 &lt;= nums[i] &lt;= 105</code></li> <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> <li>At most <code>104</code> calls will be made to <code>sumRange</code>.</li> </ul> <pre><code>class NumArray:\n\n    def __init__(self, nums):\n        self.nums = nums\n\n    def sumRange(self, left: int, right: int) -&gt; int:\n        return sum(self.nums[left: right+1])    \n</code></pre> <p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (<code>0 &lt;= i &lt;= n</code>), <code>ans[i]</code> is the number of <code>1</code>'s in the binary representation of <code>i</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre> <p>Example 2:</p> <pre>Input: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 105</code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li> <li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li> </ul> <pre><code>def counting_bits_brute_force(n):\n    counting = []\n    for i in range(n+1):\n        counting.append(bin(i).count(\"1\"))\n    return counting\n</code></pre> <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of four. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4x</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 16\nOutput: true\n</pre><p>Example 2:</p> <pre>Input: n = 5\nOutput: false\n</pre><p>Example 3:</p> <pre>Input: n = 1\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= n &lt;= 231 - 1</code></li> </ul> <p> </p> Follow up: Could you solve it without loops/recursion? <pre><code>def power_of_four(n):\n    if n&lt;0:\n        return False\n    n_binary = bin(n)\n    return n_binary.count(\"1\")==1 and n_binary.count(\"0\")%2==1\n</code></pre> <pre><code>power_of_four(5)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>power_of_four(4**4)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>power_of_four(2)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>power_of_four(8)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>def power_of_four_2(n):\n    if n&lt;0:\n        return False\n    while n&gt;=4:\n        if n%4!=0:\n            return False\n        n = n/4\n    return n==1\n</code></pre> <pre><code>power_of_four_2(8)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>power_of_four_2(4**11)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>\n</code></pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#1-contains-duplicate-ii","title":"1. Contains Duplicate II","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#2-summary-ranges","title":"2. Summary Ranges","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#3-power-of-two","title":"3. Power of Two","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#4-add-digits","title":"4. Add Digits","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#5-ugly-number","title":"5. Ugly Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#6-first-bad-version","title":"6. First Bad Version","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#7-word-pattern","title":"7. Word Pattern","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#8-range-sum-query-immutable","title":"8. Range Sum Query - Immutable","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#9-counting-bits","title":"9. Counting Bits","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_5/#10-power-of-four","title":"10. Power of Four","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/","title":"Problems Leetcode Easy 6","text":"<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</pre><p>Example 2:</p> <pre>Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s[i]</code> is a printable ascii character.</li> </ul> <pre><code>def reverse_string(s):\n    for i in range(len(s)):\n        s.insert(i, s[-1])\n        s.pop()\n</code></pre> <pre><code>%timeit reverse_string(s)\ns = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nreverse_string(s)\ns\n</code></pre> <pre>\n<code>700 ns \u00b1 23.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each)\n</code>\n</pre> <pre>\n<code>['o', 'l', 'l', 'e', 'h']</code>\n</pre> <pre><code>def reverse_string(s):\n    start , stop = 0, len(s)\n    while start&lt;stop-1:\n        s[start], s[stop-1] = s[stop-1], s[start]\n        start+=1\n        stop-=1\n</code></pre> <pre><code>%timeit reverse_string(s)\ns = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nreverse_string(s)\ns\n</code></pre> <pre>\n<code>433 ns \u00b1 4.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each)\n</code>\n</pre> <pre>\n<code>['o', 'l', 'l', 'e', 'h']</code>\n</pre> <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n</pre> <p>Example 2:</p> <pre>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>What if the given array is already sorted? How would you optimize your algorithm?</li> <li>What if <code>nums1</code>'s size is small compared to <code>nums2</code>'s size? Which algorithm is better?</li> <li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li> </ul> <pre><code>def intersection(nums1, nums2):\n    pass\n</code></pre> <p>Given a string <code>s</code>, find the first non-repeating character in it and return its index. If it does not exist, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"leetcode\"\nOutput: 0\n</pre><p>Example 2:</p> <pre>Input: s = \"loveleetcode\"\nOutput: 2\n</pre><p>Example 3:</p> <pre>Input: s = \"aabb\"\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul> <pre><code>def first_unique_char(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char]+=1\n        else:\n            count[char] = 1\n    for key, value in count.items():\n        if value == 1:\n            return s.index(key)\n    return -1\n</code></pre> <pre><code>s = \"leetcode\"\nfirst_unique_char(s)\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code>s = \"aababb\"\nfirst_unique_char(s)\n</code></pre> <pre>\n<code>-1</code>\n</pre> <pre><code>s = \"loveleetcode\"\nfirst_unique_char(s)\n</code></pre> <pre>\n<code>2</code>\n</pre> <p>Given an integer <code>n</code>, return a string array <code>answer</code> (1-indexed) where:</p> <ul> <li><code>answer[i] == \"FizzBuzz\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li> <li><code>answer[i] == \"Fizz\"</code> if <code>i</code> is divisible by <code>3</code>.</li> <li><code>answer[i] == \"Buzz\"</code> if <code>i</code> is divisible by <code>5</code>.</li> <li><code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]\n</pre><p>Example 2:</p> <pre>Input: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n</pre><p>Example 3:</p> <pre>Input: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 104</code></li> </ul> <pre><code>def fizz_buzz(n):\n    array = []\n    for i in range(1, n+1):\n        if i%15==0:\n            array.append(\"FizzBuzz\")\n        elif i%5==0:\n            array.append(\"Buzz\")\n        elif i%3==0:\n            array.append(\"Fizz\")\n        else:\n            array.append(str(i))\n    return array\n</code></pre> <pre><code>fizz_buzz(15)\n</code></pre> <pre>\n<code>['1',\n '2',\n 'Fizz',\n '4',\n 'Buzz',\n 'Fizz',\n '7',\n '8',\n 'Fizz',\n 'Buzz',\n '11',\n 'Fizz',\n '13',\n '14',\n 'FizzBuzz']</code>\n</pre> <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of three. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3x</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 27\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: n = 0\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: n = 9\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= n &lt;= 231 - 1</code></li> </ul> <p> </p> Follow up: Could you solve it without loops/recursion? <pre><code>def is_power_of_three(n):\n    if not n:\n        return False\n    n = float(n)\n    while True:\n        if not n.is_integer():\n            return False\n        if n.is_integer() and int(n) == 1:\n            return True\n        n = n/3\n</code></pre> <pre><code>is_power_of_three(0)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Given the <code>head</code> of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n</pre> <p>Example 2:</p> <pre>Input: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul> <pre><code>def middle_node(head):\n    fast, slow = head, head\n\n    while fast and fast.next:\n        fast = fast.next.next\n        slow=slow.next\n    return slow\n</code></pre> <p>You are playing the following Nim Game with your friend:</p> <ul> <li>Initially, there is a heap of stones on the table.</li> <li>You and your friend will alternate taking turns, and you go first.</li> <li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li> <li>The one who removes the last stone is the winner.</li> </ul> <p>Given <code>n</code>, the number of stones in the heap, return <code>true</code> if you can win the game assuming both you and your friend play optimally, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n</pre> <p>Example 2:</p> <pre>Input: n = 1\nOutput: true\n</pre> <p>Example 3:</p> <pre>Input: n = 2\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 231 - 1</code></li> </ul> <pre><code>def can_win_nim(n:int) -&gt; bool:\n    return not n%4==0\n</code></pre> <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n</pre> <p>Example 2:</p> <pre>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul> <pre><code>def intersection_arr(nums1, nums2):\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    intersection = []\n    for el in nums2_set:\n        if el in nums1_set:\n            intersection.append(el)\n    return intersection\n</code></pre> <pre><code>nums1 = [1,2,2,1]\nnums2 = [2,2]\nintersection_arr(nums1, nums2)\n</code></pre> <pre>\n<code>[2]</code>\n</pre> <p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p> <p>The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>, and they can appear in both lower and upper cases, more than once.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"hello\"\nOutput: \"holle\"\n</pre><p>Example 2:</p> <pre>Input: s = \"leetcode\"\nOutput: \"leotcede\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 105</code></li> <li><code>s</code> consist of printable ASCII characters.</li> </ul> <p>Given an integer array <code>nums</code>, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n</pre> <p>Example 3:</p> <pre>Input: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li> </ul> <p> </p> Follow up: Can you find an <code>O(n)</code> solution? <pre><code>def third_max(nums):\n    def new_max(n, m):\n        if not n:\n            return m\n        return max(n, m)\n    def get_max(arr, nums_skip):\n        max_ = None\n        for num in arr:\n            if num in nums_skip:\n                continue\n            max_ = new_max(max_, num)\n        return max_\n    first_max = max(nums)\n    second_max = get_max(nums, [first_max])\n    third_max = get_max(nums, [first_max, second_max])\n    if third_max is not None:\n        return third_max\n    return first_max\n</code></pre> <pre><code>nums = [3,2,1]\nthird_max(nums)\n</code></pre> <pre>\n<code>1</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#1-reverse-string","title":"1. Reverse String","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#2-intersection-of-two-arrays-ii","title":"2. Intersection of Two Arrays II","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#3-first-unique-character-in-a-string","title":"3. First Unique Character in a String","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#4-fizz-buzz","title":"4. Fizz Buzz","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#5-power-of-three","title":"5. Power of Three","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#6-middle-of-the-linked-list","title":"6. Middle of the Linked List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#7-nim-game","title":"7. Nim Game","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#8-intersection-of-two-arrays","title":"8. Intersection of Two Arrays","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#9-reverse-vowels-of-a-string","title":"9. Reverse Vowels of a String","text":""},{"location":"Notes/DSA/Problems_Leetcode_Easy_6/#10-third-maximum-number","title":"10. Third Maximum Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Hard_1/","title":"Problems Leetcode Hard 1","text":"<p>Given an input string <code>s</code>\u00a0and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p> <ul> <li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li> <li><code>'*'</code> Matches zero or more of the preceding element.</li> </ul> <p>The matching should cover the entire input string (not partial).</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n</pre> <p>Example 2:</p> <pre>Input: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</pre> <p>Example 3:</p> <pre>Input: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length\u00a0&lt;= 20</code></li> <li><code>1 &lt;= p.length\u00a0&lt;= 30</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and\u00a0<code>'*'</code>.</li> <li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li> </ul> <pre><code>def is_match(s, p):\n    pass\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Notes/DSA/Problems_Leetcode_Hard_1/#1-regular-expression-matching","title":"1. Regular Expression Matching","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/","title":"Problems Leetcode Medium 1","text":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p> </p> <p>Example 1:</p> <pre>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n</pre> <p>Example 2:</p> <pre>Input: l1 = [0], l2 = [0]\nOutput: [0]\n</pre> <p>Example 3:</p> <pre>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li> </ul> <pre><code>class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        sum_node = ListNode()\n        s_head = sum_node\n        carry = 0\n        h1 = l1\n        h2 = l2\n        while h1 and h2:\n            sum_ = h1.val + h2.val + carry\n            carry = sum_ // 10\n            s_head.val = sum_ % 10\n            s_head.next = ListNode()\n            s_head = s_head.next\n            h1, h2 = h1.next, h2.next\n        h = h1 if h1 else h2\n        while h:\n            sum_ = h.val + carry\n            carry = sum_ // 10\n            s_head.val = sum_ % 10\n            s_head.next = ListNode()\n            s_head = s_head.next\n            h = h.next\n        s_head = sum_node\n        if carry:\n            while s_head.next:\n                s_head = s_head.next\n            s_head.val = carry\n        else:\n            while s_head.next.next:\n                s_head = s_head.next\n            s_head.next = None\n        return sum_node\n</code></pre> <p>Given a string <code>s</code>, find the length of the longest substring without repeating characters.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</pre> <p>Example 2:</p> <pre>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</pre> <p>Example 3:</p> <pre>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>s</code> consists of English letters, digits, symbols and spaces.</li> </ul> <pre><code>def largest_substring(s):\n    if not s:\n        return 0\n    already_in = []\n    max_num = 0\n    for i, char in enumerate(s):\n        if char not in already_in:\n            already_in.append(char)\n        else:\n            j = already_in.index(char)\n            already_in = already_in[j + 1 :]\n            already_in.append(char)\n        if len(already_in) &gt; max_num:\n            max_num = len(already_in)\n    return max_num\n</code></pre> <pre><code>largest_substring(\"davd\")\n</code></pre> <pre>\n<code>3</code>\n</pre> <pre><code>largest_substring(\"aabaab!bb\")\n</code></pre> <pre>\n<code>3</code>\n</pre> <pre><code>def largest_substring(s):\n    if not s:\n        return 0\n    already_in = []\n    max_num = 0\n    hash = {}\n    for i, char in enumerate(s):\n        if char not in already_in:\n            already_in.append(char)\n            hash[char] = i\n        else:\n            hash[char] = i\n            j = hash[char]\n            already_in = already_in[j:]\n            already_in.append(char)\n        if len(already_in) &gt; max_num:\n            max_num = len(already_in)\n        print(already_in)\n    return max_num\n</code></pre> <pre><code>largest_substring(\"aabaab!bb\")\n</code></pre> <pre>\n<code>['a']\n['a']\n['a', 'b']\n['a']\n['a']\n['a', 'b']\n['a', 'b', '!']\n['b']\n['b']\n</code>\n</pre> <pre>\n<code>3</code>\n</pre> <pre><code>largest_substring(\"dvdf\")\n</code></pre> <pre>\n<code>['d']\n['d', 'v']\n['d']\n['d', 'f']\n</code>\n</pre> <pre>\n<code>2</code>\n</pre> <p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n</pre> <p>Example 2:</p> <pre>Input: s = \"cbbd\"\nOutput: \"bb\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li> </ul> <pre><code>def longest_pali(s):\n    current_pali = s[0]\n    largest_pali = \"\"\n    hash = {\n        s[0]: 0,\n    }\n    for i, char in enumerate(s[1:]):\n        print(current_pali)\n        current_pali += char\n        if char in hash:\n            current_pali = s[hash[char] : i + 1]\n            if (\n                len(current_pali) &gt; len(largest_pali)\n                and current_pali == current_pali[::-1]\n            ):\n                largest_pali = current_pali\n        else:\n            hash[char] = i + 1\n    print(hash)\n    return len(largest_pali)\n</code></pre> <pre><code>longest_pali(\"babad\")\n</code></pre> <pre>\n<code>b\nba\nba\nab\n{'b': 0, 'a': 1, 'd': 4}\n</code>\n</pre> <pre>\n<code>0</code>\n</pre> <p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-231, 231 - 1]</code>, then return <code>0</code>.</p> <p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p> <p> </p> <p>Example 1:</p> <pre>Input: x = 123\nOutput: 321\n</pre> <p>Example 2:</p> <pre>Input: x = -123\nOutput: -321\n</pre> <p>Example 3:</p> <pre>Input: x = 120\nOutput: 21\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= x &lt;= 231 - 1</code></li> </ul> <pre><code>def reverse(x):\n    str_x = str(x)\n    neg = False\n    if str_x.startswith(\"-\"):\n        str_x = str_x[1:]\n        neg = True\n    reverse_str = str_x[::-1]\n    reverse_int = int(reverse_str)\n    if neg:\n        reverse_int = -reverse_int\n    if reverse_int &lt;= -(2**31) or reverse_int &gt;= 2**31 - 1:\n        return 0\n    return reverse_int\n</code></pre> <pre><code>reverse(-123)\n</code></pre> <pre>\n<code>-321</code>\n</pre> <pre><code>str_x = \"-123\"\nif str_x.endswith(\"-\"):\n    str_x = str_x[-1:]\nstr_x\n</code></pre> <pre>\n<code>'-123'</code>\n</pre> <pre><code>2**31\n</code></pre> <pre>\n<code>2147483648</code>\n</pre> <p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s <code>atoi</code> function).</p> <p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p> <ol> <li>Read in and ignore any leading whitespace.</li> <li>Check if the next character (if not already at the end of the string) is <code>'-'</code> or <code>'+'</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li> <li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li> <li>Convert these digits into an integer (i.e. <code>\"123\" -&gt; 123</code>, <code>\"0032\" -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li> <li>If the integer is out of the 32-bit signed integer range <code>[-231, 231 - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-231</code> should be clamped to <code>-231</code>, and integers greater than <code>231 - 1</code> should be clamped to <code>231 - 1</code>.</li> <li>Return the integer as the final result.</li> </ol> <p>Note:</p> <ul> <li>Only the space character <code>' '</code> is considered a whitespace character.</li> <li>Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n</pre> <p>Example 2:</p> <pre>Input: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n</pre> <p>Example 3:</p> <pre>Input: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>' '</code>, <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.</li> </ul> <pre><code>def myatoi(s):\n    s = s.strip()\n    positive = True\n    signed = True\n    if s[0] == \"+\":\n        pass\n    elif s[0] == \"-\":\n        positive = False\n    else:\n        signed = False\n    nums = []\n    digits = \"0 1 2 3 4 5 6 7 8 9\".split()\n    if signed:\n        s = s[1:]\n    for char in s:\n        if char in digits:\n            nums.append(int(char))\n        else:\n            break\n    num = 0\n    print(nums)\n    for i, d in enumerate(nums):\n        num += d * 10 ** (len(nums) - i - 1)\n    if not positive:\n        num = -num\n\n    if num &lt;= -(2**31) or num &gt;= 2**31 - 1:\n        return 0\n    else:\n        return num\n</code></pre> <pre><code>myatoi(\"   -4193 with words\")\n</code></pre> <pre>\n<code>[4, 1, 9, 3]\n</code>\n</pre> <pre>\n<code>-4193</code>\n</pre> <p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return the maximum amount of water a container can store.</p> <p>Notice that you may not slant the container.</p> <p> </p> <p>Example 1:</p> <pre>Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre> <p>Example 2:</p> <pre>Input: height = [1,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 105</code></li> <li><code>0 &lt;= height[i] &lt;= 104</code></li> </ul> <pre><code>def max_area(height):\n    max_area = 0\n    for i, a in enumerate(height):\n        for j, b in enumerate(height):\n            area = (i - j) * (min([a, b]))\n            if area &gt; max_area:\n                max_area = area\n    return max_area\n</code></pre> <pre><code>height = [1, 8, 6, 2, 5, 4, 8, 3, 7]\nmax_area(height)\n</code></pre> <pre>\n<code>49</code>\n</pre> <pre><code>def print_list(nums):\n    left = 1\n    right = len(nums)-2\n    a = nums[0]\n    b = nums[-1]\n    # print(a, b)\n    while True:\n        a_new = nums[left]\n        b_new = nums[right]\n        print(\"AB\", a, b)\n        print(a_new, b_new)\n        if left-1&lt;right+1:\n            return a_new, b_new, left, right\n        if a&gt;a_new and b&gt;b_new:\n            return a, b, left-1, right+1\n        if a&lt;=a_new:\n            left+=1\n            a = a_new\n        if b&lt;=b_new:\n            right-=1\n            b = b_new\n</code></pre> <pre><code>def get_optimum(num):\n    a_left = num[0]\n    a_right = num[-1]\n    left = 0\n    right = len(num) - 1\n    while True:\n        a_left_new = num[left + 1]\n        a_right_new = num[right - 1]\n        if right - 1 &lt; left + 1:\n            break\n        if a_left &gt; a_left_new:\n            break\n        else:\n            a_left = a_left_new\n            left += 1\n        if a_right &gt; a_right_new:\n            break\n        else:\n            a_right = a_right_new\n            right -= 1\n        # left+=1\n        # right-=1\n        # a_left = a_left_new\n        # a_right = a_right_new\n    return a_left, a_right, left, right\n</code></pre> <pre><code>print_list([1, 8, 6, 2, 5, 4, 9, 8, 7]), get_optimum([1, 8, 6, 2, 5, 4, 9, 8, 7])\n</code></pre> <pre>\n<code>AB 1 7\n8 8\n</code>\n</pre> <pre>\n<code>((8, 8, 1, 7), (8, 8, 1, 7))</code>\n</pre> <pre><code>print_list([0, 10, 10, 0]), get_optimum([0, 10, 10, 0])\n</code></pre> <pre>\n<code>AB 0 0\n10 10\n</code>\n</pre> <pre>\n<code>((10, 10, 1, 2), (10, 10, 1, 2))</code>\n</pre> <pre><code>print_list([1, 8, 6, 2, 5, 4, 8, 3, 7]), get_optimum([1, 8, 6, 2, 5, 4, 8, 3, 7])\n</code></pre> <pre>\n<code>AB 1 7\n8 3\n</code>\n</pre> <pre>\n<code>((8, 3, 1, 7), (8, 7, 1, 8))</code>\n</pre> <pre><code>def max_area(height):\n    if len(height) == 2:\n        return min(height)\n    if len(height) == 3:\n        return max(\n            [\n                min(height[0], height[1]),\n                2 * min(height[0], height[2], min(height[1], height[2])),\n            ]\n        )\n    a, b, l, h = get_optimum(height)\n    print(a, b, l, h)\n    return abs(min(a, b) * (h - l))\n</code></pre> <pre><code>def max_area(height):\n    i = 0\n    left = 0\n    right = len(height) - 1\n    a = height[left]\n    b = height[right]\n    max_area = min(a, b) * (right - left)\n    print(a, b)\n    while True:\n        if not i % 2:\n            left += 1\n        else:\n            right -= 1\n        a = height[left]\n        b = height[right]\n        print(a, b)\n        area = min(a, b) * (right - left)\n        if max_area &lt; area:\n            max_area = area\n        if left + 1 &gt; right - 1:\n            break\n        i += 1\n    while True:\n        if i % 2:\n            left += 1\n        else:\n            right -= 1\n        a = height[left]\n        b = height[right]\n        print(a, b)\n        area = min(a, b) * (right - left)\n        if max_area &lt; area:\n            max_area = area\n        if left + 1 &gt; right - 1:\n            break\n        i += 1\n    return max_area\n</code></pre> <pre><code>height = [1, 8, 6, 2, 5, 4, 8, 3, 7]\nmax_area(height)\n</code></pre> <pre>\n<code>1 7\n8 7\n8 3\n6 3\n6 8\n2 8\n2 4\n5 4\n5 5\n</code>\n</pre> <pre>\n<code>49</code>\n</pre> <pre><code>height = [0, 10, 12, 0]\nmax_area(height)\n</code></pre> <pre>\n<code>0 0\n10 0\n10 12\n12 12\n</code>\n</pre> <pre>\n<code>10</code>\n</pre> <pre><code>height = [1, 2, 4, 3]\nmax_area(height)\n</code></pre> <pre>\n<code>1 3\n2 3\n2 4\n4 4\n</code>\n</pre> <pre>\n<code>4</code>\n</pre> <pre><code>height = [1, 2, 3]\nmax_area(height)\n</code></pre> <pre>\n<code>1 3\n2 3\n2 2\n</code>\n</pre> <pre>\n<code>2</code>\n</pre> <pre><code>height = [2, 3, 10, 5, 7, 8, 9]\nmax_area(height)\n</code></pre> <pre>\n<code>2 9\n3 9\n3 8\n10 8\n10 7\n5 7\n5 5\n</code>\n</pre> <pre>\n<code>24</code>\n</pre> <pre><code>height = [1, 1]\nmax_area(height)\n</code></pre> <pre>\n<code>1 1\n1\n</code>\n</pre> <pre>\n<code>2</code>\n</pre> <p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p> <p> </p> <p>Example 1:</p> <pre>Input: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n</pre> <p>Example 2:</p> <pre>Input: digits = \"\"\nOutput: []\n</pre> <p>Example 3:</p> <pre>Input: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= digits.length &lt;= 4</code></li> <li><code>digits[i]</code> is a digit in the range <code>['2', '9']</code>.</li> </ul> <pre><code>def letter_combination(digits):\n    if not digits:\n        return []\n    letters = {\n        \"2\": \"a b c\".split(),\n        \"3\": \"d e f\".split(),\n        \"4\": \"g h i\".split(),\n        \"5\": \"j k l\".split(),\n        \"6\": \"m n o\".split(),\n        \"7\": \"p q r s\".split(),\n        \"8\": \"t u v\".split(),\n        \"9\": \"w x y z\".split(),\n        \"1\": [\"\"],\n    }\n    for i in range(4):\n        digits += \"1\"\n    combinations = []\n    for a1 in letters[digits[0]]:\n        for a2 in letters[digits[1]]:\n            for a3 in letters[digits[2]]:\n                for a4 in letters[digits[3]]:\n                    combinations.append(\n                        \"{a1}{a2}{a3}{a4}\".format(a1=a1, a2=a2, a3=a3, a4=a4)\n                    )\n    return combinations\n</code></pre> <pre><code>letter_combination(\"23\")\n</code></pre> <pre>\n<code>['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']</code>\n</pre> <pre><code>letter_combination(\"2\")\n</code></pre> <pre>\n<code>['a', 'b', 'c']</code>\n</pre> <p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p> <p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p> <p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p> <p>Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: <code>[\u2212231, 231 \u2212 1]</code>. For this problem, if the quotient is strictly greater than <code>231 - 1</code>, then return <code>231 - 1</code>, and if the quotient is strictly less than <code>-231</code>, then return <code>-231</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n</pre> <p>Example 2:</p> <pre>Input: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-231 &lt;= dividend, divisor &lt;= 231 - 1</code></li> <li><code>divisor != 0</code></li> </ul> <pre><code>int(6.66)\n</code></pre> <pre>\n<code>6</code>\n</pre> <pre><code>int(-231/3)\n</code></pre> <pre>\n<code>-77</code>\n</pre> <pre><code>def divide(dividend, divisor):\n    import math\n    sign = -1 if ((dividend &lt; 0) ^ (divisor &lt; 0)) else 1\n    dividend = abs(dividend)\n    divisor = abs(divisor)\n    # if divisor == 1:\n    #     return sign*dividend\n    quoteint = math.exp(math.log(dividend)-math.log(divisor))\n    quoteint = int(quoteint*sign)\n    if quoteint&gt;(2**31-1):\n        return 2**31-1\n    elif quoteint&lt;-2**31:\n        return -2**31\n    else:\n        return quoteint\n</code></pre> <pre><code>divide(50, 3)\n</code></pre> <pre>\n<code>16</code>\n</pre> <pre><code>divide(51, 3)\n</code></pre> <pre>\n<code>17</code>\n</pre> <pre><code>divide(-231, 3)\n</code></pre> <pre>\n<code>-76</code>\n</pre> <pre><code>divide(-2, -2)\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code>2**31\n</code></pre> <pre>\n<code>2147483648</code>\n</pre> <pre><code>%time\ndivide(-2147483648, -1)\n</code></pre> <pre>\n<code>CPU times: user 3 \u00b5s, sys: 0 ns, total: 3 \u00b5s\nWall time: 6.68 \u00b5s\n</code>\n</pre> <pre>\n<code>2147483647</code>\n</pre> <pre><code>%time\ndivide(21474835, 7)\n</code></pre> <pre>\n<code>CPU times: user 5 \u00b5s, sys: 1 \u00b5s, total: 6 \u00b5s\nWall time: 10.3 \u00b5s\n</code>\n</pre> <pre>\n<code>3067833</code>\n</pre> <p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by 90 degrees (clockwise).</p> <p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p> <p> </p> <p>Example 1:</p> <pre>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n</pre> <p>Example 2:</p> <pre>Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul> <pre><code>import copy\n\nmatrix = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\n# new_matrix = copy.deepcopy(matrix)\nfor i in range(4):\n    for j in range(4):\n        neg_j = 4 - j - 1\n        matrix[i][j] = matrix[neg_j][i]\n\nmatrix\n</code></pre> <pre>\n<code>[[15, 13, 2, 15], [14, 3, 3, 13], [12, 6, 3, 2], [16, 2, 13, 15]]</code>\n</pre> <pre><code>import copy\n\nmatrix = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nnew_matrix = copy.deepcopy(matrix)\nfor i in range(4):\n    for j in range(4):\n        neg_j = 4 - j - 1\n        matrix[i][j] = new_matrix[neg_j][i]\n</code></pre> <pre><code>matrix\n</code></pre> <pre>\n<code>[[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]</code>\n</pre> <pre><code>def rotate(matrix):\n    n = len(matrix)\n    # Transpose\n    for i in range(n):\n        for j in range(i + 1, n):\n            matrix[j][i], matrix[i][j] = matrix[i][j], matrix[j][i]\n    # Reverse\n    for i in range(n):\n        for j in range(n // 2):\n            matrix[i][j], matrix[i][-j - 1] = matrix[i][-j - 1], matrix[i][j]\n\n\nmatrix = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotate(matrix)\nmatrix\n</code></pre> <pre>\n<code>[[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]</code>\n</pre> <p>Given an array of strings <code>strs</code>, group the anagrams together. You can return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p> </p> <p>Example 1:</p> <pre>Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p>Example 2:</p> <pre>Input: strs = [\"\"]\nOutput: [[\"\"]]\n</pre><p>Example 3:</p> <pre>Input: strs = [\"a\"]\nOutput: [[\"a\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 104</code></li> <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul> <pre><code>def group_anagram(strs):\n    sorted_strs = list(map(lambda x:\"\".join(sorted(x)), strs))\n    groups = {}\n    for i in range(len(strs)):\n        if sorted_strs[i] in groups:\n            groups[sorted_strs[i]].append(strs[i])\n        else:\n            groups[sorted_strs[i]]=[strs[i]]\n    result = []\n    for value in groups.values():\n        result.append(value)\n    return result\n</code></pre> <pre><code>strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\ngroup_anagram(strs)\n</code></pre> <pre>\n<code>[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]</code>\n</pre> <pre><code>strs = [\"a\"]\ngroup_anagram(strs)\n</code></pre> <pre>\n<code>[['a']]</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#1-add-two-numbers","title":"1. Add Two Numbers","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#2-longest-substring-without-repeating-characters","title":"2. Longest Substring Without Repeating Characters","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#3-longest-palindromic-substring","title":"3. Longest Palindromic Substring","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#4-reverse-integer","title":"4. Reverse Integer","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#5-string-to-integer-atoi","title":"5. String to Integer (atoi)","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#6-container-with-most-water","title":"6. Container With Most Water","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#7-letter-combinations-of-a-phone-number","title":"7. Letter Combinations of a Phone Number","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#8-divide-two-integers","title":"8. Divide Two Integers","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#9-rotate-image","title":"9. Rotate Image","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_1/#10-group-anagrams","title":"10. Group Anagrams","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/","title":"Problems Leetcode Medium 2","text":"<p>Given an array <code>nums</code> of distinct integers, return all the possible permutations. You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p>Example 2:</p> <pre>Input: nums = [0,1]\nOutput: [[0,1],[1,0]]\n</pre><p>Example 3:</p> <pre>Input: nums = [1]\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the integers of <code>nums</code> are unique.</li> </ul> <pre><code>def permute(n):\n    perms = []\n</code></pre> <pre><code>def permutation(nums):\n    perm = []\n    if len(nums)==2:\n        return [nums, [nums[1], nums[0]]]\n    for i\n    perm.append(permutation(nums[1:]))\n    return perm\n</code></pre> <pre><code>permutation([1,2,3])\n</code></pre> <pre>\n<code>[[[2, 3], [3, 2]]]</code>\n</pre> <p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p> <p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p> <p>You must\u00a0write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n</pre><p>Example 2:</p> <pre>Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n</pre><p>Example 3:</p> <pre>Input: nums = [], target = 0\nOutput: [-1,-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 105</code></li> <li><code>-109\u00a0&lt;= nums[i]\u00a0&lt;= 109</code></li> <li><code>nums</code> is a non-decreasing array.</li> <li><code>-109\u00a0&lt;= target\u00a0&lt;= 109</code></li> </ul> <p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n</pre> <p>Example 2:</p> <pre>Input: head = [1], n = 1\nOutput: []\n</pre> <p>Example 3:</p> <pre>Input: head = [1,2], n = 1\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>sz</code>.</li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p> </p> <p>Follow up: Could you do this in one pass?</p> <pre><code>def remove_nth_from_end(head, n):\n    if not head or not head.next:\n        return None\n    h1 = head\n    h2 = head\n    for i in range(n):\n        h1 = h1.next\n    while h1:\n        h1, h2 = h1.next, h2.next\n    if not h2.next:\n        h = head\n        while h.next.next:\n            h=h.next\n        h.next = None\n    else:\n        h2.val=h2.next.val\n        h2.next = h2.next.next\n    return head\n</code></pre> <p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n</pre> <p>Example 3:</p> <pre>Input: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-105 &lt;= nums[i] &lt;= 105</code></li> </ul> <pre><code>def two_sum(nums, target):\n    n = len(nums)\n    hash = {}\n    for i in range(n):\n        c = target-nums[i]\n        if c in hash.keys():\n            return [c, nums[i]]\n        else:\n            hash[nums[i]] = c\n</code></pre> <pre><code>two_sum(nums, 0)\n</code></pre> <pre>\n<code>[-1, 1]</code>\n</pre> <pre><code>nums =[-1,0,1,2,-1,-4,-2,-3,3,0,4]\n\nfor i in range(len(nums)):\n    new_nums = nums.copy()\n    new_nums = new_nums[i:]\n    two_result = two_sum(new_nums, nums[i])\n    if two_result:\n        print(two_result+[-nums[i]])\n</code></pre> <pre>\n<code>[-1, 0, 1]\n[1, -1, 0]\n[2, -1, -1]\n[-1, 3, -2]\n[-4, 3, 1]\n[-4, 0, 4]\n[-2, 0, 2]\n[-3, 0, 3]\n[3, 0, -3]\n</code>\n</pre> <pre><code>nums[i]\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code>def three_sum(nums):\n    n = len(nums)\n    def two_sum(nums, target):\n        n = len(nums)\n        hash = {}\n        for i in range(n):\n            c = target-nums[i]\n            if c in hash.keys():\n                return [c, nums[i]]\n            else:\n                hash[nums[i]] = c\n    results = []\n    for i in range(n):\n        new_nums = nums.copy()\n        new_nums[i]=1000\n        two_result = two_sum(new_nums, -nums[i])\n        if two_result:\n            results.append(sorted(two_result+[nums[i]]))\n    # print(results)\n    final_result = []\n    for result in results:\n        if result not in final_result:\n            final_result.append(result)\n    return final_result\n</code></pre> <pre><code>nums = [-1,0,1,2,-1,-4]\nthree_sum(nums)\n</code></pre> <pre>\n<code>[[-1, 0, 1], [-1, -1, 2]]</code>\n</pre> <pre><code>nums = [-1,0,1,2,-1,-4,-2,-3,3,0,4]\nthree_sum(nums)\n</code></pre> <pre>\n<code>[[-1, 0, 1], [-1, -1, 2], [-4, 1, 3], [-2, 0, 2], [-3, 1, 2], [-4, 0, 4]]</code>\n</pre> <p>Given <code>n</code> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre><p>Example 2:</p> <pre>Input: n = 1\nOutput: [\"()\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul> <p>There is an integer array <code>nums</code> sorted in ascending order (with distinct values).</p> <p>Prior to being passed to your function, <code>nums</code> is possibly rotated at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array <code>nums</code> after the possible rotation and an integer <code>target</code>, return the index of <code>target</code> if it is in <code>nums</code>, or <code>-1</code> if it is not in <code>nums</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n</pre><p>Example 2:</p> <pre>Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n</pre><p>Example 3:</p> <pre>Input: nums = [1], target = 0\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li>All values of <code>nums</code> are unique.</li> <li><code>nums</code> is an ascending array that is possibly rotated.</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul> <pre><code>def find_pivot(arr, start, end):\n    if start&gt;end:\n        return -1\n    middle = (start+end)//2\n    if arr[middle-1]&gt;arr[middle]:\n</code></pre> <p>Determine if a\u00a0<code>9 x 9</code> Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0according to the following rules:</p> <ol> <li>Each row\u00a0must contain the\u00a0digits\u00a0<code>1-9</code> without repetition.</li> <li>Each column must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> <li>Each of the nine\u00a0<code>3 x 3</code> sub-boxes of the grid must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> </ol> <p>Note:</p> <ul> <li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li> <li>Only the filled cells need to be validated according to the mentioned\u00a0rules.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 9</code></li> <li><code>board[i].length == 9</code></li> <li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li> </ul> <pre><code>board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\"7\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n</code></pre> <pre><code>def check_board(board):\n    def check_duplicate_arr(arr):\n        already_in = set()\n        for el in arr:\n            if el==\".\":\n                continue\n            if el in already_in:\n                return False\n            else:\n                already_in.add(el)\n        return True\n\n    def check_duplicate(mat):\n        for arr in mat:\n            if not check_duplicate_arr(arr):\n                return False\n        return True\n    def get_cols(board):\n        cols = []\n        for i in range(9):\n            col = []\n            for j in range(9):\n                col.append(board[j][i])\n            cols.append(col)\n        return cols\n\n    def get_box(board):\n        cols = []\n        i_start, j_start = 0, 0\n        turn = 0\n        while True:\n            if i_start&gt;6:\n                i_start=0\n            if j_start&gt;6:\n                j_start=0\n            col = []\n            for i in range(3):\n                for j in range(3):\n                    col.append(board[i_start+i][j_start+j])\n            cols.append(col)\n            if (turn+1)%3!=0:\n                i_start+=3\n            else:\n                j_start+=3\n            turn+=1\n            if turn ==9:\n                break\n        return cols\n\n    if not check_duplicate(board):\n        return False\n    cols = get_cols(board)\n    if not check_duplicate(cols):\n        return False\n    box = get_box(board)\n    if not check_duplicate(box):\n        return False\n    return True\n</code></pre> <pre><code>check_board(board)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>board = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\ncheck_board(board)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>def get_cols(board):\n    cols = []\n    for i in range(9):\n        col = []\n        for j in range(9):\n            col.append(board[j][i])\n        cols.append(col)\n    return cols\n</code></pre> <pre><code>get_cols(board)\n</code></pre> <pre>\n<code>[['5', '6', '.', '8', '4', '7', '.', '.', '.'],\n ['3', '.', '9', '.', '.', '.', '6', '.', '.'],\n ['.', '.', '8', '.', '.', '.', '.', '.', '.'],\n ['.', '1', '.', '.', '8', '.', '.', '4', '.'],\n ['7', '9', '.', '6', '.', '2', '.', '1', '8'],\n ['.', '5', '.', '.', '3', '.', '.', '9', '.'],\n ['.', '.', '.', '.', '.', '.', '2', '.', '.'],\n ['.', '.', '6', '.', '.', '.', '8', '.', '7'],\n ['.', '.', '7', '3', '1', '6', '.', '5', '9']]</code>\n</pre> <pre><code>def get_box(board):\n    cols = []\n    i_start, j_start = 0, 0\n    turn = 0\n    while True:\n        if i_start&gt;6:\n            i_start=0\n        if j_start&gt;6:\n            j_start=0\n        col = []\n        for i in range(3):\n            for j in range(3):\n                col.append(board[i_start+i][j_start+j])\n        cols.append(col)\n        if (turn+1)%3!=0:\n            i_start+=3\n        else:\n            j_start+=3\n        turn+=1\n        if turn ==9:\n            break\n    return cols\n</code></pre> <pre><code>get_box(board)\n</code></pre> <pre>\n<code>[['5', '3', '.', '6', '.', '.', '.', '9', '8'],\n ['8', '.', '.', '4', '.', '.', '7', '.', '.'],\n ['.', '6', '.', '.', '.', '.', '.', '.', '.'],\n ['.', '.', '.', '4', '1', '9', '.', '8', '.'],\n ['.', '7', '.', '1', '9', '5', '.', '.', '.'],\n ['.', '6', '.', '8', '.', '3', '.', '2', '.'],\n ['.', '.', '3', '.', '.', '1', '.', '.', '6'],\n ['2', '8', '.', '.', '.', '5', '.', '7', '9'],\n ['.', '.', '.', '.', '.', '.', '.', '6', '7']]</code>\n</pre> <pre><code>def check_duplicate(arr):\n    already_in = set()\n    for el in arr:\n        if el==\".\":\n            continue\n        if el in already_in:\n            return False\n        else:\n            already_in.add(el)\n    return True\n</code></pre> <pre><code>check_duplicate(board[0])\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:</p> <ul> <li><code>countAndSay(1) = \"1\"</code></li> <li><code>countAndSay(n)</code> is the way you would \"say\" the digit string from <code>countAndSay(n-1)</code>, which is then converted into a different digit string.</li> </ul> <p>To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</p> <p>For example, the saying and conversion for digit string <code>\"3322251\"</code>:</p> <p>Given a positive integer <code>n</code>, return the <code>nth</code> term of the count-and-say sequence.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 1\nOutput: \"1\"\nExplanation: This is the base case.\n</pre> <p>Example 2:</p> <pre>Input: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 30</code></li> </ul> <pre><code>def count(num):\n    count = 1\n    num_str = str(num)\n    nu = num_str[0]\n    string = \"\"\n    for i in range(len(num_str)-1):\n        new_nu = num_str[i+1]\n        if nu==new_nu:\n            count +=1\n        else:\n            string+=f\"{count}{nu}\"\n            count =1\n        nu = new_nu\n    string+=f\"{count}{nu}\"\n    return string\n</code></pre> <pre><code>count(111221)\n</code></pre> <pre>\n<code>'312211'</code>\n</pre> <pre><code>count_dict_reverse\n</code></pre> <pre>\n<code>{'one': 1,\n 'two': 2,\n 'three': 3,\n 'four': 4,\n 'five': 5,\n 'six': 6,\n 'seven': 7,\n 'eight': 8,\n 'nine': 9}</code>\n</pre> <pre><code>def count_and_say(n):\n    def count(num):\n        count = 1\n        num_str = str(num)\n        nu = num_str[0]\n        string = \"\"\n        for i in range(len(num_str)-1):\n            new_nu = num_str[i+1]\n            if nu==new_nu:\n                count +=1\n            else:\n                string+=f\"{count}{nu}\"\n                count =1\n            nu = new_nu\n        string+=f\"{count}{nu}\"\n        return string\n    if n==1:\n        return \"1\"\n    string = \"1\"\n    for i in range(n-1):\n        string=count(string)\n    return string\n</code></pre> <pre><code>count_and_say(7)\n</code></pre> <pre>\n<code>'13112221'</code>\n</pre> <pre><code>def count_and_say(n):\n    count_dict = {\n        1:\"one\",\n        2:\"two\",\n        3:\"three\",\n        4:\"four\",\n        5:\"five\",\n        6:\"six\",\n        7:\"seven\",\n        8:\"eight\",\n        9:\"nine\",  \n    }\n    if n==1:\n        return \"1\"\n    return count_and_say(n-1)\n</code></pre> <pre><code>count_and_say(2)\n</code></pre> <pre>\n<code>'1'</code>\n</pre> <p>Implement pow(x, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>xn</code>).</p> <p> </p> <p>Example 1:</p> <pre>Input: x = 2.00000, n = 10\nOutput: 1024.00000\n</pre> <p>Example 2:</p> <pre>Input: x = 2.10000, n = 3\nOutput: 9.26100\n</pre> <p>Example 3:</p> <pre>Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-100.0 &lt; x &lt; 100.0</code></li> <li><code>-231 &lt;= n &lt;= 231-1</code></li> <li><code>-104 &lt;= xn &lt;= 104</code></li> </ul> <pre><code>def my_pow(x, n):\n    if n ==1:\n        return x\n    if n&gt;0:\n        x_temp = x\n        for i in range((n-1)//2):\n            x_temp = x*x*x_temp\n    elif n&lt;0:\n        x_temp = 1\n        for i in range(-n//2):\n            x_temp = x_temp/(x*x)\n    else:\n        x_temp = 1\n    return x_temp\n</code></pre> <pre><code>my_pow(10, 3)\n</code></pre> <pre>\n<code>1000</code>\n</pre> <pre><code>my_pow(10, -4)\n</code></pre> <pre>\n<code>0.0001</code>\n</pre> <p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n</pre> <p>Example 2:</p> <pre>Input: nums = [1]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>Input: nums = [5,4,-1,7,8]\nOutput: 23\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 105</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> </ul> <p> </p> <p>Follow up: If you have figured out the <code>O(n)</code> solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>"},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#1-permutations","title":"1. Permutations","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#2-find-first-and-last-position-of-element-in-sorted-array","title":"2. Find First and Last Position of Element in Sorted Array","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#3-remove-nth-node-from-end-of-list","title":"3. Remove Nth Node From End of List","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#4-3sum","title":"4. 3Sum","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#5-generate-parentheses","title":"5. Generate Parentheses","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#6-search-in-rotated-sorted-array","title":"6. Search in Rotated Sorted Array","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#7-valid-sudoku","title":"7. Valid Sudoku","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#8-count-and-say","title":"8. Count and Say","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#9-powx-n","title":"9. Pow(x, n)","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_2/#10-maximum-subarray","title":"10. Maximum Subarray","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/","title":"Problems Leetcode Medium 3","text":"<p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p> <p>Begin with an empty string <code>s</code>. For each group of consecutive repeating characters in <code>chars</code>:</p> <ul> <li>If the group's length is <code>1</code>, append the character to <code>s</code>.</li> <li>Otherwise, append the character followed by the group's length.</li> </ul> <p>The compressed string <code>s</code> should not be returned separately, but instead, be stored in the input character array <code>chars</code>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p> <p>After you are done modifying the input array, return the new length of the array.</p> <p>You must write an algorithm that uses only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n</pre> <p>Example 2:</p> <pre>Input: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n</pre> <p>Example 3:</p> <pre>Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= chars.length &lt;= 2000</code></li> <li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li> </ul> <pre><code>def compress(chars):\n    count = 1\n    c = chars[0]\n    string = \"\"\n    j=0\n    for i in range(len(chars)-1):\n        new_c = chars[i+1]\n        if new_c==c:\n            count+=1\n        else:\n            if count&gt;1:\n                string+=f\"{c}{count}\"\n                chars[j]=c\n                j+=1\n                for n in str(count):\n                    chars[j]=n\n                    j+=1\n            else:\n                string+=c\n                chars[j]=c\n                j+=1\n            count=1\n        c = new_c\n    if count&gt;1:\n        string+=f\"{c}{count}\"\n        chars[j]=c\n        j+=1\n        for n in str(count):\n            chars[j]=n\n            j+=1\n    else:\n        string+=c\n        chars[j]=c\n    return len(string)\n</code></pre> <pre><code>chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nlen_ = compress(chars)\nlen_, chars[:len_]\n</code></pre> <pre>\n<code>(4, ['a', 'b', '1', '2'])</code>\n</pre> <p>Given an input string <code>s</code>, reverse the order of the words.</p> <p>A word is defined as a sequence of non-space characters. The words in <code>s</code> will be separated by at least one space.</p> <p>Return a string of the words in reverse order concatenated by a single space.</p> <p>Note that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n</pre> <p>Example 3:</p> <pre>Input: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>' '</code>.</li> <li>There is at least one word in <code>s</code>.</li> </ul> <p> </p> <p>Follow-up:\u00a0If the string data type is mutable in your language, can\u00a0you solve it\u00a0in-place\u00a0with\u00a0<code>O(1)</code>\u00a0extra space?</p> <pre><code>def reverse_words(s):\n    s_list = s.split()\n    s_list = s_list[::-1]\n    return \" \".join(s_list)\n</code></pre> <pre><code>s = \"  a good   example  \"\nreverse_words(s)\n</code></pre> <pre>\n<code>'example good a'</code>\n</pre> <pre><code>s = \"a good   example  \"\ns.split()\n</code></pre> <pre>\n<code>['a', 'good', 'example']</code>\n</pre> <p>Roman numerals are represented by seven different symbols:\u00a0<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p> <pre>Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> <p>For example,\u00a0<code>2</code> is written as <code>II</code>\u00a0in Roman numeral, just two one's added together. <code>12</code> is written as\u00a0<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.\u00a0</li> <li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.\u00a0</li> <li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li> </ul> <p>Given an integer, convert it to a roman numeral.</p> <p> </p> <p>Example 1:</p> <pre>Input: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.\n</pre> <p>Example 2:</p> <pre>Input: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\n</pre> <p>Example 3:</p> <pre>Input: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 3999</code></li> </ul> <pre><code>conversion = {\n    1000:\"M\",\n    900:\"CM\",\n    500:\"D\",\n    100:\"C\",\n    90:\"XC\",\n    50: \"L\",\n    40:\"XL\",\n    10:\"X\",\n    9:\"IX\",\n    5:\"V\",\n    4:\"IV\",\n    1:\"I\",\n}\nfactors = sorted(list(conversion.keys()))\nfactors = factors[::-1]\nfactors\n</code></pre> <pre>\n<code>[1000, 900, 500, 100, 90, 50, 40, 10, 9, 5, 4, 1]</code>\n</pre> <pre><code>2994%1000\n</code></pre> <pre>\n<code>994</code>\n</pre> <pre><code>def int_to_roman(num):\n    conversion = {\n        1000:\"M\",\n        900:\"CM\",\n        500:\"D\",\n        400:\"CD\",\n        100:\"C\",\n        90:\"XC\",\n        50: \"L\",\n        40:\"XL\",\n        10:\"X\",\n        9:\"IX\",\n        5:\"V\",\n        4:\"IV\",\n        1:\"I\",\n        }\n    factors = list(conversion.keys())\n    roman = \"\"\n    i=0\n    while num:\n        fact = factors[i]\n        times = num//fact\n        roman+=f\"{conversion[fact]}\"*times\n        num=num%fact\n        i+=1\n    return roman\n</code></pre> <pre><code>int_to_roman(3999)\n</code></pre> <pre>\n<code>'MMMCMXCIX'</code>\n</pre> <p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p> <p>Note:\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.</p> <p> </p> <p>Example 1:</p> <pre>Input: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\n</pre><p>Example 2:</p> <pre>Input: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li> <li><code>num1</code> and <code>num2</code> consist of digits only.</li> <li>Both <code>num1</code> and <code>num2</code>\u00a0do not contain any leading zero, except the number <code>0</code> itself.</li> </ul> <pre><code>def str_to_int(string):\n    num = 0\n    for i, s in enumerate(string):\n        num+=int(s)*10**(len(string)-i-1)\n    return num\n\ndef int_to_str(num):\n    num_str = \"\"\n    while num:\n        num_str+=str(num%10)\n        num = num//10\n    return num_str[::-1]\n</code></pre> <pre><code>def multiply(num1, num2):\n    num1_int = str_to_int(num1)\n    num2_int = str_to_int(num2)\n    num = num1_int*num2_int\n    final = int_to_str(num)\n    return final if final else \"0\"\n</code></pre> <pre><code>multiply(\"123\", \"456\")\n</code></pre> <pre>\n<code>'56088'</code>\n</pre> <p>Given the <code>head</code> of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.</p> <p> </p> <p>Example 1:</p> <pre>Input: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n</pre> <p>Example 2:</p> <pre>Input: head = [1,1,1,2,3]\nOutput: [2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be sorted in ascending order.</li> </ul> <pre><code>def sum_exist(arr, n):\n    if n in arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum(arr[i:j+1])==n:\n                return True\n    return False\n</code></pre> <pre><code>sum_exist([1,1,4,16,8], 20)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>def knaspack(A, B):\n    div = 0\n    while True:\n        if sum_exist(A, B):\n            return div\n        else:\n            div+=1\n            max_A = max(A)\n            if max_A&lt;=1:\n                return -1\n            A.remove(max_A)\n            A.append(max_A//2)\n    return -1\n</code></pre> <pre><code>arr = [2**28,2]\nn = 3\nknaspack(arr, n)\n</code></pre> <pre>\n<code>28</code>\n</pre> <pre><code>sum_exist([1,1,8], 10)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>def max_power(arr):\n    arr.sort()\n    arr = arr[::-1]\n    power = 0\n    i=0\n    while True:\n        new_power = arr[i]*(i+1)\n        if new_power&lt;power:\n            return power\n        else:\n            power = new_power\n            i+=1\n</code></pre> <pre><code>arr = [10, 20, 5, 25]\nmax_power(arr = arr)\n</code></pre> <pre>\n<code>40</code>\n</pre>"},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#1-string-compression","title":"1. String Compression","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#2-reverse-words-in-a-string","title":"2. Reverse Words in a String","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#3-integer-to-roman","title":"3. Integer to Roman","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#4-multiply-strings","title":"4. Multiply Strings","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#5-remove-duplicates-from-sorted-list-ii","title":"5. Remove Duplicates from Sorted List II","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#fractional-knapsack-trilogy","title":"Fractional Knapsack (Trilogy)","text":""},{"location":"Notes/DSA/Problems_Leetcode_Medium_3/#infinity-stones","title":"Infinity Stones","text":""},{"location":"Notes/DSA/Recursion/","title":"Recursion","text":"<p>Recursion is a technique by which a function makes one or more calls to itself during execution, or by which a data structure relies upon smaller instances of the very same type of structure in its representation.</p> <p>We will start by looking at some simple example of recursion.</p> <p>The factorial function can be defined recursively as follows: $$ \\begin{cases} 0! = 1 &amp; \\text{if} \\; n = 0 \\ n! = n \\times (n-1)! &amp; \\text{if} \\; n &gt; 0 \\end{cases} $$</p> <p>This definition is typical of many recursive definitions. First, it contains one or more base cases, which are defined nonrecursively in terms of fixed quantities. In this case, \\(n = 0\\) is the base case. It also contains one or more recursive cases, which are defined by appealing to the definition of the function being defined.</p> <p>Using this definition, we can write a recursive algorithm to compute the factorial of a number.</p> <pre><code>def factorial(n):\n    if n &lt;=1:\n        return 1\n    else:\n        return n * factorial(n-1)\n</code></pre> <pre><code>factorial(5)\n</code></pre> <pre>\n<code>120</code>\n</pre> <p>Here the recursion trace for the factorial function for \\(n = 5\\):</p> <p></p> <p>A recursion trace closely mirrors the programming language\u2019s execution of the recursion. In Python, each time a function (recursive or otherwise) is called, a structure known as an activation record or frame is created to store information about the progress of that invocation of the function. This activation record includes a namespace for storing the function call\u2019s parameters and local variables, and information about which command in the body of the function is currently executing.</p> <p>When the execution of a function leads to a nested function call, the execution of the former call is suspended and its activation record stores the place in the source code at which the flow of control should continue upon return of the nested call. This process is used both in the standard case of one function calling a different function, or in the recursive case in which a function invokes itself. The key point is that there is a different activation record for each active call.</p> <p>In an english ruler, for each inch, we place a tick with a numeric label. We denote the length of the tick designating a whole inch as the major tick length. Between the marks for whole inches, the ruler contains a series of minor ticks, placed at intervals of 1/2 inch, 1/4 inch, and so on. As the size of the interval decreases by half, the tick length decreases by one.</p> <p></p> <p>An interval with a central tick length \\(L\\ge 1\\) is composed of: * An interval with a central tick length \\(L \u2212 1\\) * A single tick of length \\(L\\) * An interval with a central tick length \\(L \u2212 1\\)</p> <p>Let\u2019s write a recursive function to draw an english ruler.</p> <pre><code>def draw_line(tick_length, tick_label=\"\"):\n    line = \"-\" * tick_length\n    if tick_label:\n        line += \" \" + tick_label\n    print(line)\n\ndef draw_interval(center_length):\n    if center_length &gt; 0:\n        draw_interval(center_length - 1)\n        draw_line(center_length)\n        draw_interval(center_length - 1)\n\ndef draw_ruler(num_inches, major_length):\n    draw_line(major_length, \"0\")\n    for j in range(1, 1 + num_inches):\n        draw_interval(major_length - 1)\n        draw_line(major_length, str(j))\n</code></pre> <pre><code>draw_interval(4)\n</code></pre> <pre>\n<code>-\n--\n-\n---\n-\n--\n-\n----\n-\n--\n-\n---\n-\n--\n-\n</code>\n</pre> <p></p> <pre><code>def ruler(n):\n    if n==0:\n        return\n    else:\n        ruler(n-1)\n        print(\"-\"*n)\n        ruler(n-1)\n</code></pre> <pre><code>ruler(4)\n</code></pre> <pre>\n<code>-\n--\n-\n---\n-\n--\n-\n----\n-\n--\n-\n---\n-\n--\n-\n</code>\n</pre> <p>When the sequence is sorted and indexable, for any index j, we know that all the values stored at indices \\(0, \\ldots , j \u2212 1\\) are less than or equal to the value at index j, and all the values stored at indices \\(j + 1, \\ldots , n \u2212 1\\) are greater than or equal to that at index j. This observation allows us to quickly \u201chome in\u201d on a search target using a variant of the children\u2019s game \u201chigh-low.\u201d We call an element of the sequence a candidate if, at the current stage of the search, we cannot rule out that this item matches the target. The algorithm maintains two parameters, <code>low</code> and <code>high</code>, such that all the candidate entries have index at least <code>low</code> and at most <code>high</code>. Initially, <code>low = 0</code> and <code>high = n \u2212 1</code>. We then compare the target value to the median candidate, that is, the item <code>data[mid]</code> with index $$ \\text{mid} = \\lfloor\\frac{low + high}{2}\\rfloor $$</p> <p>We consider three cases: * If the target equals <code>data[mid]</code>, then we have found the item we are looking for, and the search terminates successfully. * If <code>target &lt; data[mid]</code>, then we recur on the first half of the sequence, that is, on the interval of indices from low to mid \u2212 1. * If <code>target &gt; data[mid]</code>, then we recur on the second half of the sequence, that is, on the interval of indices from mid + 1 to high.</p> <pre><code>def binary_search(nums, target, low, high):\n    if low &gt; high:\n        return -1\n    mid = (low + high) // 2\n    if nums[mid] == target:\n        return mid\n    elif nums[mid] &gt; target:\n        return binary_search(nums, target, low, mid-1)\n    else:\n        return binary_search(nums, target, mid+1, high)   \n</code></pre> <pre><code>nums = [2,4,5,7,9,12,14,17,19,22,25,27,28,33,37]\ntarget = 22\nprint(binary_search(nums, target, 0, len(nums)-1))\n</code></pre> <pre>\n<code>9\n</code>\n</pre> <p></p> <p>The binary search is a very efficient algorithm for searching a sorted sequence. The time complexity is \\(O(\\log n)\\).</p> <p>Modern operating systems define file-system directories (which are also sometimes called \u201cfolders\u201d) in a recursive way. Namely, a file system consists of a top-level directory, and the contents of this directory consists of files and other directories, which in turn can contain files and other directories, and so on. </p> <p>Given the recursive nature of the file-system representation, it should not come as a surprise that many common behaviors of an operating system, such as copying a directory or deleting a directory, are implemented with recursive algorithms. In this section, we consider one such algorithm: computing the total disk usage for all files and directories nested within a particular directory.</p> <p></p> <p>The cumulative disk space for an entry can be computed with a simple recursive algorithm. It is equal to the immediate disk space used by the entry plus the sum of the cumulative disk space usage of any entries that are stored directly within the entry. For example, the cumulative disk space for cs016 is 249K because it uses 2K itself, 8K cumulatively in grades, 10K cumulatively in homeworks, and 229K cumulatively in programs. </p> <pre><code>import os\ndef disc_usage(path):\n    total = os.path.getsize(path)\n    if os.path.isdir(path):\n        for item in os.listdir(path):\n            total+=(disc_usage(os.path.join(path, item)))\n    print(\"{0:&lt;7}\".format(total), path)\n    return total\n</code></pre> <pre><code>totals = disc_usage('.')\n</code></pre> <pre>\n<code>4096    ./.ipynb_checkpoints\n12392   ./ADT.py\n306960  ./Doubly_Linked_List.html\n17897   ./Doubly_Linked_List.ipynb\n48797   ./images/0101.png\n8961    ./images/0102.png\n89628   ./images/0103.png\n51008   ./images/0104.png\n64979   ./images/0105.png\n43335   ./images/0301.png\n49306   ./images/0302.png\n54702   ./images/0303.png\n414812  ./images\n320239  ./LinkedList.html\n15506   ./LinkedList.ipynb\n294068  ./Recursion.html\n16544   ./Recursion.ipynb\n279768  ./temp.html\n41431   ./temp.ipynb\n289104  ./Trees.html\n11704   ./Trees.ipynb\n8380    ./__pycache__/ADT.cpython-310.pyc\n8380    ./__pycache__\n2036997 .\n</code>\n</pre> <pre><code>totals\n</code></pre> <pre>\n<code>2036997</code>\n</pre> <p>Fibonaaci numbers are defined recursively as follows: $$ \\begin{cases} f(0) = 0 &amp; \\text{if} \\; n = 0 \\ f(1) = 1 &amp; \\text{if} \\; n = 1 \\ f(n) = f(n-1) + f(n-2) &amp; \\text{if} \\; n &gt; 1 \\end{cases} $$</p> <p>One intuitive way to implement this using recursion is as follows:</p> <pre><code>def bad_fibonacci(n):\n    if n&lt;=1:\n        return n\n    else:\n        return bad_fibonacci(n-1) + bad_fibonacci(n-2)\n</code></pre> <pre><code>%%timeit\nbad_fibonacci(30)\n</code></pre> <pre>\n<code>224 ms \u00b1 7.23 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code>\n</pre> <p>However, the time complexity of this algorithm is \\(O(2^n)\\), which is not very practical for large \\(n\\). The same algorithm can be implemented using recursion with time complexity just \\(O(n)\\):</p> <pre><code>def good_fibo(n):\n    if n&lt;=1:\n        return (1, 0)\n    else:\n        a, b = good_fibo(n-1)\n    return (a+b, a)\n</code></pre> <pre><code>%%timeit\ngood_fibo(30)[0]\n</code></pre> <pre>\n<code>4.04 \u00b5s \u00b1 113 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\n</code>\n</pre> <p>In this game, Y=you are given a set of three pegs and \\(n\\) disks, with each disk a different size. Let's name the pegs A, B, and C, and let's number the disks from 1, the smallest disk, to \\(n\\), the largest disk. At the outset, all \\(n\\) disks are on peg A, in order of decreasing size from bottom to top, so that disk \\(n\\) is on the bottom and disk 1 is on the top. The goal is to move all nnn disks from one peg to another with constraint that no disk can be placed on top of a larger disk.</p> <p></p> <p>The problem can be solved recursively by applying the following algorithm:</p> <pre><code>def tower_of_hanoi(n, source, dest, temp):\n    if n == 1:\n        print('Move disk 1 from {} to {}'.format(source, dest))\n        return\n    tower_of_hanoi(n-1, source, temp, dest)\n    print('Move disk {} from {} to {}'.format(n, source, dest))\n    tower_of_hanoi(n-1, temp, dest, source)\n</code></pre> <pre><code>tower_of_hanoi(4, 'A', 'C', 'B')\n</code></pre> <pre>\n<code>Move disk 1 from A to B\nMove disk 2 from A to C\nMove disk 1 from B to C\nMove disk 3 from A to B\nMove disk 1 from C to A\nMove disk 2 from C to B\nMove disk 1 from A to B\nMove disk 4 from A to C\nMove disk 1 from B to C\nMove disk 2 from B to A\nMove disk 1 from C to A\nMove disk 3 from B to C\nMove disk 1 from A to B\nMove disk 2 from A to C\nMove disk 1 from B to C\n</code>\n</pre> <p>We can solve the summation problem using linear recursion by observing that the sum of all n integers in S is trivially 0, if n = 0, and otherwise that it is the sum of the first n \u2212 1 integers in S plus the last element in S.</p> <pre><code>def linear_sum(S, n):\n    if n == 0:\n        return 0\n    else:\n        return linear_sum(S, n-1) + S[n-1]\n</code></pre> <pre><code>S = [4,3,6,2,8]\nlinear_sum(S, len(S))\n</code></pre> <pre>\n<code>23</code>\n</pre> <p></p> <p>We can solve the problem using linear recursion, by observing that the reversal of a sequence can be achieved by swapping the first and last elements and then recursively reversing the remaining elements.</p> <pre><code>def linear_sum(S, sum=0):\n    if not S:\n        return sum\n    else:\n        return linear_sum(S[1:], sum+S[0])\n</code></pre> <pre><code>S = [4,3,6,2,8]\nlinear_sum(S)\n</code></pre> <pre>\n<code>23</code>\n</pre> <pre><code>def reverse(nums, start, stop):\n    if start &lt; stop:\n        nums[start], nums[stop] = nums[stop], nums[start]\n        reverse(nums, start+1, stop-1)\n    # return nums\n</code></pre> <pre><code>nums = [1,2,3,4,5,6,7,8,9,10]\nprint(reverse(nums, 0, len(nums)-1))\nnums\n</code></pre> <pre>\n<code>None\n</code>\n</pre> <pre>\n<code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>\n</pre> <p>Note that there are two implicit base case scenarios: When<code>start == stop</code>, the implicit range is empty, and when <code>start == stop\u22121</code>, the implicit range has only one element. In either of these cases, there is no need for action, as a sequence with zero elements or one element is trivially equal to its reversal. When otherwise invoking recursion, we are guaranteed to make progress towards a base case, as the difference, <code>stop\u2212start</code>, decreases by two with each call.</p> <p>A recursive definition of power function can be given as: $$ \\begin{align} f(x,n) &amp;= x^n &amp; \\text{if} \\; n = 0 \\         &amp;= f(x,n-1) * x &amp; \\text{if} \\; n &gt; 0 \\end{align} $$</p> <p>This definition leads to the following recursive algorithm:</p> <pre><code>def power(x,n):\n    if n == 0:\n        return 1\n    else:\n        return x * power(x, n-1)\n</code></pre> <pre><code>%%timeit\npower(1234,111)\n</code></pre> <pre>\n<code>17.6 \u00b5s \u00b1 409 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\n</code>\n</pre> <p>The algorithm runs in \\(O(n)\\) time, where \\(n\\) is the size of the input sequence. However, we can so better by using a more efficient algorithm which runs in \\(O(\\log n)\\) time.</p> <p>Let \\(k = \\lfloor n/2\\rfloor\\) denote the floor of the division (expressed as <code>n // 2</code> in Python). We consider the expression \\((x^k)^2\\). When \\(n\\) is even, \\(\\lfloor n/2\\rfloor = n/2\\) and therefore \\((x^k)^2 = (x^{n/2})^2=x^n\\). When n is odd, \\(\\lfloor n/2\\rfloor = (n-)/2\\) and \\((x^k)^2 = (x^{(n-1)/2})^2=x^{n-1}\\). This analysis leads to the following recursive definition: $$ f(x,n) \\begin{cases} &amp;= 1 &amp; \\text{if} \\; n = 0 \\ &amp;= xf(x,\\lfloor n/2 \\rfloor) &amp; \\text{if} \\; n &gt; 0 \\text{ is odd}\\ &amp;= f(x,\\lfloor n/2 \\rfloor) &amp; \\text{if} \\; n &gt; 0 \\text{ is even} \\end{cases} $$</p> <pre><code>def power(x, n):\n    if n==0:\n        return 1\n    else:\n        partial = power(x, n//2)\n        if n%2 == 0:\n            return partial * partial\n        else:\n            return partial * partial * x\n</code></pre> <pre><code>%%timeit\npower(1234,111)\n</code></pre> <pre>\n<code>2.02 \u00b5s \u00b1 44 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\n</code>\n</pre> <p>The problem, again is to sum a sequence of numbers.  Computing the sum of one or zero elements is trivial. With two or more elements, we can recursively compute the sum of the first half, and the sum of the second half, and add these sums together. Here is the algorithm:</p> <pre><code>def binary_sum(S, start, stop):\n    if start&gt;=stop:\n        return 0\n    elif start == stop-1:\n        return S[start]\n    else:\n        mid = (start + stop) // 2\n        return binary_sum(S, start, mid) + binary_sum(S, mid, stop)\n</code></pre> <pre><code>S = [4,3,6,2,8]\nbinary_sum(S, 0, len(S))\n</code></pre> <pre>\n<code>23</code>\n</pre> <p>The running time of this algorithm is \\(O(n)\\).</p> <p>In general, an algorithm that uses recursion typically has the following form: * Test for base cases We begin by testing for a set of base cases (there should be at least one). These base cases should be defined so that every possible chain of recursive calls will eventually reach a base case, and the handling of each base case should not use recursion. * Recur If not a base case, we perform one or more recursive calls. This recursive step may involve a test that decides which of several possible recursive calls to make. We should define each possible recursive call so that it makes progress towards a base case.</p> <p>To design a recursive algorithm for a given problem, it is useful to think of the different ways we might define subproblems that have the same general structure as the original problem. If one has difficulty finding the repetitive structure needed to design a recursive algorithm, it is sometimes useful to work out the problem on a few concrete examples to see how the subproblems should be defined.</p> <p>A successful recursive design sometimes requires that we redefine the original problem to facilitate similar-looking subproblems. Often, this involved reparameterizing the signature of the function. For example, when performing a binary search in a sequence, a natural function signature for a caller would appear as <code>binary_search(data, target)</code>. However, later, we defined our function with calling signature <code>binary_search(data, target, low, high</code>), using the additional parameters to demarcate sublists as the recursion proceeds. This change in parameterization is critical for binary search. If we had insisted on the cleaner signature, <code>binary_search(data, target)</code>, the only way to invoke a search on half the list would have been to make a new list instance with only those elements to send as the first parameter. However, making a copy of half the list would already take \\(O(n)\\) time, negating the whole benefit of the binary search algorithm.</p> <p>Describe a recursive algorithm for finding the maximum element in a sequence, S, of n elements. </p> <p>Base case: If n = 1, then the maximum element is the only element in the sequence. Return this element.</p> <p>Recur: If n &gt; 1, then the maximum element is the maximum of the first n\u22121 elements and the last element.</p> <pre><code>def find_max(S, n):\n    if n == 1:\n        return S[0]\n    else:\n\n        return max(S[n-1], find_max(S, n-1))\n</code></pre> <pre><code>S = [4,3,6,2,8, 3]\nfind_max(S, len(S))\n</code></pre> <pre>\n<code>8</code>\n</pre> <p>Describe a recursive function for converting a string of digits into the integer it represents. For example, 13531 represents the integer 13, 531.</p> <p>Base case: If the length of string is 0, return 0.</p> <p>Recur: If the length of string is &gt; 0, then the first character is the digit, and the rest of the string is the rest of the number.</p> <pre><code>def string_to_digit_recur(s, n):\n    if n == 0:\n        return 0\n    else:\n        return 10 * string_to_digit_recur(s, n-1) + int(s[n-1])\n</code></pre> <pre><code>string_to_digit_recur(\"123\",3)\n</code></pre> <pre>\n<code>123</code>\n</pre>"},{"location":"Notes/DSA/Recursion/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Recursion\"&gt;Recursion&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Some Examples</li> <ol><li>The Factorial Function</li> <li>Drawing an English Ruler</li> <li>Binary Search</li> <li>File System</li> <li>Some More Examples</li> <ol><li>Fibonacci Numbers</li> <li>Towers of Hanoi</li> <li>Summing a Sequence</li> <li>Reversing a Sequence with Recursion</li> <li>Computing Power</li> <li>Binary Sum</li> </ol> </ol> <p><li>Designing Recursive Algorithm</li></p> <ol><li>Parameterizing a Recursion</li> </ol> <p><li>Problems</li></p> <ol><li>1</li> <li>2</li> </ol>"},{"location":"Notes/DSA/Recursion/#recursion","title":"Recursion","text":""},{"location":"Notes/DSA/Recursion/#some-examples","title":"Some Examples","text":""},{"location":"Notes/DSA/Recursion/#the-factorial-function","title":"The Factorial Function","text":""},{"location":"Notes/DSA/Recursion/#drawing-an-english-ruler","title":"Drawing an English Ruler","text":""},{"location":"Notes/DSA/Recursion/#binary-search","title":"Binary Search","text":""},{"location":"Notes/DSA/Recursion/#file-system","title":"File System","text":""},{"location":"Notes/DSA/Recursion/#some-more-examples","title":"Some More Examples","text":""},{"location":"Notes/DSA/Recursion/#fibonacci-numbers","title":"Fibonacci Numbers","text":""},{"location":"Notes/DSA/Recursion/#towers-of-hanoi","title":"Towers of Hanoi","text":""},{"location":"Notes/DSA/Recursion/#summing-a-sequence","title":"Summing a Sequence","text":""},{"location":"Notes/DSA/Recursion/#reversing-a-sequence-with-recursion","title":"Reversing a Sequence with Recursion","text":""},{"location":"Notes/DSA/Recursion/#computing-power","title":"Computing Power","text":""},{"location":"Notes/DSA/Recursion/#binary-sum","title":"Binary Sum","text":""},{"location":"Notes/DSA/Recursion/#designing-recursive-algorithm","title":"Designing Recursive Algorithm","text":""},{"location":"Notes/DSA/Recursion/#parameterizing-a-recursion","title":"Parameterizing a Recursion","text":""},{"location":"Notes/DSA/Recursion/#problems","title":"Problems","text":""},{"location":"Notes/DSA/Recursion/#1","title":"1","text":""},{"location":"Notes/DSA/Recursion/#2","title":"2","text":""},{"location":"Notes/DSA/Stack_and_Queue/","title":"Stack and Queue","text":"<p>Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).</p> <p></p> <p></p> <ul> <li><code>push()</code>: to insert an element into the stack</li> <li><code>pop()</code>: to remove an element from the stack</li> <li><code>top()</code>: Returns the top element of the stack.</li> <li><code>isEmpty()</code>: returns true is stack is empty else false.</li> <li><code>size()</code>: returns the size of stack.</li> </ul> Operations Complexitypush()\u00a0O(1)pop()\u00a0O(1)isEmpty()\u00a0O(1)size()O(1) <ul> <li>Register Stack: This type of stack is also a memory element present in the memory unit and can handle a small amount of data only. The height of the register stack is always limited as the size of the register stack is very small compared to the memory.</li> <li>Memory Stack: This type of stack can handle a large amount of memory data. The height of the memory stack is flexible as it occupies a large amount of memory data. </li> </ul> <ul> <li>Redo-undo features at many places like editors, photoshop.</li> <li>Forward and backward features in web browsers</li> <li>Used in many algorithms like Tower of Hanoi, tree traversals, stock span problems, and histogram problems.</li> <li>In Memory management, any modern computer uses a stack as the primary management for a running purpose. Each program that is running in a computer system has its own memory allocations</li> <li>String reversal is also another application of stack. Here one by one each character gets inserted into the stack. So the first character of the string is on the bottom of the stack and the last element of a string is on the top of the stack. After Performing the pop operations on the stack we get a string in reverse order.</li> <li>Stack also helps in implementing function call in computers. The last called function is always completed first.</li> </ul> <p>There are two ways to implement a stack</p> <ul> <li>Using array</li> <li>Using linked list</li> </ul> <pre><code># Python program for implementation of stack\n\n# import maxsize from sys module\n# Used to return -infinite when stack is empty\nfrom sys import maxsize\n\n# Function to create a stack. It initializes size of stack as 0\ndef createStack():\n    stack = []\n    return stack\n\n# Stack is empty when stack size is 0\ndef isEmpty(stack):\n    return len(stack) == 0\n\n# Function to add an item to stack. It increases size by 1\ndef push(stack, item):\n    stack.append(item)\n    print(item + \" pushed to stack \")\n\n# Function to remove an item from stack. It decreases size by 1\ndef pop(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1) # return minus infinite\n\n    return stack.pop()\n\n# Function to return the top from stack without removing it\ndef peek(stack):\n    if (isEmpty(stack)):\n        return str(-maxsize -1) # return minus infinite\n    return stack[len(stack) - 1]\n\n# Driver program to test above functions   \nstack = createStack()\npush(stack, str(10))\npush(stack, str(20))\npush(stack, str(30))\nprint(pop(stack) + \" popped from stack\")\n</code></pre> <pre>\n<code>10 pushed to stack \n20 pushed to stack \n30 pushed to stack \n30 popped from stack\n</code>\n</pre> <pre><code># Python program for linked list implementation of stack\n\n# Class to represent a node\n\n\nclass StackNode:\n\n    # Constructor to initialize a node\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass Stack:\n\n    # Constructor to initialize the root of linked list\n    def __init__(self):\n        self.root = None\n\n    def isEmpty(self):\n        return True if self.root is None else False\n\n    def push(self, data):\n        newNode = StackNode(data)\n        newNode.next = self.root\n        self.root = newNode\n        print (\"% d pushed to stack\" % (data))\n\n    def pop(self):\n        if (self.isEmpty()):\n            return float(\"-inf\")\n        temp = self.root\n        self.root = self.root.next\n        popped = temp.data\n        return popped\n\n    def peek(self):\n        if self.isEmpty():\n            return float(\"-inf\")\n        return self.root.data\n\n\n# Driver code\nstack = Stack()\nstack.push(10)\nstack.push(20)\nstack.push(30)\n\nprint(\"% d popped from stack\" % (stack.pop()))\nprint(\"Top element is % d \" % (stack.peek()))\n</code></pre> <pre>\n<code> 10 pushed to stack\n 20 pushed to stack\n 30 pushed to stack\n 30 popped from stack\nTop element is  20 \n</code>\n</pre> <ul><li>Stack helps in managing data that follows the LIFO technique.</li><li>Stacks are be used for systematic Memory Management.</li><li>It is used in many virtual machines like JVM.</li><li>When a function is called, the local variables and other function parameters are stored in the stack and automatically destroyed once returned from the function. Hence, efficient function management.</li><li>Stacks are more secure and reliable as they do not get corrupted easily.</li><li>Stack allows control over memory allocation and deallocation.</li><li>Stack cleans up the objects automatically.</li></ul> <ul><li>Stack memory is of limited size.</li><li>The total of size of the stack must be defined before.</li><li>If too many objects are created then it can lead to stack overflow.</li><li>Random accessing is not possible in stack.</li><li>If the stack falls outside the memory it can lead to abnormal termination.</li></ul> <p>A queue is a linear data structure that is open at both ends and the operations are performed in First In First Out (FIFO) order.</p> <ol><li><code>Enqueue()</code>: Adds (or stores) an element to the end of the queue..</li><li><code>Dequeue()</code>: Removal of elements from the queue.</li><li><code>Peek()</code> or <code>front()</code> Acquires the data element available at the front node of the queue without deleting it.</li><li><code>rear()</code>: This operation returns the element at the rear end without removing it.</li><li><code>isFull()</code>: Validates if the queue is full.</li><li><code>isNull()</code>: Checks if the queue is empty.</li></ol> <p>There are five different types of queues that are used in different scenarios.</p> <p></p> <p>Circular Queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \u2018Ring Buffer\u2019. This queue is primarily used in the following cases:</p> <ol><li>Memory Management: The unused memory locations in the case of ordinary queues can be utilized in circular queues.</li><li>Traffic system: In a computer-controlled traffic system, circular queues are used to switch on the traffic lights one by one repeatedly as per the time set.</li><li>CPU Scheduling: Operating systems often maintain a queue of processes that are ready to execute or that are waiting for a particular event to occur.</li></ol> <p>In this type of Queue, the input can be taken from one side only(rear) and deletion of elements can be done from both sides(front and rear). This kind of Queue does not follow FIFO(first in first out).  This queue is used in cases where the consumption of the data needs to be in FIFO order but if there is a need to remove the recently inserted data for some reason and one such case can be irrelevant data, performance issue, etc. </p> <p></p> <p>In this type of Queue, the input can be taken from both sides(rear and front) and the deletion of the element can be done from only one side(front).  This queue is used in the case where the inputs have some priority order to be executed and the input can be placed even in the first place so that it is executed first. </p> <p></p> <p>Double Ended Queue is also a Queue data structure in which the insertion and deletion operations are performed at both the ends (front and rear). That means, we can insert at both front and rear positions and can delete from both front and rear positions.  Since Deque supports both stack and queue operations, it can be used as both. The problems where elements need to be removed and or added both ends can be efficiently solved using Deque.</p> <p></p> <p>A priority queue is a special type of queue in which each element is associated with a priority and is served according to its priority. There are two types of Priority Queues. We have:</p> <ol><li>Ascending Priority Queue: Element can be inserted arbitrarily but only smallest element can be removed. For example, suppose there is an array having elements 4, 2, 8 in the same order. So, while inserting the elements, the insertion will be in the same sequence but while deleting, the order will be 2, 4, 8.</li><li>Descending priority Queue: Element can be inserted arbitrarily but only the largest element can be removed first from the given Queue. For example, suppose there is an array having elements 4, 2, 8 in the same order. So, while inserting the elements, the insertion will be in the same sequence but while deleting, the order will be 8, 4, 2.</li></ol> <p>Priority queue can be implemented in various ways. The time complexity corresponding to these implemetetions are in in the following table:</p> Operation peek() insert() delete() Arrays O(n) O(1) O(n) Linked List O(1) O(n) O(1) Binary Heap O(1) O(log n) O(log n) Binary Search Tree O(1) O(log n) O(log n) <ul> <li>When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. </li> <li>When data is transferred asynchronously (data not necessarily received at the same rate as sent) between two processes. Examples include IO Buffers, pipes, etc. </li> <li>Memory management </li> <li>Traffic software ( Each  light get on one by one after every time of interval of time.)</li> </ul>"},{"location":"Notes/DSA/Stack_and_Queue/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Stack\"&gt;Stack&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Basic Operations on Stack</li> <li>Types of Stacks</li> <li>Applications of Stacks</li> <li>Implementation of Stack</li> <li>Advantages of Stack</li> <li>Disadvantages of Stack</li> </ol> <p><li>Queue</li></p> <ol><li>Basic Operations for Queue</li> <li>Different Types of Queues</li> <ol><li>Circular Queue</li> <li>Input Restricted Queue</li> <li>Output Restricted Queue</li> <li>Double Ended Queue (Deque)</li> <li>Priority Queue</li> </ol> <li>Applications of Queue</li> </ol>"},{"location":"Notes/DSA/Stack_and_Queue/#stack","title":"Stack","text":""},{"location":"Notes/DSA/Stack_and_Queue/#basic-operations-on-stack","title":"Basic Operations on Stack","text":""},{"location":"Notes/DSA/Stack_and_Queue/#types-of-stacks","title":"Types of Stacks","text":""},{"location":"Notes/DSA/Stack_and_Queue/#applications-of-stacks","title":"Applications of Stacks","text":""},{"location":"Notes/DSA/Stack_and_Queue/#implementation-of-stack","title":"Implementation of Stack","text":""},{"location":"Notes/DSA/Stack_and_Queue/#advantages-of-stack","title":"Advantages of Stack","text":""},{"location":"Notes/DSA/Stack_and_Queue/#disadvantages-of-stack","title":"Disadvantages of Stack","text":""},{"location":"Notes/DSA/Stack_and_Queue/#queue","title":"Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#basic-operations-for-queue","title":"Basic Operations for Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#different-types-of-queues","title":"Different Types of Queues","text":""},{"location":"Notes/DSA/Stack_and_Queue/#circular-queue","title":"Circular Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#input-restricted-queue","title":"Input Restricted Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#output-restricted-queue","title":"Output Restricted Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#double-ended-queue-deque","title":"Double Ended Queue (Deque)","text":""},{"location":"Notes/DSA/Stack_and_Queue/#priority-queue","title":"Priority Queue","text":""},{"location":"Notes/DSA/Stack_and_Queue/#applications-of-queue","title":"Applications of Queue","text":""},{"location":"Notes/DSA/Trees/","title":"Trees","text":"<p>A tree is an abstract data type that stores elements hierarchically. With the exception of the top element, each element in a tree has a parent element and zero or more children elements.</p> <p>Formally, we define a tree T as a set of nodes storing elements such that the nodes have a parent-child relationship that satisfies the following properties: * If T is nonempty, it has a special node, called the root of T , that has no parent. * Each node v of T different from the root has a unique parent node w; every node with parent w is a child of w.</p> <p></p> <p>Two nodes that are children of the same parent are siblings. A node v is external if v has no children. A node v is internal if it has one or more children. External nodes are also known as leaves.</p> <p>A node u is an ancestor of a node v if u = v or u is an ancestor of the parent of v. Conversely, we say that a node v is a descendant of a node u if u is an ancestor of v. In the figure, <code>cs252/</code> is an ancestor of <code>papers/</code>, and <code>pr3</code> is a descendant of <code>cs016/</code>.</p> <p>The subtree of T rooted at a node v is the tree consisting of all the descendants of v in T (including v itself). In the fugure, the subtree rooted at <code>cs016/</code> consists of the nodes <code>cs016/</code>, <code>grades</code>, <code>homeworks/</code>, <code>programs/</code>, <code>hw1</code>, <code>hw2</code>, <code>hw3</code>, <code>pr1</code>, <code>pr2</code>, and <code>pr3</code>.</p> <p>An edge of tree T is a pair of nodes (u, v) such that u is the parent of v, or vice versa. A path of T is a sequence of nodes such that any two consecutive nodes in the sequence form an edge. For example, the tree in the figure contains the path <code>(cs252/, projects/, demos/, market)</code>.</p> <p>A tree is ordered if there is a meaningful linear order among the children of each node; that is, we purposefully identify the children of a node as being the first, second, third, and so on. Such an order is usually visualized by arranging siblings left to right, according to their order.</p> <ul><li>Number of edges: An edge can be defined as the connection between two nodes. If a tree has N nodes then it will have (N-1) edges. There is only one path from each node to any other node of the tree.</li><li>Depth of a node: The depth of a node is defined as the length of the path from the root to that node. Each edge adds 1 unit of length to the path. So, it can also be defined as the number of edges in the path from the root of the tree to the node.</li><li>Height of a node: The height of a node can be defined as the length of the longest path from the node to a leaf node of the tree.</li><li>Height of the Tree: The height of a tree is the length of the longest path from the root of the tree to a leaf node of the tree.</li><li>Degree of a Node: The total count of subtrees attached to that node is called the degree of the node. The degree of a leaf node must be 0. The degree of a tree is the maximum degree of a node among all the nodes in the tree.</li></ul> <p>Let p be the position of a node of a tree T . The depth of p is the number of ancestors of p, excluding p itself. The depth of p can also be recursively defined as follows: - If p is the root, then the depth of p is 0. - Otherwise, the depth of p is one plus the depth of the parent of p.</p> <p>The height of a position p in a tree T is also defined recursively: - If p is a leaf, then the height of p is 0. - Otherwise, the height of p is one more than the maximum of the heights of p\u2019s children.</p> <p>The height of a nonempty tree T is the height of the root of T .</p> <p>The different types of tree data structures are as follows:</p> <p>1. General tree</p> <p>A general tree data structure has no restriction on the number of nodes. It means that a parent node can have any number of child nodes. \u00a0</p> <p>2. Binary tree \u00a0</p> <p>A node of a binary tree can have a maximum of two child nodes.</p> <p>3. Balanced tree</p> <p>If the height of the left sub-tree and the right sub-tree is equal or differs at most by 1, the tree is known as a balanced tree. \u00a0</p> <p>A tree whose elements have at most 2 children is called a binary tree. </p> <p>A tree is represented by a pointer to the topmost node of the tree. If the tree is empty, then the value of the root is NULL. </p> <p>A Tree node contains the following parts.  1. Every node has at most two children. 2. Each child node is labeled as being either a left child or a right child. 3. A left child precedes a right child in the order of children of a node.</p> <p>The subtree rooted at a left or right child of an internal node v is called a left subtree or right subtree, respectively, of v. A binary tree is proper if each node has either zero or two children. Some people also refer to such trees as being full binary trees. Thus, in a proper binary tree, every internal node has exactly two children. A binary tree that is not proper is improper.</p> <p>We can also define a binary tree in a recursive way such that a binary tree is either empty or consists of: - A node r, called the root of T , that stores an element - A binary tree (possibly empty), called the left subtree of T - A binary tree (possibly empty), called the right subtree of T</p> <p>A natural way to realize a binary tree T is to use a linked structure, with a node that maintains references to the element stored at a position p and to the nodes associated with the children and parent of p. If p is the root of T , then the parent field of p is None. Likewise, if p does not have a left child (respectively, right child), the associated field is None. The tree itself maintains an instance variable storing a reference to the root node (if any), and a variable, called size, that represents the overall number of nodes of T . </p> <p></p> <p>An alternative representation of a binary tree T is based on a way of numbering the positions of T . For every position p of T , let \\(f (p)\\) be the integer defined as follows. - If p is the root of T , then \\(f (p) = 0\\). - If p is the left child of position q, then \\(f (p) = 2 f (q) + 1\\). - If p is the right child of position q, then \\(f (p) = 2 f (q) + 2\\).</p> <p>The numbering function f is known as a level numbering of the positions in a binary tree T , for it numbers the positions on each level of T in increasing order from left to right. Note well that the level numbering is based on potential positions within the tree, not actual positions of a given tree, so they are not necessarily consecutive. For example, in the figure, there are no nodes with level numbering 13 or 14, because the node with level numbering 6 has no children.</p> <p></p> <p>One advantage of an array-based representation of a binary tree is that a position p can be represented by the single integer \\(f (p)\\), and that position-based methods such as root, parent, left, and right can be implemented using simple arithmetic operations on the number \\(f (p)\\). Based on our formula for the level numbering, the left child of p has index \\(2 f (p) + 1\\), the right child of p has index 2 \\(f (p) + 2\\), and the parent of p has index \\(\\lfloor( f (p) \u2212 1)/2\\rfloor\\).</p> <p>A Binary Tree is a full binary tree if every node has 0 or 2 children. The following are the examples of a full binary tree. We can also say a full binary tree is a binary tree in which all nodes except leaf nodes have two children. It is also known as a proper binary tree.</p> <pre>               18\n           /       \\  \n         15         30  \n        /  \\        /  \\\n      40    50    100   40\n\n\n             18\n           /    \\   \n         15     20    \n        /  \\       \n      40    50   \n    /   \\\n   30   50\n\n\n               18\n            /     \\  \n          40       30  \n                   /  \\\n                 100   40</pre> <p>A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible.</p> <p>A complete binary tree is just like a full binary tree, but with three major differences:</p> <ul> <li>Every level must be completely filled</li> <li>All the leaf elements must lean towards the left.</li> <li>The last leaf element might not have a right sibling i.e. a complete binary tree doesn\u2019t have to be a full binary tree.</li> </ul> <pre>               18\n           /       \\  \n         15         30  \n        /  \\        /  \\\n      40    50    100   40\n\n\n               18\n           /       \\  \n         15         30  \n        /  \\        /  \\\n      40    50    100   40\n     /  \\   /\n    8   7  9 </pre> <p>A Binary tree is a Perfect Binary Tree in which all the internal nodes have two children and all leaf nodes are at the same level. </p> <pre>               18\n           /       \\  \n         15         30  \n        /  \\        /  \\\n      40    50    100   40\n\n\n               18\n           /       \\  \n         15         30  </pre> <p>A balanced binary tree, also referred to as a height-balanced binary tree, is defined as a binary tree in which the height of the left and right subtree of any node differ by not more than 1. Furthermore, the height of the tree is O(Log n) where n is the number of nodes. </p> <p> </p> <p></p> <p>A Tree where every internal node has one child. Such trees are performance-wise same as linked list. </p> <p>A degenerate or pathological tree is the tree having a single child either left or right.</p> <pre>      10\n      /\n    20\n     \\\n     30\n      \\\n      40    </pre> <p>A binary tree is binary search tree if it satisfies the following property: 1. All nodes of left subtree are less than the root node 2. All nodes of right subtree are more than the root node 3. Both subtrees of each node are also BSTs i.e. they have the above two properties</p> <p></p> <p>A Heap is a special Tree-based data structure in which the tree is a complete binary tree. It has the following properties:</p> <ol> <li>It\u2019s a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.</li> </ol> <ol> <li>A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.</li> </ol> <pre>            10                      10\n         /      \\               /       \\  \n       20        100          15         30  \n      /                      /  \\        /  \\\n    30                     40    50    100   40\n</pre> <ul><li>Heapify: a process of creating a heap from an array.</li><li>Insertion: process to insert an element in existing heap time complexity O(log N).</li><li>Deletion: deleting the top element of the heap or the highest priority element, and then organizing the heap and returning the element with time complexity O(log N).</li><li>Peek: to check or find the most prior element in the heap, (max or min element for max and min heap).</li></ul> <ul> <li>Heap Sort uses Binary Heap to sort an array in O(nLogn) time.</li> <li>Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time.</li> <li>The priority queues are especially used in Graph Algorithms like Dijkstra\u2019s Shortest Path and Prim\u2019s Minimum Spanning Tree.</li> <li>Many problems can be efficiently solved using Heaps. For example</li> <li>K\u2019th Largest Element in an array.</li> <li>Sort an almost sorted array</li> <li>Merge K Sorted Arrays.</li> </ul> <pre><code># A Python program to demonstrate common binary heap operations\n\n# Import the heap functions from python library\nfrom heapq import heappush, heappop, heapify \n\n# heappop - pop and return the smallest element from heap\n# heappush - push the value item onto the heap, maintaining\n#             heap invarient\n# heapify - transform list into heap, in place, in linear time\n\n# A class for Min Heap\nclass MinHeap:\n\n    # Constructor to initialize a heap\n    def __init__(self):\n        self.heap = [] \n\n    def parent(self, i):\n        return (i-1)//2\n\n    # Inserts a new key 'k'\n    def insertKey(self, k):\n        heappush(self.heap, k)           \n\n    # Decrease value of key at index 'i' to new_val\n    # It is assumed that new_val is smaller than heap[i]\n    def decreaseKey(self, i, new_val):\n        self.heap[i]  = new_val \n        while(i != 0 and self.heap[self.parent(i)] &gt; self.heap[i]):\n            # Swap heap[i] with heap[parent(i)]\n            self.heap[i] , self.heap[self.parent(i)] = (\n            self.heap[self.parent(i)], self.heap[i])\n\n    # Method to remove minium element from min heap\n    def extractMin(self):\n        return heappop(self.heap)\n\n    # This functon deletes key at index i. It first reduces\n    # value to minus infinite and then calls extractMin()\n    def deleteKey(self, i):\n        self.decreaseKey(i, float(\"-inf\"))\n        self.extractMin()\n\n    # Get the minimum element from the heap\n    def getMin(self):\n        return self.heap[0]\n\n# Driver pgoratm to test above function\nheapObj = MinHeap()\nheapObj.insertKey(3)\nheapObj.insertKey(2)\nheapObj.deleteKey(1)\nheapObj.insertKey(15)\nheapObj.insertKey(5)\nheapObj.insertKey(4)\nheapObj.insertKey(45)\n\nprint(heapObj.extractMin())\nprint(heapObj.getMin())\nheapObj.decreaseKey(2, 1)\nprint(heapObj.getMin())\n</code></pre> <pre>\n<code>2\n4\n1\n</code>\n</pre>"},{"location":"Notes/DSA/Trees/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Tree\"&gt;Tree&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Other Node Relationships</li> <li>Edges and Paths in Trees</li> <li>Ordered Trees</li> <li>Some More Properties</li> <li>Depth of a Node</li> <li>Height of a Node</li> <li>Types of Tree data structures</li> </ol> <p><li>Binary Tree</li></p> <ol><li>Represenation</li> <li>A Recursive Binary Tree Definition</li> <li>Linked Structure for Binary Trees</li> <li>Array-Based Representation of a Binary Tree</li> <li>Types of Binary Tree</li> <ol><li>Full Binary Tree</li> <li>Complete Binary Tree</li> <li>Perfect Binary Tree</li> <li>Balanced Binary Tree</li> <li>Degenerate Binary Tree</li> <li>Binary Search Tree</li> </ol> </ol> <p><li>Heap</li></p> <ol><li>Operations of Heap</li> <li>Applications of Heaps</li> </ol>"},{"location":"Notes/DSA/Trees/#tree","title":"Tree","text":""},{"location":"Notes/DSA/Trees/#other-node-relationships","title":"Other Node Relationships","text":""},{"location":"Notes/DSA/Trees/#edges-and-paths-in-trees","title":"Edges and Paths in Trees","text":""},{"location":"Notes/DSA/Trees/#ordered-trees","title":"Ordered Trees","text":""},{"location":"Notes/DSA/Trees/#some-more-properties","title":"Some More Properties","text":""},{"location":"Notes/DSA/Trees/#depth-of-a-node","title":"Depth of a Node","text":""},{"location":"Notes/DSA/Trees/#height-of-a-node","title":"Height of a Node","text":""},{"location":"Notes/DSA/Trees/#types-of-tree-data-structures","title":"Types of Tree data structures","text":""},{"location":"Notes/DSA/Trees/#binary-tree","title":"Binary Tree","text":""},{"location":"Notes/DSA/Trees/#represenation","title":"Represenation","text":""},{"location":"Notes/DSA/Trees/#a-recursive-binary-tree-definition","title":"A Recursive Binary Tree Definition","text":""},{"location":"Notes/DSA/Trees/#linked-structure-for-binary-trees","title":"Linked Structure for Binary Trees","text":""},{"location":"Notes/DSA/Trees/#array-based-representation-of-a-binary-tree","title":"Array-Based Representation of a Binary Tree","text":""},{"location":"Notes/DSA/Trees/#types-of-binary-tree","title":"Types of Binary Tree","text":""},{"location":"Notes/DSA/Trees/#full-binary-tree","title":"Full Binary Tree","text":""},{"location":"Notes/DSA/Trees/#complete-binary-tree","title":"Complete Binary Tree","text":""},{"location":"Notes/DSA/Trees/#perfect-binary-tree","title":"Perfect Binary Tree","text":""},{"location":"Notes/DSA/Trees/#balanced-binary-tree","title":"Balanced Binary Tree","text":""},{"location":"Notes/DSA/Trees/#degenerate-binary-tree","title":"Degenerate Binary Tree","text":""},{"location":"Notes/DSA/Trees/#binary-search-tree","title":"Binary Search Tree","text":""},{"location":"Notes/DSA/Trees/#heap","title":"Heap","text":""},{"location":"Notes/DSA/Trees/#operations-of-heap","title":"Operations of Heap","text":""},{"location":"Notes/DSA/Trees/#applications-of-heaps","title":"Applications of Heaps","text":""},{"location":"Notes/Finance/Black_Scholes_Model/","title":"Black Scholes Model","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nfrom scipy.stats import norm\nimport datetime\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</code></pre> <p>Developed in 1973 by Fischer Black, Robert Merton, and Myron Scholes, the Black-Scholes model was the first widely used mathematical method to calculate the theoretical value of an option contract, using current stock prices, expected dividends, the option's strike price, expected interest rates, time to expiration, and expected volatility.</p> <p>The model shows that the option has a unique price given the risk of the security and its expected return. The model is based on a partial differential equation (PDE), the so-called Black-Scholes equation, from which one can deduce the Black-Scholes formula, which gives a theoretical estimate of the correct price of European stock options.</p> <p>The original Black-Scholes model is based on a core assumption that the market consists of at least one risky asset (such as a stock) and one (essentially) risk-free asset, such as a money market fund, cash or a government bond. In addition, it assumes three properties of the two assets, and four of the market itself.</p> <p>Assumptions about the assets in the market are: </p> <ol> <li>The rate of return on the risk-free asset is constant and known. This behaves as interest rate.</li> </ol> <ol> <li>The riky asset follows geometric Brownian motion, which is a continuous-time stochastic process. That is, the instantaneous log return of the risky asset\u2019s price is assumed to behave as an infinitesimal random walk with constant drift and volatility</li> </ol> <ol> <li>The risky asset pays no dividends.</li> </ol> <p>Here are the four market assumptions:</p> <ol> <li>The market is complete, which means that there are no arbitrage (risk-free profit) opportunities.</li> <li>It is possible to borrow and lend any amount of cash at the same rate as the interest rate of the risk-free asset</li> <li>It is possible to buy and sell any amount of the stock (including short selling)</li> <li>There are no transaction costs in the market (i.e. no commission for buying or selling securities or derivative instruments)</li> </ol> <p>Of course, the assumptions are not realistic, but they are useful for the purpose of the model.</p> <p>In subsequent extensions of the original model, these assumptions have been revised to adjust for dynamic interest rates for the risk-free asset (Merton, 1976), transaction costs for buying and selling (Ingersoll, 1976) and dividend payouts for the risky asset (Whaley, 1981).</p> <p>With these assumptions, suppose there is a derivative security also trading in this market. It is specified that this security will have a certain payoff at a specified date in the future, depending on the values taken by the stock up to that date. Even though the path the stock price will take in the future is unknown, the derivative's price can be determined at the current time. For the special case of a European call or put option, Black and Scholes showed that \"it is possible to create a hedged position, consisting of a long position in the stock and a short position in the option, whose value will not depend on the price of the stock\". Their dynamic hedging strategy led to a partial differential equation which governs the price of the option. Its solution is given by the Black\u2013Scholes formula.</p> <p>Let's define some notations.</p> <p>\\(t\\) is a time usually in years. \\(t=0\\) is the current time.</p> <p>\\(r\\) is the annualized risk-free interest rate, continuously compounded.</p> <p>\\(S(t)\\) is the price of the underlying asset at time \\(t\\).</p> <p>\\(\\mu\\)  is the drift rate of \\(S\\), annualized.</p> <p>\\(\\sigma\\)  is the standard deviation of the stock's returns. This is the square root of the quadratic variation of the stock's log price process, a measure of its volatility.</p> <p>\\(V(S,t)\\) is the price of the option as a function of the underlying asset \\(S\\) at time \\(t\\), in particular: - \\(C(S,t)\\) is the price of a European call option - \\(P(S,t)\\) is the price of a European put option</p> <p>\\(T\\) is the time to maturity of the option, in years. \\(\\tau = T-t\\) is the time to maturity of the option, in years. \\(K\\) is the strike price of the option.</p> <p>\\(N(x)\\) denotes the standard normal cumulative distribution function:</p> <p>\\({\\displaystyle N(x)={\\frac {1}{\\sqrt {2\\pi }}}\\int _{-\\infty }^{x}e^{-z^{2}/2}\\,dz.}\\)</p> <p>\\(N'(x)\\) denotes the standard normal probability density function:</p> <p>\\({\\displaystyle N'(x)={\\frac {dN(x)}{dx}}={\\frac {1}{\\sqrt {2\\pi }}}e^{-x^{2}/2}.}\\)</p> <p>BS equation describes the price of an option as a function of the underlying asset price \\(S\\) and time \\(t\\). The equation is a partial differential equation (PDE) of the second order in \\(S\\) and the first order in \\(t\\). We have</p> <p>\\({\\displaystyle {\\frac {\\partial V}{\\partial t}}+rS{\\frac {\\partial V}{\\partial S}}+{\\frac {1}{2}}\\sigma ^{2}S^{2}{\\frac {\\partial ^{2}V}{\\partial S^{2}}}-rV=0}\\)</p> <p>Let's rewrite the equation as: $$ {\\frac {\\partial V}{\\partial t}}+{\\frac {1}{2}}\\sigma ^{2}S^{2}{\\frac {\\partial ^{2}V}{\\partial S^{2}}} = rV-rS{\\frac {\\partial V}{\\partial S}} $$</p> <p>In terms of greeks, we have $$ \\Theta+{\\frac {1}{2}}\\sigma ^{2}S^{2}\\Tau = rV-rS\\Delta $$</p> <p>To solve the equation, we need to specify the boundary conditions. The boundary conditions are the values of the option price at the boundaries of the domain of the option price. In the case of a European option, the boundary conditions are the payoff of the option at maturity. For a call option, the payoff is \\(S-K\\) if \\(S&gt;K\\) and zero otherwise. For a put option, the payoff is \\(K-S\\) if \\(S&lt;K\\) and zero otherwise. Therefore, the boundary conditions are</p> <p>\\({\\displaystyle C(S,T)=\\max (S-K,0)}\\)</p> <p>and</p> <p>\\({\\displaystyle P(S,T)=\\max (K-S,0)}\\) </p> <p>The value of a call option for a non-dividend-paying underlying stock in terms of the Black\u2013Scholes parameters is:</p> \\[ {\\displaystyle {\\begin{aligned}C(S_{t},t)&amp;=N(d_{1})S_{t}-N(d_{2})Ke^{-r(T-t)}\\\\d_{1}&amp;={\\frac {1}{\\sigma {\\sqrt {T-t}}}}\\left[\\ln \\left({\\frac {S_{t}}{K}}\\right)+\\left(r+{\\frac {\\sigma ^{2}}{2}}\\right)(T-t)\\right]\\\\d_{2}&amp;=d_{1}-\\sigma {\\sqrt {T-t}}\\\\\\end{aligned}}} \\] <p>For a put option, the value is:</p> \\[ {\\displaystyle {\\begin{aligned}P(S_{t},t)&amp;=Ke^{-r(T-t)}-S_{t}+C(S_{t},t)\\\\&amp;=N(-d_{2})Ke^{-r(T-t)}-N(-d_{1})S_{t}\\end{aligned}}\\,} \\] <p>The function \\(N(\u30fb)\\) represents the cumulative distribution function for a normal distribution and may be thought of as \u2018the probability that a random variable is less or equal to its input. See the terminology section above for more details.</p> <p>Very informally, the two terms in the sum given by the Black-Scholes formula may be thought of as \u2018the current price of the stock weighted by the probability that you will exercise your option to buy the stock\u2019 minus \u2018the discounted price of exercising the option weighted by the probability that you will exercise the option\u2019, or simply \u2018what you are going to get\u2019 minus \u2018what you are going to pay\u2019</p> <p>We see, from the formula that in order to calculate the price of a call option, we need to know the following parameters: 1. \\(S_{t}\\), the current price of the underlying asset 2. \\(K\\), the strike price of the option 3. \\(r\\), the risk-free interest rate 4. \\(T-t\\), the time to maturity of the option 5. \\(\\sigma\\), the volatility of the underlying asset</p> <p>Here, we'll give an example of how to calculate the price of a European call option using the Black-Scholes formula. We'll use Tesla.</p> <p>The current price of TSLA today (6 Jan 2023) is 110.34. We'll buy a call option trading at a strike price of 120. Suppose the option strike date of April 21 2022. We'll be using the US governments' 10Y bond rate as risk free rate. It is currently trading at 3.72% or 0.0372.</p> <p>Only thing which remains is the volatility \\(\\sigma\\). We can estimate any stock\u2019s volatility by observing its historical prices, or, even simpler, by calculating other option prices for the same stock at different maturity/expiration dates (T) and exercise/strike prices (X), if we know they have been set according to a Black-Scholes model. The resulting value, \\(\\sigma\\), is a number between 0 and 1, representing the market\u2019s implied volatility for the stock. We'll talk about this in the next section. We'll calculate the volatility based on historical data. Using the log returns of the stock, we can calculate the volatility as follows: $$ \\sigma = \\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(\\ln(S_{i})-\\ln(S_{i-1}))^{2}} $$ where \\(n\\) is the number of observations, \\(S_{i}\\) is the price of the stock at time \\(i\\) and \\(S_{i-1}\\) is the price of the stock at time \\(i-1\\).</p> <pre><code>df = pd.read_csv(\"../../Data/Stocks/nasdaq200/TSLA.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ndf = df[df.index&gt;=datetime.datetime(2016,1,1)]\nreturn_ = df[\"Close\"].pct_change(1).dropna()\nlog_return = np.log(1+return_)\nsigma = log_return.std()*np.sqrt(252)\nprint(sigma)\n</code></pre> <pre>\n<code>0.5854294125474527\n</code>\n</pre> <pre><code>today = datetime.datetime.today()\napril_expiry_date = datetime.datetime(today.year, 4, 21)\n\nnum_days = (april_expiry_date - today).days\nprint(num_days)\n</code></pre> <pre>\n<code>103\n</code>\n</pre> <pre><code>S = 110.34\nK = 120\nr = 0.0342\ntau = num_days/252\n</code></pre> <pre><code>def d1(S, K, r, sigma, tau):\n    return (np.log(S/K) + (r + sigma**2/2)*tau)/(sigma*np.sqrt(tau))\n\ndef d2(S, K, r, sigma, tau):\n    return (np.log(S/K) + (r - sigma**2/2)*tau)/(sigma*np.sqrt(tau))\n\ndef call_price(sigma, S, K, r, tau):\n    return S*norm.cdf(d1(S, K, r, sigma, tau)) - K*np.exp(-r*tau)*norm.cdf(d2(S, K, r, sigma, tau))\n\ndef put_price(sigma, S, K, r, tau):\n    return K*np.exp(-r*tau)*norm.cdf(-d2(S, K, r, sigma, tau)) - S*norm.cdf(-d1(S, K, r, sigma, tau))\n</code></pre> <pre><code>price = call_price(sigma, S, K, r, tau)\nprint(price)\n</code></pre> <pre>\n<code>13.267939948942484\n</code>\n</pre> <p>Looking for the option chain at the internet, we find that the option is trading at 13.86. The difference is mainly because we have used the volatility calculated from historical data while the BS model uses implied volatilities, which may be different from historical volatilities.</p> <p>Here, we'll do a simple implementation of the Black-Scholes formula in Python.</p> <pre><code>class BlackScholes:\n    def __init__(self) -&gt; None:\n        pass\n\n    def __d1(self, S, K, r, sigma, tau):\n        multiplier = 1 / (sigma * np.sqrt(tau)+1e-10)\n        term1 = np.log(S / K)\n        term2 = (r + sigma**2 / 2) * tau\n        return multiplier * (term1 + term2)\n\n    def __d2(self, S, K, r, sigma, tau):\n        d1 = self.__d1(S, K, r, sigma, tau)\n        return d1 - sigma * np.sqrt(tau)\n\n    def call(self, S, K, r, sigma, tau):\n\"\"\"\n        Calculates the price of a call option using the Black-Scholes model.\n\n        Parameters\n        ----------\n        S : float\n            The current price of the underlying asset.\n        K : float\n            The strike price of the option.\n        r : float\n            The risk-free interest rate.\n        sigma : float\n            The volatility of the underlying asset.\n        tau : float\n            The time to maturity of the option in years.\n\n        Returns\n        -------\n        float\n            The price of the call option.\n        \"\"\"\n        d1 = self.__d1(S, K, r, sigma, tau)\n        d2 = self.__d2(S, K, r, sigma, tau)\n        term_1 = S * norm.cdf(d1)\n        term_2 = K * np.exp(-r * tau) * norm.cdf(d2)\n        return term_1 - term_2\n\n    def put(self, S, K, r, sigma, tau):\n\"\"\"\n        Calculates the price of a put option using the Black-Scholes model.\n\n        Parameters\n        ----------\n        S : float\n            The current price of the underlying asset.\n        K : float\n            The strike price of the option.\n        r : float\n            The risk-free interest rate.\n        sigma : float\n            The volatility of the underlying asset.\n        tau : float\n            The time to maturity of the option in years.\n\n        Returns\n        -------\n        float\n            The price of the put option.\n        \"\"\"\n        d1 = self.__d1(S, K, r, sigma, tau)\n        d2 = self.__d2(S, K, r, sigma, tau)\n        term_1 = K * np.exp(-r * tau) * norm.cdf(-d2)\n        term_2 = S * norm.cdf(-d1)\n        return term_1 - term_2\n</code></pre> <pre><code>S = 110.34\nK = 120\nr = 0.0342\nnum_days = 1\ntau = num_days/252\nsigma = 0.5\nbs = BlackScholes()\ncall_price = bs.call(S, K, r, sigma, tau)\nput_price = bs.put(S, K, r, sigma, tau)\nprint(\"Call Price\", call_price)\nprint(\"Put Price\", put_price)\nprint(S+put_price)\nprint(S+call_price)\n</code></pre> <pre>\n<code>Call Price 0.004372032161472195\nPut Price 9.648087422927802\n119.9880874229278\n110.34437203216147\n</code>\n</pre> <pre><code>S = 110.34\nK = 100\nr = 0.0342\nnum_days = 1\ntau = num_days/252\nsigma = 0.5\nbs = BlackScholes()\ncall_price = bs.call(S, K, r, sigma, tau)\nput_price = bs.put(S, K, r, sigma, tau)\nprint(\"Call Price\", call_price)\nprint(\"Put Price\", put_price)\nprint(S+put_price)\n</code></pre> <pre>\n<code>Call Price 10.354368191030673\nPut Price 0.0007976833359694818\n110.34079768333598\n</code>\n</pre> <p>\"The Greeks\" measure the sensitivity of the value of a derivative product or a financial portfolio to changes in parameter values while holding the other parameters fixed. They are partial derivatives of the price with respect to the parameter values. For details, see the Options notebook.</p> <p>The greeks can directly be calculated by taking derivatives of the Black\u2013Scholes formula.</p> <p>Delta \\(\\mathbf{\\left({\\frac {\\partial V}{\\partial S}}\\right)}\\)</p> \\[ N(d_1) \\] <p>Gamma \\(\\left(\\mathbf{{\\frac {\\partial ^{2}V}{\\partial S^{2}}}}\\right)\\)</p> <p>$\\({\\frac {N'(d_{1})}{S\\sigma {\\sqrt {T-t}}}}\\$\\)</p> <p>Vega \\(\\left(\\mathbf{{\\displaystyle {\\frac {\\partial V}{\\partial \\sigma }}}}\\right)\\)</p> \\[SN'(d_{1}){\\sqrt {T-t}}\\,\\] <p>Theta \\(\\left(\\mathbf{{\\frac  {\\partial V}{\\partial t}}}\\right)\\)</p> \\[{\\displaystyle -{\\frac {SN'(d_{1})\\sigma }{2{\\sqrt {T-t}}}}-rKe^{-r(T-t)}N(d_{2})\\,}\\] <p>Rho \\(\\left(\\mathbf{{\\displaystyle {\\frac {\\partial V}{\\partial r}}}}\\right)\\)</p> \\[K(T-t)e^{-r(T-t)}N(d_{2})\\,\\] <p>Delta \\(\\mathbf{\\left({\\frac {\\partial V}{\\partial S}}\\right)}\\)</p> \\[ -N(-d_{1})=N(d_{1})-1\\, \\] <p>Gamma \\(\\left(\\mathbf{{\\frac {\\partial ^{2}V}{\\partial S^{2}}}}\\right)\\)</p> <p>$\\({\\frac {N'(d_{1})}{S\\sigma {\\sqrt {T-t}}}}\\$\\)</p> <p>Vega \\(\\left(\\mathbf{{\\displaystyle {\\frac {\\partial V}{\\partial \\sigma }}}}\\right)\\)</p> \\[SN'(d_{1}){\\sqrt {T-t}}\\,\\] <p>Theta \\(\\left(\\mathbf{{\\frac  {\\partial V}{\\partial t}}}\\right)\\)</p> \\[{\\displaystyle -{\\frac {SN'(d_{1})\\sigma }{2{\\sqrt {T-t}}}}+rKe^{-r(T-t)}N(-d_{2})\\,}\\] <p>Rho \\(\\left(\\mathbf{{\\displaystyle {\\frac {\\partial V}{\\partial r}}}}\\right)\\)</p> \\[-K(T-t)e^{-r(T-t)}N(-d_{2})\\,\\] <p>Volatility is a statistical measure of the dispersion of returns for a given security or market index. In most cases, the higher the volatility, the riskier the security. Volatility is often measured from either the standard deviation or variance between returns from that same security or market index.</p> <p>If we consider a conitnuous compounding model, the log return of a stock is given by:</p> \\[ R_t = \\ln \\left( \\frac{S_t}{S_{t-1}} \\right) \\] <p>If \\(r_t\\) is the usual return, then the log return is given by: $$ R_t = \\ln \\left( 1 + r_t \\right) $$</p> <p>This shows that \\(R\\) is the continuously compounded return needed to produce the simple return \\(r\\) during that period.</p> <p>Simple returns can not be added. For example, suppose a stock is trading at 100. After a month, it goes to 120, which has a return of 0.20. Now, if the stock comes back to 100, the return is -0.167. The total return is 0.00, however, the simple returns add up to 0.033. Which is not zero!</p> <pre><code>r1 = 0.20\nr2 = -0.167\nprint(\"Sum of Simple Returns: \", r1 + r2)\n</code></pre> <pre>\n<code>Sum of Simple Returns:  0.033\n</code>\n</pre> <p>Now, let's use the log return:</p> <pre><code>R1 = np.log(1+r1)\nR2 = np.log(1+r2)\n\nprint(\"Sum of Log Returns: \", R1 + R2)\n</code></pre> <pre>\n<code>Sum of Log Returns:  -0.0004000800213398159\n</code>\n</pre> <p>This is very near to zero. In fact, if we set <code>r2</code> to be closer to 0.1666667, we get a value of zero.</p> <pre><code>r1 = 0.20\nr2 = -0.1666667\nR1 = np.log(1+r1)\nR2 = np.log(1+r2)\n\nprint(\"Sum of Log Returns: \", R1 + R2)\n</code></pre> <pre>\n<code>Sum of Log Returns:  -4.0000000756101883e-08\n</code>\n</pre> <p>Note, however that unlike simple returns, you can not ad log return across securities of a portfolio in the same time period.</p> <p>Simple returns can be used to calculate volatility. The formula is: $$ \\sigma = \\sqrt{\\frac{1}{n-1}\\sum_{i=1}^{n} (r_i - \\bar{r})^2} $$</p> <p>where \\(n\\) is the number of observations, \\(r_i\\) is the return of the \\(i\\)th observation, and \\(\\bar{r}\\) is the mean of the returns.</p> <pre><code>df = pd.read_csv(\"../../Data/Stocks/nasdaq200/TSLA.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ndf = df[df.index&gt;=datetime.datetime(2016,1,1)]\nreturn_ = df[\"Close\"].pct_change(1).dropna()\nsigma = return_.std()*np.sqrt(252)\nprint(sigma)\n</code></pre> <pre>\n<code>0.5860743591289022\n</code>\n</pre> <p>So, the volatility of TSLA is 0.586 annually, which is 58.6% annually.</p> <p>We can use the standard deviation of the log returns to calculate the volatility of a stock. The standard deviation of the log returns is given by: $$ \\sigma = \\sqrt{\\frac{1}{T}\\sum_{t=1}^T (R_t - \\bar{R})^2} $$</p> <p>where \\(\\bar{R}\\) is the mean of the log returns.</p> <pre><code>df = pd.read_csv(\"../../Data/Stocks/nasdaq200/TSLA.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ndf = df[df.index&gt;=datetime.datetime(2016,1,1)]\nreturn_ = df[\"Close\"].pct_change(1).dropna()\nlog_return = np.log(1+return_)\nsigma = log_return.std()*np.sqrt(252)\nprint(sigma)\n</code></pre> <pre>\n<code>0.5854294125474527\n</code>\n</pre> <p>So, the volatility of TSLA is 0.585 annually, which is 58.5% annually.</p> <p>If we use the BS model to solve for \\(\\sigma\\) by using the option prices, volatility can be calculated. This is done by using the <code>fsolve</code> function from <code>scipy.optimize</code>. The function takes in the parameters of the BS model and the option price, and returns the volatility.</p> <pre><code>from scipy.optimize import minimize\nfrom functools import partial\n</code></pre> <pre><code>def get_sigma(S, K, r, tau, current_price):\n    call_price_final = partial(call_price, S=S, K=K, r=r, tau=tau)\n    def error(sigma):\n        return np.square(call_price_final(sigma) - current_price)\n    return minimize(error, 0.2).x[0]\n</code></pre> <pre><code>S = 110.34\nK = 120\nr = 0.0342\ntau = num_days/252\ncurrent_price = 13.86\nsigma = get_sigma(S, K, r, tau, current_price)\nprint(\"The implied volatility is: \", sigma)\n</code></pre> <pre>\n<code>The implied volatility is:  0.6064680543474251\n</code>\n</pre> <p>We can see that the implied volatility is greater than the historical volatility.</p>"},{"location":"Notes/Finance/Black_Scholes_Model/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Introduction</li> <ol><li>Assumptions</li> <ol><li>Assets Assumptions</li> <li>Market Assumptions</li> </ol> </ol> <p><li>Black-Scholes Equation</li></p> <ol><li>Notations</li> <ol><li>General and Market Parameters</li> <li>Asset Parameters</li> <li>Option Parameters</li> </ol><li>Differential Equation</li> <li>Solution and the Black-Scholes Formula</li> <ol><li>Call Option</li> <li>Put Option</li> <li>An Example Calculation</li> </ol><li>Python Implementation</li> </ol> <p><li>Greeks</li></p> <ol><li>Mathematical Form of Greeks</li> <ol><li>Greeks for Call</li> <li>Greeks for Put</li> </ol> </ol> <p><li>Volatility</li></p> <ol><li>Log Returns</li> <ol><li>Adding Log Returns</li> </ol><li>Calculating Volatility</li> <ol><li>Using Simple Returns</li> <li>Using the Log Return</li> <li>Using the Black-Scholes Model</li> </ol> </ol>"},{"location":"Notes/Finance/Black_Scholes_Model/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#introduction","title":"Introduction","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#assumptions","title":"Assumptions","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#assets-assumptions","title":"Assets Assumptions","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#market-assumptions","title":"Market Assumptions","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#black-scholes-equation","title":"Black-Scholes Equation","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#notations","title":"Notations","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#general-and-market-parameters","title":"General and Market Parameters","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#asset-parameters","title":"Asset Parameters","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#option-parameters","title":"Option Parameters","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#differential-equation","title":"Differential Equation","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#solution-and-the-black-scholes-formula","title":"Solution and the Black-Scholes Formula","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#call-option","title":"Call Option","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#put-option","title":"Put Option","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#an-example-calculation","title":"An Example Calculation","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#python-implementation","title":"Python Implementation","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#greeks","title":"Greeks","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#mathematical-form-of-greeks","title":"Mathematical Form of Greeks","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#greeks-for-call","title":"Greeks for Call","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#greeks-for-put","title":"Greeks for Put","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#volatility","title":"Volatility","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#log-returns","title":"Log Returns","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#adding-log-returns","title":"Adding Log Returns","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#calculating-volatility","title":"Calculating Volatility","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#using-simple-returns","title":"Using Simple Returns","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#using-the-log-return","title":"Using the Log Return","text":""},{"location":"Notes/Finance/Black_Scholes_Model/#using-the-black-scholes-model","title":"Using the Black-Scholes Model","text":""},{"location":"Notes/Finance/CAPM/","title":"CAPM","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nplt.rcParams[\"figure.figsize\"] = [12, 8]\n</code></pre> <pre><code>utc = dt.timezone.utc\n</code></pre> <pre><code>def merge_two_stocks(\n    df1: pd.DataFrame,\n    df2: pd.DataFrame,\n    names=[\"df1\", \"df2\"],\n    columns=None,\n    date_too=True,\n) -&gt; pd.DataFrame:\n\"\"\"\n    Merge two stocks together on index (Assumes index is date)\n\n    Parameters\n    ----------\n    df1 : pd.DataFrame\n        First dataframe\n    df2 : pd.DataFrame\n        Second dataframe\n    names : list, optional\n        Names of the two dataframes (Stock names, suffix will be decided by it), by default [\"df1\", \"df2\"]\n    columns : list, optional\n        Columns to merge, by default None\n    date_too : bool, optional\n        Whether to include the date column, by default True\n\n    Returns\n    -------\n    pd.DataFrame\n        Merged dataframe\n    \"\"\"\n    df1 = df1.copy()\n    df2 = df2.copy()\n    if columns:\n        df1 = df1[columns]\n        df2 = df2[columns]\n    df1.index = pd.Series(df1.index).apply(lambda x: x.strftime(\"%Y-%m-%d\"))\n    df2.index = pd.Series(df2.index).apply(lambda x: x.strftime(\"%Y-%m-%d\"))\n    df = df1.merge(\n        df2,\n        how=\"inner\",\n        left_index=True,\n        right_index=True,\n        suffixes=(\"_\" + names[0], \"_\" + names[1]),\n    )\n    if date_too:\n        df.index = pd.to_datetime(df.index)\n        df[\"Date\"] = df.index\n    if len(columns) == 1 and date_too:\n        df.columns = [names[0], names[1], \"Date\"]\n    elif len(columns) == 1 and not date_too:\n        df.columns = [names[0], names[1]]\n    return df\n</code></pre> <pre><code>def get_beta(df, freq=\"Y\", names=[\"df1\", \"df2\"]):\n\"\"\"\n    Get beta of two stocks\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        Dataframe of two stocks with date as index\n    freq : str, optional\n        Frequency of the data, by default \"Y\"\n\n    Returns\n    -------\n    float\n        Beta of the two stocks\n    \"\"\"\n    df = df.copy()\n    df = df.asfreq(freq).dropna()\n    df[\"Returns_\" + names[0]] = df[names[0]].pct_change()\n    df[\"Returns_\" + names[1]] = df[names[1]].pct_change()\n    df = df.dropna()\n    covariance = df[\"Returns_\" + names[0]].cov(df[\"Returns_\" + names[1]])\n    variance = df[\"Returns_\" + names[1]].var()\n    beta = covariance / variance\n    return beta\n</code></pre> <pre><code>def expected_return(rf, beta, Erm):\n\"\"\"\n    Get expected return of a stock\n\n    Parameters\n    ----------\n    rf : float\n        Risk free rate\n    beta : float\n        Beta of the stock\n    Erm : float\n        Expected return of the market\n\n    Returns\n    -------\n    float\n        Expected return of the stock\n    \"\"\"\n    return rf + beta * (Erm - rf)\n</code></pre> <pre><code>apple = pd.read_csv(\"Data/AAPL.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ngoogle = pd.read_csv(\"Data/GOOG.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\nsnp = pd.read_csv(\"Data/GSPC.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ngold = pd.read_csv(\"Data/gold.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\noil = pd.read_csv(\"Data/oil.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ntreasury = pd.read_csv(\"Data/treasury.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\n</code></pre> <pre><code>apple = apple[apple.index &gt;= pd.to_datetime(\"2012-01-01\").tz_localize(utc)]\ngoogle = google[google.index &gt;= \"2012-01-01\"]\nsnp = snp[snp.index &gt;= \"2012-01-01\"]\ngold = gold[gold.index &gt;= \"2012-01-01\"]\noil = oil[oil.index &gt;= \"2012-01-01\"]\ntreasury = treasury[treasury.index &gt;= \"2012-01-01\"]\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 apple = apple[apple.index &gt;= pd.to_datetime(\"2012-01-01\").tz_localize(utc)]\n      2 google = google[google.index &gt;= \"2012-01-01\"]\n      3 snp = snp[snp.index &gt;= \"2012-01-01\"]\n\nNameError: name 'utc' is not defined</pre> <p>It's a model of the optimal portfolio. It asserts that all investors will hold the optimal portfolio. But as not everyone holds the optimal portfolio, the model is only the half truth.</p> <p>The model assumes that everyone is rational. It assumes that nobody has any risks that are inherent to them.</p> <p>Alpha (\\(\\alpha\\)) is a term used in investing to describe an investment strategy's ability to beat the market, or its \"edge.\" Alpha is thus also often referred to as \u201cexcess return\u201d or \u201cabnormal rate of return\u201d.</p> <p>Alpha is used in finance as a measure of performance, indicating when a strategy, trader, or portfolio manager has managed to beat the market return over some period. Alpha, often considered the active return on an investment, gauges the performance of an investment against a market index or benchmark that is considered to represent the market\u2019s movement as a whole.</p> <p>Active return is the percentage gain or loss of an investment relative to the investment's benchmark.</p> <p>The excess return of an investment relative to the return of a benchmark index is the investment\u2019s alpha. Alpha may be positive or negative and is the result of active investing.</p> <p>Mathematically, alpha is calculated as the difference between the actual return of an investment and the expected return of the investment. The expected return is calculated by multiplying the benchmark return by the beta of the investment and adding the result to the risk-free rate. SO, we have $$ \\alpha = r_{i} - \\beta (r_{m} - r_f) - r_{f} $$</p> <p>where \\(R_{i}\\) is the actual return of the investment, \\(R_{m}\\) is the return of the benchmark, \\(R_{f}\\) is the risk-free rate, and \\(\\beta\\) is the beta of the investment.</p> <p>Beta gives a measure of how much a stock moves in relation to the market. A \\(\\beta\\) of 2 means that the stock moves twice as much as the market. A \\(\\beta\\) of 0.5 means that the stock moves half as much as the market.</p> <p>The basic equation of CAPM reads:</p> \\[ E(r_i) = r_f + \\beta_i (E(r_m) - r_f) \\] <p>where \\(r_i\\) is the return of the stock, \\(r_f\\) is the risk-free rate, \\(\\beta_i\\) is the beta of the stock, and \\(E(r_m)\\) is the expected return of the market.</p> <p>What is says is this: the expected return of a stock is the risk-free rate plus the beta of the stock times the expected return of the market minus the risk-free rate.</p> <p>What is the risk-free rate? It is the return of a risk-free asset. For example, the return of a 10-year US Treasury bond.</p> <p>The single-index model (SIM) is a simple asset pricing model to measure both the risk and the return of a stock. </p> <p>Using the definition of beta, we can write the equation of the single-index model as: $$ r_i = \\alpha_i+ r_f + \\beta_i (r_m - r_f) + \\epsilon_i $$ where \\(\\epsilon_i\\) is the error term.</p> <p>According to this equation, asset\u2019s returns is influenced by the market (reflected in beta), it has firm specific excess returns (reflected in alpha) and also has firm-specific risk (the residual).</p> <p>Let's do some coding! We'll be using the simpler equation of the single-index model without the error term and the excess return.This is the same as the CAMP model.</p> <p>We'll deal with just the last 10 year. We'll use the S&amp;P 500 as the market.</p> <pre><code>betas = {\n    \"APPLE\": None,\n    \"GOOGLE\": None,\n    \"GOLD\": None,\n    \"OIL\": None,\n}\n\nfor stock in betas:\n    df = merge_two_stocks(\n        eval(stock.lower()), snp, columns=[\"Close\"], names=[stock, \"S&amp;P 500\"]\n    )\n    betas[stock] = get_beta(df, names=[stock, \"S&amp;P 500\"], freq=\"M\")\n\nprint(betas)\n</code></pre> <pre>\n<code>{'APPLE': 1.26504349744049, 'GOOGLE': 1.221498809534188, 'GOLD': 0.03514756287005443, 'OIL': 1.3433199279492347}\n</code>\n</pre> <pre><code>rf = treasury.iloc[-1][\"Close\"] / 12\nrf\n</code></pre> <pre>\n<code>0.312583327293396</code>\n</pre> <pre><code>apple_beta = betas[\"APPLE\"]\ngoogle_beta = betas[\"GOOGLE\"]\ngold_beta = betas[\"GOLD\"]\noil_beta = betas[\"OIL\"]\n</code></pre> <pre><code>print(f\"Apple Beta: {apple_beta}\")\nprint(f\"Google Beta: {google_beta}\")\nprint(f\"Gold Beta: {gold_beta}\")\nprint(f\"Oil Beta: {oil_beta}\")\n</code></pre> <pre>\n<code>Apple Beta: 1.26504349744049\nGoogle Beta: 1.221498809534188\nGold Beta: 0.03514756287005443\nOil Beta: 1.3433199279492347\n</code>\n</pre> <pre><code>Erm = snp[\"Close\"].pct_change().mean()\nErm = Erm * 365 / 12 * 100\nprint(f\"Monthly Expected return of S&amp;P 500: {Erm:.4f}%\")\n</code></pre> <pre>\n<code>Monthly Expected return of S&amp;P 500: 1.3871%\n</code>\n</pre> <pre><code>betas = [apple_beta, google_beta, gold_beta, oil_beta]\nstocks = [\"Apple\", \"Google\", \"Gold\", \"Oil\"]\nfor beta, stock in zip(betas, stocks):\n    print(f\"Beta of {stock}: {beta:.4f}\")\n    print(f\"Monthly Expected return of {stock}: {expected_return(rf, beta, Erm):.4f}%\")\n</code></pre> <pre>\n<code>Beta of Apple: 1.2650\nMonthly Expected return of Apple: 1.6719%\nBeta of Google: 1.2215\nMonthly Expected return of Google: 1.6251%\nBeta of Gold: 0.0351\nMonthly Expected return of Gold: 0.3504%\nBeta of Oil: 1.3433\nMonthly Expected return of Oil: 1.7560%\n</code>\n</pre> <p></p> <p></p> <pre><code>def portfolio_expted_value(weights, expected_returns):\n\"\"\"\n    Get expected value of a portfolio\n\n    Parameters\n    ----------\n    weights : list\n        Weights of the portfolio\n    expected_returns : list\n        Expected returns of the stocks in the portfolio\n\n    Returns\n    -------\n    float\n        Expected value of the portfolio\n    \"\"\"\n    return sum([w * r for w, r in zip(weights, expected_returns)])\n\n\ndef portfolio_variance(weights, cov_matrix):\n\"\"\"\n    Get variance of a portfolio\n\n    Parameters\n    ----------\n    weights : list\n        Weights of the portfolio\n    cov_matrix : np.array\n        Covariance matrix of the stocks in the portfolio\n\n    Returns\n    -------\n    float\n        Variance of the portfolio\n    \"\"\"\n    return np.dot(weights, np.dot(cov_matrix, weights))\n\n\ndef portfolio_std(weights, cov_matrix):\n\"\"\"\n    Get standard deviation of a portfolio\n\n    Parameters\n    ----------\n    weights : list\n        Weights of the portfolio\n    cov_matrix : np.array\n        Covariance matrix of the stocks in the portfolio\n\n    Returns\n    -------\n    float\n        Standard deviation of the portfolio\n    \"\"\"\n    return np.sqrt(portfolio_variance(weights, cov_matrix))\n\n\ndef portfolio_info(weights, expected_returns, cov_matrix):\n\"\"\"\n    Get expected value, variance and standard deviation of a portfolio\n\n    Parameters\n    ----------\n    weights : list\n        Weights of the portfolio\n    expected_returns : list\n        Expected returns of the stocks in the portfolio\n    cov_matrix : np.array\n        Covariance matrix of the stocks in the portfolio\n\n    Returns\n    -------\n    tuple\n        Expected value, variance and standard deviation of the portfolio\n    \"\"\"\n    return (\n        portfolio_expted_value(weights, expected_returns),\n        portfolio_variance(weights, cov_matrix),\n        portfolio_std(weights, cov_matrix),\n    )\n</code></pre> <p>We'll use two stocks, Apple and Google. We'll use the S&amp;P 500 as the market. We'll be using the last 10 years of data. Weights will be 1/2 for Apple and 1/2 for Google.</p> <pre><code>apple_monthly = apple.asfreq(\"M\").dropna()\ngoogle_monthly = google.asfreq(\"M\").dropna()\ngold_monthly = gold.asfreq(\"M\").dropna()\noil_monthly = oil.asfreq(\"M\").dropna()\napple_monthly[\"Returns\"] = apple_monthly[\"Close\"].pct_change()\ngoogle_monthly[\"Returns\"] = google_monthly[\"Close\"].pct_change()\ngold_monthly[\"Returns\"] = gold_monthly[\"Close\"].pct_change()\noil_monthly[\"Returns\"] = oil_monthly[\"Close\"].pct_change()\n\napple_monthly = apple_monthly.dropna()\ngoogle_monthly = google_monthly.dropna()\ngold_monthly = gold_monthly.dropna()\noil_monthly = oil_monthly.dropna()\n\napple_google = merge_two_stocks(\n    apple_monthly, google_monthly, columns=[\"Returns\"], names=[\"APPLE\", \"GOOGLE\"]\n)\napple_google = apple_google.dropna()\n\napple_gold = merge_two_stocks(\n    apple_monthly, gold_monthly, columns=[\"Returns\"], names=[\"APPLE\", \"GOLD\"]\n)\napple_gold = apple_gold.dropna()\n\napple_oil = merge_two_stocks(\n    apple_monthly, oil_monthly, columns=[\"Returns\"], names=[\"APPLE\", \"OIL\"]\n)\napple_oil = apple_oil.dropna()\n</code></pre> <pre><code>apple_google_cov = apple_google.cov()\napple_gold_cov = apple_gold.cov()\napple_oil_cov = apple_oil.cov()\nprint(f\"Apple-Google Covariance: \\n{apple_google_cov}\")\nprint(f\"Apple-Gold Covariance: \\n{apple_gold_cov}\")\nprint(f\"Apple-Oil Covariance: \\n{apple_oil_cov}\")\n</code></pre> <pre>\n<code>Apple-Google Covariance: \n           APPLE    GOOGLE\nAPPLE   0.040810  0.003025\nGOOGLE  0.003025  0.004825\nApple-Gold Covariance: \n          APPLE      GOLD\nAPPLE  0.040810 -0.003422\nGOLD  -0.003422  0.002537\nApple-Oil Covariance: \n          APPLE       OIL\nAPPLE  0.040810  0.001257\nOIL    0.001257  0.014110\n</code>\n</pre> <pre><code>expected, var, std = portfolio_info(\n    [0.5, 0.5],\n    [expected_return(rf, apple_beta, Erm), expected_return(rf, google_beta, Erm)],\n    apple_google_cov,\n)\n</code></pre> <pre><code>print(f\"Expected return: {12*expected:.4f}%\")\nprint(f\"Variance: {var:.4f}\")\nprint(f\"Standard deviation: {100*std:.4f}\")\n</code></pre> <pre>\n<code>Expected return: 19.7823%\nVariance: 0.0129\nStandard deviation: 11.3671\n</code>\n</pre> <p>The efficient portfolio of frontier expresses the standard deviation of the portfolio in terms of \\(r\\) the expected return on the portfolio instead of \\(x_1\\).</p> <p></p> <p>Here, we'll plot the efficient portfolio frontier for the last 10 years of data. We'll first use just two stocks, Apple and Google. We'll use the S&amp;P 500 as the market.</p> <pre><code>weights_1 = np.linspace(0, 1.5, 300)\nweights_2 = 1 - weights_1\n\nstds = []\nreturns = []\nfor w1, w2 in zip(weights_1, weights_2):\n    expected, var, std = portfolio_info(\n        [w1, w2],\n        [expected_return(rf, apple_beta, Erm), expected_return(rf, google_beta, Erm)],\n        apple_google_cov,\n    )\n    stds.append(100 * std)\n    returns.append(12 * expected)\n\nfig = px.line(\n    x=stds,\n    y=returns,\n    labels={\"x\": \"Standard deviation\", \"y\": \"Expected return\"},\n    title=\"Efficient frontier\",\n    custom_data=[weights_1, weights_2],\n)\nfig.update_traces(\n    hovertemplate=\"Standard deviation: %{x:.4f}%&lt;br&gt;Expected return: %{y:.4f}%&lt;br&gt;Apple weight: %{customdata[0]:.4f}&lt;br&gt;Google weight: %{customdata[1]:.4f}\"\n)\n</code></pre> <p>Suppose we have n numbers of stocks \\(S_i\\) with \\(i = 1, 2, \\dots, n\\). Let \\(w_i\\) be the weight of the stock \\(S_i\\) in the portfolio. Then, the expected return of the portfolio is given by $$ E(r_p) = \\sum_{i=1}^{n} w_i E(r_i) $$ where \\(E(r_i)\\) is the expected return of the stock \\(S_i\\).</p> <p>This expected return can be calculated using some model. If we use the CAPM model, then $$ E(r_i) = r_f + \\beta_i (E(r_m) - r_f) $$ where \\(r_f\\) is the risk-free rate, \\(\\beta_i\\) is the beta of the stock \\(S_i\\), and \\(E(r_m)\\) is the expected return of the market.</p> <p>Let's suppose that we have the \\(\\beta_i\\) for each stock. If the covariance matrix of the stock is \\(K\\), then the variance of the portfolio is given by $$ Var(r_p) = w^T K w $$ where \\(w\\) is the vector of weights of the stocks.</p> <p>Also, the standard deviation of the portfolio is given by $$ \\sigma_p = \\sqrt{w^T K w} $$</p> <p>Now, the goal is to find the weights of the stocks such that the expected return of the portfolio is maximized with constraint that the standard deviation of the portfolio is less than or equal to a given value.</p> <p>One way to do this is to plot the portfolio frontier and find the point on the frontier that gives the maximum expected return. This is called the efficient portfolio frontier. Another way is to set the maximum risk as a constraint and find the weights that give the maximum expected return.</p> <p>Let's start with just two stock, say AAPL and GOOG.</p> <p>The efficient portfolio frontier is given by $$ \\text{maximize } w_1 E(r_1) + w_2 E(r_2) \\ \\text{subject to } \\sigma_p \\leq \\sigma_{max} $$ where \\(w_1\\) and \\(w_2\\) are the weights of the stocks, \\(E(r_1)\\) and \\(E(r_2)\\) are the expected returns of the stocks, and \\(\\sigma_p\\) is the standard deviation of the portfolio.</p> <p>Some other constraints are: $$ w_1 + w_2 = 1 \\ w_1 \\geq 0 \\ w_2 \\geq 0 $$</p> <pre><code>from pystock.portfolio import Portfolio\nfrom pystock.models import Model\nfrom pulp import *\nimport numpy as np\n</code></pre> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\", \"Data/TSLA.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\", \"TSLA\"]\n\npt = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\npt.load_benchmark(columns=[\"Adj Close\"], rename_cols=[\"Close\"], start_date=start_date, end_date=end_date)\npt.load_all(columns=[\"Adj Close\"], rename_cols=[\"Close\"], start_date=start_date, end_date=end_date)\n</code></pre> <pre><code>m = Model(\"D\")\n</code></pre> <pre><code>m.update_portfolio(pt, weights=\"equal\")\n</code></pre> <pre>\n<code>Adding portfolio...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG', 'TSLA']\nHere are the summary of stocks in the portfolio\n+----+---------+---------------------+--------------------+-------------+---------+----------+\n|    | Stock   |   Daily_Mean_Return |   Daily_Return_STD |       Alpha |    Beta |   Weight |\n|----+---------+---------------------+--------------------+-------------+---------+----------|\n|  0 | AAPL    |         0.000704985 |          0.015223  | 0.000335456 | 1.17506 |     0.25 |\n|  1 | MSFT    |         0.000701352 |          0.0138858 | 0.000327021 | 1.19033 |     0.25 |\n|  2 | GOOG    |         0.000519072 |          0.01399   | 0.000169779 | 1.11071 |     0.25 |\n|  3 | TSLA    |         0.00151116  |          0.0296577 | 0.00106541  | 1.41743 |     0.25 |\n+----+---------+---------------------+--------------------+-------------+---------+----------+\nThe covariance matrix is as follows\n+------+-------------+-------------+-------------+-------------+\n|      |        AAPL |        MSFT |        GOOG |        TSLA |\n|------+-------------+-------------+-------------+-------------|\n| AAPL | 0.00023174  | 0.000127096 | 0.000118527 | 0.000162588 |\n| MSFT | 0.000127096 | 0.000192816 | 0.000129609 | 0.00015014  |\n| GOOG | 0.000118527 | 0.000129609 | 0.00019572  | 0.000145206 |\n| TSLA | 0.000162588 | 0.00015014  | 0.000145206 | 0.000879577 |\n+------+-------------+-------------+-------------+-------------+\nPortfolio Return: 0.0008591411722059693\nPortfolio Volatility: 0.06743352503165821\n</code>\n</pre> <pre><code>m.portfolio.calculate_fff_params(directory=\"fff\", frequency=\"D\")\n</code></pre> <pre>\n<code>Done. Here are the parameters\n+--------------+--------------+--------------+-------------+\n|         AAPL |         MSFT |         GOOG |        TSLA |\n|--------------+--------------+--------------+-------------|\n|  0.000342863 |  0.000371885 |  0.000249332 |  0.00176376 |\n|  1.19779     |  1.1772      |  1.04        |  1.26924    |\n| -0.195522    | -0.403665    | -0.243466    |  0.367996   |\n| -0.516929    | -0.315006    | -0.152059    | -0.5082     |\n|  0.594034    |  0.349523    |  0.193879    | -0.768241   |\n|  0.0563511   | -0.346686    | -0.74653     | -0.758175   |\n|  1           |  1           |  1           |  1          |\n+--------------+--------------+--------------+-------------+\n</code>\n</pre> <p>Let's print the return of the stock assuming all the stocks have the same weight. Note that this is the monthly return.</p> <pre><code>return_, variance, deviation = m.portfolio_info()\nprint(f\"Expected return: {return_:.4f}%\")\nprint(f\"Variance: {variance:.4f}\")\nprint(f\"Standard deviation: {deviation:.4f}\")\n</code></pre> <pre>\n<code>Expected return: -0.0360%\nVariance: 0.0198\nStandard deviation: 0.1407\n</code>\n</pre> <p>Suppose your risk tolerance is 0.5% per month. Then, the efficient portfolio frontier is given by</p> <pre><code>res = m.optimize_portfolio(risk=0.5)\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: -0.0020%\nVariance: 0.0196%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 100.00%\nTSLA: 0.00%\n</code>\n</pre> <p>It seems you should invest 48% in AAPL and 35% in GOOG and 17% in TSLA.</p> <pre><code>res = m.optimize_portfolio(risk=1)\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: -0.0020%\nVariance: 0.0196%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 100.00%\nTSLA: 0.00%\n</code>\n</pre> <pre><code>res = m.optimize_portfolio(risk=1, model=\"fff5\")\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: 0.2017%\nVariance: 0.0880%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 0.00%\nTSLA: 100.00%\n</code>\n</pre> <pre><code>res = m.optimize_portfolio(risk=1, model=\"fff3\")\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: 0.2228%\nVariance: 0.0880%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 0.00%\nTSLA: 100.00%\n</code>\n</pre> <pre><code>res = m.optimize_portfolio(risk=2)\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: -0.0020%\nVariance: 0.0196%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 100.00%\nTSLA: 0.00%\n</code>\n</pre> <pre><code>res = m.optimize_portfolio(risk=2, model=\"fff5\")\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: 0.2017%\nVariance: 0.0880%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 0.00%\nTSLA: 100.00%\n</code>\n</pre> <pre><code>res = m.optimize_portfolio(risk=2, model=\"fff3\")\n</code></pre> <pre>\n<code>Optimized successfully.\nExpected return: 0.2228%\nVariance: 0.0880%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 0.00%\nGOOG: 0.00%\nTSLA: 100.00%\n</code>\n</pre>"},{"location":"Notes/Finance/CAPM/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Some Functions and DataFrames</li> <li>Captial Asset Pricing Model (CAPM)</li> <ol><li>Alpha</li> <li>Beta</li> <li>CAPM Equation</li> <li>Single-Index Model</li> <li>Expected Returns of Some Stocks</li> <li>Calculating the Optimal Portfolio</li> <ol><li>Efficient Portfolio Frontier</li> <ol><li>Two Stocks</li> <li>Three Stocks</li> </ol> </ol> </ol> <p><li>Optimizing a Portfolio</li></p> <ol><li>Methematical Formulation</li> <li>Using the Model</li> </ol>"},{"location":"Notes/Finance/CAPM/#imports","title":"Imports","text":""},{"location":"Notes/Finance/CAPM/#some-functions-and-dataframes","title":"Some Functions and DataFrames","text":""},{"location":"Notes/Finance/CAPM/#captial-asset-pricing-model-capm","title":"Captial Asset Pricing Model (CAPM)","text":""},{"location":"Notes/Finance/CAPM/#alpha","title":"Alpha","text":""},{"location":"Notes/Finance/CAPM/#beta","title":"Beta","text":""},{"location":"Notes/Finance/CAPM/#capm-equation","title":"CAPM Equation","text":""},{"location":"Notes/Finance/CAPM/#single-index-model","title":"Single-Index Model","text":""},{"location":"Notes/Finance/CAPM/#expected-returns-of-some-stocks","title":"Expected Returns of Some Stocks","text":""},{"location":"Notes/Finance/CAPM/#calculating-the-optimal-portfolio","title":"Calculating the Optimal Portfolio","text":""},{"location":"Notes/Finance/CAPM/#efficient-portfolio-frontier","title":"Efficient Portfolio Frontier","text":""},{"location":"Notes/Finance/CAPM/#two-stocks","title":"Two Stocks","text":""},{"location":"Notes/Finance/CAPM/#optimizing-a-portfolio","title":"Optimizing a Portfolio","text":""},{"location":"Notes/Finance/CAPM/#methematical-formulation","title":"Methematical Formulation","text":""},{"location":"Notes/Finance/CAPM/#using-the-model","title":"Using the Model","text":""},{"location":"Notes/Finance/Five_Factor_Model/","title":"Five Factor Model","text":"<p>The five factor model is a model of asset returns that attempts to explain the returns of assets by five factors: size, value, momentum, profitability, and investment. The model was developed by Fama and French in 1993 and has been widely used in the finance industry since then.</p> <p>The five factors describing the model are:</p> <ol> <li>market excess return (MKT)</li> <li>the outperformance of small versus big companies (SMB)</li> <li>the outperformance of high book/market versus low book/market companies (HML)</li> <li>the profitability factor (RMW)</li> <li>investment factor (CMA)</li> </ol> <p>Let's consider these factors in more detail.</p> <p>This is equal to \\(R_m- R_f\\) and gives the return of the market portfolio minus the risk-free rate. It is the return that an investor would expect to receive if they invested in the market portfolio.</p> <p>Rm-Rf includes all NYSE, AMEX, and NASDAQ firms. It is a market capitalization weighted index of all common stocks listed on the NYSE, AMEX, and NASDAQ. It is a price-weighted index of 3,000 stocks. The index is rebalanced quarterly and reconstituted annually.</p> <p>We'll be denoting it as \\(MER\\).</p> <p>This is the average return on the nine small stock portfolios minus the average return on the nine big stock portfolios,</p> SMB(B/M) =  SMB(OP) =  SMB(INV) =  SMB =   1/3 (Small Value + Small Neutral + Small Growth)  \u00a0 - 1/3 (Big Value + Big Neutral + Big Growth).       1/3 (Small Robust + Small Neutral + Small Weak) \u00a0 - 1/3 (Big Robust + Big Neutral + Big Weak).  1/3 (Small Conservative + Small Neutral + Small Aggressive) \u00a0 - 1/3 (Big Conservative + Big Neutral + Big Aggressive).   1/3 (  SMB(B/M) + SMB(OP) + SMB(INV) ). <p>We'll be denoting it as \\(SMB\\).</p> <p>HML (High Minus Low) is the average return on the two value portfolios minus the average return on the two growth portfolios.</p> HML = 1/2 (Small Value + Big Value) \u00a0- 1/2 (Small Growth + Big Growth). <p>We'll be denoting it as \\(HML\\).</p> <p>RMW (Robust Minus Weak) is the average return on the two robust operating profitability portfolios minus the average return on the two weak operating profitability portfolios</p> RMW = 1/2 (Small Robust + Big Robust)     \u00a0 - 1/2 (Small Weak + Big Weak). <p>We'll be denoting it as \\(RMW\\).</p> <p>CMA (Conservative Minus Aggressive) is the average return on the two conservative investment portfolios minus the average return on the two aggressive investment portfolios</p> CMA = 1/2 (Small     Conservative + Big Conservative)     \u00a0 - 1/2 (Small Aggressive + Big Aggressive). <p>Using these factors, we can write the model as</p> \\[ R = \\alpha + \\beta_i MER + \\beta_i SMB + \\beta_i HML + \\beta_i RMW + \\beta_i CMA + \\epsilon \\] <p>where \\(R\\) is the return of the asset, \\(\\alpha\\) is the intercept, \\(\\beta_i\\) are the slopes, and \\(\\epsilon\\) is the error term.</p> <p>If \\(R_f\\) is the risk-free rate, then the model can be modified to include the risk-free rate as</p> \\[ R - R_f = \\alpha + \\beta_i MER + \\beta_i SMB + \\beta_i HML + \\beta_i RMW + \\beta_i CMA + \\epsilon \\] <p>The return value of one stock is a linear combination of the five factors. The coefficients \\(\\beta_i\\) are the weights of the factors in the linear combination. The intercept \\(\\alpha\\) is the expected return of the asset when all the factors are zero. The formula can be applied to all the stocks in the portfolio to get the expected return of the portfolio.</p>"},{"location":"Notes/Finance/Five_Factor_Model/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Fama%E2%80%93French-five-factor-model\"&gt;Fama\u2013French five-factor model&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Market Excess Return</li> <li>Small Minus Big</li> <li>High Minus Low</li> <li>Robust Minus Weak</li> <li>Conservative Minus Aggressive</li> <li>The Model</li> </ol>"},{"location":"Notes/Finance/Five_Factor_Model/#famafrench-five-factor-model","title":"Fama\u2013French five-factor model","text":""},{"location":"Notes/Finance/Five_Factor_Model/#market-excess-return","title":"Market Excess Return","text":""},{"location":"Notes/Finance/Five_Factor_Model/#small-minus-big","title":"Small Minus Big","text":""},{"location":"Notes/Finance/Five_Factor_Model/#high-minus-low","title":"High Minus Low","text":""},{"location":"Notes/Finance/Five_Factor_Model/#robust-minus-weak","title":"Robust Minus Weak","text":""},{"location":"Notes/Finance/Five_Factor_Model/#conservative-minus-aggressive","title":"Conservative Minus Aggressive","text":""},{"location":"Notes/Finance/Five_Factor_Model/#the-model","title":"The Model","text":""},{"location":"Notes/Finance/Forward_Future/","title":"Forward Future","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport glob\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</code></pre> <p>The future price of a stock is the price of the stock at a future date. The future price of a stock is calculated by using the following formula: $$ F = S \\times (1+R_f*T) - D_1 $$ where: * \\(F\\) is the future price of the stock * \\(S\\) is the current price of the stock * \\(R_f\\) is the risk-free rate of return * \\(D_1\\) is the dividend paid on the stock * \\(T\\) is the time to maturity</p> <pre><code>nifty = pd.read_csv(\"option_data/NIFTY.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\nfuture = pd.read_csv('option_data/final/NIFTY_Futures_29-Dec-2022.csv', parse_dates=[\"Date\"], index_col=\"Date\")\nbond = pd.read_csv('option_data/10Y.csv', parse_dates=[\"Date\"], index_col=\"Date\")\n</code></pre> <p>We'll be working with just the <code>Close</code> column. In India, risk-free rate of return is 7.3% (as of Jan 2023). We'll assume that there is no dividend paid on the stock.</p> <pre><code>nifty = nifty[\"Close\"]\nfuture = future[\"Close\"]\nbond = bond[\"Close\"]\n\nmerged = pd.merge(nifty, future, left_index=True, right_index=True, how=\"inner\")\nmerged = pd.merge(merged, bond, left_index=True, right_index=True, how=\"inner\")\n\nmerged.columns = [\"Nifty\", \"Future\", \"Bond\"]\nmerged.head()\n</code></pre> Nifty Future Bond Date 2022-12-27 18132.30 18138.00 7.310 2022-12-26 18014.60 18027.30 7.319 2022-12-23 17806.80 17863.90 7.318 2022-12-22 18127.35 18170.35 7.316 2022-12-21 18199.10 18275.90 7.287 <pre><code>merged[\"Bond\"] = merged[\"Bond\"]/100/365\n</code></pre> <pre><code>merged[\"Days_remaining\"] = -(merged.index - merged.index[0]).days\n# merged[\"Days_remaining\"] = np.arange(0, len(merged))\nmerged[\"Days_remaining\"] = merged[\"Days_remaining\"].astype(int)\nmerged.head()\n</code></pre> Nifty Future Bond Days_remaining F_Simple F_Compound Date 2022-12-27 18132.30 18138.00 0.000200 0 18132.300000 18132.300000 2022-12-26 18014.60 18027.30 0.000201 1 18018.212297 18018.212297 2022-12-23 17806.80 17863.90 0.000200 2 17821.080566 17821.084861 2022-12-22 18127.35 18170.35 0.000200 3 18145.517081 18145.524365 2022-12-21 18199.10 18275.90 0.000200 4 18220.900029 18220.910912 <pre><code>merged[\"F_Simple\"] = merged[\"Nifty\"] * (1+merged[\"Bond\"] * merged[\"Days_remaining\"])\nmerged[\"F_Compound\"] = merged[\"Nifty\"] * (1+merged[\"Bond\"])**merged[\"Days_remaining\"]\n</code></pre> <pre><code>merged.head()\n</code></pre> Nifty Future Bond Days_remaining F_Simple F_Compound Date 2022-12-27 18132.30 18138.00 0.000200 0 18132.300000 18132.300000 2022-12-26 18014.60 18027.30 0.000201 1 18018.212297 18018.212297 2022-12-23 17806.80 17863.90 0.000200 2 17813.940283 17813.940999 2022-12-22 18127.35 18170.35 0.000200 3 18138.250249 18138.252434 2022-12-21 18199.10 18275.90 0.000200 4 18213.633353 18213.637705 <p>Let's plot the historical future price of the stock and the calculated future price of the stock.</p> <pre><code>fig = go.Figure()\nfig.add_trace(go.Scatter(x=merged.index, y=merged[\"Nifty\"], name=\"Nifty\"))\nfig.add_trace(go.Scatter(x=merged.index, y=merged[\"Future\"], name=\"Future\"))\nfig.add_trace(go.Scatter(x=merged.index, y=merged[\"F_Compound\"], name=\"F_Compound\"))\nfig.add_trace(go.Scatter(x=merged.index, y=merged[\"F_Simple\"], name=\"F_Simple\"))\nfig.show()\n</code></pre> <p>We see that the calculated future price of the stock is very close to the historical future price of the stock. Though the calculated value is slightly lower than the historical value. This can be attributed to the fact that there is also a price due to supply and demand of the stock.</p>"},{"location":"Notes/Finance/Forward_Future/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Forward\"&gt;Forward&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Future</li> <ol><li>Future Price Formula</li> </ol>"},{"location":"Notes/Finance/Forward_Future/#forward","title":"Forward","text":""},{"location":"Notes/Finance/Forward_Future/#future","title":"Future","text":""},{"location":"Notes/Finance/Forward_Future/#future-price-formula","title":"Future Price Formula","text":""},{"location":"Notes/Finance/Market_Hypothesis/","title":"Market Hypothesis","text":"<p>The efficient market hypothesis (EMH), alternatively known as the efficient market theory, is a hypothesis that states that share prices reflect all information.</p> <p>According to the EMH, stocks always trade at their fair value on exchanges, making it impossible for investors to purchase undervalued stocks or sell stocks for inflated prices. Therefore, it should be impossible to outperform the overall market through expert stock selection or market timing, and the only way an investor can obtain higher returns is by purchasing riskier investments.</p> <p>Weak form efficiency claims that past price movements, volume, and earnings data do not affect a stock\u2019s price and can\u2019t be used to predict its future direction. This is essentially same as the random walk hypothesis.</p> <p>Advocates of weak form efficiency believe all current information is reflected in stock prices and past information has no relationship with current market prices.</p> <p>Weak form efficiency doesn\u2019t consider technical analysis to be accurate and asserts that even fundamental analysis, at times, can be flawed. It\u2019s therefore extremely difficult, according to weak form efficiency, to outperform the market, especially in the short term. For example, if a person agrees with this type of efficiency, they believe that there\u2019s no point in having a financial advisor or active portfolio manager. Instead, investors who advocate weak form efficiency assume they can randomly pick an investment or a portfolio that will provide similar returns.</p> <p>Semi-strong form efficiency is an aspect of the Efficient Market Hypothesis (EMH) that assumes that current stock prices adjust rapidly to the release of all new public information.</p> <p>Semi-strong form efficiency contends that security prices have factored in publicly-available market and that price changes to new equilibrium levels are reflections of that information. It is considered the most practical of all EMH hypotheses  but is unable to explain the context for material nonpublic information (MNPI).</p> <p>It concludes that neither fundamental nor technical analysis can be used to achieve superior gains and suggests that only MNPI would benefit investors seeking to earn above average returns on investments.</p> <p>Strong form efficiency is the most stringent version of the efficient market hypothesis (EMH) investment theory, stating that all information in a market, whether public or private, is accounted for in a stock's price.</p> <p>Practitioners of strong form efficiency believe that even insider information cannot give an investor an advantage. This degree of market efficiency implies that profits exceeding normal returns cannot be realized regardless of the amount of research or information investors have access to.</p> <p>Behavioral finance, a subfield of behavioral economics, proposes that psychological influences and biases affect the financial behaviors of investors and financial practitioners. Moreover, influences and biases can be the source for the explanation of all types of market anomalies and specifically market anomalies in the stock market, such as severe rises or falls in stock price.</p> <p>In economics, utility is a term used to determine the worth or value of a good or service. More specifically, utility is the total satisfaction or benefit derived from consuming a good or service. Economic theories based on rational choice usually assume that consumers will strive to maximize their utility.</p> <p>People are rational and are trying to maximize their utility which is an measure of happiness.</p> <p>\"Expected utility\" is an economic term summarizing the utility that an entity or aggregate economy is expected to reach under any number of circumstances. The expected utility is calculated by taking the weighted average of all possible outcomes under certain circumstances. With the weights being assigned by the likelihood or probability, any particular event will occur.</p> <p>Expected utility theory is then used for analyzing situations in which individuals must make a decision without knowing the outcomes that may result from that decision</p> <p>The expected utility of an entity is derived from the expected utility hypothesis. This hypothesis states that under uncertainty, the weighted average of all possible levels of utility will best represent the utility at any given point in time.</p> <p>Let's say you have a 50% chance of winning 100 and a 50% chance of losing 100. The expected utility of this gamble is 0. The expected utility of a gamble is the sum of the product of the probability of each outcome and the utility of that outcome. </p> <p>As another example, consider the case of lottery tickets. Suppose there is a lottey of 1000 tickets and winner gets 100,000. Also assume that each lottery ticket costs 100. We'll calculate the expected utility of buying a lottery ticket.</p> <pre><code>N = 1000\nG = 100000\nL = 1000\np_w = 10/1000\np_l = 1- p_w\n\nutility = p_w*G - p_l*L\nprint(\"The utility of buying the ticket is\", utility)\n</code></pre> <pre>\n<code>The utility of buying the ticket is 10.0\n</code>\n</pre> <p>This is small but positive expected utility. This means that buying a lottery ticket is a good idea.</p> <p>Marginal utility is the added satisfaction that a consumer gets from having one more unit of a good or service. The concept of marginal utility is used by economists to determine how much of an item consumers are willing to purchase.</p> <p>Positive marginal utility occurs when the consumption of an additional item increases the total utility. On the other hand, negative marginal utility occurs when the consumption of one more unit decreases the overall utility.</p> <p>Prospect theory is is a experimentally based set of knowledge about mistakes that people make. This is based on research by Kahneman and Tversky of people making decisions under uncertainty and is a modification of the expected utility theory. The theory is based on some real life facts such as:</p> <ol> <li>People are overly focused on little losses, little gains and losses.</li> <li>Another thing is that people will often try to gamble out of losses. If you went to the casino and you lost money, you think, maybe I should gamble some more, maybe I can get back to where I was.</li> <li>People have a skewed representation of probability, and they do not treat gains and losses equivalently.</li> </ol> <p>Prospect theory assumes that losses and gains are valued differently, and thus individuals make decisions based on perceived gains instead of perceived losses. Also known as the \"loss-aversion\" theory, the general concept is that if two choices are put before an individual, both equal, with one presented in terms of potential gains and the other in terms of possible losses, the former option will be chosen.</p> <p>The main assumption of the prospect theory is that people are not very rational; which is in contrast with the traditional economic models that people are very sensible and calculating.</p> <p>Efficient market hypothesis and behavioral finance are two main revolution of past 50-60 years. These two revolutions are kind of incompatible views of the world. But they both offer insights, they're both exciting.</p> <p>Tversky and Kahneman proposed that losses cause a greater emotional impact on an individual than does an equivalent amount of gain, so given choices presented two ways\u2014with both offering the same result\u2014an individual will pick the option offering perceived gains.</p> <p>For example, assume that the end result of receiving 25. One option is being given 25 outright. The other option is being given 50 and then having to give back 25. The utility of the 25 is exactly the same in both options. However, individuals are most likely to choose to receive straight cash because a single gain is generally observed as more favorable than initially having more cash and then suffering a loss.</p> <p></p> <p>Example: Let's say I toss a coin. If it turns head, I'll give you 200 and if it turns tail you'll give me 100. So, you have an expected return of 50. By expected utility theory, you should take the bet. However, people don't usually take the bet.</p> <p>This can be understood by the prospect thoery. People don't take the bet because the gaining 200 gives a little happiness but losing 100 gives a lot of unhappiness. This is called the loss aversion namely, people are more afraid of loosing. (\"You are always worried about little losses today.\")</p> <p></p>"},{"location":"Notes/Finance/Market_Hypothesis/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Efficient-Market-Hypothesis\"&gt;Efficient Market Hypothesis&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Weak Form</li> <li>Semi-Strong Form</li> <li>Strong Form</li> </ol> <p><li>Behavioral Finance Hypothesis</li></p> <ol><li>Expected Utility Theory</li> <ol><li>Expected Utility</li> <li>Marginal Utility</li> </ol><li>Prospect Theory</li> <ol><li>Value Function in Prospect Theory</li> </ol> </ol>"},{"location":"Notes/Finance/Market_Hypothesis/#efficient-market-hypothesis","title":"Efficient Market Hypothesis","text":""},{"location":"Notes/Finance/Market_Hypothesis/#weak-form","title":"Weak Form","text":""},{"location":"Notes/Finance/Market_Hypothesis/#semi-strong-form","title":"Semi-Strong Form","text":""},{"location":"Notes/Finance/Market_Hypothesis/#strong-form","title":"Strong Form","text":""},{"location":"Notes/Finance/Market_Hypothesis/#behavioral-finance-hypothesis","title":"Behavioral Finance Hypothesis","text":""},{"location":"Notes/Finance/Market_Hypothesis/#expected-utility-theory","title":"Expected Utility Theory","text":""},{"location":"Notes/Finance/Market_Hypothesis/#expected-utility","title":"Expected Utility","text":""},{"location":"Notes/Finance/Market_Hypothesis/#marginal-utility","title":"Marginal Utility","text":""},{"location":"Notes/Finance/Market_Hypothesis/#prospect-theory","title":"Prospect Theory","text":""},{"location":"Notes/Finance/Market_Hypothesis/#value-function-in-prospect-theory","title":"Value Function in Prospect Theory","text":""},{"location":"Notes/Finance/Module_1/","title":"Module 1","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n</code></pre> <pre><code>import warnings\nwarnings.filterwarnings('ignore')\n</code></pre> <pre><code>plt.rcParams['figure.figsize'] = [12, 8]\n</code></pre> <p>A brief list of topics are: - Risk - Insurance - Diversification - History of Finance - Innovation - Behavioral Finance - Debt - Stocks - Real Estate - Regulation - Banking - Futures - Monetary Policy - Endowment Management - Investment Banking - Options - Money Managers - Exchanges - Public Finance - Nonprofit Finance - Purpose of Finance</p> <p>Value at risk is a measure used by some finance people to quantify risk of of an investment or of a portfolio and it's quoted in units of dollars for a given probability and time horizon. For example, if it says lets's say 1%, one-year value at risk of 10 million, it means that there is a 1% chance that the portfolio will lose 10 million in one year.</p> <p>The stress test is a test usually ordered by government to see how some firm will stand up to a financial crisis.</p> <p>Stress testing is a computer simulation technique used to test the resilience of institutions and investment portfolios against possible future financial situations. Such testing is customarily used by the financial industry to help gauge investment risk and the adequacy of assets and help evaluate internal processes and controls. In recent years, regulators have also required financial institutions to carry out stress tests to ensure their capital holdings and other assets are adequate.</p> <p>S&amp;P 500 is a stock market index that measures the stock performance of 500 large companies listed on stock exchanges in the United States. It is one of the most commonly followed equity indices. The S&amp;P 500 index components and their weightings are determined by S&amp;P Dow Jones Indices. S&amp;P 500 is widely regarded as the best single gauge of large-cap U.S. equities.</p> <p>The S&amp;P 500 index is a free-float weighted/capitalization-weighted index. As of August 31, 2022, the nine largest companies on the list of S&amp;P 500 companies accounted for 27.8% of the market capitalization of the index and were, in order of highest to lowest weighting: Apple, Microsoft, Alphabet (including both class A &amp; C shares), Amazon.com, Tesla, Berkshire Hathaway, UnitedHealth Group, Johnson &amp; Johnson and ExxonMobil.</p> <pre><code>snp = pd.read_csv('Data/GSPC.csv', parse_dates=['Date'], index_col='Date')\nsnp.head()\n</code></pre> Open High Low Close Volume Date 1927-12-30 17.660000 17.660000 17.660000 17.660000 0.0 1928-01-03 17.760000 17.760000 17.760000 17.760000 0.0 1928-01-04 17.719999 17.719999 17.719999 17.719999 0.0 1928-01-05 17.549999 17.549999 17.549999 17.549999 0.0 1928-01-06 17.660000 17.660000 17.660000 17.660000 0.0 <pre><code>px.line(snp, x=snp.index, y='Close', title='S&amp;P 500')\n</code></pre>  contributors',a=['\\xa9 Carto726352948,-1.4424242205317748,5.340126435566743,-0.7293212736136541,-3.457851294910637,-1.4849972318035274,-0.2865729229173931,22.242122255018305,-1.3148664700513375,-9.451609595917349,-0.556539853220904,-2.0246055600899475,4.173397971712505,441.80133582872253,-2.0684467034251175,-1.9516742523427988,-1.76788505164428,6.603696806962049,-8.50001349181698,0.5533853550501414,-4.1064718811231815,-0.4914637528232794,-2.3643359213709245,-1.852619939747655,-0.8659343012482663,-2.207158517261019,-1.6574047598668746,-0.014962237167493979,-0.5930720772564915,0.1811979826827615,-1.2635136220123622,15.497082517311402,0.6756181632161012,-0.20519759975088492,-0.0844050585578653,120.04152127475473,-3.444124413328125,-2.107813502595677,-13.089912615727972,1.0802478794830903,-1.1538004259759247,0.5704082350282156,-5.564140229429939,6.184535072580838,-0.7135798455718366,-19.785073176695207,1.001308507180227,-0.5913795355515381,1.440391358856768,2.5470731432661258,-1.217031545798744,-1.0050715589475643,-3.1143912641165885,-0.42008074747740454,1.776457436712864,-0.10555704674919618,-1.5893243803135044,0.29851501206856257,-0.4327447387705016,-1.0539917004375827,-1.5346560968302605,0.6417105315926236,-3.31186821773289,0.6021544316640277,-0.17862388431373818,0.462227932910902,1.5795668915668064,-1.3591513478656403,0.5074758949369917,0.5642324228465064,0.27338007448426377,-0.008367983035374728,2.8202059292760855,0.8191450106713724,4.10572652696038,4.251399446464297,1.5479405404817053,10.05884333143656,-0.010696550823450468,1.6600316707197584,-0.9353350920591452,-1.9626647200546292,0.5549964150180653,-1.7690218153604822,1.7178706052572115,-0.5004330064257285,4.63901060664845,-2.5753615063391595,-4.346563104417392,0.7609921789182709,-1.368181083254038,-0.41028364397683587,0.3138190563200215,-0.903474624993727,0.2843366587818436,0.3188994246293832,0.7714183016756312,0.2713089804877711,-1.588536792676052,1.0069038342989962,-7.066213049374656,-0.043239547972375295,0.24928852166210794,0.8598879335308423,1.9861928905875617,2.302267925650397,0.057557510387067475,0.918226050986634,2.988958266204102,-4.081744109757961,2.0124049348128006,1.2484153031253233,-1.5662654717642266,-0.7066293614359375,0.5323887448802023,1.2234783158524618,3.7483574347883897,1.6191830177942148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            ',i].join(\" \"),o=['Map tiles by Stamen Design972318035274,-0.2865729229173931,22.242122255018305,-1.3148664700513375,-9.451609595917349,-0.556539853220904,-2.0246055600899475,4.173397971712505,441.80133582872253,-2.0684467034251175,-1.9516742523427988,-1.76788505164428,6.603696806962049,-8.50001349181698,0.5533853550501414,-4.1064718811231815,-0.4914637528232794,-2.3643359213709245,-1.852619939747655,-0.8659343012482663,-2.207158517261019,-1.6574047598668746,-0.014962237167493979,-0.5930720772564915,0.1811979826827615,-1.2635136220123622,15.497082517311402,0.6756181632161012,-0.20519759975088492,-0.0844050585578653,120.04152127475473,-3.444124413328125,-2.107813502595677,-13.089912615727972,1.0802478794830903,-1.1538004259759247,0.5704082350282156,-5.564140229429939,6.184535072580838,-0.7135798455718366,-19.785073176695207,1.001308507180227,-0.5913795355515381,1.440391358856768,2.5470731432661258,-1.217031545798744,-1.0050715589475643,-3.1143912641165885,-0.42008074747740454,1.776457436712864,-0.10555704674919618,-1.5893243803135044,0.29851501206856257,-0.4327447387705016,-1.0539917004375827,-1.5346560968302605,0.6417105315926236,-3.31186821773289,0.6021544316640277,-0.17862388431373818,0.462227932910902,1.5795668915668064,-1.3591513478656403,0.5074758949369917,0.5642324228465064,0.27338007448426377,-0.008367983035374728,2.8202059292760855,0.8191450106713724,4.10572652696038,4.251399446464297,1.5479405404817053,10.05884333143656,-0.010696550823450468,1.6600316707197584,-0.9353350920591452,-1.9626647200546292,0.5549964150180653,-1.7690218153604822,1.7178706052572115,-0.5004330064257285,4.63901060664845,-2.5753615063391595,-4.346563104417392,0.7609921789182709,-1.368181083254038,-0.41028364397683587,0.3138190563200215,-0.903474624993727,0.2843366587818436,0.3188994246293832,0.7714183016756312,0.2713089804877711,-1.588536792676052,1.0069038342989962,-7.066213049374656,-0.043239547972375295,0.24928852166210794,0.8598879335308423,1.9861928905875617,2.302267925650397,0.057557510387067475,0.918226050986634,2.988958266204102,-4.081744109757961,2.0124049348128006,1.2484153031253233,-1.5662654717642266,-0.7066293614359375,0.5323887448802023,1.2234783158524618,3.7483574347883897,1.6191830177942148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            ','under CC BY 3.00.556539853220904,-2.0246055600899475,4.173397971712505,441.80133582872253,-2.0684467034251175,-1.9516742523427988,-1.76788505164428,6.603696806962049,-8.50001349181698,0.5533853550501414,-4.1064718811231815,-0.4914637528232794,-2.3643359213709245,-1.852619939747655,-0.8659343012482663,-2.207158517261019,-1.6574047598668746,-0.014962237167493979,-0.5930720772564915,0.1811979826827615,-1.2635136220123622,15.497082517311402,0.6756181632161012,-0.20519759975088492,-0.0844050585578653,120.04152127475473,-3.444124413328125,-2.107813502595677,-13.089912615727972,1.0802478794830903,-1.1538004259759247,0.5704082350282156,-5.564140229429939,6.184535072580838,-0.7135798455718366,-19.785073176695207,1.001308507180227,-0.5913795355515381,1.440391358856768,2.5470731432661258,-1.217031545798744,-1.0050715589475643,-3.1143912641165885,-0.42008074747740454,1.776457436712864,-0.10555704674919618,-1.5893243803135044,0.29851501206856257,-0.4327447387705016,-1.0539917004375827,-1.5346560968302605,0.6417105315926236,-3.31186821773289,0.6021544316640277,-0.17862388431373818,0.462227932910902,1.5795668915668064,-1.3591513478656403,0.5074758949369917,0.5642324228465064,0.27338007448426377,-0.008367983035374728,2.8202059292760855,0.8191450106713724,4.10572652696038,4.251399446464297,1.5479405404817053,10.05884333143656,-0.010696550823450468,1.6600316707197584,-0.9353350920591452,-1.9626647200546292,0.5549964150180653,-1.7690218153604822,1.7178706052572115,-0.5004330064257285,4.63901060664845,-2.5753615063391595,-4.346563104417392,0.7609921789182709,-1.368181083254038,-0.41028364397683587,0.3138190563200215,-0.903474624993727,0.2843366587818436,0.3188994246293832,0.7714183016756312,0.2713089804877711,-1.588536792676052,1.0069038342989962,-7.066213049374656,-0.043239547972375295,0.24928852166210794,0.8598879335308423,1.9861928905875617,2.302267925650397,0.057557510387067475,0.918226050986634,2.988958266204102,-4.081744109757961,2.0124049348128006,1.2484153031253233,-1.5662654717642266,-0.7066293614359375,0.5323887448802023,1.2234783158524618,3.7483574347883897,1.6191830177942148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            ',\"|\",'Data by OpenStreetMap7034251175,-1.9516742523427988,-1.76788505164428,6.603696806962049,-8.50001349181698,0.5533853550501414,-4.1064718811231815,-0.4914637528232794,-2.3643359213709245,-1.852619939747655,-0.8659343012482663,-2.207158517261019,-1.6574047598668746,-0.014962237167493979,-0.5930720772564915,0.1811979826827615,-1.2635136220123622,15.497082517311402,0.6756181632161012,-0.20519759975088492,-0.0844050585578653,120.04152127475473,-3.444124413328125,-2.107813502595677,-13.089912615727972,1.0802478794830903,-1.1538004259759247,0.5704082350282156,-5.564140229429939,6.184535072580838,-0.7135798455718366,-19.785073176695207,1.001308507180227,-0.5913795355515381,1.440391358856768,2.5470731432661258,-1.217031545798744,-1.0050715589475643,-3.1143912641165885,-0.42008074747740454,1.776457436712864,-0.10555704674919618,-1.5893243803135044,0.29851501206856257,-0.4327447387705016,-1.0539917004375827,-1.5346560968302605,0.6417105315926236,-3.31186821773289,0.6021544316640277,-0.17862388431373818,0.462227932910902,1.5795668915668064,-1.3591513478656403,0.5074758949369917,0.5642324228465064,0.27338007448426377,-0.008367983035374728,2.8202059292760855,0.8191450106713724,4.10572652696038,4.251399446464297,1.5479405404817053,10.05884333143656,-0.010696550823450468,1.6600316707197584,-0.9353350920591452,-1.9626647200546292,0.5549964150180653,-1.7690218153604822,1.7178706052572115,-0.5004330064257285,4.63901060664845,-2.5753615063391595,-4.346563104417392,0.7609921789182709,-1.368181083254038,-0.41028364397683587,0.3138190563200215,-0.903474624993727,0.2843366587818436,0.3188994246293832,0.7714183016756312,0.2713089804877711,-1.588536792676052,1.0069038342989962,-7.066213049374656,-0.043239547972375295,0.24928852166210794,0.8598879335308423,1.9861928905875617,2.302267925650397,0.057557510387067475,0.918226050986634,2.988958266204102,-4.081744109757961,2.0124049348128006,1.2484153031253233,-1.5662654717642266,-0.7066293614359375,0.5323887448802023,1.2234783158524618,3.7483574347883897,1.6191830177942148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             contributors','under ODbL0501414,-4.1064718811231815,-0.4914637528232794,-2.3643359213709245,-1.852619939747655,-0.8659343012482663,-2.207158517261019,-1.6574047598668746,-0.014962237167493979,-0.5930720772564915,0.1811979826827615,-1.2635136220123622,15.497082517311402,0.6756181632161012,-0.20519759975088492,-0.0844050585578653,120.04152127475473,-3.444124413328125,-2.107813502595677,-13.089912615727972,1.0802478794830903,-1.1538004259759247,0.5704082350282156,-5.564140229429939,6.184535072580838,-0.7135798455718366,-19.785073176695207,1.001308507180227,-0.5913795355515381,1.440391358856768,2.5470731432661258,-1.217031545798744,-1.0050715589475643,-3.1143912641165885,-0.42008074747740454,1.776457436712864,-0.10555704674919618,-1.5893243803135044,0.29851501206856257,-0.4327447387705016,-1.0539917004375827,-1.5346560968302605,0.6417105315926236,-3.31186821773289,0.6021544316640277,-0.17862388431373818,0.462227932910902,1.5795668915668064,-1.3591513478656403,0.5074758949369917,0.5642324228465064,0.27338007448426377,-0.008367983035374728,2.8202059292760855,0.8191450106713724,4.10572652696038,4.251399446464297,1.5479405404817053,10.05884333143656,-0.010696550823450468,1.6600316707197584,-0.9353350920591452,-1.9626647200546292,0.5549964150180653,-1.7690218153604822,1.7178706052572115,-0.5004330064257285,4.63901060664845,-2.5753615063391595,-4.346563104417392,0.7609921789182709,-1.368181083254038,-0.41028364397683587,0.3138190563200215,-0.903474624993727,0.2843366587818436,0.3188994246293832,0.7714183016756312,0.2713089804877711,-1.588536792676052,1.0069038342989962,-7.066213049374656,-0.043239547972375295,0.24928852166210794,0.8598879335308423,1.9861928905875617,2.302267925650397,0.057557510387067475,0.918226050986634,2.988958266204102,-4.081744109757961,2.0124049348128006,1.2484153031253233,-1.5662654717642266,-0.7066293614359375,0.5323887448802023,1.2234783158524618,3.7483574347883897,1.6191830177942148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            '].join(\" \"),s={\"open-street-map\":{id:\"osm\",version:8,sources:{\"plotly-osm-tiles\":{type:\"raster\",attribution:i,tiles:[\"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-osm-tiles\",type:\"raster\",source:\"plotly-osm-tiles\",minzoom:0,maxzoom:22}]},\"white-bg\":{id:\"white-bg\",version:8,sources:{},layers:[{id:\"white-bg\",type:\"background\",paint:{\"background-color\":\"#FFFFFF\"},minzoom:0,maxzoom:22}]},\"carto-positron\":{id:\"carto-positron\",version:8,sources:{\"plotly-carto-positron\":{type:\"raster\",attribution:a,tiles:[\"https://cartodb-basemaps-c.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-carto-positron\",type:\"raster\",source:\"plotly-carto-positron\",minzoom:0,maxzoom:22}]},\"carto-darkmatter\":{id:\"carto-darkmatter\",version:8,sources:{\"plotly-carto-darkmatter\":{type:\"raster\",attribution:a,tiles:[\"https://cartodb-basemaps-c.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-carto-darkmatter\",type:\"raster\",source:\"plotly-carto-darkmatter\",minzoom:0,maxzoom:22}]},\"stamen-terrain\":{id:\"stamen-terrain\",version:8,sources:{\"plotly-stamen-terrain\":{type:\"raster\",attribution:o,tiles:[\"https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-stamen-terrain\",type:\"raster\",source:\"plotly-stamen-terrain\",minzoom:0,maxzoom:22}]},\"stamen-toner\":{id:\"stamen-toner\",version:8,sources:{\"plotly-stamen-toner\":{type:\"raster\",attribution:o,tiles:[\"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-stamen-toner\",type:\"raster\",source:\"plotly-stamen-toner\",minzoom:0,maxzoom:22}]},\"stamen-watercolor\":{id:\"stamen-watercolor\",version:8,sources:{\"plotly-stamen-watercolor\":{type:\"raster\",attribution:['Map tiles by Stamen Design148,-0.2945376028560764,0.8954571374601805,5.2761462119609766,-2.977332702592685,-9.19839342264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            ','under CC BY 3.0264626,-3.3655492072071618,-0.5537174386404439,0.1350821663751009,-0.6097198998521327,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            ',\"|\",'Data by OpenStreetMap7,-0.1591587020899055,0.2718601161670984,1.266479958468032,-1.873637916343738,-1.90891527666486,-1.2551806237525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             contributors','under CC BY SA37525052,1.1350022753280733,1.1014275724018951,0.09385588894514268,0.45860065817992546,-2.4229003217269423,1.0586498012599477,0.10227153092413459,-0.3896449823319652,0.9795616362574732,-20.119389922305842,-3.264614797934947,0.4539069049656109,0.5691242924667983,0.4210565175525053,-0.1588609529395685,-1.931836950588325,-0.3523721100356211,-2.598967236333447,-0.6393262913923463,8.525000372533144,-0.013225387071983466,0.020062619796647124,-0.3415848507201819,-1.5451289720667558,0.9971502799404492,2.3242725690949873,0.5893638068026009,0.5411442412871564,1.3146797710291693,2.369360332530732,1.0216388047109766,0.8804989175755297,-2.1528588453188475,-0.3826230391316733,-0.03870274044382432,0.2699059125326432,0.058692200159420733,-1.1720793330946033,1.9097257801659178,0.6922535713869562,-1.8185202895251618,-0.5112712915696948,-0.6046814004525164,1.4143716659478793,1.0624552211387546,-22.676572966654813,0.5638276408221564,0.703498083347529,5.604946104003622,2.439236739970894,0.4890645358818331,0.843642076657596,4.802097264521937,-1.6241030546503392,-780.845085959452,0.3546811249436321,-11.832530517842452,-3.623662842674114,2.1939340389631266,-1.529350281595782,-3.65889110580749,-0.026396673743715068,5.969105346578146,-2.356898208564548,1.4687910441535161,0.15957758198101227,0.9561780288095316,-0.043414517793670754,-1.7524517122854986,6.4993745784098795,12.594158547962348,-2.7059559503437383,-0.738044862121508,-0.3776024343400518,-2.8714960829196032,-2.4396686019980063,-3.0281072235422566,0.5340675759640418,3.383520821445388,0.27419023002812243,0.7036502934337462,-0.5726731102240434,30.897376810944692,0.8959421128449596,-8.953824217931377,0.31410454260718573,0.8928465484121071,0.05943215598581997,-0.47586639078105397,2.0108373543222102,0.923984398627452,0.6402963745159819,0.6337512651005633,1.5864572238932515,0.20252145801823718,-2.5947567617370004,-8.297823476462426,1.2998748229676629,1.3884886945418273,0.2636004498786115,0.01730990698130657,-0.5974894922675162,0.4956352716641658,-0.7698246149037969,-1.2265509303528428,0.3105991158921573,1.3134110324114305,-0.6297563927937502,-0.33881463149530155,-0.6881607856853978,0.8827887305074171,-1.1971477898673728,-0.4833371059437491,0.5138803024720943,-0.2234467203782793,-0.36190869256651764,-2.248478380195119,-0.4501447925388152,1.0597871761448778,-0.30559788284541234,1.2356363089580926,4.165360355427556,0.29225447881506966,0.23324557395513904,-0.8243795953357818,0.46809721839431506,0.35455129327665785,1.9656654110075824,0.23855262192998858,6.0614805976644535,-0.22477371945717792,-0.534094168626475,-0.35722283853361997,-0.1750688820602313,0.706603898360012,-4.794552832980523,-3.863905423965329,-0.7146748615756069,531.0501774322775,0.7539926909594018,1.5299305683715323,0.7304831351922709,-0.6397723087078967,-3.7423164242857045,-0.9789679883647567,1.8199111724306587,0.8954797569802747,0.07796378416426071,8.528309050714201,-0.20966027987938612,-1.8893774681268307,1.115990899653666,3.088124079051673,0.16372415395145723,-0.25719318975092076,-1.815633461455967,-0.7826896049978322,-1.4176488330990813,0.3086086253396971,-0.0739158580332023,2.628587696067788,0.27573721074864443,0.114149602420096,1.7240996806445381,1.0607969437178129,-0.12882530513146281,-1.3458970070996727,1.1546541023132944,1.3844086633278452,0.5940792888756503,-2.5140788445910265,-1.06746476041409,0.44566588521905076,0.03705576298089162,-0.3209242212840317,-1.1943570469514657,0.06826298489369188,-0.3483874538975386,0.05374493688764936,0.09675189156770932,-1.6657382868505766,0.18372193400560824,-5.412888741018649,2.250878925461317,1.3073593487386523,-0.20428640342538593,-0.32997783096094646,0.03479756389169289,-0.03075188131109401,-20.10985625419598,-2.5959919569961496,1.8430873701196013,-5.704117629808867,0.8117177277570489,1.1710853033140753,-13.950625912387855,-0.19492034484987558,-1.2647373594739433,-0.19755314355309853,0.7033240772554629,1.1275267339424964,-0.6579220972224371,-5.009774390337332,-2.373280943758061,3.1142828675515677,6.0776858826543885,-1.097829980643482,-1.6177834651780665,-1.3274725877099165,0.9457582512180734,0.4351715387369786,-1.3903277344021276,3.569900311192977,0.034142573439394905,1.4024184563865583,-1.5597835872524384,1.0554208856654574,-1.325940493668234,5.497976655889543,-0.37904886316391023,-1.0053077948790363,-0.06630027339031724,3.5664794793415786,0.12945437278068492,-1.2083939165691913,-1.0004128195789863,0.10728040414808107,-1.7293408845377973,-2.0213373383130615,0.3682910335738173,-0.3579629625184005,-1.493457060609622,-0.9644216957053504,0.3708235763256724,-0.2625629012907194,0.07567688479022008,-0.9648688072203561,3.0332267543224263,0.36375015956274065,-0.5413223417662643,1.6014192105373315,-1.9079674602184837,-0.9308492710071381,0.5948694483802756,2.6311660376363197,4.1773372286701465,-2.1362923513374175,-3.362043846194204,-0.2823555453122359,-0.028487320691155966,0.1146269396829412,1.5513032032154326,0.30681727242999673,-0.5430562586855477,-3.9406921537018356,-1.0265089096539852,1.3547947493075376,0.5006614752055203,-4.724984645220927,-0.6180487838109339,-6.741543024018358,27.861609281179256,-0.6885379984272081,8.617778249057412,-1.4931854192789729,2.719974971052739,0.2075052894588769,2.537000589465777,1.7237579524709987,-1.3141888545336993,-0.46863816203838915,2.5184320155964195,-0.3394619054854279,-12.28590719601976,-0.20757023957116677,-2.152379650490482,2.2173881854926,-0.21910697557053854,-0.41674339609858674,-0.3141181648158974,-2.298098920762071,-0.07062635805631053,0.921298986943006,-0.5620292880321273,0.5364627835032976,-0.8177007364360932,-2.5914548319285786,-0.3565528601395404,4.812462599495987,0.4239001646688533,-14.802314680681027,3.7802253781220934,-0.46168326055097075,0.13199340188453426,-2.0095132171202277,4.659632168683738,3.8873966944659424,-2.6159159559228566,-0.3486001272838944,-3.4470118384123247,0.3553902915404883,1.9334570352388838,0.36816255123387825,-2.0249685865557003,-2.7180850906227176,3.038180761301813,-0.9537128990727574,0.17642394387900828,-4.709273255097415,95.36834492009913,0.3251865419226028,-0.7455621544787135,0.12398684991051638,-0.4031947352445993,1.4016262362611476,-0.9416398649230949,8.553240037722771,1.7607353570876367,-0.5995043928692382,-0.04642317057447672,-13.588201847085582,-2.3929838126794403,-0.22511074745519513,-0.675190807668693,1.7851680818099425,-0.22336055810270605,-0.8262379665590358,1.540691784654159,-2.0187258189847324,-2.259195375097399,-0.24098806034355316,4.1032293947367675,0.24875195080644313,1.5467974193832783,0.257040641417393,0.6335040595905836,0.7899177010315986,-1.371975857844753,-0.18846293068338524,-1.448344625896551,-0.17662633093601557,2.3751030697019715,-1.158042032542164,0.0932854030044616,-0.9318299586213031,-1.769055332442462,-0.3980631159204296,0.16438438081123474,0.919621946724657,0.9936139620073263,0.12342199060676833,-2.2805180788232673,7.755648761766388,0.6366451405708566,-11.310153752185725,4.242358543038868,-1.330330790197376,0.6609416444337689,0.6589471892367326,-2.467036360642735,0.23228690437408434,-1.5548737889782223,-1.6972738949854969,1.3319644923228053,2.9253667933540615,1.8915037414296825,1.8738601549467109,3.3364745504450966,-0.5863624263084485,-1.3391425989300467,0.4880542252819605,-0.5751422823501151,-3.6941351624232706,0.8165064121182617,-0.3784679659707524,-0.8513785176680541,0.4352515505975242,0.17381796705076258,1.406681269391612,-0.930699910828189,1.9954522715058365,-1.0046287014861301,1.094525892257791,0.4128535457197687,3.1587932020948415,-1.019160822035225,-1.386333286121517,1.9714189106965974,-0.28723421506928726,-0.6776873833581426,-19.973311212896455,0.20629278388776126,-0.5602394712333226,-6.757741076335833,-0.8027936691899473,0.19693721597930658,0.004357589106090543,-1.5760407052232803,-0.2238596003922533,-0.6019278749041739,-0.12325540317921266,2.0232445809221553,0.6035810490197305,2.482417992524204,1.2370719608722913,0.8262238857741132,-5.176004706873396,-0.7713571475999107,0.3427832509602563,2.3235574691983096,0.35800412693414313,0.24705297854174038,1.2222497671064618,-0.6759961392811368,8.71354602076813,0.14366347071663899,-28.69332760961239,-2.4557814826716995,-1.0386275296591931,1.559620168221552,2.17933745378524,-0.5701931060581285,3.777741658438103,1.1224846432156268,-1.7730098667391412,-1.0140998533245584,-0.36095921121602526,-0.21118635988924941,1.0371693167187659,1.471007680471799,-5614.733511168981,-2.6294610024714467,-2.0557058727166364,-0.8679702377332448,0.05487595696743125,0.48355093321595805,-0.21694319029946318,-6.004281940206839,2.3231318864926087,0.004079342543552963,-1.308370047791962,-0.5911587065562653,2.7694106938592515,-1.0428177546627304,9.168493547758096,0.27989055454681133,-2.9094906829669385,-0.8344461217582264,-0.592400401545114,-0.17879281710905776,-4.955866012978825,1.523568114264636,5.551271939133066,3.58513766760755,-0.036912562224334824,-0.467651514767514,0.6835192859007293,1.3234688128819985,-0.36299380046844726,-2.958533679311697,3.055589345036169,0.06479031605820267,0.8028609135519951,1.6431755022251953,0.29009785189709375,-0.6947478590887802,1.8185364949343348,0.20698819275836225,-1.960998936558955,-10.445165745025918,6.196128681073415,1.9643104966140745,0.9776286630294662,-1.4232029849953434,0.33952373329347696,-5.616874923531618,0.8625195602172492,-1.9776552538956944,-0.1721694396309918,5.405617546871816,-0.10869070582451015,1.6744585068342062,-2.3935175095831487,3.7416337263281063,4.04583415685212,2.4289772765914437,7.865141315530326,1.0182635045891215,-1.6692765621521997,0.18242181279627834,0.40333157878040654,0.3465580043321225,-5.333700878977118,2.5560628049134038,-0.44953571700437644,-4.401228141527576,-0.2369579071993067,0.0887450018146684,-0.6094630045318379,0.13852605020875133,0.9373434050626919,0.38055304094651066,0.22770771057647726,-1.4269306425222041,-2.8933498717911976,-0.016061946753907076,0.8937611247473592,0.15309138923851306,-0.13113147534719227,-3.121577471708565,2.0788516141885625,1.1300847557920102,-0.049272337228249447,0.5581698050281151,-0.4643777312599208,0.8321064989782022,0.11608323987071907,5.629279166575787,1.9614948380609336,2.301297473796018,0.5787209532740505,1.5320071754333797,-0.9269263890217165,0.264319824041471,-16.958335113937103,0.5134966822618364,-1.8820589931110698,0.8832922314867308,0.3656078606746241,-5.294319267986579,-0.9374816007411716,-1.3924016946830606,-0.9796317909301019,0.9144762434059872,-1.8745721768566455,-0.5771868440693081,-0.2016406735246906,-0.5927355390632075,0.4956060679381054,-0.09571890434866825,1.7422857208202476,0.8060665307274031,0.08347604914574643,1.3144680000071347,-0.8357275045428663,0.30574529844699905,0.22801583507847017,-0.8162581849771706,4.395896409617066,0.46849413810187773,31.02755879036288,0.3389682408774225,0.13804585741308384,57.00256855998845,5.204357282243444,0.0870740668749726,-0.30760811826441437,-1.8331960206779048,18.551445951258867,0.21322800650681525,0.24815851815766393,-0.22674229270341167,1.6530920534566271,-4.425980755132722,1.3034269656948192,0.7647241746842207,1.595965643675728,-1.5703453456227006,-0.055085682157961564,0.7577327425975581,-3.128448157594119,1.768485996936336,-1.5570973991949038,1.098384811897578,-0.9664845783336609,-1.477714479282712,1.145772017474618,3001.984747674608,-0.988912141873718,-0.7207614557567139,3.2503166221102515,0.3055276657817554,-0.4524616847604055,0.9431259811048801,3.4692455488334994,1.335457014196766,-3.90594014083134,-42.14827692258385,-2.0020905131687408,-1.0920033035544954,2.4382287652299612,-0.9403349290457726,-0.31708481356230145,1.579898872751848,-0.916395333845247,-0.2702734029838888,2.7218864914304137,28.278359830210427,0.7279776022902072,1.2158570103432507,-1.8158833300473063,0.7408399516946582,-0.5386929376032098,0.41018114141580153,-0.0034404714946941624,0.07253666552727871,0.494507065003887,1.1951811848648484,-0.9482195409856682,1.238741403098578,-0.4196984339797828,1.1801436787286517,-1.3936571389910413,-0.8876762360577807,-0.4871907274154427,-14.234789037543438,2.8448823168051742,0.1453730618060094,-0.709076625060486,9.386033416407074,-8.406522095010732,0.6353534907321301,1.1521006498473612,-2.768117199881903,-1.7189811540899118,-4.1896782341620495,0.7332780439329728,1.0948718497666263,-0.45633705442520694,-0.38793519785549124,10.750281210660782,1.0912693903977226,-0.1317686517009689,-6.40286307084737,1.4052039231185154,1.7063586985544583,0.5845452822599938,0.9169567592055932,-1.067435537907965,0.46446704872593386,0.5179719392851156,-1.036003449073916,-13.914488772086596,-6.498396893600364,2.8730043500099764,0.27490342074723506,-1.3710113705063922,1.914071836070122,5.482816222835509,-12.198037541988542,-0.9692874042669296,-1.7803573527539773,-2.795122331229861,0.35158829430814137,0.05065341704945779,-12.449334400717708,-29.037341877937028,-0.987530919651884,12.817708164404596,-0.7482624412039767,-1.2021662061029394,-2.013431608920676,1.0293540654469258,-3.7559053578966752,1.4906215748192386,24.115201783294257,0.46012305684768273,0.8893940236868706,-0.8434624179875801,-0.35736660951310556,0.13892871481511201,-1.421304947849974,-1.0687004085987468,-0.024201219960845136,-0.7748248754779146,0.977831876391445,0.8676920741263012,-7.633660831104899,-1.7382444959536465,-0.017634581889938262,0.8078153408158415,-2.365261014030512,-8.769273406368798,0.7051998531194745,3.093998624724614,0.33586945104828375,-1.4849864629695977,-0.24598781702841777,-0.5719082998031686,-2.412364877908801,2.457623630752835,0.3833529419558311,-0.7281137795563954,2.440209560942019,3.2589763846509525,3.1196317130104383,0.8655010866865762,-0.7136099592365729,1.9424332100141883,-2.356380568665264,0.10462305357987174,-1.0628122251238716,-1.1706228441283677,2.415782027320052,-2.360346650723777,3.705353551909391,0.5725672428710616,0.03267473331817717,0.5104701074311929,0.19322770563123579,0.14043236108437968,-8.812178257100669,0.7430088683010353,-0.6203304139126942,3.9094541893592196,7.808719550561513,1.7187335607356582,2.070938583991627,-0.1194832189238567,13.545978098549549,0.16836952845825168,1.1893094662712471,0.4192555611640999,-0.39241240860089427,1.961095331790942,1.1309167117477665,4.275853387425341,-1.7707870662284457,-5.014402524080154,-0.9421509581195564,-0.7952333741256606,-6.4761863932523,-1.1947239684165003,16.32119121119996,-0.15946051241525305,-15.982355873146135,8.274825199991385,0.21496247367516674,0.780825545994783,2.076408214926663,-6.846671055553725,0.43947473172153056,1.1664689098451764,0.15473638150754712,-0.9375195760890276,0.4523083903918178,0.30819889791496574,0.24974823074647906,-0.4512672128119992,1.2555982488903286,0.2189105343175789,-0.6176501937673572,3.828342046159122,0.9497257335436831,0.3880729049228581,5.991077796863827,-0.38701650078390987,0.06413343777827796,-1.6750215660579832,-0.16463901129404104,1.5614486959639762,0.3603431189009355,4.008890848905706,1.8565287744223042,0.34978165947847856,-0.5412282465233753,0.8305197838883988,-2.805583867164048,-0.11665249720307287,-1.00902746355481,-2.483099177361383,3.5843687771292827,-2.6301280867165255,-72.56706158422315,6.487124764598554,4.556738566422756,27.672982551748046,0.03812043006315136,-2.306672041481968,4.29347190918371,-0.770966620000117,-0.01610091600997863,-4.957686120817236,0.13652918355322408,-0.690686431255128,5.876776728211007,-1.5241715617393345,-2.3632812105180174,2.1325048183599726,3.006758871736517,1.9928704622327582,-0.6088172855901279,0.40546736269769706,-0.8460103745870488,-2.333704577590461,0.0323715368371402,0.2673517292338447,-5.392622246054483,-2.2462881760049793,0.24894729564285473,-0.265296014870518,-4.072012962928395,2.3622772357597577,-4.941299510851297,3.259205026375666,-4.058812679463351,2.6852366681847806,-2.985394103876041,1.566957768783103,0.6369451802701542,-1.1283192786772323,-0.8116690761947719,10.611015926453963,-3.941505324237558,0.18088391748593102,1.2706893130592014,-0.9075641937631325,-0.8781330113552136,-5.845103036403972,10.77153993415599,-2.9418364225331866,-0.7734016961598733,-0.512192758985232,-1.1965169260042405,-1.009486677267521,-1.8286005470839402,1.9262333183513212,1.5245839834750976,-0.25764513926537874,-0.21689968247463726,-0.8641768884557481,-1.4742374353610814,-1.0185093035166872,-4.372817005695777,0.12841134483068864,0.43738397846813887,4.4253300665567386,4.613565282116244,-0.28085003016271365,-0.4896546612833672,-0.44390615361926883,-106.2360064422997,0.8415532176836522,0.28542058711409724,-0.16546590577442458,210.71711565376492,0.37774750308670696,1.2235075177971042,0.5773723438318454,-4.095743503364532,-2.1138350236048753,-0.05355983948376183,-0.11528743310082837,-4.560223538729395,-1.1029008709739059,-7.720572050330105,0.026735974837010762,0.14629254881533155,-0.5451799139235485,1.206964739540633,-1.385412355607049,9.60463466108157,0.5010874984469574,-0.3568188013323755,-0.030257766338934816,-5.288770763755525,-0.5466247649588736,1.4469971711627803,-1.3318242140040752,-3.2806330841022144,6.600212586195789,1.5017933193757367,-0.5292202400187016,4.813540915744964,-0.700860069052947,-5.265652624981861,-0.22349600515192236,1.0162887170769264,-0.17648510530923428,-0.17307479307043352,0.760933218897033,0.47642736974099015,-0.42910127528077324,0.08147682013842558,-3.8538368169671258,-0.17986878253175098,-2.831473435850444,-0.00471806005671574,-2.64165654369998,4.452687320187201,32.325723806152325,-1.158832118688426,-1.2108581049542042,1.3252121743591367,-4.132098879994519,-18.576802158287723,-2.0647513411671805,-0.8442847607452331,-0.016337612428887385,0.07480786547469068,-8.571031251301395,5.104434595467964,-0.19194704886509803,0.22584336534661412,-0.5869179394069185,0.10329936200016118,-3.4785639061124347,-2.603230216726119,-0.12121346697835277,-0.14577420436980165,-1.206403802888725,0.2522984366264187,1.258246099984988,19.962325167932953,0.6191238129116379,-0.1871673684449439,-1.3844969163129484,1.1914286131564071,-3.833439515973567,-2.464520156843381,2.491934415614402,-1.1819599289344997,7.118863164207364,-0.7900953059334411,-8.355969621731624,1.2424298466265047,0.31018832978288186,-1.3848211351425617,0.8181942434613424,-0.8607421863399677,0.42386962636451253,-0.025410212891711574,1.290194200472656,-0.4068978032603692,-0.9996339294189514,-0.45904762061458315,0.18527645325157016,-1.1333765699387255,-0.7358073059331645,-0.6613137819973415,-4.2296093009025135,-0.5905927755570962,3.7845663064717296,-0.7327427914729864,-3.300698659615002,6.501969282916696,4.904601204063591,1.9006196948713643,-23.94058852775534,0.029940208731325444,1.6770051278166715,-42.873695643095026,0.14888681491262812,0.5646434625078928,-0.7005762868214052,0.8694861049695405,-0.3727855965729539,0.23137201369188867,-0.28438813624537707,-16.219666047854783,-3.011972402192771,3.190637962900806,-8.069562081677931,1.5393774786441317,-1.1613998364152038,-0.3802707887524444,0.8918104165099533,-3.36934087415182,1.5022981847999386,0.47902065230873453,0.24916557426296618,0.6279640667506456,-0.6088317737755635,-0.6185289248851669,0.934112544902646,1.1455973878982153,0.45460552304763957,-2.522361135642535,-0.14780620325893043,0.2993281237850763,0.6173562581470425,10.942903778998742,0.42370487599374435,0.32921311884453325,-0.1344234484602987,0.15815799325728608,-1.2611715195592794,1.3272480175704988,0.7950232314864132,-0.41497126808717044,-0.21225929112073239,0.7985581497666143,-0.403670414976581,-0.7948247715162411,-4.305503591370878,-0.6810026019742763,-6.080739388639622,0.8113223508640801,2.543822548162681,-8.792572143359502,0.3212007996846476,0.9947605264559444,3.8764713958407464,4.3904695698836935,0.8679709006010365,-2.3434905963593393,0.642706366961731,0.7250407310277543,0.5015638183563144,2.0352370269873394,0.27736779735390316,0.25173799516472317,2.379524358558152,1.645330648134882,-0.6095575795784611,-1.3231864946838032,-4.179528350294847,-1.5272330752426488,0.021272988982577803,-0.727953809385638,664.6708974315652,-0.4129425701585705,1.2849598464649898,0.5107393480397295,-0.7477115094987071,1.8168620620323401,0.7088889436882218,-3.8343645545952767,-0.5642189043147613,2.599504940834156,-9.459823798379762,-1.1221189976718913,0.6296648817020588,0.19491208096142876,-1.2132702341903991,-0.38798181557108874,-0.45396108169742494,0.23922147418077264,1.0313163700508001,-1.8169139784359976,0.09638576329721556,0.17775422154744328,-0.5701155688867241,-1.1644815254313137,-0.714300546449093,-0.28563557365606485,-0.534750336134055,3.046987682815619,0.6335836288212389,1.750731657164137,-1.776738710125865,1.6598352631971498,-0.9033983099147782,0.26421770834171265,-2.7920637878887145,-0.8203274581149017,-0.6225516459004138,-4.087200665685744,-1.3876677299405118,-0.6935242586692625,102.62849008034941,1.9934750808174222,-1.3840567117317186,3.3825458077622113,-0.6464892758892931,-0.6810764292242829,-0.21276062879209587,-0.007595265437661375,-0.15779003634230357,1.1116540206129146,0.4256702199634325,-3.126705382058178,-0.2513326121056392,-0.051320395777538524,-0.2149383406753419,0.32192236240313304,-0.23036341893684129,1.2465308837473954,4.305260488136773,-0.7054910699927349,-0.8181661090456448,-0.03358463091071927,-2.814241800871001,-0.1804101128498082,-0.4038854531900319,0.15696973503275494,-0.26279076100329835,-1.1496940319579128,0.2823998032452175,0.9102556541963905,2.577039725051092,2.8646819614950516,0.46120691706643113,0.23307171901381968,-0.42875875992978046,0.7122551752703769,6.32869690415127,-0.16245674786504896,0.3943108743286248,40.30999480711917,7.048116399682859,-0.39676100069028836,0.07308848157821335,0.3264331393060876,0.33505743810733696,-0.30673032730703464,-5.232579019174378,1.1999947009886598,-4.554238748372144,-0.38530403894814347,-24.07265530256469,-0.3998603030394285,-0.45517676779977506,-0.8547051534219484,0.6264680022366346,3.4276938343402654,0.4012718381294809,-2.102994628704612,-1.5586331416552024,0.8379827299015666,2.989386722338245,-0.340262602485366,1.8054848986326388,0.9630493613164941,0.4008874982116165,-0.2692515283306164,0.6870069086617606,1.1527585278566972,-4.4875331075714335,-2.9061784700011195,-24.656630266402118,-1.0266998281205084,1.147527669969037,-2.144940933112271,2.016768917918804,6.465405523631265,1.9443385271428957,-0.08632355844541656,0.025522546308840755,-0.4311384894221667,82.33375558753171,23.83640227897245,-2.209769112906941,0.3037537338091189,-23.255691420915003,-1.945875907560395,1.0465226418335698,0.003903416527203937,-5.62739889941791,-0.1276510695069058,-8.876717408645765,-4.307515203003464,0.5798109725003494,-1.8129098951601723,-1.1688745296439524,-0.9217607499506655,-1.8988074121041643,1.7489354086674078,-3.9849157928231076,4.680491174574383,1.2920931479859727,-0.015575338652244468,33.30993212265145,-2.964767659253534,-0.02015286183979518,0.34478207074045125,0.9571969372906485,1.727820554182385,-9.015451741912651,-1.1234118745775425,12.277249050725136,0.6642135895431344,-0.4338047651067133,0.11876283127445768,-0.24940588691433288,-2.773825164464058,-8.833819098133379,1.9712204241769746,0.16463922595137126,-1.1329055461208235,-3.4029258549568575,-0.39522707042518024,-0.8202656153469119,-1.240535284747866,-1.5100185042668246,-2.245400856777819,0.8610395749008042,59.98121494101518,-0.25969224677715075,0.10589689582958374,-0.8790101998123484,-0.7323154551590979,0.9485542984365263,-20.556381805674754,0.6174453936321609,-2.066537306639088,-10.652983264981641,-4.840074762549352,2.1966553821974104,4.1139702188474665,-1.1720647986286614,-1.0297399211141194,3.566882690387391,0.5041561978830211,0.9177219916403716,-0.9234363453662666,0.5759454514362132,0.508689841693243,0.04503645212305743,-5.254977398704855,-0.28141431551641594,2.262204544313171,-5.344409849526541,0.5993280367569914,-3.1004634938319846,-0.7040317352035054,0.7233217915376096,-1.7931182797031686,-1.3337902287544834,-0.4795042237129604,0.35771605632117925,0.6742282333611307,4.591544946206911,108.09961316779338,1.5075300868467634,1.1111655876413704,0.38503685174642593,2.75245366488405,0.6943404075615719,0.4304594675236463,-0.3252365077621224,-0.39105258338305776,5.23575900902944,-6.016743868318773,-2.828972447455814,1.0451510447895436,5.450516940543078,0.4153563708659867,-0.8925847824710057,-1.8802495166513633,9.008594115524016,-0.5004199388615445,1.3671751152369866,-0.8461030114018387,0.002559147605620907,-0.7018810739330705,-2.855947786543757,-0.1137541429541285,1.6808011174610618,0.5542973809309198,-0.8876186012841992,0.19168426458755247,0.8147122084138877,-0.2352664646578914,-0.184605627032823,-0.10241287000900474,0.30952092432949047,-0.3991104499546949,2.7817413626581744,-0.8393723547394909,-0.20268775333599448,-18.862726303395608,0.48346026107624746,1.0714803893076268,11.901355838726525,-0.17546425768995724,-1.3504607601544154,-1.9481238372917433,0.345300841266213,-3.1864363897154298,0.08051341622945515,-3.072724745766886,-0.20255465023277686,13.425347487170567,0.22853552898086826,-0.9527991599689943,0.9345974776416843,5.439856190135311,-0.5751142753744846,2.1495218812643584,5.187841471100071,2.178892470556389,-0.03695528575777009,-0.14969622057437815,-1.030639639603143,0.39011946785970597,0.07877353615075912,0.11624677368187022,-1.8445235858081837,2.34399706710381,88.77770971895062,-0.9854883137625745,1.3576396127111356,0.29892483713373963,-3.1819514698474225,4.238047510762686,-0.2949266788774513,0.20962207226003926,0.7731060499952135,94.14563895716657,-6.009576499094637,2.0761256792384404,-1.2592752320021972,1.0847508708784275,36.45509299468965,0.32676456339564436,-0.29151342748026443,0.24998352319828693,-3.629753440495382,0.01952991366441968,-0.07109861054315463,5.366806711999218,-0.391883977430479,1.9926873268181158,0.03980822576063547,0.22626674332987695,-7.309859695914596,-0.07899596109557722,0.4113674810493531,-0.03367398882680355,-0.11844211258955652,2.579808283270388,-0.8168280520713279,0.3327645617268829,-0.7926480504668922,-11.26543960513094,2.050627183988231,3.1788574229094055,1.9847760451069805,-22.35220644516986,-13.241921386592884,-0.1892775537067596,0.028409955615992234,-0.25835746832783457,-2.838844911525498,-1.9372628221772827,3.1653822800602573,3.699665509919409,-1.0080893760468719,19.18167358141553,1.529206562138124,0.5166927718372556,0.8656231191271436,-31.50100826891108,0.6578137599757582,1.0505455450295853,-1.0702568956544356,-2.537379823012476,7.353123719334286,0.5879614447561368,2.293188682109892,-2.6704524990540355,-0.9790262913793563,79.99227249929237,0.04706796111179466,0.16293512776263736,-0.13159425854774767,-5.738231683571431,0.8161280038661417,3.343444633256845,0.6791474704532455,-0.24332466689977486,0.4166376103870771,0.3051371166242206,0.7024150027732239,-7.955695543892204,-0.48991542914510333,-0.5459418102749647,-0.5321764389925967,-1.7255578324489345,-0.5302635211279679,15.387951869459817,-0.9403625923963719,4.3078351722714405,-3.0556706644901586,-0.9143996036282538,0.6483737817029644,0.1939098916849214,2.8791218246953827,-2.2923269750202895,-16.458300874889847,-0.09936824216281263,-0.4389852316785931,0.7146580918011063,-0.573885129607741,0.42862506979742315,132.69343171745987,0.24209191732472934,-2.7350985106090446,-1.0312889291776508,0.6265715428106603,3.571236132196698,4.109946820225338,0.14883884369319703,-1.1623422479574432,0.2147383772508822,0.12107165960634435,1.147367328719495,-73.06152615806809,0.3848005052869171,1.9329879652007658,1.7932228787797542,0.31474289404878547,0.7211681991901236,0.5583869077947157,-0.8044164835151253,-1.6078427526047205,0.6525609046021688,-1.455018984714919,-1.9932400281526657,-1.844765862164459,0.4987650019086437,-1.7165423877731187,-0.5231335763400073,1.164495365291568,-9.825672134730489,-0.9727289903464692,1.7126969367881881,3.892938847570163,-0.8925610044300843,-0.6647011630530348,3.4459722602267817,1.629426038702674,-7.821212523071829,0.10486422583035213,2.4975729220276777,0.6673790530147866,1.5497580288360917,-0.23777568883408556,0.15150856644611332,0.7754562502622857,-0.22080299576422435,-4.27161124953983,2.522729684762081,6.8470723545777155,-0.3585224914664475,-0.186317073190301,5.155409274630864,-21.605955342404286,-2.3771895555371234,-0.27224775828616193,2.1132270624483978,0.21467212187090326,1.5497990850674361,0.6394466228912985,-0.45042228227843,-2.4633006913844007,3.0318671474318406,-0.19672651120957033,0.12483957729667988,-58.73973566699578,1.6347350649120822,0.1441761428863342,-0.6029554765034609,1.803435320385049,6.57475820226176,-0.40543919596163114,-0.06671675992255814,0.1270434856891072,-4.489828433114202,-0.3076806034134817,1.1036431725833944,16.151436694222085,0.5835419021478706,-1.1433974435159528,-1.09262643102483,0.9461786391409971,-0.5394813137450144,36.312213555918575,-0.8932164497226932,0.6109847779930171,-4.325423084406676,0.6887455584460258,-1.7568928578738454,0.32688918719604076,-6.076461392463442,2.9894178915793126,5.866107629279372,-135.74346863775446,-1.331460250638155,-0.1835269140645472,1.005645214362208,-0.8721861710279026,-1.100583593449262,0.1935523790802529,0.48368254994699134,-0.02847992554679433,-10.16707497601848,-0.2707701229012982,-47.95854713382378,0.4347314026941848,1.1115297221678124,-0.31017940141688133,-1.122270385332655,-0.048177172131931296,-5.693524490528478,0.9505915926751141,1.5722781109644741,-3.405614160421125,-0.763373210178011,-0.22741866590259333,-3.98469961748619,-1.5382843867451244,0.6974277853251629,2.2653097446406214,5.093401333892771,-0.05546877048328617,-1.457277377300216,92.60275377047758,1.1768913932812668,-2.618579153289268,3.9698956278160202,0.7464415322137026,-0.10377479724253594,9.260256601800386,-0.43887249763176966,4.349268751132973,2.2503134381558616,-3.1997638371850528,0.3132226121364679,1.8505643493144475,-0.4023254595002217,-0.18186347172514344,-0.3377504708079038,0.19725517958487152,-1.3719426935408479,1.3187038486084335,-0.11968274792352813,-0.574516731722134,0.4152116162538886,1.6020734086368842,0.18608091587158432,2.463988453483545,-0.7870672630804912,0.8053486330669174,0.8247964122254011,1.1275818543421918,-1.2259917250090855,1.4001002019756994,85.76249533486168,1.629473321547684,-1.7246517566603154,6.249555444348555,-0.06414464794095268,2.984681913942324,-1.293942726626899,1.011537151574658,-6.193431109624118,0.2185540831945269,4.3410846477503835,-0.37043360788915025,-2.3923064538782377,-0.2702917068915107,0.043815781318692765,0.0720554451741555,-0.03769298913184385,39.81332456069938,-0.8360461494581778,0.04563507251743716,1.572702737150977,-0.2736075739051081,0.005226338077680282,0.9186450848741358,0.500641830811605,-3.455088126890565,-85.96841706008583,1.8574422054726436,4.202056682866451,-1.612661188939499,0.2352344964227238,0.7700623307708279,2.178277331525317,-1.9700904663766203,-0.6454846429496387,-1.4798709969511483,0.24704983410035,1.8168564116488415,-0.2204180113250397,1.8984189138633538,3.3571572274449206,23.83954523889767,0.373352427912916,11.148825696700781,0.200109357963902,0.5164983693368909,-2.5364063460923147,0.18005240643000053,-1.9720251267496385,-17.59447197468421,0.3441664999676902,-2.2106403804426855,-0.8562317082808187,0.5072947821357457,-1.1068780470661947,-2.0683487756785444,-1.4669604634647488,-1.4054354977783234,-2.084352698653845,-0.4363333412405102,-0.3874350205305427,1.5424405346852281,-2.122158231692278,-0.11604430819377465,1.0869232832086169,-22.77370242220106,-2.0527807851060307,0.05938593801136925,-0.004979673786015977,0.33951756918639736,0.968369461683597,-1.2971596227943962,54.28409626542391,-0.22699688990620479,-65.5992177486753,0.13353350212336615,-0.7214490995602312,2.7826906126210345,-21.054273457626387,0.37763179913820794,-2.522031515275865,7.536808083778712,-0.03914850765049099,-0.3167122857552107,3.265568243700405,0.536657657562146,-0.17129453896841695,0.11739854773254899,-0.09666213050509823,0.16454462123911687,3.258813468439443,-0.4073532386712385,-0.0839811033392866,2.1523458363505124,-0.9267757867970213,-1.721037081184794,-0.2918412925244997,-0.2519363462276914,1.270319319898645,0.3687512971954877,9.57680414095247,-2.587548742682671,-3.366069484316254,-5.37076374914079,2.0420865696890025,0.41029442750726697,-6.349132667748702,-0.3408875067170418,-0.013930225411772948,-4.823633621679838,-1.8977356524296154,0.018327505240131145,0.0366995815999005,-1.0258132585820317,0.18784477406257952,-1.7210838284717036,-0.6079064467585673,0.05696488544309214,0.6985436364213616,-0.33623706275013454,-7.839404363132316,-0.12632594933866412,-11.497894032673543,-0.8343426865572711,-0.23641335548223263,-1.2699459260907437,0.04182176223680778,1.800665013318478,0.21795805954447953,-0.23358805269152952,-0.055076180966651726,-18.46546582814335,0.6485129140812816,2.1323781545866036,2.682229657371463,-12.000766060185164,-0.7855743733598012,-1.2392562679129169,-0.22569619770550095,8.608510596589309,6.3826954757105785,-11.718581608218383,0.7650912897489804,-0.2601072573652629,-3.5595488052249737,-4.6253415423708955,4.712079358652376,0.12553931769312135,-0.9314161496359531,0.3564680030476064,-3.171561887037699,0.11789561186365224,1.9766726236066345,-1.3444393051159873,-0.43880213638616367,-1.3186503824781282,2.076315954595956,-0.2994794506023433,0.7031763827024864,-1.322478253771001,-2.943888147858038,1.6297532368748542,-0.5170840678558031,-0.6257301029390011,0.7683129763009124,4.2920423425247,0.4766592697182899,1.012520528777491,0.18663194550889678,0.9447897554207816,0.9418333925117419,1.6905369793291496,-3.050755787305651,-0.3957290507324118,-1.296922985018298,-4.2486706443353786,-2.544132691999088,-1.7262080109625928,-0.4480532590898685,-0.8842954462103548,0.8839526450501458,6.460070945009825,-0.31826947857907656,0.9202726981022467,0.447947913413191,-1.452734061461349,0.03438510524104953,0.02784005720810979,-0.14334600611689366,2.303677111880982,0.06074587356656057,-1.854218626830643,-5.833088872195219,3.0971557548232873,0.2629214363448544,-0.4258744054046256,-0.5876834581686683,7.763714895183423,7.856239623458333,2.0359215995753575,4.034598661260989,2.9285008615750816,1.214351765010558,-0.044475121297552905,3.788238254674299,-0.776307438801341,0.5577260890448087,-1.7123091547150198,-0.000718674152701385,0.5912692861444081,-0.5155828416748554,1.1150737936405923,5.3809690694723695,-0.8851017949053557,0.6186576654039457,-0.20434860199686064,-0.21698619512085776,-0.38595295788256,-0.025363628419071853,10.866276916636274,0.6954446887782213,-0.5706387141397525,1291.467571543138,-0.31845107598627065,-0.6999555884415963,2.653415516748395,0.493219857969401,-0.6150850070126126,5.068215688583541,-2.79435755447009,-19.477543319933318,-1.1039485827174604,1.7551783655537792,-1.9242872238232411,5.036051082820154,-0.946808371568113,-0.39986169093793184],\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('6f3a6121-4e26-436d-b4a8-638bfbebd5e8'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            '].join(\" \"),tiles:[\"https://stamen-tiles.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png\"],tileSize:256}},layers:[{id:\"plotly-stamen-watercolor\",type:\"raster\",source:\"plotly-stamen-watercolor\",minzoom:0,maxzoom:22}]}},l=n(s);e.exports={requiredVersion:\"1.10.1\",styleUrlPrefix:\"mapbox://styles/mapbox/\",styleUrlSuffix:\"v9\",styleValuesMapbox:[\"basic\",\"streets\",\"outdoors\",\"light\",\"dark\",\"satellite\",\"satellite-streets\"],styleValueDflt:\"basic\",stylesNonMapbox:s,styleValuesNonMapbox:l,traceLayerPrefix:\"plotly-trace-layer-\",layoutLayerPrefix:\"plotly-layout-layer-\",wrongVersionErrorMsg:[\"Your custom plotly.js bundle is not using the correct mapbox-gl version\",\"Please install mapbox-gl@1.10.1.\"].join(\"\\n\"),noAccessTokenErrorMsg:[\"Missing Mapbox access token.\",\"Mapbox trace type require a Mapbox access token to be registered.\",\"For example:\",\"  Plotly.newPlot(gd, data, layout, { mapboxAccessToken: 'my-access-token' });\",\"More info here: https://www.mapbox.com/help/define-access-token/\"].join(\"\\n\"),missingStyleErrorMsg:[\"No valid mapbox style found, please set `mapbox.style` to one of:\",l.join(\", \"),\"or register a Mapbox access token to use a Mapbox-served style.\"].join(\"\\n\"),multipleTokensErrorMsg:[\"Set multiple mapbox access token across different mapbox subplot,\",\"using first token found as mapbox-gl does not allow multipleaccess tokens on the same page.\"].join(\"\\n\"),mapOnErrorMsg:\"Mapbox error.\",mapboxLogo:{path0:\"m 10.5,1.24 c -5.11,0 -9.25,4.15 -9.25,9.25 0,5.1 4.15,9.25 9.25,9.25 5.1,0 9.25,-4.15 9.25,-9.25 0,-5.11 -4.14,-9.25 -9.25,-9.25 z m 4.39,11.53 c -1.93,1.93 -4.78,2.31 -6.7,2.31 -0.7,0 -1.41,-0.05 -2.1,-0.16 0,0 -1.02,-5.64 2.14,-8.81 0.83,-0.83 1.95,-1.28 3.13,-1.28 1.27,0 2.49,0.51 3.39,1.42 1.84,1.84 1.89,4.75 0.14,6.52 z\",path1:\"M 10.5,-0.01 C 4.7,-0.01 0,4.7 0,10.49 c 0,5.79 4.7,10.5 10.5,10.5 5.8,0 10.5,-4.7 10.5,-10.5 C 20.99,4.7 16.3,-0.01 10.5,-0.01 Z m 0,19.75 c -5.11,0 -9.25,-4.15 -9.25,-9.25 0,-5.1 4.14,-9.26 9.25,-9.26 5.11,0 9.25,4.15 9.25,9.25 0,5.13 -4.14,9.26 -9.25,9.26 z\",path2:\"M 14.74,6.25 C 12.9,4.41 9.98,4.35 8.23,6.1 5.07,9.27 6.09,14.91 6.09,14.91 c 0,0 5.64,1.02 8.81,-2.14 C 16.64,11 16.59,8.09 14.74,6.25 Z m -2.27,4.09 -0.91,1.87 -0.9,-1.87 -1.86,-0.91 1.86,-0.9 0.9,-1.87 0.91,1.87 1.86,0.9 z\",polygon:\"11.56,12.21 10.66,10.34 8.8,9.43 10.66,8.53 11.56,6.66 12.47,8.53 14.33,9.43 12.47,10.34\"},styleRules:{map:\"overflow:hidden;position:relative;\",\"missing-css\":\"display:none;\",canary:\"background-color:salmon;\",\"ctrl-bottom-left\":\"position: absolute; pointer-events: none; z-index: 2; bottom: 0; left: 0;\",\"ctrl-bottom-right\":\"position: absolute; pointer-events: none; z-index: 2; right: 0; bottom: 0;\",ctrl:\"clear: both; pointer-events: auto; transform: translate(0, 0);\",\"ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-inner\":\"display: none;\",\"ctrl-attrib.mapboxgl-compact:hover .mapboxgl-ctrl-attrib-inner\":\"display: block; margin-top:2px\",\"ctrl-attrib.mapboxgl-compact:hover\":\"padding: 2px 24px 2px 4px; visibility: visible; margin-top: 6px;\",\"ctrl-attrib.mapboxgl-compact::after\":'content: \"\"; cursor: pointer; position: absolute; background-image: url(\\'data:image/svg+xml;charset=utf-8,%3Csvg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"%3E %3Cpath fill=\"%23333333\" fill-rule=\"evenodd\" d=\"M4,10a6,6 0 1,0 12,0a6,6 0 1,0 -12,0 M9,7a1,1 0 1,0 2,0a1,1 0 1,0 -2,0 M9,10a1,1 0 1,1 2,0l0,3a1,1 0 1,1 -2,0\"/%3E %3C/svg%3E\\'); background-color: rgba(255, 255, 255, 0.5); width: 24px; height: 24px; box-sizing: border-box; border-radius: 12px;',\"ctrl-attrib.mapboxgl-compact\":\"min-height: 20px; padding: 0; margin: 10px; position: relative; background-color: #fff; border-radius: 3px 12px 12px 3px;\",\"ctrl-bottom-right &gt; .mapboxgl-ctrl-attrib.mapboxgl-compact::after\":\"bottom: 0; right: 0\",\"ctrl-bottom-left &gt; .mapboxgl-ctrl-attrib.mapboxgl-compact::after\":\"bottom: 0; left: 0\",\"ctrl-bottom-left .mapboxgl-ctrl\":\"margin: 0 0 10px 10px; float: left;\",\"ctrl-bottom-right .mapboxgl-ctrl\":\"margin: 0 10px 10px 0; float: right;\",\"ctrl-attrib\":\"color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px\",\"ctrl-attrib a\":\"color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px\",\"ctrl-attrib a:hover\":\"color: inherit; text-decoration: underline;\",\"ctrl-attrib .mapbox-improve-map\":\"font-weight: bold; margin-left: 2px;\",\"attrib-empty\":\"display: none;\",\"ctrl-logo\":'display:block; width: 21px; height: 21px; background-image: url(\\'data:image/svg+xml;charset=utf-8,%3C?xml version=\"1.0\" encoding=\"utf-8\"?%3E %3Csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 21 21\" style=\"enable-background:new 0 0 21 21;\" xml:space=\"preserve\"%3E%3Cg transform=\"translate(0,0.01)\"%3E%3Cpath d=\"m 10.5,1.24 c -5.11,0 -9.25,4.15 -9.25,9.25 0,5.1 4.15,9.25 9.25,9.25 5.1,0 9.25,-4.15 9.25,-9.25 0,-5.11 -4.14,-9.25 -9.25,-9.25 z m 4.39,11.53 c -1.93,1.93 -4.78,2.31 -6.7,2.31 -0.7,0 -1.41,-0.05 -2.1,-0.16 0,0 -1.02,-5.64 2.14,-8.81 0.83,-0.83 1.95,-1.28 3.13,-1.28 1.27,0 2.49,0.51 3.39,1.42 1.84,1.84 1.89,4.75 0.14,6.52 z\" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3Cpath d=\"M 10.5,-0.01 C 4.7,-0.01 0,4.7 0,10.49 c 0,5.79 4.7,10.5 10.5,10.5 5.8,0 10.5,-4.7 10.5,-10.5 C 20.99,4.7 16.3,-0.01 10.5,-0.01 Z m 0,19.75 c -5.11,0 -9.25,-4.15 -9.25,-9.25 0,-5.1 4.14,-9.26 9.25,-9.26 5.11,0 9.25,4.15 9.25,9.25 0,5.13 -4.14,9.26 -9.25,9.26 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpath d=\"M 14.74,6.25 C 12.9,4.41 9.98,4.35 8.23,6.1 5.07,9.27 6.09,14.91 6.09,14.91 c 0,0 5.64,1.02 8.81,-2.14 C 16.64,11 16.59,8.09 14.74,6.25 Z m -2.27,4.09 -0.91,1.87 -0.9,-1.87 -1.86,-0.91 1.86,-0.9 0.9,-1.87 0.91,1.87 1.86,0.9 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpolygon points=\"11.56,12.21 10.66,10.34 8.8,9.43 10.66,8.53 11.56,6.66 12.47,8.53 14.33,9.43 12.47,10.34 \" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3C/g%3E%3C/svg%3E\\')'}}},{\"../../lib/sort_object_keys\":538}],621:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e){var r=t.split(\" \"),i=r[0],a=r[1],o=n.isArrayOrTypedArray(e)?n.mean(e):e,s=.5+o/100,l=1.5+o/100,c=[\"\",\"\"],u=[0,0];switch(i){case\"top\":c[0]=\"top\",u[1]=-l;break;case\"bottom\":c[0]=\"bottom\",u[1]=l}switch(a){case\"left\":c[1]=\"right\",u[0]=-s;break;case\"right\":c[1]=\"left\",u[0]=s}return{anchor:c[0]&amp;&amp;c[1]?c.join(\"-\"):c[0]?c[0]:c[1]?c[1]:\"center\",offset:u}}},{\"../../lib\":515}],622:[function(t,e,r){\"use strict\";var n=t(\"mapbox-gl/dist/mapbox-gl-unminified\"),i=t(\"../../lib\"),a=i.strTranslate,o=i.strScale,s=t(\"../../plots/get_data\").getSubplotCalcData,l=t(\"../../constants/xmlns_namespaces\"),c=t(\"@plotly/d3\"),u=t(\"../../components/drawing\"),f=t(\"../../lib/svg_text_utils\"),h=t(\"./mapbox\"),p=r.constants=t(\"./constants\");function d(t){return\"string\"==typeof t&amp;&amp;(-1!==p.styleValuesMapbox.indexOf(t)||0===t.indexOf(\"mapbox://\"))}r.name=\"mapbox\",r.attr=\"subplot\",r.idRoot=\"mapbox\",r.idRegex=r.attrRegex=i.counterRegex(\"mapbox\"),r.attributes={subplot:{valType:\"subplotid\",dflt:\"mapbox\",editType:\"calc\"}},r.layoutAttributes=t(\"./layout_attributes\"),r.supplyLayoutDefaults=t(\"./layout_defaults\"),r.plot=function(t){var e=t._fullLayout,r=t.calcdata,a=e._subplots.mapbox;if(n.version!==p.requiredVersion)throw new Error(p.wrongVersionErrorMsg);var o=function(t,e){var r=t._fullLayout;if(\"\"===t._context.mapboxAccessToken)return\"\";for(var n=[],a=[],o=!1,s=!1,l=0;l1&amp;&amp;i.warn(p.multipleTokensErrorMsg),n[0]):(a.length&amp;&amp;i.log([\"Listed mapbox access token(s)\",a.join(\",\"),\"but did not use a Mapbox map style, ignoring token(s).\"].join(\" \")),\"\")}(t,a);n.accessToken=o;for(var l=0;l_/2){var w=v.split(\"|\").join(\"\");x.text(w).attr(\"data-unformatted\",w).call(f.convertToTspans,t),b=u.bBox(x.node())}x.attr(\"transform\",a(-3,8-b.height)),y.insert(\"rect\",\".static-attribution\").attr({x:-b.width-6,y:-b.height-3,width:b.width+6,height:b.height+3,fill:\"rgba(255, 255, 255, 0.75)\"});var T=1;b.width+6&gt;_&amp;&amp;(T=_/(b.width+6));var k=[n.l+n.w*h.x[1],n.t+n.h*(1-h.y[0])];y.attr(\"transform\",a(k[0],k[1])+o(T))}},r.updateFx=function(t){for(var e=t._fullLayout,r=e._subplots.mapbox,n=0;n0){for(var r=0;r0}function u(t){var e={},r={};switch(t.type){case\"circle\":n.extendFlat(r,{\"circle-radius\":t.circle.radius,\"circle-color\":t.color,\"circle-opacity\":t.opacity});break;case\"line\":n.extendFlat(r,{\"line-width\":t.line.width,\"line-color\":t.color,\"line-opacity\":t.opacity,\"line-dasharray\":t.line.dash});break;case\"fill\":n.extendFlat(r,{\"fill-color\":t.color,\"fill-outline-color\":t.fill.outlinecolor,\"fill-opacity\":t.opacity});break;case\"symbol\":var i=t.symbol,o=a(i.textposition,i.iconsize);n.extendFlat(e,{\"icon-image\":i.icon+\"-15\",\"icon-size\":i.iconsize/10,\"text-field\":i.text,\"text-size\":i.textfont.size,\"text-anchor\":o.anchor,\"text-offset\":o.offset,\"symbol-placement\":i.placement}),n.extendFlat(r,{\"icon-color\":t.color,\"text-color\":i.textfont.color,\"text-opacity\":t.opacity});break;case\"raster\":n.extendFlat(r,{\"raster-fade-duration\":0,\"raster-opacity\":t.opacity})}return{layout:e,paint:r}}l.update=function(t){this.visible?this.needsNewImage(t)?this.updateImage(t):this.needsNewSource(t)?(this.removeLayer(),this.updateSource(t),this.updateLayer(t)):this.needsNewLayer(t)?this.updateLayer(t):this.updateStyle(t):(this.updateSource(t),this.updateLayer(t)),this.visible=c(t)},l.needsNewImage=function(t){return this.subplot.map.getSource(this.idSource)&amp;&amp;\"image\"===this.sourceType&amp;&amp;\"image\"===t.sourcetype&amp;&amp;(this.source!==t.source||JSON.stringify(this.coordinates)!==JSON.stringify(t.coordinates))},l.needsNewSource=function(t){return this.sourceType!==t.sourcetype||JSON.stringify(this.source)!==JSON.stringify(t.source)||this.layerType!==t.type},l.needsNewLayer=function(t){return this.layerType!==t.type||this.below!==this.subplot.belowLookup[\"layout-\"+this.index]},l.lookupBelow=function(){return this.subplot.belowLookup[\"layout-\"+this.index]},l.updateImage=function(t){this.subplot.map.getSource(this.idSource).updateImage({url:t.source,coordinates:t.coordinates});var e=this.findFollowingMapboxLayerId(this.lookupBelow());null!==e&amp;&amp;this.subplot.map.moveLayer(this.idLayer,e)},l.updateSource=function(t){var e=this.subplot.map;if(e.getSource(this.idSource)&amp;&amp;e.removeSource(this.idSource),this.sourceType=t.sourcetype,this.source=t.source,c(t)){var r=function(t){var e,r=t.sourcetype,n=t.source,a={type:r};\"geojson\"===r?e=\"data\":\"vector\"===r?e=\"string\"==typeof n?\"url\":\"tiles\":\"raster\"===r?(e=\"tiles\",a.tileSize=256):\"image\"===r&amp;&amp;(e=\"url\",a.coordinates=t.coordinates);a[e]=n,t.sourceattribution&amp;&amp;(a.attribution=i(t.sourceattribution));return a}(t);e.addSource(this.idSource,r)}},l.findFollowingMapboxLayerId=function(t){if(\"traces\"===t)for(var e=this.subplot.getMapLayers(),r=0;r&lt;e.length;r++){var n=e[r].id;if(\"string\"==typeof n&amp;&amp;0===n.indexOf(o.traceLayerPrefix)){t=n;break}}return t},l.updateLayer=function(t){var e=this.subplot,r=u(t),n=this.lookupBelow(),i=this.findFollowingMapboxLayerId(n);this.removeLayer(),c(t)&amp;&amp;e.addLayer({id:this.idLayer,source:this.idSource,\"source-layer\":t.sourcelayer||\"\",type:t.type,minzoom:t.minzoom,maxzoom:t.maxzoom,layout:r.layout,paint:r.paint},i),this.layerType=t.type,this.below=n},l.updateStyle=function(t){if(c(t)){var e=u(t);this.subplot.setOptions(this.idLayer,\"setLayoutProperty\",e.layout),this.subplot.setOptions(this.idLayer,\"setPaintProperty\",e.paint)}},l.removeLayer=function(){var t=this.subplot.map;t.getLayer(this.idLayer)&amp;&amp;t.removeLayer(this.idLayer)},l.dispose=function(){var t=this.subplot.map;t.getLayer(this.idLayer)&amp;&amp;t.removeLayer(this.idLayer),t.getSource(this.idSource)&amp;&amp;t.removeSource(this.idSource)},e.exports=function(t,e,r){var n=new s(t,e);return n.update(r),n}},{\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"./constants\":620,\"./convert_text_opts\":621}],624:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../components/color\").defaultLine,a=t(\"../domain\").attributes,o=t(\"../font_attributes\"),s=t(\"../../traces/scatter/attributes\").textposition,l=t(\"../../plot_api/edit_types\").overrideAll,c=t(\"../../plot_api/plot_template\").templatedArray,u=t(\"./constants\"),f=o({});f.family.dflt=\"Open Sans Regular, Arial Unicode MS Regular\",(e.exports=l({_arrayAttrRegexps:[n.counterRegex(\"mapbox\",\".layers\",!0)],domain:a({name:\"mapbox\"}),accesstoken:{valType:\"string\",noBlank:!0,strict:!0},style:{valType:\"any\",values:u.styleValuesMapbox.concat(u.styleValuesNonMapbox),dflt:u.styleValueDflt},center:{lon:{valType:\"number\",dflt:0},lat:{valType:\"number\",dflt:0}},zoom:{valType:\"number\",dflt:1},bearing:{valType:\"number\",dflt:0},pitch:{valType:\"number\",dflt:0},bounds:{west:{valType:\"number\"},east:{valType:\"number\"},south:{valType:\"number\"},north:{valType:\"number\"}},layers:c(\"layer\",{visible:{valType:\"boolean\",dflt:!0},sourcetype:{valType:\"enumerated\",values:[\"geojson\",\"vector\",\"raster\",\"image\"],dflt:\"geojson\"},source:{valType:\"any\"},sourcelayer:{valType:\"string\",dflt:\"\"},sourceattribution:{valType:\"string\"},type:{valType:\"enumerated\",values:[\"circle\",\"line\",\"fill\",\"symbol\",\"raster\"],dflt:\"circle\"},coordinates:{valType:\"any\"},below:{valType:\"string\"},color:{valType:\"color\",dflt:i},opacity:{valType:\"number\",min:0,max:1,dflt:1},minzoom:{valType:\"number\",min:0,max:24,dflt:0},maxzoom:{valType:\"number\",min:0,max:24,dflt:24},circle:{radius:{valType:\"number\",dflt:15}},line:{width:{valType:\"number\",dflt:2},dash:{valType:\"data_array\"}},fill:{outlinecolor:{valType:\"color\",dflt:i}},symbol:{icon:{valType:\"string\",dflt:\"marker\"},iconsize:{valType:\"number\",dflt:10},text:{valType:\"string\",dflt:\"\"},placement:{valType:\"enumerated\",values:[\"point\",\"line\",\"line-center\"],dflt:\"point\"},textfont:f,textposition:n.extendFlat({},s,{arrayOk:!1})}})},\"plot\",\"from-root\")).uirevision={valType:\"any\",editType:\"none\"}},{\"../../components/color\":367,\"../../lib\":515,\"../../plot_api/edit_types\":548,\"../../plot_api/plot_template\":555,\"../../traces/scatter/attributes\":936,\"../domain\":593,\"../font_attributes\":594,\"./constants\":620}],625:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../subplot_defaults\"),a=t(\"../array_container_defaults\"),o=t(\"./layout_attributes\");function s(t,e,r,n){r(\"accesstoken\",n.accessToken),r(\"style\"),r(\"center.lon\"),r(\"center.lat\"),r(\"zoom\"),r(\"bearing\"),r(\"pitch\");var i=r(\"bounds.west\"),o=r(\"bounds.east\"),s=r(\"bounds.south\"),c=r(\"bounds.north\");void 0!==i&amp;&amp;void 0!==o&amp;&amp;void 0!==s&amp;&amp;void 0!==c||delete e.bounds,a(t,e,{name:\"layers\",handleItemDefaults:l}),e._input=t}function l(t,e){function r(r,i){return n.coerce(t,e,o.layers,r,i)}if(r(\"visible\")){var i,a=r(\"sourcetype\"),s=\"raster\"===a||\"image\"===a;r(\"source\"),r(\"sourceattribution\"),\"vector\"===a&amp;&amp;r(\"sourcelayer\"),\"image\"===a&amp;&amp;r(\"coordinates\"),s&amp;&amp;(i=\"raster\");var l=r(\"type\",i);s&amp;&amp;\"raster\"!==l&amp;&amp;(l=e.type=\"raster\",n.log(\"Source types *raster* and *image* must drawn *raster* layer type.\")),r(\"below\"),r(\"color\"),r(\"opacity\"),r(\"minzoom\"),r(\"maxzoom\"),\"circle\"===l&amp;&amp;r(\"circle.radius\"),\"line\"===l&amp;&amp;(r(\"line.width\"),r(\"line.dash\")),\"fill\"===l&amp;&amp;r(\"fill.outlinecolor\"),\"symbol\"===l&amp;&amp;(r(\"symbol.icon\"),r(\"symbol.iconsize\"),r(\"symbol.text\"),n.coerceFont(r,\"symbol.textfont\"),r(\"symbol.textposition\"),r(\"symbol.placement\"))}}e.exports=function(t,e,r){i(t,e,r,{type:\"mapbox\",attributes:o,handleDefaults:s,partition:\"y\",accessToken:e._mapboxAccessToken})}},{\"../../lib\":515,\"../array_container_defaults\":561,\"../subplot_defaults\":641,\"./layout_attributes\":624}],626:[function(t,e,r){\"use strict\";var n=t(\"mapbox-gl/dist/mapbox-gl-unminified\"),i=t(\"../../lib\"),a=t(\"../../lib/geo_location_utils\"),o=t(\"../../registry\"),s=t(\"../cartesian/axes\"),l=t(\"../../components/dragelement\"),c=t(\"../../components/fx\"),u=t(\"../../components/dragelement/helpers\"),f=u.drawMode,h=u.selectMode,p=t(\"../../components/selections\").prepSelect,d=t(\"../../components/selections\").clearOutline,m=t(\"../../components/selections\").clearSelectionsCache,g=t(\"../../components/selections\").selectOnClick,v=t(\"./constants\"),y=t(\"./layers\");function x(t,e){this.id=e,this.gd=t;var r=t._fullLayout,n=t._context;this.container=r._glcontainer.node(),this.isStatic=n.staticPlot,this.uid=r._uid+\"-\"+this.id,this.div=null,this.xaxis=null,this.yaxis=null,this.createFramework(r),this.map=null,this.accessToken=null,this.styleObj=null,this.traceHash={},this.layerList=[],this.belowLookup={},this.dragging=!1,this.wheeling=!1}var b=x.prototype;b.plot=function(t,e,r){var n,i=this,a=e[i.id];i.map&amp;&amp;a.accesstoken!==i.accessToken&amp;&amp;(i.map.remove(),i.map=null,i.styleObj=null,i.traceHash={},i.layerList=[]),n=i.map?new Promise((function(r,n){i.updateMap(t,e,r,n)})):new Promise((function(r,n){i.createMap(t,e,r,n)})),r.push(n)},b.createMap=function(t,e,r,i){var o=this,s=e[o.id],l=o.styleObj=w(s.style);o.accessToken=s.accesstoken;var c=s.bounds,u=c?[[c.west,c.south],[c.east,c.north]]:null,f=o.map=new n.Map({container:o.div,style:l.style,center:k(s.center),zoom:s.zoom,bearing:s.bearing,pitch:s.pitch,maxBounds:u,interactive:!o.isStatic,preserveDrawingBuffer:o.isStatic,doubleClickZoom:!1,boxZoom:!1,attributionControl:!1}).addControl(new n.AttributionControl({compact:!0}));f._canvas.style.left=\"0px\",f._canvas.style.top=\"0px\",o.rejectOnError(i),o.isStatic||o.initFx(t,e);var h=[];h.push(new Promise((function(t){f.once(\"load\",t)}))),h=h.concat(a.fetchTraceGeoData(t)),Promise.all(h).then((function(){o.fillBelowLookup(t,e),o.updateData(t),o.updateLayout(e),o.resolveOnRender(r)})).catch(i)},b.updateMap=function(t,e,r,n){var i=this,o=i.map,s=e[this.id];i.rejectOnError(n);var l=[],c=w(s.style);JSON.stringify(i.styleObj)!==JSON.stringify(c)&amp;&amp;(i.styleObj=c,o.setStyle(c.style),i.traceHash={},l.push(new Promise((function(t){o.once(\"styledata\",t)})))),l=l.concat(a.fetchTraceGeoData(t)),Promise.all(l).then((function(){i.fillBelowLookup(t,e),i.updateData(t),i.updateLayout(e),i.resolveOnRender(r)})).catch(n)},b.fillBelowLookup=function(t,e){var r,n,i=e[this.id].layers,a=this.belowLookup={},o=!1;for(r=0;r&lt;t.length;r++){var s=t[r][0].trace,l=s._module;\"string\"==typeof s.below?n=s.below:l.getBelow&amp;&amp;(n=l.getBelow(s,this)),\"\"===n&amp;&amp;(o=!0),a[\"trace-\"+s.uid]=n||\"\"}for(r=0;r&lt;i.length;r++){var c=i[r];n=\"string\"==typeof c.below?c.below:o?\"traces\":\"\",a[\"layout-\"+r]=n}var u,f,h={};for(u in a)h[n=a[u]]?h[n].push(u):h[n]=[u];for(n in h){var p=h[n];if(p.length&gt;1)for(r=0;r-1&amp;&amp;g(e.originalEvent,n,[r.xaxis],[r.yaxis],r.id,t),i.indexOf(\"event\")&gt;-1&amp;&amp;c.click(n,e.originalEvent)}}},b.updateFx=function(t){var e=this,r=e.map,n=e.gd;if(!e.isStatic){var a,o=t.dragmode;a=function(t,r){r.isRect?(t.range={})[e.id]=[c([r.xmin,r.ymin]),c([r.xmax,r.ymax])]:(t.lassoPoints={})[e.id]=r.map(c)};var s=e.dragOptions;e.dragOptions=i.extendDeep(s||{},{dragmode:t.dragmode,element:e.div,gd:n,plotinfo:{id:e.id,domain:t[e.id].domain,xaxis:e.xaxis,yaxis:e.yaxis,fillRangeItems:a},xaxes:[e.xaxis],yaxes:[e.yaxis],subplot:e.id}),r.off(\"click\",e.onClickInPanHandler),h(o)||f(o)?(r.dragPan.disable(),r.on(\"zoomstart\",e.clearSelect),e.dragOptions.prepFn=function(t,r,n){p(t,r,n,e.dragOptions,o)},l.init(e.dragOptions)):(r.dragPan.enable(),r.off(\"zoomstart\",e.clearSelect),e.div.onmousedown=null,e.div.ontouchstart=null,e.div.removeEventListener(\"touchstart\",e.div._ontouchstart),e.onClickInPanHandler=e.onClickInPanFn(e.dragOptions),r.on(\"click\",e.onClickInPanHandler))}function c(t){var r=e.map.unproject(t);return[r.lng,r.lat]}},b.updateFramework=function(t){var e=t[this.id].domain,r=t._size,n=this.div.style;n.width=r.w*(e.x[1]-e.x[0])+\"px\",n.height=r.h*(e.y[1]-e.y[0])+\"px\",n.left=r.l+e.x[0]*r.w+\"px\",n.top=r.t+(1-e.y[1])*r.h+\"px\",this.xaxis._offset=r.l+e.x[0]*r.w,this.xaxis._length=r.w*(e.x[1]-e.x[0]),this.yaxis._offset=r.t+(1-e.y[1])*r.h,this.yaxis._length=r.h*(e.y[1]-e.y[0])},b.updateLayers=function(t){var e,r=t[this.id].layers,n=this.layerList;if(r.length!==n.length){for(e=0;e=e.width-20?(a[\"text-anchor\"]=\"start\",a.x=5):(a[\"text-anchor\"]=\"end\",a.x=e._paper.attr(\"width\")-7),r.attr(a);var o=r.select(\".js-link-to-tool\"),s=r.select(\".js-link-spacer\"),l=r.select(\".js-sourcelinks\");t._context.showSources&amp;&amp;t._context.showSources(t),t._context.showLink&amp;&amp;function(t,e){e.text(\"\");var r=e.append(\"a\").attr({\"xlink:xlink:href\":\"#\",class:\"link--impt link--embedview\",\"font-weight\":\"bold\"}).text(t._context.linkText+\" \"+String.fromCharCode(187));if(t._context.sendData)r.on(\"click\",(function(){b.sendDataToCloud(t)}));else{var n=window.location.pathname.split(\"/\"),i=window.location.search;r.attr({\"xlink:xlink:show\":\"new\",\"xlink:xlink:href\":\"/\"+n[2].split(\".\")[0]+\"/\"+n[1]+i})}}(t,o),s.text(o.text()&amp;&amp;l.text()?\" - \":\"\")}},b.sendDataToCloud=function(t){var e=(window.PLOTLYENV||{}).BASE_URL||t._context.plotlyServerURL;if(e){t.emit(\"plotly_beforeexport\");var r=n.select(t).append(\"div\").attr(\"id\",\"hiddenform\").style(\"display\",\"none\"),i=r.append(\"form\").attr({action:e+\"/external\",method:\"post\",target:\"_blank\"});return i.append(\"input\").attr({type:\"text\",name:\"data\"}).node().value=b.graphJson(t,!1,\"keepdata\"),i.node().submit(),r.remove(),t.emit(\"plotly_afterexport\"),!1}};var T=[\"days\",\"shortDays\",\"months\",\"shortMonths\",\"periods\",\"dateTime\",\"date\",\"time\",\"decimal\",\"thousands\",\"grouping\",\"currency\"],k=[\"year\",\"month\",\"dayMonth\",\"dayMonthYear\"];function A(t,e){var r=t._context.locale;r||(r=\"en-US\");var n=!1,i={};function a(t){for(var r=!0,a=0;a1&amp;&amp;z.length&gt;1){for(s.getComponentMethod(\"grid\",\"sizeDefaults\")(c,l),o=0;o15&amp;&amp;z.length&gt;15&amp;&amp;0===l.shapes.length&amp;&amp;0===l.images.length,b.linkSubplots(h,l,f,n),b.cleanPlot(h,l,f,n);var N=!(!n._has||!n._has(\"gl2d\")),j=!(!l._has||!l._has(\"gl2d\")),U=!(!n._has||!n._has(\"cartesian\"))||N,V=!(!l._has||!l._has(\"cartesian\"))||j;U&amp;&amp;!V?n._bgLayer.remove():V&amp;&amp;!U&amp;&amp;(l._shouldCreateBgLayer=!0),n._zoomlayer&amp;&amp;!t._dragging&amp;&amp;d({_fullLayout:n}),function(t,e){var r,n=[];e.meta&amp;&amp;(r=e._meta={meta:e.meta,layout:{meta:e.meta}});for(var i=0;i0){var f=1-2*s;n=Math.round(f*n),i=Math.round(f*i)}}var h=b.layoutAttributes.width.min,p=b.layoutAttributes.height.min;n1,m=!e.height&amp;&amp;Math.abs(r.height-i)&gt;1;(m||d)&amp;&amp;(d&amp;&amp;(r.width=n),m&amp;&amp;(r.height=i)),t._initialAutoSize||(t._initialAutoSize={width:n,height:i}),b.sanitizeMargins(r)},b.supplyLayoutModuleDefaults=function(t,e,r,n){var i,a,o,l=s.componentsRegistry,c=e._basePlotModules,f=s.subplotsRegistry.cartesian;for(i in l)(o=l[i]).includeBasePlot&amp;&amp;o.includeBasePlot(t,e);for(var h in c.length||c.push(f),e._has(\"cartesian\")&amp;&amp;(s.getComponentMethod(\"grid\",\"contentDefaults\")(t,e),f.finalizeSubplots(t,e)),e._subplots)e._subplots[h].sort(u.subplotSort);for(a=0;a1&amp;&amp;(r.l/=v,r.r/=v)}if(p){var y=(r.t+r.b)/p;y&gt;1&amp;&amp;(r.t/=y,r.b/=y)}var x=void 0!==r.xl?r.xl:r.x,_=void 0!==r.xr?r.xr:r.x,w=void 0!==r.yt?r.yt:r.y,T=void 0!==r.yb?r.yb:r.y;d[e]={l:{val:x,size:r.l+g},r:{val:_,size:r.r+g},b:{val:T,size:r.b+g},t:{val:w,size:r.t+g}},m[e]=1}else delete d[e],delete m[e];if(!n._replotting)return b.doAutoMargin(t)}},b.doAutoMargin=function(t){var e=t._fullLayout,r=e.width,n=e.height;e._size||(e._size={}),C(e);var i=e._size,a=e.margin,l=u.extendFlat({},i),c=a.l,f=a.r,h=a.t,d=a.b,m=e._pushmargin,g=e._pushmarginIds,v=e.minreducedwidth,y=e.minreducedheight;if(!1!==e.margin.autoexpand){for(var x in m)g[x]||delete m[x];for(var _ in m.base={l:{val:0,size:c},r:{val:1,size:f},t:{val:1,size:h},b:{val:0,size:d}},m){var w=m[_].l||{},T=m[_].b||{},k=w.val,A=w.size,M=T.val,S=T.size;for(var E in m){if(o(A)&amp;&amp;m[E].r){var L=m[E].r.val,P=m[E].r.size;if(L&gt;k){var I=(A*L+(P-r)*k)/(L-k),O=(P*(1-k)+(A-r)*(1-L))/(L-k);I+O&gt;c+f&amp;&amp;(c=I,f=O)}}if(o(S)&amp;&amp;m[E].t){var z=m[E].t.val,D=m[E].t.size;if(z&gt;M){var R=(S*z+(D-n)*M)/(z-M),F=(D*(1-M)+(S-n)*(1-z))/(z-M);R+F&gt;d+h&amp;&amp;(d=R,h=F)}}}}}var B=u.constrain(r-a.l-a.r,2,v),N=u.constrain(n-a.t-a.b,2,y),j=Math.max(0,r-B),U=Math.max(0,n-N);if(j){var V=(c+f)/j;V&gt;1&amp;&amp;(c/=V,f/=V)}if(U){var H=(d+h)/U;H&gt;1&amp;&amp;(d/=H,h/=H)}if(i.l=Math.round(c),i.r=Math.round(f),i.t=Math.round(h),i.b=Math.round(d),i.p=Math.round(a.pad),i.w=Math.round(r)-i.l-i.r,i.h=Math.round(n)-i.t-i.b,!e._replotting&amp;&amp;b.didMarginChange(l,i)){\"_redrawFromAutoMarginCount\"in e?e._redrawFromAutoMarginCount++:e._redrawFromAutoMarginCount=1;var q=3*(1+Object.keys(g).length);if(e._redrawFromAutoMarginCount0&amp;&amp;(t._transitioningWithDuration=!0),t._transitionData._interruptCallbacks.push((function(){n=!0})),r.redraw&amp;&amp;t._transitionData._interruptCallbacks.push((function(){return s.call(\"redraw\",t)})),t._transitionData._interruptCallbacks.push((function(){t.emit(\"plotly_transitioninterrupted\",[])}));var a=0,o=0;function l(){return a++,function(){o++,n||o!==a||function(e){if(!t._transitionData)return;(function(t){if(t)for(;t.length;)t.shift()})(t._transitionData._interruptCallbacks),Promise.resolve().then((function(){if(r.redraw)return s.call(\"redraw\",t)})).then((function(){t._transitioning=!1,t._transitioningWithDuration=!1,t.emit(\"plotly_transitioned\",[])})).then(e)}(i)}}r.runFn(l),setTimeout(l())}))}],a=u.syncOrAsync(i,t);return a&amp;&amp;a.then||(a=Promise.resolve()),a.then((function(){return t}))}b.didMarginChange=function(t,e){for(var r=0;r1)return!0}return!1},b.graphJson=function(t,e,r,n,i,a){(i&amp;&amp;e&amp;&amp;!t._fullData||i&amp;&amp;!e&amp;&amp;!t._fullLayout)&amp;&amp;b.supplyDefaults(t);var o=i?t._fullData:t.data,s=i?t._fullLayout:t.layout,l=(t._transitionData||{})._frames;function c(t,e){if(\"function\"==typeof t)return e?\"_function_\":null;if(u.isPlainObject(t)){var n,i={};return Object.keys(t).sort().forEach((function(a){if(-1===[\"_\",\"[\"].indexOf(a.charAt(0)))if(\"function\"!=typeof t[a]){if(\"keepdata\"===r){if(\"src\"===a.substr(a.length-3))return}else if(\"keepstream\"===r){if(\"string\"==typeof(n=t[a+\"src\"])&amp;&amp;n.indexOf(\":\")&gt;0&amp;&amp;!u.isPlainObject(t.stream))return}else if(\"keepall\"!==r&amp;&amp;\"string\"==typeof(n=t[a+\"src\"])&amp;&amp;n.indexOf(\":\")&gt;0)return;i[a]=c(t[a],e)}else e&amp;&amp;(i[a]=\"_function\")})),i}return Array.isArray(t)?t.map((function(t){return c(t,e)})):u.isTypedArray(t)?u.simpleMap(t,u.identity):u.isJSDate(t)?u.ms2DateTimeLocal(+t):t}var f={data:(o||[]).map((function(t){var r=c(t);return e&amp;&amp;delete r.fit,r}))};if(!e&amp;&amp;(f.layout=c(s),i)){var h=s._size;f.layout.computed={margin:{b:h.b,l:h.l,r:h.r,t:h.t}}}return l&amp;&amp;(f.frames=c(l)),a&amp;&amp;(f.config=c(t._context,!0)),\"object\"===n?f:JSON.stringify(f)},b.modifyFrames=function(t,e){var r,n,i,a=t._transitionData._frames,o=t._transitionData._frameHash;for(r=0;r=0;a--)if(s[a].enabled){r._indexToPoints=s[a]._indexToPoints;break}n&amp;&amp;n.calc&amp;&amp;(o=n.calc(t,r))}Array.isArray(o)&amp;&amp;o[0]||(o=[{x:h,y:h}]),o[0].t||(o[0].t={}),o[0].trace=r,d[e]=o}}for(z(o,c,f),i=0;i1e-10?t:0}function h(t,e,r){e=e||0,r=r||0;for(var n=t.length,i=new Array(n),a=0;a0?r:1/0})),i=n.mod(r+1,e.length);return[e[r],e[i]]},findIntersectionXY:c,findXYatLength:function(t,e,r,n){var i=-e*r,a=e*e+1,o=2*(e*i-r),s=i*i+r*r-t*t,l=Math.sqrt(o*o-4*a*s),c=(-o+l)/(2*a),u=(-o-l)/(2*a);return[[c,e*c+i+n],[u,e*u+i+n]]},clampTiny:f,pathPolygon:function(t,e,r,n,i,a){return\"M\"+h(u(t,e,r,n),i,a).join(\"L\")},pathPolygonAnnulus:function(t,e,r,n,i,a,o){var s,l;t=90||s&gt;90&amp;&amp;l&gt;=450?1:u&lt;=0&amp;&amp;h&lt;=0?0:Math.max(u,h);e=s&lt;=180&amp;&amp;l&gt;=180||s&gt;180&amp;&amp;l&gt;=540?-1:c&gt;=0&amp;&amp;f&gt;=0?0:Math.min(c,f);r=s&lt;=270&amp;&amp;l&gt;=270||s&gt;270&amp;&amp;l&gt;=630?-1:u&gt;=0&amp;&amp;h&gt;=0?0:Math.min(u,h);n=l&gt;=360?1:c&lt;=0&amp;&amp;f&lt;=0?0:Math.max(c,f);return[e,r,n,i]}(p),b=x[2]-x[0],_=x[3]-x[1],w=h/f,T=Math.abs(_/b);w&gt;T?(d=f,y=(h-(m=f*T))/n.h/2,g=[o[0],o[1]],v=[s[0]+y,s[1]-y]):(m=h,y=(f-(d=h/T))/n.w/2,g=[o[0]+y,o[1]-y],v=[s[0],s[1]]),this.xLength2=d,this.yLength2=m,this.xDomain2=g,this.yDomain2=v;var k,A=this.xOffset2=n.l+n.w*g[0],M=this.yOffset2=n.t+n.h*(1-v[1]),S=this.radius=d/b,E=this.innerRadius=this.getHole(e)*S,L=this.cx=A-S*x[0],C=this.cy=M+S*x[3],P=this.cxx=L-A,I=this.cyy=C-M,O=i.side;\"counterclockwise\"===O?(k=O,O=\"top\"):\"clockwise\"===O&amp;&amp;(k=O,O=\"bottom\"),this.radialAxis=this.mockAxis(t,e,i,{_id:\"x\",side:O,_trueSide:k,domain:[E/n.w,S/n.w]}),this.angularAxis=this.mockAxis(t,e,a,{side:\"right\",domain:[0,Math.PI],autorange:!1}),this.doAutoRange(t,e),this.updateAngularAxis(t,e),this.updateRadialAxis(t,e),this.updateRadialAxisTitle(t,e),this.xaxis=this.mockCartesianAxis(t,e,{_id:\"x\",domain:g}),this.yaxis=this.mockCartesianAxis(t,e,{_id:\"y\",domain:v});var z=this.pathSubplot();this.clipPaths.forTraces.select(\"path\").attr(\"d\",z).attr(\"transform\",l(P,I)),r.frontplot.attr(\"transform\",l(A,M)).call(u.setClipUrl,this._hasClipOnAxisFalse?null:this.clipIds.forTraces,this.gd),r.bg.attr(\"d\",z).attr(\"transform\",l(L,C)).call(c.fill,e.bgcolor)},N.mockAxis=function(t,e,r,n){var i=o.extendFlat({},r,n);return d(i,e,t),i},N.mockCartesianAxis=function(t,e,r){var n=this,i=n.isSmith,a=r._id,s=o.extendFlat({type:\"linear\"},r);p(s,t);var l={x:[0,2],y:[1,3]};return s.setRange=function(){var t=n.sectorBBox,r=l[a],i=n.radialAxis._rl,o=(i[1]-i[0])/(1-n.getHole(e));s.range=[t[r[0]]*o,t[r[1]]*o]},s.isPtWithinRange=\"x\"!==a||i?function(){return!0}:function(t){return n.isPtInside(t)},s.setRange(),s.setScale(),s},N.doAutoRange=function(t,e){var r=this.gd,n=this.radialAxis,i=this.getRadial(e);m(r,n);var a=n.range;i.range=a.slice(),i._input.range=a.slice(),n._rl=[n.r2l(a[0],null,\"gregorian\"),n.r2l(a[1],null,\"gregorian\")]},N.updateRadialAxis=function(t,e){var r=this,n=r.gd,i=r.layers,a=r.radius,u=r.innerRadius,f=r.cx,p=r.cy,d=r.getRadial(e),m=D(r.getSector(e)[0],360),g=r.radialAxis,v=u90&amp;&amp;m&lt;=270&amp;&amp;(g.tickangle=180);var x=y?function(t){var e=O(r,C([t.x,0]));return l(e[0]-f,e[1]-p)}:function(t){return l(g.l2p(t.x)+u,0)},b=y?function(t){return I(r,t.x,-1/0,1/0)}:function(t){return r.pathArc(g.r2p(t.x)+u)},_=j(d);if(r.radialTickLayout!==_&amp;&amp;(i[\"radial-axis\"].selectAll(\".xtick\").remove(),r.radialTickLayout=_),v){g.setScale();var w=0,T=y?(g.tickvals||[]).filter((function(t){return t&gt;=0})).map((function(t){return h.tickText(g,t,!0,!1)})):h.calcTicks(g),k=y?T:h.clipEnds(g,T),A=h.getTickSigns(g)[2];y&amp;&amp;((\"top\"===g.ticks&amp;&amp;\"bottom\"===g.side||\"bottom\"===g.ticks&amp;&amp;\"top\"===g.side)&amp;&amp;(A=-A),\"top\"===g.ticks&amp;&amp;\"top\"===g.side&amp;&amp;(w=-g.ticklen),\"bottom\"===g.ticks&amp;&amp;\"bottom\"===g.side&amp;&amp;(w=g.ticklen)),h.drawTicks(n,g,{vals:T,layer:i[\"radial-axis\"],path:h.makeTickPath(g,0,A),transFn:x,crisp:!1}),h.drawGrid(n,g,{vals:k,layer:i[\"radial-grid\"],path:b,transFn:o.noop,crisp:!1}),h.drawLabels(n,g,{vals:T,layer:i[\"radial-axis\"],transFn:x,labelFns:h.makeLabelFns(g,w)})}var M=r.radialAxisAngle=r.vangles?F(U(R(d.angle),r.vangles)):d.angle,S=l(f,p),E=S+s(-M);V(i[\"radial-axis\"],v&amp;&amp;(d.showticklabels||d.ticks),{transform:E}),V(i[\"radial-grid\"],v&amp;&amp;d.showgrid,{transform:y?\"\":S}),V(i[\"radial-line\"].select(\"line\"),v&amp;&amp;d.showline,{x1:y?-a:u,y1:0,x2:a,y2:0,transform:E}).attr(\"stroke-width\",d.linewidth).call(c.stroke,d.linecolor)},N.updateRadialAxisTitle=function(t,e,r){if(!this.isSmith){var n=this.gd,i=this.radius,a=this.cx,o=this.cy,s=this.getRadial(e),l=this.id+\"title\",c=0;if(s.title){var f=u.bBox(this.layers[\"radial-axis\"].node()).height,h=s.title.font.size,p=s.side;c=\"top\"===p?h:\"counterclockwise\"===p?-(f+.4*h):f+.8*h}var d=void 0!==r?r:this.radialAxisAngle,m=R(d),g=Math.cos(m),v=Math.sin(m),y=a+i/2*g+c*v,b=o-i/2*v+c*g;this.layers[\"radial-axis-title\"]=x.draw(n,l,{propContainer:s,propName:this.id+\".radialaxis.title\",placeholder:z(n,\"Click to enter radial axis title\"),attributes:{x:y,y:b,\"text-anchor\":\"middle\"},transform:{rotate:-d}})}},N.updateAngularAxis=function(t,e){var r=this,n=r.gd,i=r.layers,a=r.radius,u=r.innerRadius,f=r.cx,p=r.cy,d=r.getAngular(e),m=r.angularAxis,g=r.isSmith;g||(r.fillViewInitialKey(\"angularaxis.rotation\",d.rotation),m.setGeometry(),m.setScale());var v=g?function(t){var e=O(r,C([0,t.x]));return Math.atan2(e[0]-f,e[1]-p)-Math.PI/2}:function(t){return m.t2g(t.x)};\"linear\"===m.type&amp;&amp;\"radians\"===m.thetaunit&amp;&amp;(m.tick0=F(m.tick0),m.dtick=F(m.dtick));var y=function(t){return l(f+a*Math.cos(t),p-a*Math.sin(t))},x=g?function(t){var e=O(r,C([0,t.x]));return l(e[0],e[1])}:function(t){return y(v(t))},b=g?function(t){var e=O(r,C([0,t.x])),n=Math.atan2(e[0]-f,e[1]-p)-Math.PI/2;return l(e[0],e[1])+s(-F(n))}:function(t){var e=v(t);return y(e)+s(-F(e))},_=g?function(t){return P(r,t.x,0,1/0)}:function(t){var e=v(t),r=Math.cos(e),n=Math.sin(e);return\"M\"+[f+u*r,p-u*n]+\"L\"+[f+a*r,p-a*n]},w=h.makeLabelFns(m,0).labelStandoff,T={xFn:function(t){var e=v(t);return Math.cos(e)*w},yFn:function(t){var e=v(t),r=Math.sin(e)&gt;0?.2:1;return-Math.sin(e)*(w+t.fontSize*r)+Math.abs(Math.cos(e))*(t.fontSize*M)},anchorFn:function(t){var e=v(t),r=Math.cos(e);return Math.abs(r)&lt;.1?\"middle\":r&gt;0?\"start\":\"end\"},heightFn:function(t,e,r){var n=v(t);return-.5*(1+Math.sin(n))*r}},k=j(d);r.angularTickLayout!==k&amp;&amp;(i[\"angular-axis\"].selectAll(\".\"+m._id+\"tick\").remove(),r.angularTickLayout=k);var A,S=g?[1/0].concat(m.tickvals||[]).map((function(t){return h.tickText(m,t,!0,!1)})):h.calcTicks(m);if(g&amp;&amp;(S[0].text=\"\\u221e\",S[0].fontSize*=1.75),\"linear\"===e.gridshape?(A=S.map(v),o.angleDelta(A[0],A[1])&lt;0&amp;&amp;(A=A.slice().reverse())):A=null,r.vangles=A,\"category\"===m.type&amp;&amp;(S=S.filter((function(t){return o.isAngleInsideSector(v(t),r.sectorInRad)}))),m.visible){var E=\"inside\"===m.ticks?-1:1,L=(m.linewidth||1)/2;h.drawTicks(n,m,{vals:S,layer:i[\"angular-axis\"],path:\"M\"+E*L+\",0h\"+E*m.ticklen,transFn:b,crisp:!1}),h.drawGrid(n,m,{vals:S,layer:i[\"angular-grid\"],path:_,transFn:o.noop,crisp:!1}),h.drawLabels(n,m,{vals:S,layer:i[\"angular-axis\"],repositionOnUpdate:!0,transFn:x,labelFns:T})}V(i[\"angular-line\"].select(\"path\"),d.showline,{d:r.pathSubplot(),transform:l(f,p)}).attr(\"stroke-width\",d.linewidth).call(c.stroke,d.linecolor)},N.updateFx=function(t,e){this.gd._context.staticPlot||(!this.isSmith&amp;&amp;(this.updateAngularDrag(t),this.updateRadialDrag(t,e,0),this.updateRadialDrag(t,e,1)),this.updateHoverAndMainDrag(t))},N.updateHoverAndMainDrag=function(t){var e,r,s=this,c=s.isSmith,u=s.gd,f=s.layers,h=t._zoomlayer,p=S.MINZOOM,d=S.OFFEDGE,m=s.radius,x=s.innerRadius,T=s.cx,k=s.cy,A=s.cxx,M=s.cyy,L=s.sectorInRad,C=s.vangles,P=s.radialAxis,I=E.clampTiny,O=E.findXYatLength,z=E.findEnclosingVertexAngles,D=S.cornerHalfWidth,R=S.cornerLen/2,F=g.makeDragger(f,\"path\",\"maindrag\",!1===t.dragmode?\"none\":\"crosshair\");n.select(F).attr(\"d\",s.pathSubplot()).attr(\"transform\",l(T,k)),F.onmousemove=function(t){y.hover(u,t,s.id),u._fullLayout._lasthover=F,u._fullLayout._hoversubplot=s.id},F.onmouseout=function(t){u._dragging||v.unhover(u,t)};var B,N,j,U,V,H,q,G,Y,W={element:F,gd:u,subplot:s.id,plotinfo:{id:s.id,xaxis:s.xaxis,yaxis:s.yaxis},xaxes:[s.xaxis],yaxes:[s.yaxis]};function Z(t,e){return Math.sqrt(t*t+e*e)}function X(t,e){return Z(t-A,e-M)}function J(t,e){return Math.atan2(M-e,t-A)}function K(t,e){return[t*Math.cos(e),t*Math.sin(-e)]}function Q(t,e){if(0===t)return s.pathSector(2*D);var r=R/t,n=e-r,i=e+r,a=Math.max(0,Math.min(t,m)),o=a-D,l=a+D;return\"M\"+K(o,n)+\"A\"+[o,o]+\" 0,0,0 \"+K(o,i)+\"L\"+K(l,i)+\"A\"+[l,l]+\" 0,0,1 \"+K(l,n)+\"Z\"}function $(t,e,r){if(0===t)return s.pathSector(2*D);var n,i,a=K(t,e),o=K(t,r),l=I((a[0]+o[0])/2),c=I((a[1]+o[1])/2);if(l&amp;&amp;c){var u=c/l,f=-1/u,h=O(D,u,l,c);n=O(R,f,h[0][0],h[0][1]),i=O(R,f,h[1][0],h[1][1])}else{var p,d;c?(p=R,d=D):(p=D,d=R),n=[[l-p,c-d],[l+p,c-d]],i=[[l-p,c+d],[l+p,c+d]]}return\"M\"+n.join(\"L\")+\"L\"+i.reverse().join(\"L\")+\"Z\"}function tt(t,e){return e=Math.max(Math.min(e,m),x),tp?(t-1&amp;&amp;1===t&amp;&amp;_(e,u,[s.xaxis],[s.yaxis],s.id,W),r.indexOf(\"event\")&gt;-1&amp;&amp;y.click(u,e,s.id)}W.prepFn=function(t,n,a){var l=u._fullLayout.dragmode,f=F.getBoundingClientRect();u._fullLayout._calcInverseTransform(u);var p=u._fullLayout._invTransform;e=u._fullLayout._invScaleX,r=u._fullLayout._invScaleY;var d=o.apply3DTransform(p)(n-f.left,a-f.top);if(B=d[0],N=d[1],C){var v=E.findPolygonOffset(m,L[0],L[1],C);B+=A+v[0],N+=M+v[1]}switch(l){case\"zoom\":W.clickFn=st,c||(W.moveFn=C?it:rt,W.doneFn=at,function(){j=null,U=null,V=s.pathSubplot(),H=!1;var t=u._fullLayout[s.id];q=i(t.bgcolor).getLuminance(),(G=g.makeZoombox(h,q,T,k,V)).attr(\"fill-rule\",\"evenodd\"),Y=g.makeCorners(h,T,k),w(u)}());break;case\"select\":case\"lasso\":b(t,n,a,W,l)}},v.init(W)},N.updateRadialDrag=function(t,e,r){var i=this,c=i.gd,u=i.layers,f=i.radius,h=i.innerRadius,p=i.cx,d=i.cy,m=i.radialAxis,y=S.radialDragBoxSize,x=y/2;if(m.visible){var b,_,T,M=R(i.radialAxisAngle),E=m._rl,L=E[0],C=E[1],P=E[r],I=.75*(E[1]-E[0])/(1-i.getHole(e))/f;r?(b=p+(f+x)*Math.cos(M),_=d-(f+x)*Math.sin(M),T=\"radialdrag\"):(b=p+(h-x)*Math.cos(M),_=d-(h-x)*Math.sin(M),T=\"radialdrag-inner\");var O,z,D,B=g.makeRectDragger(u,T,\"crosshair\",-x,-x,y,y),N={element:B,gd:c};!1===t.dragmode&amp;&amp;(N.dragmode=!1),V(n.select(B),m.visible&amp;&amp;h0==(r?D&gt;L:Dn?function(t){return t&lt;=0}:function(t){return t&gt;=0};t.c2g=function(r){var n=t.c2l(r)-e;return(s(n)?n:0)+o},t.g2c=function(r){return t.l2c(r+e-o)},t.g2p=function(t){return t*a},t.c2p=function(e){return t.g2p(t.c2g(e))}}}(t,e);break;case\"angularaxis\":!function(t,e){var r=t.type;if(\"linear\"===r){var i=t.d2c,s=t.c2d;t.d2c=function(t,e){return function(t,e){return\"degrees\"===e?a(t):t}(i(t),e)},t.c2d=function(t,e){return s(function(t,e){return\"degrees\"===e?o(t):t}(t,e))}}t.makeCalcdata=function(e,i){var a,o,s=e[i],l=e._length,c=function(r){return t.d2c(r,e.thetaunit)};if(s){if(n.isTypedArray(s)&amp;&amp;\"linear\"===r){if(l===s.length)return s;if(s.subarray)return s.subarray(0,l)}for(a=new Array(l),o=0;o0?1:0}function i(t){var e=t[0],r=t[1];if(!isFinite(e)||!isFinite(r))return[1,0];var n=(e+1)*(e+1)+r*r;return[(e*e+r*r-1)/n,2*r/n]}function a(t,e){var r=e[0],n=e[1];return[r*t.radius+t.cx,-n*t.radius+t.cy]}function o(t,e){return e*t.radius}e.exports={smith:i,reactanceArc:function(t,e,r,n){var s=a(t,i([r,e])),l=s[0],c=s[1],u=a(t,i([n,e])),f=u[0],h=u[1];if(0===e)return[\"M\"+l+\",\"+c,\"L\"+f+\",\"+h].join(\" \");var p=o(t,1/Math.abs(e));return[\"M\"+l+\",\"+c,\"A\"+p+\",\"+p+\" 0 0,\"+(e&lt;0?1:0)+\" \"+f+\",\"+h].join(\" \")},resistanceArc:function(t,e,r,s){var l=o(t,1/(e+1)),c=a(t,i([e,r])),u=c[0],f=c[1],h=a(t,i([e,s])),p=h[0],d=h[1];if(n(r)!==n(s)){var m=a(t,i([e,0]));return[\"M\"+u+\",\"+f,\"A\"+l+\",\"+l+\" 0 0,\"+(00){for(var n=[],i=0;i&lt;r.length;i++)n[i]=\"`\"+r[i]+\"`\";e+=\"Finally, the template string has access to \",e=1===r.length?\"variable \"+n[0]:\"variables \"+n.slice(0,-1).join(\", \")+\" and \"+n.slice(-1)+\".\"}return e}r.hovertemplateAttrs=function(t,e){t=t||{};i(e=e||{});var r={valType:\"string\",dflt:\"\",editType:t.editType||\"none\"};return!1!==t.arrayOk&amp;&amp;(r.arrayOk=!0),r},r.texttemplateAttrs=function(t,e){t=t||{};i(e=e||{});var r={valType:\"string\",dflt:\"\",editType:t.editType||\"calc\"};return!1!==t.arrayOk&amp;&amp;(r.arrayOk=!0),r}},{\"../constants/docs\":486}],643:[function(t,e,r){\"use strict\";var n=t(\"./ternary\"),i=t(\"../../plots/get_data\").getSubplotCalcData,a=t(\"../../lib\").counterRegex;r.name=\"ternary\";var o=r.attr=\"subplot\";r.idRoot=\"ternary\",r.idRegex=r.attrRegex=a(\"ternary\"),(r.attributes={})[o]={valType:\"subplotid\",dflt:\"ternary\",editType:\"calc\"},r.layoutAttributes=t(\"./layout_attributes\"),r.supplyLayoutDefaults=t(\"./layout_defaults\"),r.plot=function(t){for(var e=t._fullLayout,r=t.calcdata,a=e._subplots.ternary,o=0;o=u&amp;&amp;(h.min=0,d.min=0,g.min=0,t.aaxis&amp;&amp;delete t.aaxis.min,t.baxis&amp;&amp;delete t.baxis.min,t.caxis&amp;&amp;delete t.caxis.min)}function m(t,e,r,n){var i=h[e._name];function o(r,n){return a.coerce(t,e,i,r,n)}o(\"uirevision\",n.uirevision),e.type=\"linear\";var p=o(\"color\"),d=p!==i.color.dflt?p:r.font.color,m=e._name.charAt(0).toUpperCase(),g=\"Component \"+m,v=o(\"title.text\",g);e._hovertitle=v===g?v:m,a.coerceFont(o,\"title.font\",{family:r.font.family,size:a.bigFont(r.font.size),color:d}),o(\"min\"),u(t,e,o,\"linear\"),l(t,e,o,\"linear\"),s(t,e,o,\"linear\"),c(t,e,o,{outerTicks:!0}),o(\"showticklabels\")&amp;&amp;(a.coerceFont(o,\"tickfont\",{family:r.font.family,size:r.font.size,color:d}),o(\"tickangle\"),o(\"tickformat\")),f(t,e,o,{dfltColor:p,bgColor:r.bgColor,blend:60,showLine:!0,showGrid:!0,noZeroLine:!0,attributes:i}),o(\"hoverformat\"),o(\"layer\")}e.exports=function(t,e,r){o(t,e,r,{type:\"ternary\",attributes:h,handleDefaults:d,font:e.font,paper_bgcolor:e.paper_bgcolor})}},{\"../../components/color\":367,\"../../lib\":515,\"../../plot_api/plot_template\":555,\"../cartesian/line_grid_defaults\":581,\"../cartesian/prefix_suffix_defaults\":583,\"../cartesian/tick_label_defaults\":587,\"../cartesian/tick_mark_defaults\":588,\"../cartesian/tick_value_defaults\":589,\"../subplot_defaults\":641,\"./layout_attributes\":644}],646:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"tinycolor2\"),a=t(\"../../registry\"),o=t(\"../../lib\"),s=o.strTranslate,l=o._,c=t(\"../../components/color\"),u=t(\"../../components/drawing\"),f=t(\"../cartesian/set_convert\"),h=t(\"../../lib/extend\").extendFlat,p=t(\"../plots\"),d=t(\"../cartesian/axes\"),m=t(\"../../components/dragelement\"),g=t(\"../../components/fx\"),v=t(\"../../components/dragelement/helpers\"),y=v.freeMode,x=v.rectMode,b=t(\"../../components/titles\"),_=t(\"../../components/selections\").prepSelect,w=t(\"../../components/selections\").selectOnClick,T=t(\"../../components/selections\").clearOutline,k=t(\"../../components/selections\").clearSelectionsCache,A=t(\"../cartesian/constants\");function M(t,e){this.id=t.id,this.graphDiv=t.graphDiv,this.init(e),this.makeFramework(e),this.aTickLayout=null,this.bTickLayout=null,this.cTickLayout=null}e.exports=M;var S=M.prototype;S.init=function(t){this.container=t._ternarylayer,this.defs=t._defs,this.layoutId=t._uid,this.traceHash={},this.layers={}},S.plot=function(t,e){var r=e[this.id],n=e._size;this._hasClipOnAxisFalse=!1;for(var i=0;iE*b?i=(a=b)*E:a=(i=x)/E,o=v*i/x,l=y*a/b,r=e.l+e.w*m-i/2,n=e.t+e.h*(1-g)-a/2,p.x0=r,p.y0=n,p.w=i,p.h=a,p.sum=_,p.xaxis={type:\"linear\",range:[w+2*k-_,_-w-2*T],domain:[m-o/2,m+o/2],_id:\"x\"},f(p.xaxis,p.graphDiv._fullLayout),p.xaxis.setScale(),p.xaxis.isPtWithinRange=function(t){return t.a&gt;=p.aaxis.range[0]&amp;&amp;t.a&lt;=p.aaxis.range[1]&amp;&amp;t.b&gt;=p.baxis.range[1]&amp;&amp;t.b&lt;=p.baxis.range[0]&amp;&amp;t.c&gt;=p.caxis.range[1]&amp;&amp;t.c&lt;=p.caxis.range[0]},p.yaxis={type:\"linear\",range:[w,_-T-k],domain:[g-l/2,g+l/2],_id:\"y\"},f(p.yaxis,p.graphDiv._fullLayout),p.yaxis.setScale(),p.yaxis.isPtWithinRange=function(){return!0};var A=p.yaxis.domain[0],M=p.aaxis=h({},t.aaxis,{range:[w,_-T-k],side:\"left\",tickangle:(+t.aaxis.tickangle||0)-30,domain:[A,A+l*E],anchor:\"free\",position:0,_id:\"y\",_length:i});f(M,p.graphDiv._fullLayout),M.setScale();var S=p.baxis=h({},t.baxis,{range:[_-w-k,T],side:\"bottom\",domain:p.xaxis.domain,anchor:\"free\",position:0,_id:\"x\",_length:i});f(S,p.graphDiv._fullLayout),S.setScale();var L=p.caxis=h({},t.caxis,{range:[_-w-T,k],side:\"right\",tickangle:(+t.caxis.tickangle||0)+30,domain:[A,A+l*E],anchor:\"free\",position:0,_id:\"y\",_length:i});f(L,p.graphDiv._fullLayout),L.setScale();var C=\"M\"+r+\",\"+(n+a)+\"h\"+i+\"l-\"+i/2+\",-\"+a+\"Z\";p.clipDef.select(\"path\").attr(\"d\",C),p.layers.plotbg.select(\"path\").attr(\"d\",C);var P=\"M0,\"+a+\"h\"+i+\"l-\"+i/2+\",-\"+a+\"Z\";p.clipDefRelative.select(\"path\").attr(\"d\",P);var I=s(r,n);p.plotContainer.selectAll(\".scatterlayer,.maplayer\").attr(\"transform\",I),p.clipDefRelative.select(\"path\").attr(\"transform\",null);var O=s(r-S._offset,n+a);p.layers.baxis.attr(\"transform\",O),p.layers.bgrid.attr(\"transform\",O);var z=s(r+i/2,n)+\"rotate(30)\"+s(0,-M._offset);p.layers.aaxis.attr(\"transform\",z),p.layers.agrid.attr(\"transform\",z);var D=s(r+i/2,n)+\"rotate(-30)\"+s(0,-L._offset);p.layers.caxis.attr(\"transform\",D),p.layers.cgrid.attr(\"transform\",D),p.drawAxes(!0),p.layers.aline.select(\"path\").attr(\"d\",M.showline?\"M\"+r+\",\"+(n+a)+\"l\"+i/2+\",-\"+a:\"M0,0\").call(c.stroke,M.linecolor||\"#000\").style(\"stroke-width\",(M.linewidth||0)+\"px\"),p.layers.bline.select(\"path\").attr(\"d\",S.showline?\"M\"+r+\",\"+(n+a)+\"h\"+i:\"M0,0\").call(c.stroke,S.linecolor||\"#000\").style(\"stroke-width\",(S.linewidth||0)+\"px\"),p.layers.cline.select(\"path\").attr(\"d\",L.showline?\"M\"+(r+i/2)+\",\"+n+\"l\"+i/2+\",\"+a:\"M0,0\").call(c.stroke,L.linecolor||\"#000\").style(\"stroke-width\",(L.linewidth||0)+\"px\"),p.graphDiv._context.staticPlot||p.initInteractions(),u.setClipUrl(p.layers.frontplot,p._hasClipOnAxisFalse?null:p.clipId,p.graphDiv)},S.drawAxes=function(t){var e=this.graphDiv,r=this.id.substr(7)+\"title\",n=this.layers,i=this.aaxis,a=this.baxis,o=this.caxis;if(this.drawAx(i),this.drawAx(a),this.drawAx(o),t){var s=Math.max(i.showticklabels?i.tickfont.size/2:0,(o.showticklabels?.75*o.tickfont.size:0)+(\"outside\"===o.ticks?.87*o.ticklen:0)),c=(a.showticklabels?a.tickfont.size:0)+(\"outside\"===a.ticks?a.ticklen:0)+3;n[\"a-title\"]=b.draw(e,\"a\"+r,{propContainer:i,propName:this.id+\".aaxis.title\",placeholder:l(e,\"Click to enter Component A title\"),attributes:{x:this.x0+this.w/2,y:this.y0-i.title.font.size/3-s,\"text-anchor\":\"middle\"}}),n[\"b-title\"]=b.draw(e,\"b\"+r,{propContainer:a,propName:this.id+\".baxis.title\",placeholder:l(e,\"Click to enter Component B title\"),attributes:{x:this.x0-c,y:this.y0+this.h+.83*a.title.font.size+c,\"text-anchor\":\"middle\"}}),n[\"c-title\"]=b.draw(e,\"c\"+r,{propContainer:o,propName:this.id+\".caxis.title\",placeholder:l(e,\"Click to enter Component C title\"),attributes:{x:this.x0+this.w+c,y:this.y0+this.h+.83*o.title.font.size+c,\"text-anchor\":\"middle\"}})}},S.drawAx=function(t){var e,r=this.graphDiv,n=t._name,i=n.charAt(0),a=t._id,s=this.layers[n],l=i+\"tickLayout\",c=(e=t).ticks+String(e.ticklen)+String(e.showticklabels);this[l]!==c&amp;&amp;(s.selectAll(\".\"+a+\"tick\").remove(),this[l]=c),t.setScale();var u=d.calcTicks(t),f=d.clipEnds(t,u),h=d.makeTransTickFn(t),p=d.getTickSigns(t)[2],m=o.deg2rad(30),g=p*(t.linewidth||1)/2,v=p*t.ticklen,y=this.w,x=this.h,b=\"b\"===i?\"M0,\"+g+\"l\"+Math.sin(m)*v+\",\"+Math.cos(m)*v:\"M\"+g+\",0l\"+Math.cos(m)*v+\",\"+-Math.sin(m)*v,_={a:\"M0,0l\"+x+\",-\"+y/2,b:\"M0,0l-\"+y/2+\",-\"+x,c:\"M0,0l-\"+x+\",\"+y/2}[i];d.drawTicks(r,t,{vals:\"inside\"===t.ticks?f:u,layer:s,path:b,transFn:h,crisp:!1}),d.drawGrid(r,t,{vals:f,layer:this.layers[i+\"grid\"],path:_,transFn:h,crisp:!1}),d.drawLabels(r,t,{vals:u,layer:s,transFn:h,labelFns:d.makeLabelFns(t,0,30)})};var L=A.MINZOOM/2+.87,C=\"m-0.87,.5h\"+L+\"v3h-\"+(L+5.2)+\"l\"+(L/2+2.6)+\",-\"+(.87*L+4.5)+\"l2.6,1.5l-\"+L/2+\",\"+.87*L+\"Z\",P=\"m0.87,.5h-\"+L+\"v3h\"+(L+5.2)+\"l-\"+(L/2+2.6)+\",-\"+(.87*L+4.5)+\"l-2.6,1.5l\"+L/2+\",\"+.87*L+\"Z\",I=\"m0,1l\"+L/2+\",\"+.87*L+\"l2.6,-1.5l-\"+(L/2+2.6)+\",-\"+(.87*L+4.5)+\"l-\"+(L/2+2.6)+\",\"+(.87*L+4.5)+\"l2.6,1.5l\"+L/2+\",-\"+.87*L+\"Z\",O=!0;function z(t){n.select(t).selectAll(\".zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners\").remove()}S.clearOutline=function(){k(this.dragOptions),T(this.dragOptions.gd)},S.initInteractions=function(){var t,e,r,n,f,h,p,d,v,b,T,k,M=this,S=M.layers.plotbg.select(\"path\").node(),L=M.graphDiv,D=L._fullLayout._zoomlayer;function R(t){var e={};return e[M.id+\".aaxis.min\"]=t.a,e[M.id+\".baxis.min\"]=t.b,e[M.id+\".caxis.min\"]=t.c,e}function F(t,e){var r=L._fullLayout.clickmode;z(L),2===t&amp;&amp;(L.emit(\"plotly_doubleclick\",null),a.call(\"_guiRelayout\",L,R({a:0,b:0,c:0}))),r.indexOf(\"select\")&gt;-1&amp;&amp;1===t&amp;&amp;w(e,L,[M.xaxis],[M.yaxis],M.id,M.dragOptions),r.indexOf(\"event\")&gt;-1&amp;&amp;g.click(L,e,M.id)}function B(t,e){return 1-e/M.h}function N(t,e){return 1-(t+(M.h-e)/Math.sqrt(3))/M.w}function j(t,e){return(t-(M.h-e)/Math.sqrt(3))/M.w}function U(i,a){var o=r+i*t,s=n+a*e,l=Math.max(0,Math.min(1,B(0,n),B(0,s))),c=Math.max(0,Math.min(1,N(r,n),N(o,s))),u=Math.max(0,Math.min(1,j(r,n),j(o,s))),m=(l/2+u)*M.w,g=(1-l/2-c)*M.w,y=(m+g)/2,x=g-m,_=(1-l)*M.h,w=_-x/E;x.2?\"rgba(0,0,0,0.4)\":\"rgba(255,255,255,0.3)\").duration(200),k.transition().style(\"opacity\",1).duration(200),b=!0),L.emit(\"plotly_relayouting\",R(p))}function V(){z(L),p!==f&amp;&amp;(a.call(\"_guiRelayout\",L,R(p)),O&amp;&amp;L.data&amp;&amp;L._context.showTips&amp;&amp;(o.notifier(l(L,\"Double-click to zoom back out\"),\"long\"),O=!1))}function H(t,e){var r=t/M.xaxis._m,n=e/M.yaxis._m,i=[(p={a:f.a-n,b:f.b+(r+n)/2,c:f.c-(r-n)/2}).a,p.b,p.c].sort(o.sorterAsc),a=i.indexOf(p.a),l=i.indexOf(p.b),c=i.indexOf(p.c);i[0]&lt;0&amp;&amp;(i[1]+i[0]/2&lt;0?(i[2]+=i[0]+i[1],i[0]=i[1]=0):(i[2]+=i[0]/2,i[1]+=i[0]/2,i[0]=0),p={a:i[a],b:i[l],c:i[c]},e=(f.a-p.a)*M.yaxis._m,t=(f.c-p.c-f.b+p.b)*M.xaxis._m);var h=s(M.x0+t,M.y0+e);M.plotContainer.selectAll(\".scatterlayer,.maplayer\").attr(\"transform\",h);var d=s(-t,-e);M.clipDefRelative.select(\"path\").attr(\"transform\",d),M.aaxis.range=[p.a,M.sum-p.b-p.c],M.baxis.range=[M.sum-p.a-p.c,p.b],M.caxis.range=[M.sum-p.a-p.b,p.c],M.drawAxes(!1),M._hasClipOnAxisFalse&amp;&amp;M.plotContainer.select(\".scatterlayer\").selectAll(\".trace\").call(u.hideOutsideRangePoints,M),L.emit(\"plotly_relayouting\",R(p))}function q(){a.call(\"_guiRelayout\",L,R(p))}this.dragOptions={element:S,gd:L,plotinfo:{id:M.id,domain:L._fullLayout[M.id].domain,xaxis:M.xaxis,yaxis:M.yaxis},subplot:M.id,prepFn:function(a,l,u){M.dragOptions.xaxes=[M.xaxis],M.dragOptions.yaxes=[M.yaxis],t=L._fullLayout._invScaleX,e=L._fullLayout._invScaleY;var m=M.dragOptions.dragmode=L._fullLayout.dragmode;y(m)?M.dragOptions.minDrag=1:M.dragOptions.minDrag=void 0,\"zoom\"===m?(M.dragOptions.moveFn=U,M.dragOptions.clickFn=F,M.dragOptions.doneFn=V,function(t,e,a){var l=S.getBoundingClientRect();r=e-l.left,n=a-l.top,L._fullLayout._calcInverseTransform(L);var u=L._fullLayout._invTransform,m=o.apply3DTransform(u)(r,n);r=m[0],n=m[1],f={a:M.aaxis.range[0],b:M.baxis.range[1],c:M.caxis.range[1]},p=f,h=M.aaxis.range[1]-f.a,d=i(M.graphDiv._fullLayout[M.id].bgcolor).getLuminance(),v=\"M0,\"+M.h+\"L\"+M.w/2+\", 0L\"+M.w+\",\"+M.h+\"Z\",b=!1,T=D.append(\"path\").attr(\"class\",\"zoombox\").attr(\"transform\",s(M.x0,M.y0)).style({fill:d&gt;.2?\"rgba(0,0,0,0)\":\"rgba(255,255,255,0)\",\"stroke-width\":0}).attr(\"d\",v),k=D.append(\"path\").attr(\"class\",\"zoombox-corners\").attr(\"transform\",s(M.x0,M.y0)).style({fill:c.background,stroke:c.defaultLine,\"stroke-width\":1,opacity:0}).attr(\"d\",\"M0,0Z\"),M.clearOutline(L)}(0,l,u)):\"pan\"===m?(M.dragOptions.moveFn=H,M.dragOptions.clickFn=F,M.dragOptions.doneFn=q,f={a:M.aaxis.range[0],b:M.baxis.range[1],c:M.caxis.range[1]},p=f,M.clearOutline(L)):(x(m)||y(m))&amp;&amp;_(a,l,u,M.dragOptions,m)}},S.onmousemove=function(t){g.hover(L,t,M.id),L._fullLayout._lasthover=S,L._fullLayout._hoversubplot=M.id},S.onmouseout=function(t){L._dragging||m.unhover(L,t)},m.init(this.dragOptions)}},{\"../../components/color\":367,\"../../components/dragelement\":386,\"../../components/dragelement/helpers\":385,\"../../components/drawing\":389,\"../../components/fx\":407,\"../../components/selections\":455,\"../../components/titles\":476,\"../../lib\":515,\"../../lib/extend\":505,\"../../registry\":647,\"../cartesian/axes\":566,\"../cartesian/constants\":573,\"../cartesian/set_convert\":585,\"../plots\":628,\"@plotly/d3\":58,tinycolor2:313}],647:[function(t,e,r){\"use strict\";var n=t(\"./lib/loggers\"),i=t(\"./lib/noop\"),a=t(\"./lib/push_unique\"),o=t(\"./lib/is_plain_object\"),s=t(\"./lib/dom\").addStyleRule,l=t(\"./lib/extend\"),c=t(\"./plots/attributes\"),u=t(\"./plots/layout_attributes\"),f=l.extendFlat,h=l.extendDeepAll;function p(t){var e=t.name,i=t.categories,a=t.meta;if(r.modules[e])n.log(\"Type \"+e+\" already registered\");else{r.subplotsRegistry[t.basePlotModule.name]||function(t){var e=t.name;if(r.subplotsRegistry[e])return void n.log(\"Plot type \"+e+\" already registered.\");for(var i in v(t),r.subplotsRegistry[e]=t,r.componentsRegistry)b(i,t.name)}(t.basePlotModule);for(var o={},l=0;l-1&amp;&amp;(f[p[r]].title={text:\"\"});for(r=0;r\")?\"\":e.html(t).text()}));return e.remove(),r}(_),_=(_=_.replace(/&amp;(?!\\w+;|\\#[0-9]+;| \\#x[0-9A-F]+;)/g,\"&amp;\")).replace(c,\"'\"),i.isIE()&amp;&amp;(_=(_=(_=_.replace(/\"/gi,\"'\")).replace(/(\\('#)([^']*)('\\))/gi,'(\"#$2\")')).replace(/(\\\\')/gi,'\"')),_}},{\"../components/color\":367,\"../components/drawing\":389,\"../constants/xmlns_namespaces\":492,\"../lib\":515,\"@plotly/d3\":58}],656:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e){for(var r=0;rf+c||!n(u))}for(var p=0;pa))return e}return void 0!==r?r:t.dflt},r.coerceColor=function(t,e,r){return i(e).isValid()?e:void 0!==r?r:t.dflt},r.coerceEnumerated=function(t,e,r){return t.coerceNumber&amp;&amp;(e=+e),-1!==t.values.indexOf(e)?e:void 0!==r?r:t.dflt},r.getValue=function(t,e){var r;return Array.isArray(t)?e0?e+=r:u&lt;0&amp;&amp;(e-=r)}return e}function z(t){var e=u,r=t.b,i=O(t);return n.inbox(r-e,i-e,_+(i-e)/(i-r)-1)}var D=t[f+\"a\"],R=t[h+\"a\"];m=Math.abs(D.r2c(D.range[1])-D.r2c(D.range[0]));var F=n.getDistanceFunction(i,p,d,(function(t){return(p(t)+d(t))/2}));if(n.getClosest(g,F,t),!1!==t.index&amp;&amp;g[t.index].p!==c){k||(L=function(t){return Math.min(A(t),t.p-y.bargroupwidth/2)},C=function(t){return Math.max(M(t),t.p+y.bargroupwidth/2)});var B=g[t.index],N=v.base?B.b+B.s:B.s;t[h+\"0\"]=t[h+\"1\"]=R.c2p(B[h],!0),t[h+\"LabelVal\"]=N;var j=y.extents[y.extents.round(B.p)];t[f+\"0\"]=D.c2p(x?L(B):j[0],!0),t[f+\"1\"]=D.c2p(x?C(B):j[1],!0);var U=void 0!==B.orig_p;return t[f+\"LabelVal\"]=U?B.orig_p:B.p,t.labelLabel=l(D,t[f+\"LabelVal\"],v[f+\"hoverformat\"]),t.valueLabel=l(R,t[h+\"LabelVal\"],v[h+\"hoverformat\"]),t.baseLabel=l(R,B.b,v[h+\"hoverformat\"]),t.spikeDistance=(function(t){var e=u,r=t.b,i=O(t);return n.inbox(r-e,i-e,w+(i-e)/(i-r)-1)}(B)+function(t){return P(A(t),M(t),w)}(B))/2,t[f+\"Spike\"]=D.c2p(B.p,!0),o(B,v,t),t.hovertemplate=v.hovertemplate,t}}function f(t,e){var r=e.mcc||t.marker.color,n=e.mlcc||t.marker.line.color,i=s(t,e);return a.opacity(r)?r:a.opacity(n)&amp;&amp;i?n:void 0}e.exports={hoverPoints:function(t,e,r,n,a){var o=u(t,e,r,n,a);if(o){var s=o.cd,l=s[0].trace,c=s[o.index];return o.color=f(l,c),i.getComponentMethod(\"errorbars\",\"hoverInfo\")(c,l,o),[o]}},hoverOnBars:u,getTraceColor:f}},{\"../../components/color\":367,\"../../components/fx\":407,\"../../constants/numerical\":491,\"../../lib\":515,\"../../plots/cartesian/axes\":566,\"../../registry\":647,\"./helpers\":663}],665:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\").supplyDefaults,crossTraceDefaults:t(\"./defaults\").crossTraceDefaults,supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\"),crossTraceCalc:t(\"./cross_trace_calc\").crossTraceCalc,colorbar:t(\"../scatter/marker_colorbar\"),arraysToCalcdata:t(\"./arrays_to_calcdata\"),plot:t(\"./plot\").plot,style:t(\"./style\").style,styleOnSelect:t(\"./style\").styleOnSelect,hoverPoints:t(\"./hover\").hoverPoints,eventData:t(\"./event_data\"),selectPoints:t(\"./select\"),moduleType:\"trace\",name:\"bar\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"bar-like\",\"cartesian\",\"svg\",\"bar\",\"oriented\",\"errorBarsOK\",\"showLegend\",\"zoomScale\"],animatable:!0,meta:{}}},{\"../../plots/cartesian\":578,\"../scatter/marker_colorbar\":954,\"./arrays_to_calcdata\":656,\"./attributes\":657,\"./calc\":658,\"./cross_trace_calc\":660,\"./defaults\":661,\"./event_data\":662,\"./hover\":664,\"./layout_attributes\":666,\"./layout_defaults\":667,\"./plot\":668,\"./select\":669,\"./style\":671}],666:[function(t,e,r){\"use strict\";e.exports={barmode:{valType:\"enumerated\",values:[\"stack\",\"group\",\"overlay\",\"relative\"],dflt:\"group\",editType:\"calc\"},barnorm:{valType:\"enumerated\",values:[\"\",\"fraction\",\"percent\"],dflt:\"\",editType:\"calc\"},bargap:{valType:\"number\",min:0,max:1,editType:\"calc\"},bargroupgap:{valType:\"number\",min:0,max:1,dflt:0,editType:\"calc\"}}},{}],667:[function(t,e,r){\"use strict\";var n=t(\"../../registry\"),i=t(\"../../plots/cartesian/axes\"),a=t(\"../../lib\"),o=t(\"./layout_attributes\");e.exports=function(t,e,r){function s(r,n){return a.coerce(t,e,o,r,n)}for(var l=!1,c=!1,u=!1,f={},h=s(\"barmode\"),p=0;p0}function S(t){return\"auto\"===t?0:t}function E(t,e){var r=Math.PI/180*e,n=Math.abs(Math.sin(r)),i=Math.abs(Math.cos(r));return{x:t.width*i+t.height*n,y:t.width*n+t.height*i}}function L(t,e,r,n,i,a){var o=!!a.isHorizontal,s=!!a.constrained,l=a.angle||0,c=a.anchor||\"end\",u=\"end\"===c,f=\"start\"===c,h=((a.leftToRight||0)+1)/2,p=1-h,d=i.width,m=i.height,g=Math.abs(e-t),v=Math.abs(n-r),y=g&gt;2*_&amp;&amp;v&gt;2*_?_:0;g-=2*y,v-=2*y;var x=S(l);\"auto\"!==l||d&lt;=g&amp;&amp;m&lt;=v||!(d&gt;g||m&gt;v)||(d&gt;v||m&gt;g)&amp;&amp;d.01?q:function(t,e,r){return r&amp;&amp;t===e?t:Math.abs(t-e)&gt;=2?q(t):t&gt;e?Math.ceil(t):Math.floor(t)};B=G(B,N,D),N=G(N,B,D),j=G(j,U,!D),U=G(U,j,!D)}var Y=A(a.ensureSingle(I,\"path\"),P,g,v);if(Y.style(\"vector-effect\",\"non-scaling-stroke\").attr(\"d\",isNaN((N-B)*(U-j))||V&amp;&amp;t._context.staticPlot?\"M0,0Z\":\"M\"+B+\",\"+j+\"V\"+U+\"H\"+N+\"V\"+j+\"Z\").call(l.setClipUrl,e.layerClipId,t),!P.uniformtext.mode&amp;&amp;R){var W=l.makePointStyleFns(f);l.singlePointStyle(c,Y,f,W,t)}!function(t,e,r,n,i,s,c,f,p,g,v){var w,T=e.xaxis,M=e.yaxis,C=t._fullLayout;function P(e,r,n){return a.ensureSingle(e,\"text\").text(r).attr({class:\"bartext bartext-\"+w,\"text-anchor\":\"middle\",\"data-notex\":1}).call(l.font,n).call(o.convertToTspans,t)}var I=n[0].trace,O=\"h\"===I.orientation,z=function(t,e,r,n,i){var o,s=e[0].trace;o=s.texttemplate?function(t,e,r,n,i){var o=e[0].trace,s=a.castOption(o,r,\"texttemplate\");if(!s)return\"\";var l,c,f,h,p=\"histogram\"===o.type,d=\"waterfall\"===o.type,m=\"funnel\"===o.type,g=\"h\"===o.orientation;g?(l=\"y\",c=i,f=\"x\",h=n):(l=\"x\",c=n,f=\"y\",h=i);function v(t){return u(h,h.c2l(t),!0).text}var y=e[r],x={};x.label=y.p,x.labelLabel=x[l+\"Label\"]=(_=y.p,u(c,c.c2l(_),!0).text);var _;var w=a.castOption(o,y.i,\"text\");(0===w||w)&amp;&amp;(x.text=w);x.value=y.s,x.valueLabel=x[f+\"Label\"]=v(y.s);var T={};b(T,o,y.i),(p||void 0===T.x)&amp;&amp;(T.x=g?x.value:x.label);(p||void 0===T.y)&amp;&amp;(T.y=g?x.label:x.value);(p||void 0===T.xLabel)&amp;&amp;(T.xLabel=g?x.valueLabel:x.labelLabel);(p||void 0===T.yLabel)&amp;&amp;(T.yLabel=g?x.labelLabel:x.valueLabel);d&amp;&amp;(x.delta=+y.rawS||y.s,x.deltaLabel=v(x.delta),x.final=y.v,x.finalLabel=v(x.final),x.initial=x.final-x.delta,x.initialLabel=v(x.initial));m&amp;&amp;(x.value=y.s,x.valueLabel=v(x.value),x.percentInitial=y.begR,x.percentInitialLabel=a.formatPercent(y.begR),x.percentPrevious=y.difR,x.percentPreviousLabel=a.formatPercent(y.difR),x.percentTotal=y.sumR,x.percenTotalLabel=a.formatPercent(y.sumR));var k=a.castOption(o,y.i,\"customdata\");k&amp;&amp;(x.customdata=k);return a.texttemplateString(s,x,t._d3locale,T,x,o._meta||{})}(t,e,r,n,i):s.textinfo?function(t,e,r,n){var i=t[0].trace,o=\"h\"===i.orientation,s=\"waterfall\"===i.type,l=\"funnel\"===i.type;function c(t){return u(o?r:n,+t,!0).text}var f,h=i.textinfo,p=t[e],d=h.split(\"+\"),m=[],g=function(t){return-1!==d.indexOf(t)};g(\"label\")&amp;&amp;m.push((v=t[e].p,u(o?n:r,v,!0).text));var v;g(\"text\")&amp;&amp;(0===(f=a.castOption(i,p.i,\"text\"))||f)&amp;&amp;m.push(f);if(s){var y=+p.rawS||p.s,x=p.v,b=x-y;g(\"initial\")&amp;&amp;m.push(c(b)),g(\"delta\")&amp;&amp;m.push(c(y)),g(\"final\")&amp;&amp;m.push(c(x))}if(l){g(\"value\")&amp;&amp;m.push(c(p.s));var _=0;g(\"percent initial\")&amp;&amp;_++,g(\"percent previous\")&amp;&amp;_++,g(\"percent total\")&amp;&amp;_++;var w=_&gt;1;g(\"percent initial\")&amp;&amp;(f=a.formatPercent(p.begR),w&amp;&amp;(f+=\" of initial\"),m.push(f)),g(\"percent previous\")&amp;&amp;(f=a.formatPercent(p.difR),w&amp;&amp;(f+=\" of previous\"),m.push(f)),g(\"percent total\")&amp;&amp;(f=a.formatPercent(p.sumR),w&amp;&amp;(f+=\" of total\"),m.push(f))}return m.join(\"\")}(e,r,n,i):m.getValue(s.text,r);return m.coerceString(y,o)}(C,n,i,T,M);w=function(t,e){var r=m.getValue(t.textposition,e);return m.coerceEnumerated(x,r)}(I,i);var D=\"stack\"===g.mode||\"relative\"===g.mode,R=n[i],F=!D||R._outmost;if(!z||\"none\"===w||(R.isBlank||s===c||f===p)&amp;&amp;(\"auto\"===w||\"inside\"===w))return void r.select(\"text\").remove();var B=C.font,N=d.getBarColor(n[i],I),j=d.getInsideTextFont(I,i,B,N),U=d.getOutsideTextFont(I,i,B),V=r.datum();O?\"log\"===T.type&amp;&amp;V.s0&lt;=0&amp;&amp;(s=T.range[0]=G*(X/Y):X&gt;=Y*(Z/G);G&gt;0&amp;&amp;Y&gt;0&amp;&amp;(J||K||Q)?w=\"inside\":(w=\"outside\",H.remove(),H=null)}else w=\"inside\";if(!H){W=a.ensureUniformFontSize(t,\"outside\"===w?U:j);var $=(H=P(r,z,W)).attr(\"transform\");if(H.attr(\"transform\",\"\"),q=l.bBox(H.node()),G=q.width,Y=q.height,H.attr(\"transform\",$),G&lt;=0||Y&lt;=0)return void H.remove()}var tt,et,rt=I.textangle;\"outside\"===w?(et=\"both\"===I.constraintext||\"outside\"===I.constraintext,tt=function(t,e,r,n,i,a){var o,s=!!a.isHorizontal,l=!!a.constrained,c=a.angle||0,u=i.width,f=i.height,h=Math.abs(e-t),p=Math.abs(n-r);o=s?p&gt;2*_?_:0:h&gt;2*_?_:0;var d=1;l&amp;&amp;(d=s?Math.min(1,p/f):Math.min(1,h/u));var m=S(c),g=E(i,m),v=(s?g.x:g.y)/2,y=(i.left+i.right)/2,x=(i.top+i.bottom)/2,b=(t+e)/2,w=(r+n)/2,T=0,A=0,M=s?k(e,t):k(r,n);s?(b=e-M*o,T=M*v):(w=n+M*o,A=-M*v);return{textX:y,textY:x,targetX:b,targetY:w,anchorX:T,anchorY:A,scale:d,rotate:m}}(s,c,f,p,q,{isHorizontal:O,constrained:et,angle:rt})):(et=\"both\"===I.constraintext||\"inside\"===I.constraintext,tt=L(s,c,f,p,q,{isHorizontal:O,constrained:et,angle:rt,anchor:I.insidetextanchor}));tt.fontSize=W.size,h(\"histogram\"===I.type?\"bar\":I.type,tt,C),R.transform=tt;var nt=A(H,C,g,v);a.setTransormAndDisplay(nt,tt)}(t,e,I,r,p,B,N,j,U,g,v),e.layerClipId&amp;&amp;l.hideOutsideRangePoint(c,I.select(\"text\"),w,C,f.xcalendar,f.ycalendar)}));var j=!1===f.cliponaxis;l.setClipUrl(c,j?null:e.layerClipId,t)}));c.getComponentMethod(\"errorbars\",\"plot\")(t,I,e,g)},toMoveInsideBar:L}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../components/fx/helpers\":403,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../../plots/cartesian/axes\":566,\"../../registry\":647,\"./attributes\":657,\"./constants\":659,\"./helpers\":663,\"./style\":671,\"./uniform_text\":673,\"@plotly/d3\":58,\"fast-isnumeric\":190}],669:[function(t,e,r){\"use strict\";function n(t,e,r,n,i){var a=e.c2p(n?t.s0:t.p0,!0),o=e.c2p(n?t.s1:t.p1,!0),s=r.c2p(n?t.p0:t.s0,!0),l=r.c2p(n?t.p1:t.s1,!0);return i?[(a+o)/2,(s+l)/2]:n?[o,(s+l)/2]:[(a+o)/2,l]}e.exports=function(t,e){var r,i=t.cd,a=t.xaxis,o=t.yaxis,s=i[0].trace,l=\"funnel\"===s.type,c=\"h\"===s.orientation,u=[];if(!1===e)for(r=0;r1||0===i.bargap&amp;&amp;0===i.bargroupgap&amp;&amp;!t[0].trace.marker.line.width)&amp;&amp;n.select(this).attr(\"shape-rendering\",\"crispEdges\")})),e.selectAll(\"g.points\").each((function(e){d(n.select(this),e[0].trace,t)})),s.getComponentMethod(\"errorbars\",\"style\")(e)},styleTextPoints:m,styleOnSelect:function(t,e,r){var i=e[0].trace;i.selectedpoints?function(t,e,r){a.selectedPointStyle(t.selectAll(\"path\"),e),function(t,e,r){t.each((function(t){var i,s=n.select(this);if(t.selected){i=o.ensureUniformFontSize(r,g(s,t,e,r));var l=e.selected.textfont&amp;&amp;e.selected.textfont.color;l&amp;&amp;(i.color=l),a.font(s,i)}else a.selectedTextStyle(s,e)}))}(t.selectAll(\"text\"),e,r)}(r,i,t):(d(r,i,t),s.getComponentMethod(\"errorbars\",\"style\")(r))},getInsideTextFont:y,getOutsideTextFont:x,getBarColor:_,resizeText:l}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../lib\":515,\"../../registry\":647,\"./attributes\":657,\"./helpers\":663,\"./uniform_text\":673,\"@plotly/d3\":58}],672:[function(t,e,r){\"use strict\";var n=t(\"../../components/color\"),i=t(\"../../components/colorscale/helpers\").hasColorscale,a=t(\"../../components/colorscale/defaults\"),o=t(\"../../lib\").coercePattern;e.exports=function(t,e,r,s,l){var c=r(\"marker.color\",s),u=i(t,\"marker\");u&amp;&amp;a(t,e,l,r,{prefix:\"marker.\",cLetter:\"c\"}),r(\"marker.line.color\",n.defaultLine),i(t,\"marker.line\")&amp;&amp;a(t,e,l,r,{prefix:\"marker.line.\",cLetter:\"c\"}),r(\"marker.line.width\"),r(\"marker.opacity\"),o(r,\"marker.pattern\",c,u),r(\"selected.marker.color\"),r(\"unselected.marker.color\")}},{\"../../components/color\":367,\"../../components/colorscale/defaults\":377,\"../../components/colorscale/helpers\":378,\"../../lib\":515}],673:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\");function a(t){return\"_\"+t+\"Text_minsize\"}e.exports={recordMinTextSize:function(t,e,r){if(r.uniformtext.mode){var n=a(t),i=r.uniformtext.minsize,o=e.scale*e.fontSize;e.hide=oh.range[1]&amp;&amp;(x+=Math.PI);if(n.getClosest(c,(function(t){return m(y,x,[t.rp0,t.rp1],[t.thetag0,t.thetag1],d)?g+Math.min(1,Math.abs(t.thetag1-t.thetag0)/v)-1+(t.rp1-y)/(t.rp1-t.rp0)-1:1/0}),t),!1!==t.index){var b=c[t.index];t.x0=t.x1=b.ct[0],t.y0=t.y1=b.ct[1];var _=i.extendFlat({},b,{r:b.s,theta:b.p});return o(b,u,t),s(_,u,f,t),t.hovertemplate=u.hovertemplate,t.color=a(u,b),t.xLabelVal=t.yLabelVal=void 0,b.s&lt;0&amp;&amp;(t.idealAlign=\"left\"),[t]}}},{\"../../components/fx\":407,\"../../lib\":515,\"../../plots/polar/helpers\":630,\"../bar/hover\":664,\"../scatterpolar/hover\":1015}],678:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"barpolar\",basePlotModule:t(\"../../plots/polar\"),categories:[\"polar\",\"bar\",\"showLegend\"],attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\"),supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\").calc,crossTraceCalc:t(\"./calc\").crossTraceCalc,plot:t(\"./plot\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"../scatterpolar/format_labels\"),style:t(\"../bar/style\").style,styleOnSelect:t(\"../bar/style\").styleOnSelect,hoverPoints:t(\"./hover\"),selectPoints:t(\"../bar/select\"),meta:{}}},{\"../../plots/polar\":631,\"../bar/select\":669,\"../bar/style\":671,\"../scatter/marker_colorbar\":954,\"../scatterpolar/format_labels\":1014,\"./attributes\":674,\"./calc\":675,\"./defaults\":676,\"./hover\":677,\"./layout_attributes\":679,\"./layout_defaults\":680,\"./plot\":681}],679:[function(t,e,r){\"use strict\";e.exports={barmode:{valType:\"enumerated\",values:[\"stack\",\"overlay\"],dflt:\"stack\",editType:\"calc\"},bargap:{valType:\"number\",dflt:.1,min:0,max:1,editType:\"calc\"}}},{}],680:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e,r){var a,o={};function s(r,o){return n.coerce(t[a]||{},e[a],i,r,o)}for(var l=0;l0?(c=o,u=l):(c=l,u=o);var f=[s.findEnclosingVertexAngles(c,t.vangles)[0],(c+u)/2,s.findEnclosingVertexAngles(u,t.vangles)[1]];return s.pathPolygonAnnulus(n,i,c,u,f,e,r)};return function(t,n,i,o){return a.pathAnnulus(t,n,i,o,e,r)}}(e),p=e.layers.frontplot.select(\"g.barlayer\");a.makeTraceGroups(p,r,\"trace bars\").each((function(){var r=n.select(this),s=a.ensureSingle(r,\"g\",\"points\").selectAll(\"g.point\").data(a.identity);s.enter().append(\"g\").style(\"vector-effect\",\"non-scaling-stroke\").style(\"stroke-miterlimit\",2).classed(\"point\",!0),s.exit().remove(),s.each((function(t){var e,r=n.select(this),o=t.rp0=u.c2p(t.s0),s=t.rp1=u.c2p(t.s1),p=t.thetag0=f.c2g(t.p0),d=t.thetag1=f.c2g(t.p1);if(i(o)&amp;&amp;i(s)&amp;&amp;i(p)&amp;&amp;i(d)&amp;&amp;o!==s&amp;&amp;p!==d){var m=u.c2g(t.s1),g=(p+d)/2;t.ct=[l.c2p(m*Math.cos(g)),c.c2p(m*Math.sin(g))],e=h(o,s,p,d)}else e=\"M0,0Z\";a.ensureSingle(r,\"path\").attr(\"d\",e)})),o.setClipUrl(r,e._hasClipOnAxisFalse?e.clipIds.forTraces:null,t)}))}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../plots/polar/helpers\":630,\"@plotly/d3\":58,\"fast-isnumeric\":190}],682:[function(t,e,r){\"use strict\";var n=t(\"../scatter/attributes\"),i=t(\"../bar/attributes\"),a=t(\"../../components/color/attributes\"),o=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,s=t(\"../../plots/template_attributes\").hovertemplateAttrs,l=t(\"../../lib/extend\").extendFlat,c=n.marker,u=c.line;e.exports={y:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},x:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},x0:{valType:\"any\",editType:\"calc+clearAxisTypes\"},y0:{valType:\"any\",editType:\"calc+clearAxisTypes\"},dx:{valType:\"number\",editType:\"calc\"},dy:{valType:\"number\",editType:\"calc\"},xperiod:n.xperiod,yperiod:n.yperiod,xperiod0:n.xperiod0,yperiod0:n.yperiod0,xperiodalignment:n.xperiodalignment,yperiodalignment:n.yperiodalignment,xhoverformat:o(\"x\"),yhoverformat:o(\"y\"),name:{valType:\"string\",editType:\"calc+clearAxisTypes\"},q1:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},median:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},q3:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},lowerfence:{valType:\"data_array\",editType:\"calc\"},upperfence:{valType:\"data_array\",editType:\"calc\"},notched:{valType:\"boolean\",editType:\"calc\"},notchwidth:{valType:\"number\",min:0,max:.5,dflt:.25,editType:\"calc\"},notchspan:{valType:\"data_array\",editType:\"calc\"},boxpoints:{valType:\"enumerated\",values:[\"all\",\"outliers\",\"suspectedoutliers\",!1],editType:\"calc\"},jitter:{valType:\"number\",min:0,max:1,editType:\"calc\"},pointpos:{valType:\"number\",min:-2,max:2,editType:\"calc\"},boxmean:{valType:\"enumerated\",values:[!0,\"sd\",!1],editType:\"calc\"},mean:{valType:\"data_array\",editType:\"calc\"},sd:{valType:\"data_array\",editType:\"calc\"},orientation:{valType:\"enumerated\",values:[\"v\",\"h\"],editType:\"calc+clearAxisTypes\"},quartilemethod:{valType:\"enumerated\",values:[\"linear\",\"exclusive\",\"inclusive\"],dflt:\"linear\",editType:\"calc\"},width:{valType:\"number\",min:0,dflt:0,editType:\"calc\"},marker:{outliercolor:{valType:\"color\",dflt:\"rgba(0, 0, 0, 0)\",editType:\"style\"},symbol:l({},c.symbol,{arrayOk:!1,editType:\"plot\"}),opacity:l({},c.opacity,{arrayOk:!1,dflt:1,editType:\"style\"}),angle:l({},c.angle,{arrayOk:!1,editType:\"calc\"}),size:l({},c.size,{arrayOk:!1,editType:\"calc\"}),color:l({},c.color,{arrayOk:!1,editType:\"style\"}),line:{color:l({},u.color,{arrayOk:!1,dflt:a.defaultLine,editType:\"style\"}),width:l({},u.width,{arrayOk:!1,dflt:0,editType:\"style\"}),outliercolor:{valType:\"color\",editType:\"style\"},outlierwidth:{valType:\"number\",min:0,dflt:1,editType:\"style\"},editType:\"style\"},editType:\"plot\"},line:{color:{valType:\"color\",editType:\"style\"},width:{valType:\"number\",min:0,dflt:2,editType:\"style\"},editType:\"plot\"},fillcolor:n.fillcolor,whiskerwidth:{valType:\"number\",min:0,max:1,dflt:.5,editType:\"calc\"},offsetgroup:i.offsetgroup,alignmentgroup:i.alignmentgroup,selected:{marker:n.selected.marker,editType:\"style\"},unselected:{marker:n.unselected.marker,editType:\"style\"},text:l({},n.text,{}),hovertext:l({},n.hovertext,{}),hovertemplate:s({}),hoveron:{valType:\"flaglist\",flags:[\"boxes\",\"points\"],dflt:\"boxes+points\",editType:\"style\"}}},{\"../../components/color/attributes\":366,\"../../lib/extend\":505,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642,\"../bar/attributes\":657,\"../scatter/attributes\":936}],683:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../plots/cartesian/axes\"),a=t(\"../../plots/cartesian/align_period\"),o=t(\"../../lib\"),s=t(\"../../constants/numerical\").BADNUM,l=o._;e.exports=function(t,e){var r,c,y,x,b,_,w,T=t._fullLayout,k=i.getFromId(t,e.xaxis||\"x\"),A=i.getFromId(t,e.yaxis||\"y\"),M=[],S=\"violin\"===e.type?\"_numViolins\":\"_numBoxes\";\"h\"===e.orientation?(y=k,x=\"x\",b=A,_=\"y\",w=!!e.yperiodalignment):(y=A,x=\"y\",b=k,_=\"x\",w=!!e.xperiodalignment);var E,L,C,P,I,O,z=function(t,e,r,i){var s,l=e+\"0\"in t,c=\"d\"+e in t;if(e in t||l&amp;&amp;c){var u=r.makeCalcdata(t,e);return[a(t,r,e,u).vals,u]}s=l?t[e+\"0\"]:\"name\"in t&amp;&amp;(\"category\"===r.type||n(t.name)&amp;&amp;-1!==[\"linear\",\"log\"].indexOf(r.type)||o.isDateTime(t.name)&amp;&amp;\"date\"===r.type)?t.name:i;for(var f=\"multicategory\"===r.type?r.r2c_just_indices(s):r.d2c(s,0,t[e+\"calendar\"]),h=t._length,p=new Array(h),d=0;dE.uf};if(e._hasPreCompStats){var U=e[x],V=function(t){return y.d2c((e[t]||[])[r])},H=1/0,q=-1/0;for(r=0;r=E.q1&amp;&amp;E.q3&gt;=E.med){var Y=V(\"lowerfence\");E.lf=Y!==s&amp;&amp;Y&lt;=E.q1?Y:p(E,C,P);var W=V(\"upperfence\");E.uf=W!==s&amp;&amp;W&gt;=E.q3?W:d(E,C,P);var Z=V(\"mean\");E.mean=Z!==s?Z:P?o.mean(C,P):(E.q1+E.q3)/2;var X=V(\"sd\");E.sd=Z!==s&amp;&amp;X&gt;=0?X:P?o.stdev(C,P,E.mean):E.q3-E.q1,E.lo=m(E),E.uo=g(E);var J=V(\"notchspan\");J=J!==s&amp;&amp;J&gt;0?J:v(E,P),E.ln=E.med-J,E.un=E.med+J;var K=E.lf,Q=E.uf;e.boxpoints&amp;&amp;C.length&amp;&amp;(K=Math.min(K,C[0]),Q=Math.max(Q,C[P-1])),e.notched&amp;&amp;(K=Math.min(K,E.ln),Q=Math.max(Q,E.un)),E.min=K,E.max=Q}else{var $;o.warn([\"Invalid input - make sure that q1 &lt;= median &lt;= q3\",\"q1 = \"+E.q1,\"median = \"+E.med,\"q3 = \"+E.q3].join(\"\\n\")),$=E.med!==s?E.med:E.q1!==s?E.q3!==s?(E.q1+E.q3)/2:E.q1:E.q3!==s?E.q3:0,E.med=$,E.q1=E.q3=$,E.lf=E.uf=$,E.mean=E.sd=$,E.ln=E.un=$,E.min=E.max=$}H=Math.min(H,E.min),q=Math.max(q,E.max),E.pts2=L.filter(j),M.push(E)}}e._extremes[y._id]=i.findExtremes(y,[H,q],{padded:!0})}else{var tt=y.makeCalcdata(e,x),et=function(t,e){for(var r=t.length,n=new Array(r+1),i=0;i=0&amp;&amp;it0){var ut,ft;if((E={}).pos=E[_]=B[r],L=E.pts=nt[r].sort(f),P=(C=E[x]=L.map(h)).length,E.min=C[0],E.max=C[P-1],E.mean=o.mean(C,P),E.sd=o.stdev(C,P,E.mean),E.med=o.interp(C,.5),P%2&amp;&amp;(lt||ct))lt?(ut=C.slice(0,P/2),ft=C.slice(P/2+1)):ct&amp;&amp;(ut=C.slice(0,P/2+1),ft=C.slice(P/2)),E.q1=o.interp(ut,.5),E.q3=o.interp(ft,.5);else E.q1=o.interp(C,.25),E.q3=o.interp(C,.75);E.lf=p(E,C,P),E.uf=d(E,C,P),E.lo=m(E),E.uo=g(E);var ht=v(E,P);E.ln=E.med-ht,E.un=E.med+ht,at=Math.min(at,E.ln),ot=Math.max(ot,E.un),E.pts2=L.filter(j),M.push(E)}e._extremes[y._id]=i.findExtremes(y,e.notched?tt.concat([at,ot]):tt,{padded:!0})}return function(t,e){if(o.isArrayOrTypedArray(e.selectedpoints))for(var r=0;r0?(M[0].t={num:T[S],dPos:N,posLetter:_,valLetter:x,labels:{med:l(t,\"median:\"),min:l(t,\"min:\"),q1:l(t,\"q1:\"),q3:l(t,\"q3:\"),max:l(t,\"max:\"),mean:\"sd\"===e.boxmean?l(t,\"mean \\xb1 \\u03c3:\"):l(t,\"mean:\"),lf:l(t,\"lower fence:\"),uf:l(t,\"upper fence:\")}},T[S]++,M):[{t:{empty:!0}}]};var c={text:\"tx\",hovertext:\"htx\"};function u(t,e,r){for(var n in c)o.isArrayOrTypedArray(e[n])&amp;&amp;(Array.isArray(r)?o.isArrayOrTypedArray(e[n][r[0]])&amp;&amp;(t[c[n]]=e[n][r[0]][r[1]]):t[c[n]]=e[n][r])}function f(t,e){return t.v-e.v}function h(t){return t.v}function p(t,e,r){return 0===r?t.q1:Math.min(t.q1,e[Math.min(o.findBin(2.5*t.q1-1.5*t.q3,e,!0)+1,r-1)])}function d(t,e,r){return 0===r?t.q3:Math.max(t.q3,e[Math.max(o.findBin(2.5*t.q3-1.5*t.q1,e),0)])}function m(t){return 4*t.q1-3*t.q3}function g(t){return 4*t.q3-3*t.q1}function v(t,e){return 0===e?0:1.57*(t.q3-t.q1)/Math.sqrt(e)}},{\"../../constants/numerical\":491,\"../../lib\":515,\"../../plots/cartesian/align_period\":563,\"../../plots/cartesian/axes\":566,\"fast-isnumeric\":190}],684:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axes\"),i=t(\"../../lib\"),a=t(\"../../plots/cartesian/constraints\").getAxisGroup,o=[\"v\",\"h\"];function s(t,e,r,o){var s,l,c,u=e.calcdata,f=e._fullLayout,h=o._id,p=h.charAt(0),d=[],m=0;for(s=0;s1,b=1-f[t+\"gap\"],_=1-f[t+\"groupgap\"];for(s=0;s0){var q=E.pointpos,G=E.jitter,Y=E.marker.size/2,W=0;q+G&gt;=0&amp;&amp;((W=V*(q+G))&gt;M?(H=!0,j=Y,B=W):W&gt;R&amp;&amp;(j=Y,B=M)),W&lt;=M&amp;&amp;(B=M);var Z=0;q-G&lt;=0&amp;&amp;((Z=-V*(q-G))&gt;S?(H=!0,U=Y,N=Z):Z&gt;F&amp;&amp;(U=Y,N=S)),Z&lt;=S&amp;&amp;(N=S)}else B=M,N=S;var X=new Array(c.length);for(l=0;l0?(g=\"v\",v=x&gt;0?Math.min(_,b):Math.min(b)):x&gt;0?(g=\"h\",v=Math.min(_)):v=0;if(v){e._length=v;var S=r(\"orientation\",g);e._hasPreCompStats?\"v\"===S&amp;&amp;0===x?(r(\"x0\",0),r(\"dx\",1)):\"h\"===S&amp;&amp;0===y&amp;&amp;(r(\"y0\",0),r(\"dy\",1)):\"v\"===S&amp;&amp;0===x?r(\"x0\"):\"h\"===S&amp;&amp;0===y&amp;&amp;r(\"y0\"),i.getComponentMethod(\"calendars\",\"handleTraceDefaults\")(t,e,[\"x\",\"y\"],a)}else e.visible=!1}function f(t,e,r,i){var a=i.prefix,o=n.coerce2(t,e,c,\"marker.outliercolor\"),s=r(\"marker.line.outliercolor\"),l=\"outliers\";e._hasPreCompStats?l=\"all\":(o||s)&amp;&amp;(l=\"suspectedoutliers\");var u=r(a+\"points\",l);u?(r(\"jitter\",\"all\"===u?.3:0),r(\"pointpos\",\"all\"===u?-1.5:0),r(\"marker.symbol\"),r(\"marker.opacity\"),r(\"marker.size\"),r(\"marker.angle\"),r(\"marker.color\",e.line.color),r(\"marker.line.color\"),r(\"marker.line.width\"),\"suspectedoutliers\"===u&amp;&amp;(r(\"marker.line.outliercolor\",e.marker.color),r(\"marker.line.outlierwidth\")),r(\"selected.marker.color\"),r(\"unselected.marker.color\"),r(\"selected.marker.size\"),r(\"unselected.marker.size\"),r(\"text\"),r(\"hovertext\")):delete e.marker;var f=r(\"hoveron\");\"all\"!==f&amp;&amp;-1===f.indexOf(\"points\")||r(\"hovertemplate\"),n.coerceSelectionMarkerOpacity(e,r)}e.exports={supplyDefaults:function(t,e,r,i){function s(r,i){return n.coerce(t,e,c,r,i)}if(u(t,e,s,i),!1!==e.visible){o(t,e,i,s),s(\"xhoverformat\"),s(\"yhoverformat\");var l=e._hasPreCompStats;l&amp;&amp;(s(\"lowerfence\"),s(\"upperfence\")),s(\"line.color\",(t.marker||{}).color||r),s(\"line.width\"),s(\"fillcolor\",a.addOpacity(e.line.color,.5));var h=!1;if(l){var p=s(\"mean\"),d=s(\"sd\");p&amp;&amp;p.length&amp;&amp;(h=!0,d&amp;&amp;d.length&amp;&amp;(h=\"sd\"))}s(\"boxmean\",h),s(\"whiskerwidth\"),s(\"width\"),s(\"quartilemethod\");var m=!1;if(l){var g=s(\"notchspan\");g&amp;&amp;g.length&amp;&amp;(m=!0)}else n.validate(t.notchwidth,c.notchwidth)&amp;&amp;(m=!0);s(\"notched\",m)&amp;&amp;s(\"notchwidth\"),f(t,e,s,{prefix:\"box\"})}},crossTraceDefaults:function(t,e){var r,i;function a(t){return n.coerce(i._input,i,c,t)}for(var o=0;ot.lo&amp;&amp;(x.so=!0)}return a}));h.enter().append(\"path\").classed(\"point\",!0),h.exit().remove(),h.call(a.translatePoints,o,s)}function l(t,e,r,a){var o,s,l=e.val,c=e.pos,u=!!c.rangebreaks,f=a.bPos,h=a.bPosPxOffset||0,p=r.boxmean||(r.meanline||{}).visible;Array.isArray(a.bdPos)?(o=a.bdPos[0],s=a.bdPos[1]):(o=a.bdPos,s=a.bdPos);var d=t.selectAll(\"path.mean\").data(\"box\"===r.type&amp;&amp;r.boxmean||\"violin\"===r.type&amp;&amp;r.box.visible&amp;&amp;r.meanline.visible?i.identity:[]);d.enter().append(\"path\").attr(\"class\",\"mean\").style({fill:\"none\",\"vector-effect\":\"non-scaling-stroke\"}),d.exit().remove(),d.each((function(t){var e=c.c2l(t.pos+f,!0),i=c.l2p(e-o)+h,a=c.l2p(e+s)+h,d=u?(i+a)/2:c.l2p(e)+h,m=l.c2p(t.mean,!0),g=l.c2p(t.mean-t.sd,!0),v=l.c2p(t.mean+t.sd,!0);\"h\"===r.orientation?n.select(this).attr(\"d\",\"M\"+m+\",\"+i+\"V\"+a+(\"sd\"===p?\"m0,0L\"+g+\",\"+d+\"L\"+m+\",\"+i+\"L\"+v+\",\"+d+\"Z\":\"\")):n.select(this).attr(\"d\",\"M\"+i+\",\"+m+\"H\"+a+(\"sd\"===p?\"m0,0L\"+d+\",\"+g+\"L\"+i+\",\"+m+\"L\"+d+\",\"+v+\"Z\":\"\"))}))}e.exports={plot:function(t,e,r,a){var c=e.xaxis,u=e.yaxis;i.makeTraceGroups(a,r,\"trace boxes\").each((function(t){var e,r,i=n.select(this),a=t[0],f=a.t,h=a.trace;(f.wdPos=f.bdPos*h.whiskerwidth,!0!==h.visible||f.empty)?i.remove():(\"h\"===h.orientation?(e=u,r=c):(e=c,r=u),o(i,{pos:e,val:r},h,f),s(i,{x:c,y:u},h,f),l(i,{pos:e,val:r},h,f))}))},plotBoxAndWhiskers:o,plotPoints:s,plotBoxMean:l}},{\"../../components/drawing\":389,\"../../lib\":515,\"@plotly/d3\":58}],692:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,n,i=t.cd,a=t.xaxis,o=t.yaxis,s=[];if(!1===e)for(r=0;r=10)return null;for(var i=1/0,a=-1/0,o=e.length,s=0;s0?Math.floor:Math.ceil,I=L&gt;0?Math.ceil:Math.floor,O=L&gt;0?Math.min:Math.max,z=L&gt;0?Math.max:Math.min,D=P(S+C),R=I(E-C),F=[[f=M(S)]];for(a=D;a*L=0;i--)a[u-i]=t[f][i],o[u-i]=e[f][i];for(s.push({x:a,y:o,bicubic:l}),i=f,a=[],o=[];i&gt;=0;i--)a[f-i]=t[i][0],o[f-i]=e[i][0];return s.push({x:a,y:o,bicubic:c}),s}},{}],706:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axes\"),i=t(\"../../lib/extend\").extendFlat;e.exports=function(t,e,r){var a,o,s,l,c,u,f,h,p,d,m,g,v,y,x=t[\"_\"+e],b=t[e+\"axis\"],_=b._gridlines=[],w=b._minorgridlines=[],T=b._boundarylines=[],k=t[\"_\"+r],A=t[r+\"axis\"];\"array\"===b.tickmode&amp;&amp;(b.tickvals=x.slice());var M=t._xctrl,S=t._yctrl,E=M[0].length,L=M.length,C=t._a.length,P=t._b.length;n.prepTicks(b),\"array\"===b.tickmode&amp;&amp;delete b.tickvals;var I=b.smoothing?3:1;function O(n){var i,a,o,s,l,c,u,f,p,d,m,g,v=[],y=[],x={};if(\"b\"===e)for(a=t.b2j(n),o=Math.floor(Math.max(0,Math.min(P-2,a))),s=a-o,x.length=P,x.crossLength=C,x.xy=function(e){return t.evalxy([],e,a)},x.dxy=function(e,r){return t.dxydi([],e,o,r,s)},i=0;i0&amp;&amp;(p=t.dxydi([],i-1,o,0,s),v.push(l[0]+p[0]/3),y.push(l[1]+p[1]/3),d=t.dxydi([],i-1,o,1,s),v.push(f[0]-d[0]/3),y.push(f[1]-d[1]/3)),v.push(f[0]),y.push(f[1]),l=f;else for(i=t.a2i(n),c=Math.floor(Math.max(0,Math.min(C-2,i))),u=i-c,x.length=C,x.crossLength=P,x.xy=function(e){return t.evalxy([],i,e)},x.dxy=function(e,r){return t.dxydj([],c,e,u,r)},a=0;a0&amp;&amp;(m=t.dxydj([],c,a-1,u,0),v.push(l[0]+m[0]/3),y.push(l[1]+m[1]/3),g=t.dxydj([],c,a-1,u,1),v.push(f[0]-g[0]/3),y.push(f[1]-g[1]/3)),v.push(f[0]),y.push(f[1]),l=f;return x.axisLetter=e,x.axis=b,x.crossAxis=A,x.value=n,x.constvar=r,x.index=h,x.x=v,x.y=y,x.smoothing=A.smoothing,x}function z(n){var i,a,o,s,l,c=[],u=[],f={};if(f.length=x.length,f.crossLength=k.length,\"b\"===e)for(o=Math.max(0,Math.min(P-2,n)),l=Math.min(1,Math.max(0,n-o)),f.xy=function(e){return t.evalxy([],e,n)},f.dxy=function(e,r){return t.dxydi([],e,o,r,l)},i=0;ix.length-1||_.push(i(z(o),{color:b.gridcolor,width:b.gridwidth,dash:b.griddash}));for(h=u;hx.length-1||m&lt;0||m&gt;x.length-1))for(g=x[s],v=x[m],a=0;ax[x.length-1]||w.push(i(O(d),{color:b.minorgridcolor,width:b.minorgridwidth,dash:b.minorgriddash}));b.startline&amp;&amp;T.push(i(z(0),{color:b.startlinecolor,width:b.startlinewidth})),b.endline&amp;&amp;T.push(i(z(x.length-1),{color:b.endlinecolor,width:b.endlinewidth}))}else{for(l=5e-15,u=(c=[Math.floor((x[x.length-1]-b.tick0)/b.dtick*(1+l)),Math.ceil((x[0]-b.tick0)/b.dtick/(1+l))].sort((function(t,e){return t-e})))[0],f=c[1],h=u;h&lt;=f;h++)p=b.tick0+b.dtick*h,_.push(i(O(p),{color:b.gridcolor,width:b.gridwidth,dash:b.griddash}));for(h=u-1;hx[x.length-1]||w.push(i(O(d),{color:b.minorgridcolor,width:b.minorgridwidth,dash:b.minorgriddash}));b.startline&amp;&amp;T.push(i(O(x[0]),{color:b.startlinecolor,width:b.startlinewidth})),b.endline&amp;&amp;T.push(i(O(x[x.length-1]),{color:b.endlinecolor,width:b.endlinewidth}))}}},{\"../../lib/extend\":505,\"../../plots/cartesian/axes\":566}],707:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axes\"),i=t(\"../../lib/extend\").extendFlat;e.exports=function(t,e){var r,a,o,s=e._labels=[],l=e._gridlines;for(r=0;re.length&amp;&amp;(t=t.slice(0,e.length)):t=[],i=0;i90&amp;&amp;(p-=180,l=-l),{angle:p,flip:l,p:t.c2p(n,e,r),offsetMultplier:c}}},{}],721:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/drawing\"),a=t(\"./map_1d_array\"),o=t(\"./makepath\"),s=t(\"./orient_text\"),l=t(\"../../lib/svg_text_utils\"),c=t(\"../../lib\"),u=c.strRotate,f=c.strTranslate,h=t(\"../../constants/alignment\");function p(t,e,r,s,l,c){var u=\"const-\"+l+\"-lines\",f=r.selectAll(\".\"+u).data(c);f.enter().append(\"path\").classed(u,!0).style(\"vector-effect\",\"non-scaling-stroke\"),f.each((function(r){var s=r,l=s.x,c=s.y,u=a([],l,t.c2p),f=a([],c,e.c2p),h=\"M\"+o(u,f,s.smoothing);n.select(this).attr(\"d\",h).style(\"stroke-width\",s.width).style(\"stroke\",s.color).style(\"stroke-dasharray\",i.dashStyle(s.dash,s.width)).style(\"fill\",\"none\")})),f.exit().remove()}function d(t,e,r,a,o,c,h,p){var d=c.selectAll(\"text.\"+p).data(h);d.enter().append(\"text\").classed(p,!0);var m=0,g={};return d.each((function(o,c){var h;if(\"auto\"===o.axis.tickangle)h=s(a,e,r,o.xy,o.dxy);else{var p=(o.axis.tickangle+180)*Math.PI/180;h=s(a,e,r,o.xy,[Math.cos(p),Math.sin(p)])}c||(g={angle:h.angle,flip:h.flip});var d=(o.endAnchor?-1:1)*h.flip,v=n.select(this).attr({\"text-anchor\":d&gt;0?\"start\":\"end\",\"data-notex\":1}).call(i.font,o.font).text(o.text).call(l.convertToTspans,t),y=i.bBox(this);v.attr(\"transform\",f(h.p[0],h.p[1])+u(h.angle)+f(o.axis.labelpadding*d,.3*y.height)),m=Math.max(m,y.width+o.axis.labelpadding)})),d.exit().remove(),g.maxExtent=m,g}e.exports=function(t,e,r,i){var l=e.xaxis,u=e.yaxis,f=t._fullLayout._clips;c.makeTraceGroups(i,r,\"trace\").each((function(e){var r=n.select(this),i=e[0],h=i.trace,m=h.aaxis,g=h.baxis,y=c.ensureSingle(r,\"g\",\"minorlayer\"),x=c.ensureSingle(r,\"g\",\"majorlayer\"),b=c.ensureSingle(r,\"g\",\"boundarylayer\"),_=c.ensureSingle(r,\"g\",\"labellayer\");r.style(\"opacity\",h.opacity),p(l,u,x,m,\"a\",m._gridlines),p(l,u,x,g,\"b\",g._gridlines),p(l,u,y,m,\"a\",m._minorgridlines),p(l,u,y,g,\"b\",g._minorgridlines),p(l,u,b,m,\"a-boundary\",m._boundarylines),p(l,u,b,g,\"b-boundary\",g._boundarylines);var w=d(t,l,u,h,i,_,m._labels,\"a-label\"),T=d(t,l,u,h,i,_,g._labels,\"b-label\");!function(t,e,r,n,i,a,o,l){var u,f,h,p,d=c.aggNums(Math.min,null,r.a),m=c.aggNums(Math.max,null,r.a),g=c.aggNums(Math.min,null,r.b),y=c.aggNums(Math.max,null,r.b);u=.5*(d+m),f=g,h=r.ab2xy(u,f,!0),p=r.dxyda_rough(u,f),void 0===o.angle&amp;&amp;c.extendFlat(o,s(r,i,a,h,r.dxydb_rough(u,f)));v(t,e,r,n,h,p,r.aaxis,i,a,o,\"a-title\"),u=d,f=.5*(g+y),h=r.ab2xy(u,f,!0),p=r.dxydb_rough(u,f),void 0===l.angle&amp;&amp;c.extendFlat(l,s(r,i,a,h,r.dxyda_rough(u,f)));v(t,e,r,n,h,p,r.baxis,i,a,l,\"b-title\")}(t,_,h,i,l,u,w,T),function(t,e,r,n,i){var s,l,u,f,h=r.select(\"#\"+t._clipPathId);h.size()||(h=r.append(\"clipPath\").classed(\"carpetclip\",!0));var p=c.ensureSingle(h,\"path\",\"carpetboundary\"),d=e.clipsegments,m=[];for(f=0;f90&amp;&amp;y&lt;270,b=n.select(this);b.text(h.title.text).call(l.convertToTspans,t),x&amp;&amp;(_=(-l.lineCount(b)+g)*m*a-_),b.attr(\"transform\",f(e.p[0],e.p[1])+u(e.angle)+f(0,_)).attr(\"text-anchor\",\"middle\").call(i.font,h.title.font)})),b.exit().remove()}},{\"../../components/drawing\":389,\"../../constants/alignment\":483,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"./makepath\":718,\"./map_1d_array\":719,\"./orient_text\":720,\"@plotly/d3\":58}],722:[function(t,e,r){\"use strict\";var n=t(\"./constants\"),i=t(\"../../lib/search\").findBin,a=t(\"./compute_control_points\"),o=t(\"./create_spline_evaluator\"),s=t(\"./create_i_derivative_evaluator\"),l=t(\"./create_j_derivative_evaluator\");e.exports=function(t){var e=t._a,r=t._b,c=e.length,u=r.length,f=t.aaxis,h=t.baxis,p=e[0],d=e[c-1],m=r[0],g=r[u-1],v=e[e.length-1]-e[0],y=r[r.length-1]-r[0],x=v*n.RELATIVE_CULL_TOLERANCE,b=y*n.RELATIVE_CULL_TOLERANCE;p-=x,d+=x,m-=b,g+=b,t.isVisible=function(t,e){return t&gt;p&amp;&amp;tm&amp;&amp;ed||eg},t.setScale=function(){var e=t._x,r=t._y,n=a(t._xctrl,t._yctrl,e,r,f.smoothing,h.smoothing);t._xctrl=n[0],t._yctrl=n[1],t.evalxy=o([t._xctrl,t._yctrl],c,u,f.smoothing,h.smoothing),t.dxydi=s([t._xctrl,t._yctrl],f.smoothing,h.smoothing),t.dxydj=l([t._xctrl,t._yctrl],f.smoothing,h.smoothing)},t.i2a=function(t){var r=Math.max(0,Math.floor(t[0]),c-2),n=t[0]-r;return(1-n)*e[r]+n*e[r+1]},t.j2b=function(t){var e=Math.max(0,Math.floor(t[1]),c-2),n=t[1]-e;return(1-n)*r[e]+n*r[e+1]},t.ij2ab=function(e){return[t.i2a(e[0]),t.j2b(e[1])]},t.a2i=function(t){var r=Math.max(0,Math.min(i(t,e),c-2)),n=e[r],a=e[r+1];return Math.max(0,Math.min(c-1,r+(t-n)/(a-n)))},t.b2j=function(t){var e=Math.max(0,Math.min(i(t,r),u-2)),n=r[e],a=r[e+1];return Math.max(0,Math.min(u-1,e+(t-n)/(a-n)))},t.ab2ij=function(e){return[t.a2i(e[0]),t.b2j(e[1])]},t.i2c=function(e,r){return t.evalxy([],e,r)},t.ab2xy=function(n,i,a){if(!a&amp;&amp;(ne[c-1]|ir[u-1]))return[!1,!1];var o=t.a2i(n),s=t.b2j(i),l=t.evalxy([],o,s);if(a){var f,h,p,d,m=0,g=0,v=[];ne[c-1]?(f=c-2,h=1,m=(n-e[c-1])/(e[c-1]-e[c-2])):h=o-(f=Math.max(0,Math.min(c-2,Math.floor(o)))),ir[u-1]?(p=u-2,d=1,g=(i-r[u-1])/(r[u-1]-r[u-2])):d=s-(p=Math.max(0,Math.min(u-2,Math.floor(s)))),m&amp;&amp;(t.dxydi(v,f,p,h,d),l[0]+=v[0]*m,l[1]+=v[1]*m),g&amp;&amp;(t.dxydj(v,f,p,h,d),l[0]+=v[0]*g,l[1]+=v[1]*g)}return l},t.c2p=function(t,e,r){return[e.c2p(t[0]),r.c2p(t[1])]},t.p2x=function(t,e,r){return[e.p2c(t[0]),r.p2c(t[1])]},t.dadi=function(t){var r=Math.max(0,Math.min(e.length-2,t));return e[r+1]-e[r]},t.dbdj=function(t){var e=Math.max(0,Math.min(r.length-2,t));return r[e+1]-r[e]},t.dxyda=function(e,r,n,i){var a=t.dxydi(null,e,r,n,i),o=t.dadi(e,n);return[a[0]/o,a[1]/o]},t.dxydb=function(e,r,n,i){var a=t.dxydj(null,e,r,n,i),o=t.dbdj(r,i);return[a[0]/o,a[1]/o]},t.dxyda_rough=function(e,r,n){var i=v*(n||.1),a=t.ab2xy(e+i,r,!0),o=t.ab2xy(e-i,r,!0);return[.5*(a[0]-o[0])/i,.5*(a[1]-o[1])/i]},t.dxydb_rough=function(e,r,n){var i=y*(n||.1),a=t.ab2xy(e,r+i,!0),o=t.ab2xy(e,r-i,!0);return[.5*(a[0]-o[0])/i,.5*(a[1]-o[1])/i]},t.dpdx=function(t){return t._m},t.dpdy=function(t){return t._m}}},{\"../../lib/search\":535,\"./compute_control_points\":710,\"./constants\":711,\"./create_i_derivative_evaluator\":712,\"./create_j_derivative_evaluator\":713,\"./create_spline_evaluator\":714}],723:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e,r){var i,a,o,s=[],l=[],c=t[0].length,u=t.length;function f(e,r){var n,i=0,a=0;return e&gt;0&amp;&amp;void 0!==(n=t[r][e-1])&amp;&amp;(a++,i+=n),e0&amp;&amp;void 0!==(n=t[r-1][e])&amp;&amp;(a++,i+=n),r0&amp;&amp;a0&amp;&amp;i1e-5);return n.log(\"Smoother converged to\",k,\"after\",A,\"iterations\"),t}},{\"../../lib\":515}],724:[function(t,e,r){\"use strict\";var n=t(\"../../lib\").isArray1D;e.exports=function(t,e,r){var i=r(\"x\"),a=i&amp;&amp;i.length,o=r(\"y\"),s=o&amp;&amp;o.length;if(!a&amp;&amp;!s)return!1;if(e._cheater=!i,a&amp;&amp;!n(i)||s&amp;&amp;!n(o))e._length=null;else{var l=a?i.length:1/0;s&amp;&amp;(l=Math.min(l,o.length)),e.a&amp;&amp;e.a.length&amp;&amp;(l=Math.min(l,e.a.length)),e.b&amp;&amp;e.b.length&amp;&amp;(l=Math.min(l,e.b.length)),e._length=l}return!0}},{\"../../lib\":515}],725:[function(t,e,r){\"use strict\";var n=t(\"../../plots/template_attributes\").hovertemplateAttrs,i=t(\"../scattergeo/attributes\"),a=t(\"../../components/colorscale/attributes\"),o=t(\"../../plots/attributes\"),s=t(\"../../components/color/attributes\").defaultLine,l=t(\"../../lib/extend\").extendFlat,c=i.marker.line;e.exports=l({locations:{valType:\"data_array\",editType:\"calc\"},locationmode:i.locationmode,z:{valType:\"data_array\",editType:\"calc\"},geojson:l({},i.geojson,{}),featureidkey:i.featureidkey,text:l({},i.text,{}),hovertext:l({},i.hovertext,{}),marker:{line:{color:l({},c.color,{dflt:s}),width:l({},c.width,{dflt:1}),editType:\"calc\"},opacity:{valType:\"number\",arrayOk:!0,min:0,max:1,dflt:1,editType:\"style\"},editType:\"calc\"},selected:{marker:{opacity:i.selected.marker.opacity,editType:\"plot\"},editType:\"plot\"},unselected:{marker:{opacity:i.unselected.marker.opacity,editType:\"plot\"},editType:\"plot\"},hoverinfo:l({},o.hoverinfo,{editType:\"calc\",flags:[\"location\",\"z\",\"text\",\"name\"]}),hovertemplate:n(),showlegend:l({},o.showlegend,{dflt:!1})},a(\"\",{cLetter:\"z\",editTypeOverride:\"calc\"}))},{\"../../components/color/attributes\":366,\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/template_attributes\":642,\"../scattergeo/attributes\":978}],726:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../constants/numerical\").BADNUM,a=t(\"../../components/colorscale/calc\"),o=t(\"../scatter/arrays_to_calcdata\"),s=t(\"../scatter/calc_selection\");function l(t){return t&amp;&amp;\"string\"==typeof t}e.exports=function(t,e){var r,c=e._length,u=new Array(c);r=e.geojson?function(t){return l(t)||n(t)}:l;for(var f=0;f\")}(t,f,o),[t]}},{\"../../lib\":515,\"../../plots/cartesian/axes\":566,\"./attributes\":725}],730:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../heatmap/colorbar\"),calc:t(\"./calc\"),calcGeoJSON:t(\"./plot\").calcGeoJSON,plot:t(\"./plot\").plot,style:t(\"./style\").style,styleOnSelect:t(\"./style\").styleOnSelect,hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),selectPoints:t(\"./select\"),moduleType:\"trace\",name:\"choropleth\",basePlotModule:t(\"../../plots/geo\"),categories:[\"geo\",\"noOpacity\",\"showLegend\"],meta:{}}},{\"../../plots/geo\":598,\"../heatmap/colorbar\":804,\"./attributes\":725,\"./calc\":726,\"./defaults\":727,\"./event_data\":728,\"./hover\":729,\"./plot\":731,\"./select\":732,\"./style\":733}],731:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../lib/geo_location_utils\"),o=t(\"../../lib/topojson_utils\").getTopojsonFeatures,s=t(\"../../plots/cartesian/autorange\").findExtremes,l=t(\"./style\").style;e.exports={calcGeoJSON:function(t,e){for(var r=t[0].trace,n=e[r.geo],i=n._subplot,l=r.locationmode,c=r._length,u=\"geojson-id\"===l?a.extractTraceFeature(t):o(r,i.topojson),f=[],h=[],p=0;p&lt;c;p++){var d=t[p],m=\"geojson-id\"===l?d.fOut:a.locationToFeature(l,d.loc,u);if(m){d.geojson=m,d.ct=m.properties.ct,d._polygons=a.feature2polygons(m);var g=a.computeBbox(m);f.push(g[0],g[2]),h.push(g[1],g[3])}else d.geojson=null}if(\"geojson\"===n.fitbounds&amp;&amp;\"geojson-id\"===l){var v=a.computeBbox(a.getTraceGeojson(r));f=[v[0],v[2]],h=[v[1],v[3]]}var y={padded:!0};r._extremes.lon=s(n.lonaxis._ax,f,y),r._extremes.lat=s(n.lataxis._ax,h,y)},plot:function(t,e,r){var a=e.layers.backplot.select(\".choroplethlayer\");i.makeTraceGroups(a,r,\"trace choropleth\").each((function(e){var r=n.select(this).selectAll(\"path.choroplethlocation\").data(i.identity);r.enter().append(\"path\").classed(\"choroplethlocation\",!0),r.exit().remove(),l(t,e)}))}}},{\"../../lib\":515,\"../../lib/geo_location_utils\":508,\"../../lib/topojson_utils\":544,\"../../plots/cartesian/autorange\":565,\"./style\":733,\"@plotly/d3\":58}],732:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,n,i,a,o,s=t.cd,l=t.xaxis,c=t.yaxis,u=[];if(!1===e)for(r=0;r&lt;s.length;r++)s[r].selected=0;else for(r=0;r&lt;s.length;r++)(i=(n=s[r]).ct)&amp;&amp;(a=l.c2p(i),o=c.c2p(i),e.contains([a,o],null,r,t)?(u.push({pointNumber:r,lon:i[0],lat:i[1]}),n.selected=1):n.selected=0);return u}},{}],733:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/color\"),a=t(\"../../components/drawing\"),o=t(\"../../components/colorscale\");function s(t,e){var r=e[0].trace,s=e[0].node3.selectAll(\".choroplethlocation\"),l=r.marker||{},c=l.line||{},u=o.makeColorScaleFuncFromTrace(r);s.each((function(t){n.select(this).attr(\"fill\",u(t.z)).call(i.stroke,t.mlc||c.color).call(a.dashLine,\"\",t.mlw||c.width||0).style(\"opacity\",l.opacity)})),a.selectedPointStyle(s,r)}e.exports={style:function(t,e){e&amp;&amp;s(t,e)},styleOnSelect:function(t,e){var r=e[0].node3,n=e[0].trace;n.selectedpoints?a.selectedPointStyle(r.selectAll(\".choroplethlocation\"),n):s(0,e)}}},{\"../../components/color\":367,\"../../components/colorscale\":379,\"../../components/drawing\":389,\"@plotly/d3\":58}],734:[function(t,e,r){\"use strict\";var n=t(\"../choropleth/attributes\"),i=t(\"../../components/colorscale/attributes\"),a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../../plots/attributes\"),s=t(\"../../lib/extend\").extendFlat;e.exports=s({locations:{valType:\"data_array\",editType:\"calc\"},z:{valType:\"data_array\",editType:\"calc\"},geojson:{valType:\"any\",editType:\"calc\"},featureidkey:s({},n.featureidkey,{}),below:{valType:\"string\",editType:\"plot\"},text:n.text,hovertext:n.hovertext,marker:{line:{color:s({},n.marker.line.color,{editType:\"plot\"}),width:s({},n.marker.line.width,{editType:\"plot\"}),editType:\"calc\"},opacity:s({},n.marker.opacity,{editType:\"plot\"}),editType:\"calc\"},selected:{marker:{opacity:s({},n.selected.marker.opacity,{editType:\"plot\"}),editType:\"plot\"},editType:\"plot\"},unselected:{marker:{opacity:s({},n.unselected.marker.opacity,{editType:\"plot\"}),editType:\"plot\"},editType:\"plot\"},hoverinfo:n.hoverinfo,hovertemplate:a({},{keys:[\"properties\"]}),showlegend:s({},o.showlegend,{dflt:!1})},i(\"\",{cLetter:\"z\",editTypeOverride:\"calc\"}))},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/template_attributes\":642,\"../choropleth/attributes\":725}],735:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../lib\"),a=t(\"../../components/colorscale\"),o=t(\"../../components/drawing\"),s=t(\"../../lib/geojson_utils\").makeBlank,l=t(\"../../lib/geo_location_utils\");function c(t){var e,r=t[0].trace,n=r._opts;if(r.selectedpoints){for(var a=o.makeSelectedPointStyleFns(r),s=0;s&lt;t.length;s++){var l=t[s];l.fOut&amp;&amp;(l.fOut.properties.mo2=a.selectedOpacityFn(l))}e={type:\"identity\",property:\"mo2\"}}else e=i.isArrayOrTypedArray(r.marker.opacity)?{type:\"identity\",property:\"mo\"}:r.marker.opacity;return i.extendFlat(n.fill.paint,{\"fill-opacity\":e}),i.extendFlat(n.line.paint,{\"line-opacity\":e}),n}e.exports={convert:function(t){var e=t[0].trace,r=!0===e.visible&amp;&amp;0!==e._length,o={layout:{visibility:\"none\"},paint:{}},u={layout:{visibility:\"none\"},paint:{}},f=e._opts={fill:o,line:u,geojson:s()};if(!r)return f;var h=l.extractTraceFeature(t);if(!h)return f;var p,d,m,g=a.makeColorScaleFuncFromTrace(e),v=e.marker,y=v.line||{};i.isArrayOrTypedArray(v.opacity)&amp;&amp;(p=function(t){var e=t.mo;return n(e)?+i.constrain(e,0,1):0}),i.isArrayOrTypedArray(y.color)&amp;&amp;(d=function(t){return t.mlc}),i.isArrayOrTypedArray(y.width)&amp;&amp;(m=function(t){return t.mlw});for(var x=0;x&lt;t.length;x++){var b=t[x],_=b.fOut;if(_){var w=_.properties;w.fc=g(b.z),p&amp;&amp;(w.mo=p(b)),d&amp;&amp;(w.mlc=d(b)),m&amp;&amp;(w.mlw=m(b)),b.ct=w.ct,b._polygons=l.feature2polygons(_)}}var T=p?{type:\"identity\",property:\"mo\"}:v.opacity;return i.extendFlat(o.paint,{\"fill-color\":{type:\"identity\",property:\"fc\"},\"fill-opacity\":T}),i.extendFlat(u.paint,{\"line-color\":d?{type:\"identity\",property:\"mlc\"}:y.color,\"line-width\":m?{type:\"identity\",property:\"mlw\"}:y.width,\"line-opacity\":T}),o.layout.visibility=\"visible\",u.layout.visibility=\"visible\",f.geojson={type:\"FeatureCollection\",features:h},c(t),f},convertOnSelect:c}},{\"../../components/colorscale\":379,\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/geo_location_utils\":508,\"../../lib/geojson_utils\":509,\"fast-isnumeric\":190}],736:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../components/colorscale/defaults\"),a=t(\"./attributes\");e.exports=function(t,e,r,o){function s(r,i){return n.coerce(t,e,a,r,i)}var l=s(\"locations\"),c=s(\"z\"),u=s(\"geojson\");n.isArrayOrTypedArray(l)&amp;&amp;l.length&amp;&amp;n.isArrayOrTypedArray(c)&amp;&amp;c.length&amp;&amp;(\"string\"==typeof u&amp;&amp;\"\"!==u||n.isPlainObject(u))?(s(\"featureidkey\"),e._length=Math.min(l.length,c.length),s(\"below\"),s(\"text\"),s(\"hovertext\"),s(\"hovertemplate\"),s(\"marker.line.width\")&amp;&amp;s(\"marker.line.color\"),s(\"marker.opacity\"),i(t,e,o,s,{prefix:\"\",cLetter:\"z\"}),n.coerceSelectionMarkerOpacity(e,s)):e.visible=!1}},{\"../../components/colorscale/defaults\":377,\"../../lib\":515,\"./attributes\":734}],737:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../heatmap/colorbar\"),calc:t(\"../choropleth/calc\"),plot:t(\"./plot\"),hoverPoints:t(\"../choropleth/hover\"),eventData:t(\"../choropleth/event_data\"),selectPoints:t(\"../choropleth/select\"),styleOnSelect:function(t,e){e&amp;&amp;e[0].trace._glTrace.updateOnSelect(e)},getBelow:function(t,e){for(var r=e.getMapLayers(),n=r.length-2;n&gt;=0;n--){var i=r[n].id;if(\"string\"==typeof i&amp;&amp;0===i.indexOf(\"water\"))for(var a=n+1;a&lt;r.length;a++)if(\"string\"==typeof(i=r[a].id)&amp;&amp;-1===i.indexOf(\"plotly-\"))return i}},moduleType:\"trace\",name:\"choroplethmapbox\",basePlotModule:t(\"../../plots/mapbox\"),categories:[\"mapbox\",\"gl\",\"noOpacity\",\"showLegend\"],meta:{hr_name:\"choropleth_mapbox\"}}},{\"../../plots/mapbox\":622,\"../choropleth/calc\":726,\"../choropleth/event_data\":728,\"../choropleth/hover\":729,\"../choropleth/select\":732,\"../heatmap/colorbar\":804,\"./attributes\":734,\"./defaults\":736,\"./plot\":738}],738:[function(t,e,r){\"use strict\";var n=t(\"./convert\").convert,i=t(\"./convert\").convertOnSelect,a=t(\"../../plots/mapbox/constants\").traceLayerPrefix;function o(t,e){this.type=\"choroplethmapbox\",this.subplot=t,this.uid=e,this.sourceId=\"source-\"+e,this.layerList=[[\"fill\",a+e+\"-fill\"],[\"line\",a+e+\"-line\"]],this.below=null}var s=o.prototype;s.update=function(t){this._update(n(t)),t[0].trace._glTrace=this},s.updateOnSelect=function(t){this._update(i(t))},s._update=function(t){var e=this.subplot,r=this.layerList,n=e.belowLookup[\"trace-\"+this.uid];e.map.getSource(this.sourceId).setData(t.geojson),n!==this.below&amp;&amp;(this._removeLayers(),this._addLayers(t,n),this.below=n);for(var i=0;i&lt;r.length;i++){var a=r[i],o=a[0],s=a[1],l=t[o];e.setOptions(s,\"setLayoutProperty\",l.layout),\"visible\"===l.layout.visibility&amp;&amp;e.setOptions(s,\"setPaintProperty\",l.paint)}},s._addLayers=function(t,e){for(var r=this.subplot,n=this.layerList,i=this.sourceId,a=0;a&lt;n.length;a++){var o=n[a],s=o[0],l=t[s];r.addLayer({type:s,id:o[1],source:i,layout:l.layout,paint:l.paint},e)}},s._removeLayers=function(){for(var t=this.subplot.map,e=this.layerList,r=e.length-1;r&gt;=0;r--)t.removeLayer(e[r][1])},s.dispose=function(){var t=this.subplot.map;this._removeLayers(),t.removeSource(this.sourceId)},e.exports=function(t,e){var r=e[0].trace,i=new o(t,r.uid),a=i.sourceId,s=n(e),l=i.below=t.belowLookup[\"trace-\"+r.uid];return t.map.addSource(a,{type:\"geojson\",data:s.geojson}),i._addLayers(s,l),e[0].trace._glTrace=i,i}},{\"../../plots/mapbox/constants\":620,\"./convert\":735}],739:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/attributes\"),i=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../mesh3d/attributes\"),s=t(\"../../plots/attributes\"),l=t(\"../../lib/extend\").extendFlat,c={x:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},y:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},z:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},u:{valType:\"data_array\",editType:\"calc\"},v:{valType:\"data_array\",editType:\"calc\"},w:{valType:\"data_array\",editType:\"calc\"},sizemode:{valType:\"enumerated\",values:[\"scaled\",\"absolute\"],editType:\"calc\",dflt:\"scaled\"},sizeref:{valType:\"number\",editType:\"calc\",min:0},anchor:{valType:\"enumerated\",editType:\"calc\",values:[\"tip\",\"tail\",\"cm\",\"center\"],dflt:\"cm\"},text:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"calc\"},hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"calc\"},hovertemplate:a({editType:\"calc\"},{keys:[\"norm\"]}),uhoverformat:i(\"u\",1),vhoverformat:i(\"v\",1),whoverformat:i(\"w\",1),xhoverformat:i(\"x\"),yhoverformat:i(\"y\"),zhoverformat:i(\"z\"),showlegend:l({},s.showlegend,{dflt:!1})};l(c,n(\"\",{colorAttr:\"u/v/w norm\",showScaleDflt:!0,editTypeOverride:\"calc\"}));[\"opacity\",\"lightposition\",\"lighting\"].forEach((function(t){c[t]=o[t]})),c.hoverinfo=l({},s.hoverinfo,{editType:\"calc\",flags:[\"x\",\"y\",\"z\",\"u\",\"v\",\"w\",\"norm\",\"text\",\"name\"],dflt:\"x+y+z+norm+text+name\"}),c.transforms=void 0,e.exports=c},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642,\"../mesh3d/attributes\":876}],740:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/calc\");e.exports=function(t,e){for(var r=e.u,i=e.v,a=e.w,o=Math.min(e.x.length,e.y.length,e.z.length,r.length,i.length,a.length),s=-1/0,l=1/0,c=0;co.level||o.starts.length&amp;&amp;a===o.level)}break;case\"constraint\":if(n.prefixBoundary=!1,n.edgepaths.length)return;var s=n.x.length,l=n.y.length,c=-1/0,u=1/0;for(r=0;r\":p&gt;c&amp;&amp;(n.prefixBoundary=!0);break;case\"&lt;\":(pc||n.starts.length&amp;&amp;h===u)&amp;&amp;(n.prefixBoundary=!0);break;case\"][\":f=Math.min(p[0],p[1]),h=Math.max(p[0],p[1]),fc&amp;&amp;(n.prefixBoundary=!0)}}}},{}],747:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale\"),i=t(\"./make_color_map\"),a=t(\"./end_plus\");e.exports={min:\"zmin\",max:\"zmax\",calc:function(t,e,r){var o=e.contours,s=e.line,l=o.size||1,c=o.coloring,u=i(e,{isColorbar:!0});if(\"heatmap\"===c){var f=n.extractOpts(e);r._fillgradient=f.reversescale?n.flipScale(f.colorscale):f.colorscale,r._zrange=[f.min,f.max]}else\"fill\"===c&amp;&amp;(r._fillcolor=u);r._line={color:\"lines\"===c?u:s.color,width:!1!==o.showlines?s.width:0,dash:s.dash},r._levels={start:o.start,end:a(o),size:l}}}},{\"../../components/colorscale\":379,\"./end_plus\":755,\"./make_color_map\":760}],748:[function(t,e,r){\"use strict\";e.exports={BOTTOMSTART:[1,9,13,104,713],TOPSTART:[4,6,7,104,713],LEFTSTART:[8,12,14,208,1114],RIGHTSTART:[2,3,11,208,1114],NEWDELTA:[null,[-1,0],[0,-1],[-1,0],[1,0],null,[0,-1],[-1,0],[0,1],[0,1],null,[0,1],[1,0],[1,0],[0,-1]],CHOOSESADDLE:{104:[4,1],208:[2,8],713:[7,13],1114:[11,14]},SADDLEREMAINDER:{1:4,2:8,4:1,7:13,8:2,11:14,13:7,14:11},LABELDISTANCE:2,LABELINCREASE:10,LABELMIN:3,LABELMAX:10,LABELOPTIMIZER:{EDGECOST:1,ANGLECOST:1,NEIGHBORCOST:5,SAMELEVELFACTOR:10,SAMELEVELDISTANCE:5,MAXCOST:100,INITIALSEARCHPOINTS:10,ITERATIONS:5}}},{}],749:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"./label_defaults\"),a=t(\"../../components/color\"),o=a.addOpacity,s=a.opacity,l=t(\"../../constants/filter_ops\"),c=l.CONSTRAINT_REDUCTION,u=l.COMPARISON_OPS2;e.exports=function(t,e,r,a,l,f){var h,p,d,m=e.contours,g=r(\"contours.operation\");(m._operation=c[g],function(t,e){var r;-1===u.indexOf(e.operation)?(t(\"contours.value\",[0,1]),Array.isArray(e.value)?e.value.length&gt;2?e.value=e.value.slice(2):0===e.length?e.value=[0,1]:e.length&lt;2?(r=parseFloat(e.value[0]),e.value=[r,r+1]):e.value=[parseFloat(e.value[0]),parseFloat(e.value[1])]:n(e.value)&amp;&amp;(r=parseFloat(e.value),e.value=[r,r+1])):(t(\"contours.value\",0),n(e.value)||(Array.isArray(e.value)?e.value=parseFloat(e.value[0]):e.value=0))}(r,m),\"=\"===g?h=m.showlines=!0:(h=r(\"contours.showlines\"),d=r(\"fillcolor\",o((t.line||{}).color||l,.5))),h)&amp;&amp;(p=r(\"line.color\",d&amp;&amp;s(d)?o(e.fillcolor,1):l),r(\"line.width\",2),r(\"line.dash\"));r(\"line.smoothing\"),i(r,a,p,f)}},{\"../../components/color\":367,\"../../constants/filter_ops\":487,\"./label_defaults\":759,\"fast-isnumeric\":190}],750:[function(t,e,r){\"use strict\";var n=t(\"../../constants/filter_ops\"),i=t(\"fast-isnumeric\");function a(t,e){var r,a=Array.isArray(e);function o(t){return i(t)?+t:null}return-1!==n.COMPARISON_OPS2.indexOf(t)?r=o(a?e[0]:e):-1!==n.INTERVAL_OPS.indexOf(t)?r=a?[o(e[0]),o(e[1])]:[o(e),o(e)]:-1!==n.SET_OPS.indexOf(t)&amp;&amp;(r=a?e.map(o):[o(e)]),r}function o(t){return function(e){e=a(t,e);var r=Math.min(e[0],e[1]),n=Math.max(e[0],e[1]);return{start:r,end:n,size:n-r}}}function s(t){return function(e){return{start:e=a(t,e),end:1/0,size:1/0}}}e.exports={\"[]\":o(\"[]\"),\"][\":o(\"][\"),\"&gt;\":s(\"&gt;\"),\"&lt;\":s(\"&lt;\"),\"=\":s(\"=\")}},{\"../../constants/filter_ops\":487,\"fast-isnumeric\":190}],751:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n){var i=n(\"contours.start\"),a=n(\"contours.end\"),o=!1===i||!1===a,s=r(\"contours.size\");!(o?e.autocontour=!0:r(\"autocontour\",!1))&amp;&amp;s||r(\"ncontours\")}},{}],752:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");function i(t){return n.extendFlat({},t,{edgepaths:n.extendDeep([],t.edgepaths),paths:n.extendDeep([],t.paths),starts:n.extendDeep([],t.starts)})}e.exports=function(t,e){var r,a,o,s=function(t){return t.reverse()},l=function(t){return t};switch(e){case\"=\":case\"&lt;\":return t;case\"&gt;\":for(1!==t.length&amp;&amp;n.warn(\"Contour data invalid for the specified inequality operation.\"),a=t[0],r=0;r1e3){n.warn(\"Too many contours, clipping at 1000\",t);break}return l}},{\"../../lib\":515,\"./constraint_mapping\":750,\"./end_plus\":755}],755:[function(t,e,r){\"use strict\";e.exports=function(t){return t.end+t.size/1e6}},{}],756:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./constants\");function a(t,e,r,n){return Math.abs(t[0]-e[0])20&amp;&amp;e?208===t||1114===t?n=0===r[0]?1:-1:a=0===r[1]?1:-1:-1!==i.BOTTOMSTART.indexOf(t)?a=1:-1!==i.LEFTSTART.indexOf(t)?n=1:-1!==i.TOPSTART.indexOf(t)?a=-1:n=-1;return[n,a]}(f,r,e),p=[s(t,e,[-h[0],-h[1]])],d=t.z.length,m=t.z[0].length,g=e.slice(),v=h.slice();for(c=0;c&lt;1e4;c++){if(f&gt;20?(f=i.CHOOSESADDLE[f][(h[0]||h[1])&lt;0?0:1],t.crossings[u]=i.SADDLEREMAINDER[f]):delete t.crossings[u],!(h=i.NEWDELTA[f])){n.log(\"Found bad marching index:\",f,e,t.level);break}p.push(s(t,e,h)),e[0]+=h[0],e[1]+=h[1],u=e.join(\",\"),a(p[p.length-1],p[p.length-2],o,l)&amp;&amp;p.pop();var y=h[0]&amp;&amp;(e[0]&lt;0||e[0]&gt;m-2)||h[1]&amp;&amp;(e[1]&lt;0||e[1]&gt;d-2);if(e[0]===g[0]&amp;&amp;e[1]===g[1]&amp;&amp;h[0]===v[0]&amp;&amp;h[1]===v[1]||r&amp;&amp;y)break;f=t.crossings[u]}1e4===c&amp;&amp;n.log(\"Infinite loop in contour?\");var x,b,_,w,T,k,A,M,S,E,L,C,P,I,O,z=a(p[0],p[p.length-1],o,l),D=0,R=.2*t.smoothing,F=[],B=0;for(c=1;c=B;c--)if((x=F[c])=B&amp;&amp;x+F[b]M&amp;&amp;S--,t.edgepaths[S]=L.concat(p,E));break}V||(t.edgepaths[M]=p.concat(E))}for(M=0;Mt?0:1)+(e[0][1]&gt;t?0:2)+(e[1][1]&gt;t?0:4)+(e[1][0]&gt;t?0:8);return 5===r||10===r?t&gt;(e[0][0]+e[0][1]+e[1][0]+e[1][1])/4?5===r?713:1114:5===r?104:208:15===r?0:r}e.exports=function(t){var e,r,a,o,s,l,c,u,f,h=t[0].z,p=h.length,d=h[0].length,m=2===p||2===d;for(r=0;r&lt;p-1;r++)for(o=[],0===r&amp;&amp;(o=o.concat(n.BOTTOMSTART)),r===p-2&amp;&amp;(o=o.concat(n.TOPSTART)),e=0;e&lt;d-1;e++)for(a=o.slice(),0===e&amp;&amp;(a=a.concat(n.LEFTSTART)),e===d-2&amp;&amp;(a=a.concat(n.RIGHTSTART)),s=e+\",\"+r,l=[[h[r][e],h[r][e+1]],[h[r+1][e],h[r+1][e+1]]],f=0;f&lt;t.length;f++)(c=i((u=t[f]).level,l))&amp;&amp;(u.crossings[s]=c,-1!==a.indexOf(c)&amp;&amp;(u.starts.push([e,r]),m&amp;&amp;-1!==a.indexOf(c,a.indexOf(c)+1)&amp;&amp;u.starts.push([e,r])))}},{\"./constants\":748}],762:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../components/drawing\"),o=t(\"../../components/colorscale\"),s=t(\"../../lib/svg_text_utils\"),l=t(\"../../plots/cartesian/axes\"),c=t(\"../../plots/cartesian/set_convert\"),u=t(\"../heatmap/plot\"),f=t(\"./make_crossings\"),h=t(\"./find_all_paths\"),p=t(\"./empty_pathinfo\"),d=t(\"./convert_to_constraints\"),m=t(\"./close_boundaries\"),g=t(\"./constants\"),v=g.LABELOPTIMIZER;function y(t,e){var r,n,o,s,l,c,u,f=\"\",h=0,p=t.edgepaths.map((function(t,e){return e})),d=!0;function m(t){return Math.abs(t[1]-e[2][1])&lt;.01}function g(t){return Math.abs(t[0]-e[0][0])&lt;.01}function v(t){return Math.abs(t[0]-e[2][0])&lt;.01}for(;p.length;){for(c=a.smoothopen(t.edgepaths[h],t.smoothing),f+=d?c:c.replace(/^M/,\"L\"),p.splice(p.indexOf(h),1),r=t.edgepaths[h][t.edgepaths[h].length-1],s=-1,o=0;o&lt;4;o++){if(!r){i.log(\"Missing end?\",h,t);break}for(u=r,Math.abs(u[1]-e[0][1])&lt;.01&amp;&amp;!v(r)?n=e[1]:g(r)?n=e[0]:m(r)?n=e[3]:v(r)&amp;&amp;(n=e[2]),l=0;l&lt;t.edgepaths.length;l++){var y=t.edgepaths[l][0];Math.abs(r[0]-n[0])&lt;.01?Math.abs(r[0]-y[0])&lt;.01&amp;&amp;(y[1]-r[1])*(n[1]-y[1])&gt;=0&amp;&amp;(n=y,s=l):Math.abs(r[1]-n[1])&lt;.01?Math.abs(r[1]-y[1])&lt;.01&amp;&amp;(y[0]-r[0])*(n[0]-y[0])&gt;=0&amp;&amp;(n=y,s=l):i.log(\"endpt to newendpt is not vert. or horz.\",r,n,y)}if(r=n,s&gt;=0)break;f+=\"L\"+n}if(s===t.edgepaths.length){i.log(\"unclosed perimeter path\");break}h=s,(d=-1===p.indexOf(h))&amp;&amp;(h=p[0],f+=\"Z\")}for(h=0;hn.center?n.right-s:s-n.left)/(u+Math.abs(Math.sin(c)*o)),p=(l&gt;n.middle?n.bottom-l:l-n.top)/(Math.abs(f)+Math.cos(c)*o);if(h&lt;1||p&lt;1)return 1/0;var d=v.EDGECOST*(1/(h-1)+1/(p-1));d+=v.ANGLECOST*c*c;for(var m=s-u,g=l-f,y=s+u,x=l+f,b=0;b2*v.MAXCOST)break;p&amp;&amp;(s/=2),l=(o=c-s/2)+1.5*s}if(h&lt;=v.MAXCOST)return u},r.addLabelData=function(t,e,r,n){var i=e.fontSize,a=e.width+i/3,o=Math.max(0,e.height-i/3),s=t.x,l=t.y,c=t.theta,u=Math.sin(c),f=Math.cos(c),h=function(t,e){return[s+t*f-e*u,l+t*u+e*f]},p=[h(-a/2,-o/2),h(-a/2,o/2),h(a/2,o/2),h(a/2,-o/2)];r.push({text:e.text,x:s,y:l,dy:e.dy,theta:c,level:e.level,width:a,height:o}),n.push(p)},r.drawLabels=function(t,e,r,a,o){var l=t.selectAll(\"text\").data(e,(function(t){return t.text+\",\"+t.x+\",\"+t.y+\",\"+t.theta}));if(l.exit().remove(),l.enter().append(\"text\").attr({\"data-notex\":1,\"text-anchor\":\"middle\"}).each((function(t){var e=t.x+Math.sin(t.theta)*t.dy,i=t.y-Math.cos(t.theta)*t.dy;n.select(this).text(t.text).attr({x:e,y:i,transform:\"rotate(\"+180*t.theta/Math.PI+\" \"+e+\" \"+i+\")\"}).call(s.convertToTspans,r)})),o){for(var c=\"\",u=0;ur.end&amp;&amp;(r.start=r.end=(r.start+r.end)/2),t._input.contours||(t._input.contours={}),i.extendFlat(t._input.contours,{start:r.start,end:r.end,size:r.size}),t._input.autocontour=!0}else if(\"constraint\"!==r.type){var c,u=r.start,f=r.end,h=t._input.contours;if(u&gt;f&amp;&amp;(r.start=h.start=f,f=r.end=h.end=u,u=r.start),!(r.size&gt;0))c=u===f?1:a(u,f,t.ncontours).dtick,h.size=r.size=c}}},{\"../../lib\":515,\"../../plots/cartesian/axes\":566}],764:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/drawing\"),a=t(\"../heatmap/style\"),o=t(\"./make_color_map\");e.exports=function(t){var e=n.select(t).selectAll(\"g.contour\");e.style(\"opacity\",(function(t){return t[0].trace.opacity})),e.each((function(t){var e=n.select(this),r=t[0].trace,a=r.contours,s=r.line,l=a.size||1,c=a.start,u=\"constraint\"===a.type,f=!u&amp;&amp;\"lines\"===a.coloring,h=!u&amp;&amp;\"fill\"===a.coloring,p=f||h?o(r):null;e.selectAll(\"g.contourlevel\").each((function(t){n.select(this).selectAll(\"path\").call(i.lineGroupStyle,s.width,f?p(t.level):s.color,s.dash)}));var d=a.labelfont;if(e.selectAll(\"g.contourlabels text\").each((function(t){i.font(n.select(this),{family:d.family,size:d.size,color:d.color||(f?p(t.level):s.color)})})),u)e.selectAll(\"g.contourfill path\").style(\"fill\",r.fillcolor);else if(h){var m;e.selectAll(\"g.contourfill path\").style(\"fill\",(function(t){return void 0===m&amp;&amp;(m=t.level),p(t.level+.5*l)})),void 0===m&amp;&amp;(m=c),e.selectAll(\"g.contourbg path\").style(\"fill\",p(m-.5*l))}})),a(t)}},{\"../../components/drawing\":389,\"../heatmap/style\":814,\"./make_color_map\":760,\"@plotly/d3\":58}],765:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/defaults\"),i=t(\"./label_defaults\");e.exports=function(t,e,r,a,o){var s,l=r(\"contours.coloring\"),c=\"\";\"fill\"===l&amp;&amp;(s=r(\"contours.showlines\")),!1!==s&amp;&amp;(\"lines\"!==l&amp;&amp;(c=r(\"line.color\",\"#000\")),r(\"line.width\",.5),r(\"line.dash\")),\"none\"!==l&amp;&amp;(!0!==t.showlegend&amp;&amp;(e.showlegend=!1),e._dfltShowLegend=!1,n(t,e,a,r,{prefix:\"\",cLetter:\"z\"})),r(\"line.smoothing\"),i(r,a,c,o)}},{\"../../components/colorscale/defaults\":377,\"./label_defaults\":759}],766:[function(t,e,r){\"use strict\";var n=t(\"../heatmap/attributes\"),i=t(\"../contour/attributes\"),a=t(\"../../components/colorscale/attributes\"),o=t(\"../../lib/extend\").extendFlat,s=i.contours;e.exports=o({carpet:{valType:\"string\",editType:\"calc\"},z:n.z,a:n.x,a0:n.x0,da:n.dx,b:n.y,b0:n.y0,db:n.dy,text:n.text,hovertext:n.hovertext,transpose:n.transpose,atype:n.xtype,btype:n.ytype,fillcolor:i.fillcolor,autocontour:i.autocontour,ncontours:i.ncontours,contours:{type:s.type,start:s.start,end:s.end,size:s.size,coloring:{valType:\"enumerated\",values:[\"fill\",\"lines\",\"none\"],dflt:\"fill\",editType:\"calc\"},showlines:s.showlines,showlabels:s.showlabels,labelfont:s.labelfont,labelformat:s.labelformat,operation:s.operation,value:s.value,editType:\"calc\",impliedEdits:{autocontour:!1}},line:{color:i.line.color,width:i.line.width,dash:i.line.dash,smoothing:i.line.smoothing,editType:\"plot\"},transforms:void 0},a(\"\",{cLetter:\"z\",autoColorDflt:!1}))},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../contour/attributes\":744,\"../heatmap/attributes\":801}],767:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/calc\"),i=t(\"../../lib\"),a=t(\"../heatmap/convert_column_xyz\"),o=t(\"../heatmap/clean_2d_array\"),s=t(\"../heatmap/interp2d\"),l=t(\"../heatmap/find_empties\"),c=t(\"../heatmap/make_bound_array\"),u=t(\"./defaults\"),f=t(\"../carpet/lookup_carpetid\"),h=t(\"../contour/set_contours\");e.exports=function(t,e){var r=e._carpetTrace=f(t,e);if(r&amp;&amp;r.visible&amp;&amp;\"legendonly\"!==r.visible){if(!e.a||!e.b){var p=t.data[r.index],d=t.data[e.index];d.a||(d.a=p.a),d.b||(d.b=p.b),u(d,e,e._defaultColor,t._fullLayout)}var m=function(t,e){var r,u,f,h,p,d,m,g=e._carpetTrace,v=g.aaxis,y=g.baxis;v._minDtick=0,y._minDtick=0,i.isArray1D(e.z)&amp;&amp;a(e,v,y,\"a\",\"b\",[\"z\"]);r=e._a=e._a||e.a,h=e._b=e._b||e.b,r=r?v.makeCalcdata(e,\"_a\"):[],h=h?y.makeCalcdata(e,\"_b\"):[],u=e.a0||0,f=e.da||1,p=e.b0||0,d=e.db||1,m=e._z=o(e._z||e.z,e.transpose),e._emptypoints=l(m),s(m,e._emptypoints);var x=i.maxRowLength(m),b=\"scaled\"===e.xtype?\"\":r,_=c(e,b,u,f,x,v),w=\"scaled\"===e.ytype?\"\":h,T=c(e,w,p,d,m.length,y),k={a:_,b:T,z:m};\"levels\"===e.contours.type&amp;&amp;\"none\"!==e.contours.coloring&amp;&amp;n(t,e,{vals:m,containerStr:\"\",cLetter:\"z\"});return[k]}(t,e);return h(e,e._z),m}}},{\"../../components/colorscale/calc\":375,\"../../lib\":515,\"../carpet/lookup_carpetid\":717,\"../contour/set_contours\":763,\"../heatmap/clean_2d_array\":803,\"../heatmap/convert_column_xyz\":805,\"../heatmap/find_empties\":807,\"../heatmap/interp2d\":810,\"../heatmap/make_bound_array\":812,\"./defaults\":768}],768:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../heatmap/xyz_defaults\"),a=t(\"./attributes\"),o=t(\"../contour/constraint_defaults\"),s=t(\"../contour/contours_defaults\"),l=t(\"../contour/style_defaults\");e.exports=function(t,e,r,c){function u(r,i){return n.coerce(t,e,a,r,i)}if(u(\"carpet\"),t.a&amp;&amp;t.b){if(!i(t,e,u,c,\"a\",\"b\"))return void(e.visible=!1);u(\"text\"),\"constraint\"===u(\"contours.type\")?o(t,e,u,c,r,{hasHover:!1}):(s(t,e,u,(function(r){return n.coerce2(t,e,a,r)})),l(t,e,u,c,{hasHover:!1}))}else e._defaultColor=r,e._length=null}},{\"../../lib\":515,\"../contour/constraint_defaults\":749,\"../contour/contours_defaults\":751,\"../contour/style_defaults\":765,\"../heatmap/xyz_defaults\":816,\"./attributes\":766}],769:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../contour/colorbar\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"../contour/style\"),moduleType:\"trace\",name:\"contourcarpet\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"cartesian\",\"svg\",\"carpet\",\"contour\",\"symbols\",\"showLegend\",\"hasLines\",\"carpetDependent\",\"noHover\",\"noSortingByValue\"],meta:{}}},{\"../../plots/cartesian\":578,\"../contour/colorbar\":747,\"../contour/style\":764,\"./attributes\":766,\"./calc\":767,\"./defaults\":768,\"./plot\":770}],770:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../carpet/map_1d_array\"),a=t(\"../carpet/makepath\"),o=t(\"../../components/drawing\"),s=t(\"../../lib\"),l=t(\"../contour/make_crossings\"),c=t(\"../contour/find_all_paths\"),u=t(\"../contour/plot\"),f=t(\"../contour/constants\"),h=t(\"../contour/convert_to_constraints\"),p=t(\"../contour/empty_pathinfo\"),d=t(\"../contour/close_boundaries\"),m=t(\"../carpet/lookup_carpetid\"),g=t(\"../carpet/axis_aligned_line\");function v(t,e,r){var n=t.getPointAtLength(e),i=t.getPointAtLength(r),a=i.x-n.x,o=i.y-n.y,s=Math.sqrt(a*a+o*o);return[a/s,o/s]}function y(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);return[t[0]/e,t[1]/e]}function x(t,e){var r=Math.abs(t[0]*e[0]+t[1]*e[1]);return Math.sqrt(1-r*r)/r}e.exports=function(t,e,r,b){var _=e.xaxis,w=e.yaxis;s.makeTraceGroups(b,r,\"contour\").each((function(r){var b=n.select(this),T=r[0],k=T.trace,A=k._carpetTrace=m(t,k),M=t.calcdata[A.index][0];if(A.visible&amp;&amp;\"legendonly\"!==A.visible){var S=T.a,E=T.b,L=k.contours,C=p(L,e,T),P=\"constraint\"===L.type,I=L._operation,O=P?\"=\"===I?\"lines\":\"fill\":L.coloring,z=[[S[0],E[E.length-1]],[S[S.length-1],E[E.length-1]],[S[S.length-1],E[0]],[S[0],E[0]]];l(C);var D=1e-8*(S[S.length-1]-S[0]),R=1e-8*(E[E.length-1]-E[0]);c(C,D,R);var F,B,N,j,U=C;\"constraint\"===L.type&amp;&amp;(U=h(C,I)),function(t,e){var r,n,i,a,o,s,l,c,u;for(r=0;r=0;j--)F=M.clipsegments[j],B=i([],F.x,_.c2p),N=i([],F.y,w.c2p),B.reverse(),N.reverse(),V.push(a(B,N,F.bicubic));var H=\"M\"+V.join(\"L\")+\"Z\";!function(t,e,r,n,o,l){var c,u,f,h,p=s.ensureSingle(t,\"g\",\"contourbg\").selectAll(\"path\").data(\"fill\"!==l||o?[]:[0]);p.enter().append(\"path\"),p.exit().remove();var d=[];for(h=0;h&lt;e.length;h++)c=e[h],u=i([],c.x,r.c2p),f=i([],c.y,n.c2p),d.push(a(u,f,c.bicubic));p.attr(\"d\",\"M\"+d.join(\"L\")+\"Z\").style(\"stroke\",\"none\")}(b,M.clipsegments,_,w,P,O),function(t,e,r,i,a,l,c,u,f,h,p){var m=\"fill\"===h;m&amp;&amp;d(a,t.contours);var v=s.ensureSingle(e,\"g\",\"contourfill\").selectAll(\"path\").data(m?a:[]);v.enter().append(\"path\"),v.exit().remove(),v.each((function(t){var e=(t.prefixBoundary?p:\"\")+function(t,e,r,n,i,a,l,c){var u,f,h,p,d,m,v,y=\"\",x=e.edgepaths.map((function(t,e){return e})),b=!0,_=1e-4*Math.abs(r[0][0]-r[2][0]),w=1e-4*Math.abs(r[0][1]-r[2][1]);function T(t){return Math.abs(t[1]-r[0][1])&lt;w}function k(t){return Math.abs(t[1]-r[2][1])&lt;w}function A(t){return Math.abs(t[0]-r[0][0])&lt;_}function M(t){return Math.abs(t[0]-r[2][0])&lt;_}function S(t,e){var r,n,o,s,u=\"\";for(T(t)&amp;&amp;!M(t)||k(t)&amp;&amp;!A(t)?(s=i.aaxis,o=g(i,a,[t[0],e[0]],.5*(t[1]+e[1]))):(s=i.baxis,o=g(i,a,.5*(t[0]+e[0]),[t[1],e[1]])),r=1;r&lt;o.length;r++)for(u+=s.smoothing?\"C\":\"L\",n=0;n&lt;o[r].length;n++){var f=o[r][n];u+=[l.c2p(f[0]),c.c2p(f[1])]+\" \"}return u}u=0,f=null;for(;x.length;){var E=e.edgepaths[u][0];for(f&amp;&amp;(y+=S(f,E)),v=o.smoothopen(e.edgepaths[u].map(n),e.smoothing),y+=b?v:v.replace(/^M/,\"L\"),x.splice(x.indexOf(u),1),f=e.edgepaths[u][e.edgepaths[u].length-1],d=-1,p=0;p&lt;4;p++){if(!f){s.log(\"Missing end?\",u,e);break}for(T(f)&amp;&amp;!M(f)?h=r[1]:A(f)?h=r[0]:k(f)?h=r[3]:M(f)&amp;&amp;(h=r[2]),m=0;m&lt;e.edgepaths.length;m++){var L=e.edgepaths[m][0];Math.abs(f[0]-h[0])&lt;_?Math.abs(f[0]-L[0])&lt;_&amp;&amp;(L[1]-f[1])*(h[1]-L[1])&gt;=0&amp;&amp;(h=L,d=m):Math.abs(f[1]-h[1])=0&amp;&amp;(h=L,d=m):s.log(\"endpt to newendpt is not vert. or horz.\",f,h,L)}if(d&gt;=0)break;y+=S(f,h),f=h}if(d===e.edgepaths.length){s.log(\"unclosed perimeter path\");break}u=d,(b=-1===x.indexOf(u))&amp;&amp;(u=x[0],y+=S(f,h)+\"Z\",f=null)}for(u=0;ug&amp;&amp;(n.max=g);n.len=n.max-n.min}(this,r,t,n,c,e.height),!(n.len&lt;(e.width+e.height)*f.LABELMIN)))for(var i=Math.min(Math.ceil(n.len/I),f.LABELMAX),a=0;a0?+p[u]:0),f.push({type:\"Feature\",geometry:{type:\"Point\",coordinates:v},properties:y})}}var b=o.extractOpts(e),_=b.reversescale?o.flipScale(b.colorscale):b.colorscale,w=_[0][1],T=[\"interpolate\",[\"linear\"],[\"heatmap-density\"],0,a.opacity(w)&lt;1?w:a.addOpacity(w,0)];for(u=1;u&lt;_.length;u++)T.push(_[u][0],_[u][1]);var k=[\"interpolate\",[\"linear\"],[\"get\",\"z\"],b.min,0,b.max,1];return i.extendFlat(c.heatmap.paint,{\"heatmap-weight\":d?k:1/(b.max-b.min),\"heatmap-color\":T,\"heatmap-radius\":m?{type:\"identity\",property:\"r\"}:e.radius,\"heatmap-opacity\":e.opacity}),c.geojson={type:\"FeatureCollection\",features:f},c.heatmap.layout.visibility=\"visible\",c}},{\"../../components/color\":367,\"../../components/colorscale\":379,\"../../constants/numerical\":491,\"../../lib\":515,\"../../lib/geojson_utils\":509,\"fast-isnumeric\":190}],774:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../components/colorscale/defaults\"),a=t(\"./attributes\");e.exports=function(t,e,r,o){function s(r,i){return n.coerce(t,e,a,r,i)}var l=s(\"lon\")||[],c=s(\"lat\")||[],u=Math.min(l.length,c.length);u?(e._length=u,s(\"z\"),s(\"radius\"),s(\"below\"),s(\"text\"),s(\"hovertext\"),s(\"hovertemplate\"),i(t,e,o,s,{prefix:\"\",cLetter:\"z\"})):e.visible=!1}},{\"../../components/colorscale/defaults\":377,\"../../lib\":515,\"./attributes\":771}],775:[function(t,e,r){\"use strict\";e.exports=function(t,e){return t.lon=e.lon,t.lat=e.lat,t.z=e.z,t}},{}],776:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axes\"),i=t(\"../scattermapbox/hover\").hoverPoints,a=t(\"../scattermapbox/hover\").getExtraText;e.exports=function(t,e,r){var o=i(t,e,r);if(o){var s=o[0],l=s.cd,c=l[0].trace,u=l[s.index];if(delete s.color,\"z\"in u){var f=s.subplot.mockAxis;s.z=u.z,s.zLabel=n.tickText(f,f.c2l(u.z),\"hover\").text}return s.extraText=a(c,u,l[0].t.labels),[s]}}},{\"../../plots/cartesian/axes\":566,\"../scattermapbox/hover\":1007}],777:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../heatmap/colorbar\"),formatLabels:t(\"../scattermapbox/format_labels\"),calc:t(\"./calc\"),plot:t(\"./plot\"),hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),getBelow:function(t,e){for(var r=e.getMapLayers(),n=0;n&lt;r.length;n++){var i=r[n],a=i.id;if(\"symbol\"===i.type&amp;&amp;\"string\"==typeof a&amp;&amp;-1===a.indexOf(\"plotly-\"))return a}},moduleType:\"trace\",name:\"densitymapbox\",basePlotModule:t(\"../../plots/mapbox\"),categories:[\"mapbox\",\"gl\",\"showLegend\"],meta:{hr_name:\"density_mapbox\"}}},{\"../../plots/mapbox\":622,\"../heatmap/colorbar\":804,\"../scattermapbox/format_labels\":1006,\"./attributes\":771,\"./calc\":772,\"./defaults\":774,\"./event_data\":775,\"./hover\":776,\"./plot\":778}],778:[function(t,e,r){\"use strict\";var n=t(\"./convert\"),i=t(\"../../plots/mapbox/constants\").traceLayerPrefix;function a(t,e){this.type=\"densitymapbox\",this.subplot=t,this.uid=e,this.sourceId=\"source-\"+e,this.layerList=[[\"heatmap\",i+e+\"-heatmap\"]],this.below=null}var o=a.prototype;o.update=function(t){var e=this.subplot,r=this.layerList,i=n(t),a=e.belowLookup[\"trace-\"+this.uid];e.map.getSource(this.sourceId).setData(i.geojson),a!==this.below&amp;&amp;(this._removeLayers(),this._addLayers(i,a),this.below=a);for(var o=0;o&lt;r.length;o++){var s=r[o],l=s[0],c=s[1],u=i[l];e.setOptions(c,\"setLayoutProperty\",u.layout),\"visible\"===u.layout.visibility&amp;&amp;e.setOptions(c,\"setPaintProperty\",u.paint)}},o._addLayers=function(t,e){for(var r=this.subplot,n=this.layerList,i=this.sourceId,a=0;a&lt;n.length;a++){var o=n[a],s=o[0],l=t[s];r.addLayer({type:s,id:o[1],source:i,layout:l.layout,paint:l.paint},e)}},o._removeLayers=function(){for(var t=this.subplot.map,e=this.layerList,r=e.length-1;r&gt;=0;r--)t.removeLayer(e[r][1])},o.dispose=function(){var t=this.subplot.map;this._removeLayers(),t.removeSource(this.sourceId)},e.exports=function(t,e){var r=e[0].trace,i=new a(t,r.uid),o=i.sourceId,s=n(e),l=i.below=t.belowLookup[\"trace-\"+r.uid];return t.map.addSource(o,{type:\"geojson\",data:s.geojson}),i._addLayers(s,l),i}},{\"../../plots/mapbox/constants\":620,\"./convert\":773}],779:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e){for(var r=0;r\"),l.color=function(t,e){var r=t.marker,i=e.mc||r.color,a=e.mlc||r.line.color,o=e.mlw||r.line.width;if(n(i))return i;if(n(a)&amp;&amp;o)return a}(u,h),[l]}}},{\"../../components/color\":367,\"../../lib\":515,\"../bar/hover\":664}],787:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\").supplyDefaults,crossTraceDefaults:t(\"./defaults\").crossTraceDefaults,supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\"),crossTraceCalc:t(\"./cross_trace_calc\"),plot:t(\"./plot\"),style:t(\"./style\").style,hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),selectPoints:t(\"../bar/select\"),moduleType:\"trace\",name:\"funnel\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"bar-like\",\"cartesian\",\"svg\",\"oriented\",\"showLegend\",\"zoomScale\"],meta:{}}},{\"../../plots/cartesian\":578,\"../bar/select\":669,\"./attributes\":780,\"./calc\":781,\"./cross_trace_calc\":783,\"./defaults\":784,\"./event_data\":785,\"./hover\":786,\"./layout_attributes\":788,\"./layout_defaults\":789,\"./plot\":790,\"./style\":791}],788:[function(t,e,r){\"use strict\";e.exports={funnelmode:{valType:\"enumerated\",values:[\"stack\",\"group\",\"overlay\"],dflt:\"stack\",editType:\"calc\"},funnelgap:{valType:\"number\",min:0,max:1,editType:\"calc\"},funnelgroupgap:{valType:\"number\",min:0,max:1,dflt:0,editType:\"calc\"}}},{}],789:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e,r){var a=!1;function o(r,a){return n.coerce(t,e,i,r,a)}for(var s=0;s path\").each((function(t){if(!t.isBlank){var e=s.marker;n.select(this).call(a.fill,t.mc||e.color).call(a.stroke,t.mlc||e.line.color).call(i.dashLine,e.line.dash,t.mlw||e.line.width).style(\"opacity\",s.selectedpoints&amp;&amp;!t.selected?o:1)}})),c(r,s,t),r.selectAll(\".regions\").each((function(){n.select(this).selectAll(\"path\").style(\"stroke-width\",0).call(a.fill,s.connector.fillcolor)})),r.selectAll(\".lines\").each((function(){var t=s.connector.line;i.lineGroupStyle(n.select(this).selectAll(\"path\"),t.width,t.color,t.dash)}))}))}}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../constants/interactions\":490,\"../bar/style\":671,\"../bar/uniform_text\":673,\"@plotly/d3\":58}],792:[function(t,e,r){\"use strict\";var n=t(\"../pie/attributes\"),i=t(\"../../plots/attributes\"),a=t(\"../../plots/domain\").attributes,o=t(\"../../plots/template_attributes\").hovertemplateAttrs,s=t(\"../../plots/template_attributes\").texttemplateAttrs,l=t(\"../../lib/extend\").extendFlat;e.exports={labels:n.labels,label0:n.label0,dlabel:n.dlabel,values:n.values,marker:{colors:n.marker.colors,line:{color:l({},n.marker.line.color,{dflt:null}),width:l({},n.marker.line.width,{dflt:1}),editType:\"calc\"},editType:\"calc\"},text:n.text,hovertext:n.hovertext,scalegroup:l({},n.scalegroup,{}),textinfo:l({},n.textinfo,{flags:[\"label\",\"text\",\"value\",\"percent\"]}),texttemplate:s({editType:\"plot\"},{keys:[\"label\",\"color\",\"value\",\"text\",\"percent\"]}),hoverinfo:l({},i.hoverinfo,{flags:[\"label\",\"text\",\"value\",\"percent\",\"name\"]}),hovertemplate:o({},{keys:[\"label\",\"color\",\"value\",\"text\",\"percent\"]}),textposition:l({},n.textposition,{values:[\"inside\",\"none\"],dflt:\"inside\"}),textfont:n.textfont,insidetextfont:n.insidetextfont,title:{text:n.title.text,font:n.title.font,position:l({},n.title.position,{values:[\"top left\",\"top center\",\"top right\"],dflt:\"top center\"}),editType:\"plot\"},domain:a({name:\"funnelarea\",trace:!0,editType:\"calc\"}),aspectratio:{valType:\"number\",min:0,dflt:1,editType:\"plot\"},baseratio:{valType:\"number\",min:0,max:1,dflt:.333,editType:\"plot\"}}},{\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/domain\":593,\"../../plots/template_attributes\":642,\"../pie/attributes\":910}],793:[function(t,e,r){\"use strict\";var n=t(\"../../plots/plots\");r.name=\"funnelarea\",r.plot=function(t,e,i,a){n.plotBasePlot(r.name,t,e,i,a)},r.clean=function(t,e,i,a){n.cleanBasePlot(r.name,t,e,i,a)}},{\"../../plots/plots\":628}],794:[function(t,e,r){\"use strict\";var n=t(\"../pie/calc\");e.exports={calc:function(t,e){return n.calc(t,e)},crossTraceCalc:function(t){n.crossTraceCalc(t,{type:\"funnelarea\"})}}},{\"../pie/calc\":912}],795:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\"),a=t(\"../../plots/domain\").defaults,o=t(\"../bar/defaults\").handleText,s=t(\"../pie/defaults\").handleLabelsAndValues;e.exports=function(t,e,r,l){function c(r,a){return n.coerce(t,e,i,r,a)}var u=c(\"labels\"),f=c(\"values\"),h=s(u,f),p=h.len;if(e._hasLabels=h.hasLabels,e._hasValues=h.hasValues,!e._hasLabels&amp;&amp;e._hasValues&amp;&amp;(c(\"label0\"),c(\"dlabel\")),p){e._length=p,c(\"marker.line.width\")&amp;&amp;c(\"marker.line.color\",l.paper_bgcolor),c(\"marker.colors\"),c(\"scalegroup\");var d,m=c(\"text\"),g=c(\"texttemplate\");if(g||(d=c(\"textinfo\",Array.isArray(m)?\"text+percent\":\"percent\")),c(\"hovertext\"),c(\"hovertemplate\"),g||d&amp;&amp;\"none\"!==d){var v=c(\"textposition\");o(t,e,l,c,v,{moduleHasSelected:!1,moduleHasUnselected:!1,moduleHasConstrain:!1,moduleHasCliponaxis:!1,moduleHasTextangle:!1,moduleHasInsideanchor:!1})}a(e,l,c),c(\"title.text\")&amp;&amp;(c(\"title.position\"),n.coerceFont(c,\"title.font\",l.font)),c(\"aspectratio\"),c(\"baseratio\")}else e.visible=!1}},{\"../../lib\":515,\"../../plots/domain\":593,\"../bar/defaults\":661,\"../pie/defaults\":913,\"./attributes\":792}],796:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"funnelarea\",basePlotModule:t(\"./base_plot\"),categories:[\"pie-like\",\"funnelarea\",\"showLegend\"],attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\"),supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\").calc,crossTraceCalc:t(\"./calc\").crossTraceCalc,plot:t(\"./plot\"),style:t(\"./style\"),styleOne:t(\"../pie/style_one\"),meta:{}}},{\"../pie/style_one\":921,\"./attributes\":792,\"./base_plot\":793,\"./calc\":794,\"./defaults\":795,\"./layout_attributes\":797,\"./layout_defaults\":798,\"./plot\":799,\"./style\":800}],797:[function(t,e,r){\"use strict\";var n=t(\"../pie/layout_attributes\").hiddenlabels;e.exports={hiddenlabels:n,funnelareacolorway:{valType:\"colorlist\",editType:\"calc\"},extendfunnelareacolors:{valType:\"boolean\",dflt:!0,editType:\"calc\"}}},{\"../pie/layout_attributes\":917}],798:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e){function r(r,a){return n.coerce(t,e,i,r,a)}r(\"hiddenlabels\"),r(\"funnelareacolorway\",e.colorway),r(\"extendfunnelareacolors\")}},{\"../../lib\":515,\"./layout_attributes\":797}],799:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/drawing\"),a=t(\"../../lib\"),o=a.strScale,s=a.strTranslate,l=t(\"../../lib/svg_text_utils\"),c=t(\"../bar/plot\").toMoveInsideBar,u=t(\"../bar/uniform_text\"),f=u.recordMinTextSize,h=u.clearMinTextSize,p=t(\"../pie/helpers\"),d=t(\"../pie/plot\"),m=d.attachFxHandlers,g=d.determineInsideTextFont,v=d.layoutAreas,y=d.prerenderTitles,x=d.positionTitleOutside,b=d.formatSliceLabel;function _(t,e){return\"l\"+(e[0]-t[0])+\",\"+(e[1]-t[1])}e.exports=function(t,e){var r=t._context.staticPlot,u=t._fullLayout;h(\"funnelarea\",u),y(e,t),v(e,u._size),a.makeTraceGroups(u._funnelarealayer,e,\"trace\").each((function(e){var h=n.select(this),d=e[0],v=d.trace;!function(t){if(!t.length)return;var e=t[0],r=e.trace,n=r.aspectratio,i=r.baseratio;i&gt;.999&amp;&amp;(i=.999);var a,o=Math.pow(i,2),s=e.vTotal,l=s,c=s*o/(1-o)/s;function u(){var t,e={x:t=Math.sqrt(c),y:-t};return[e.x,e.y]}var f,h,p=[];for(p.push(u()),f=t.length-1;f&gt;-1;f--)if(!(h=t[f]).hidden){var d=h.v/l;c+=d,p.push(u())}var m=1/0,g=-1/0;for(f=0;f-1;f--)if(!(h=t[f]).hidden){var A=p[k+=1][0],M=p[k][1];h.TL=[-A,M],h.TR=[A,M],h.BL=w,h.BR=T,h.pxmid=(S=h.TR,E=h.BR,[.5*(S[0]+E[0]),.5*(S[1]+E[1])]),w=h.TL,T=h.TR}var S,E}(e),h.each((function(){var h=n.select(this).selectAll(\"g.slice\").data(e);h.enter().append(\"g\").classed(\"slice\",!0),h.exit().remove(),h.each((function(o,s){if(o.hidden)n.select(this).selectAll(\"path,g\").remove();else{o.pointNumber=o.i,o.curveNumber=v.index;var h=d.cx,y=d.cy,x=n.select(this),w=x.selectAll(\"path.surface\").data([o]);w.enter().append(\"path\").classed(\"surface\",!0).style({\"pointer-events\":r?\"none\":\"all\"}),x.call(m,t,e);var T=\"M\"+(h+o.TR[0])+\",\"+(y+o.TR[1])+_(o.TR,o.BR)+_(o.BR,o.BL)+_(o.BL,o.TL)+\"Z\";w.attr(\"d\",T),b(t,o,d);var k=p.castOption(v.textposition,o.pts),A=x.selectAll(\"g.slicetext\").data(o.text&amp;&amp;\"none\"!==k?[0]:[]);A.enter().append(\"g\").classed(\"slicetext\",!0),A.exit().remove(),A.each((function(){var r=a.ensureSingle(n.select(this),\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),p=a.ensureUniformFontSize(t,g(v,o,u.font));r.text(o.text).attr({class:\"slicetext\",transform:\"\",\"text-anchor\":\"middle\"}).call(i.font,p).call(l.convertToTspans,t);var d,m,x,b=i.bBox(r.node()),_=Math.min(o.BL[1],o.BR[1])+y,w=Math.max(o.TL[1],o.TR[1])+y;m=Math.max(o.TL[0],o.BL[0])+h,x=Math.min(o.TR[0],o.BR[0])+h,(d=c(m,x,_,w,b,{isHorizontal:!0,constrained:!0,angle:0,anchor:\"middle\"})).fontSize=p.size,f(v.type,d,u),e[s].transform=d,a.setTransormAndDisplay(r,d)}))}}));var y=n.select(this).selectAll(\"g.titletext\").data(v.title.text?[0]:[]);y.enter().append(\"g\").classed(\"titletext\",!0),y.exit().remove(),y.each((function(){var e=a.ensureSingle(n.select(this),\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),r=v.title.text;v._meta&amp;&amp;(r=a.templateString(r,v._meta)),e.text(r).attr({class:\"titletext\",transform:\"\",\"text-anchor\":\"middle\"}).call(i.font,v.title.font).call(l.convertToTspans,t);var c=x(d,u._size);e.attr(\"transform\",s(c.x,c.y)+o(Math.min(1,c.scale))+s(c.tx,c.ty))}))}))}))}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../bar/plot\":668,\"../bar/uniform_text\":673,\"../pie/helpers\":915,\"../pie/plot\":919,\"@plotly/d3\":58}],800:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../pie/style_one\"),a=t(\"../bar/uniform_text\").resizeText;e.exports=function(t){var e=t._fullLayout._funnelarealayer.selectAll(\".trace\");a(t,e,\"funnelarea\"),e.each((function(t){var e=t[0].trace,r=n.select(this);r.style({opacity:e.opacity}),r.selectAll(\"path.surface\").each((function(t){n.select(this).call(i,t,e)}))}))}},{\"../bar/uniform_text\":673,\"../pie/style_one\":921,\"@plotly/d3\":58}],801:[function(t,e,r){\"use strict\";var n=t(\"../scatter/attributes\"),i=t(\"../../plots/attributes\"),a=t(\"../../plots/font_attributes\"),o=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,s=t(\"../../plots/template_attributes\").hovertemplateAttrs,l=t(\"../../plots/template_attributes\").texttemplateAttrs,c=t(\"../../components/colorscale/attributes\"),u=t(\"../../lib/extend\").extendFlat;e.exports=u({z:{valType:\"data_array\",editType:\"calc\"},x:u({},n.x,{impliedEdits:{xtype:\"array\"}}),x0:u({},n.x0,{impliedEdits:{xtype:\"scaled\"}}),dx:u({},n.dx,{impliedEdits:{xtype:\"scaled\"}}),y:u({},n.y,{impliedEdits:{ytype:\"array\"}}),y0:u({},n.y0,{impliedEdits:{ytype:\"scaled\"}}),dy:u({},n.dy,{impliedEdits:{ytype:\"scaled\"}}),xperiod:u({},n.xperiod,{impliedEdits:{xtype:\"scaled\"}}),yperiod:u({},n.yperiod,{impliedEdits:{ytype:\"scaled\"}}),xperiod0:u({},n.xperiod0,{impliedEdits:{xtype:\"scaled\"}}),yperiod0:u({},n.yperiod0,{impliedEdits:{ytype:\"scaled\"}}),xperiodalignment:u({},n.xperiodalignment,{impliedEdits:{xtype:\"scaled\"}}),yperiodalignment:u({},n.yperiodalignment,{impliedEdits:{ytype:\"scaled\"}}),text:{valType:\"data_array\",editType:\"calc\"},hovertext:{valType:\"data_array\",editType:\"calc\"},transpose:{valType:\"boolean\",dflt:!1,editType:\"calc\"},xtype:{valType:\"enumerated\",values:[\"array\",\"scaled\"],editType:\"calc+clearAxisTypes\"},ytype:{valType:\"enumerated\",values:[\"array\",\"scaled\"],editType:\"calc+clearAxisTypes\"},zsmooth:{valType:\"enumerated\",values:[\"fast\",\"best\",!1],dflt:!1,editType:\"calc\"},hoverongaps:{valType:\"boolean\",dflt:!0,editType:\"none\"},connectgaps:{valType:\"boolean\",editType:\"calc\"},xgap:{valType:\"number\",dflt:0,min:0,editType:\"plot\"},ygap:{valType:\"number\",dflt:0,min:0,editType:\"plot\"},xhoverformat:o(\"x\"),yhoverformat:o(\"y\"),zhoverformat:o(\"z\",1),hovertemplate:s(),texttemplate:l({arrayOk:!1,editType:\"plot\"},{keys:[\"x\",\"y\",\"z\",\"text\"]}),textfont:a({editType:\"plot\",autoSize:!0,autoColor:!0,colorEditType:\"style\"}),showlegend:u({},i.showlegend,{dflt:!1})},{transforms:void 0},c(\"\",{cLetter:\"z\",autoColorDflt:!1}))},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/font_attributes\":594,\"../../plots/template_attributes\":642,\"../scatter/attributes\":936}],802:[function(t,e,r){\"use strict\";var n=t(\"../../registry\"),i=t(\"../../lib\"),a=t(\"../../plots/cartesian/axes\"),o=t(\"../../plots/cartesian/align_period\"),s=t(\"../histogram2d/calc\"),l=t(\"../../components/colorscale/calc\"),c=t(\"./convert_column_xyz\"),u=t(\"./clean_2d_array\"),f=t(\"./interp2d\"),h=t(\"./find_empties\"),p=t(\"./make_bound_array\"),d=t(\"../../constants/numerical\").BADNUM;function m(t){for(var e=[],r=t.length,n=0;nD){O(\"x scale is not linear\");break}}if(x.length&amp;&amp;\"fast\"===P){var R=(x[x.length-1]-x[0])/(x.length-1),F=Math.abs(R/100);for(k=0;kF){O(\"y scale is not linear\");break}}}var B=i.maxRowLength(T),N=\"scaled\"===e.xtype?\"\":r,j=p(e,N,g,v,B,M),U=\"scaled\"===e.ytype?\"\":x,V=p(e,U,b,_,T.length,S);C||(e._extremes[M._id]=a.findExtremes(M,j),e._extremes[S._id]=a.findExtremes(S,V));var H={x:j,y:V,z:T,text:e._text||e.text,hovertext:e._hovertext||e.hovertext};if(e.xperiodalignment&amp;&amp;y&amp;&amp;(H.orig_x=y),e.yperiodalignment&amp;&amp;w&amp;&amp;(H.orig_y=w),N&amp;&amp;N.length===j.length-1&amp;&amp;(H.xCenter=N),U&amp;&amp;U.length===V.length-1&amp;&amp;(H.yCenter=U),L&amp;&amp;(H.xRanges=A.xRanges,H.yRanges=A.yRanges,H.pts=A.pts),E||l(t,e,{vals:T,cLetter:\"z\"}),E&amp;&amp;e.contours&amp;&amp;\"heatmap\"===e.contours.coloring){var q={type:\"contour\"===e.type?\"heatmap\":\"histogram2d\",xcalendar:e.xcalendar,ycalendar:e.ycalendar};H.xfill=p(q,N,g,v,B,M),H.yfill=p(q,U,b,_,T.length,S)}return[H]}},{\"../../components/colorscale/calc\":375,\"../../constants/numerical\":491,\"../../lib\":515,\"../../plots/cartesian/align_period\":563,\"../../plots/cartesian/axes\":566,\"../../registry\":647,\"../histogram2d/calc\":835,\"./clean_2d_array\":803,\"./convert_column_xyz\":805,\"./find_empties\":807,\"./interp2d\":810,\"./make_bound_array\":812}],803:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../lib\"),a=t(\"../../constants/numerical\").BADNUM;e.exports=function(t,e,r,o){var s,l,c,u,f,h;function p(t){if(n(t))return+t}if(e&amp;&amp;e.transpose){for(s=0,f=0;f=0;o--)(s=((f[[(r=(a=h[o])[0])-1,i=a[1]]]||m)[2]+(f[[r+1,i]]||m)[2]+(f[[r,i-1]]||m)[2]+(f[[r,i+1]]||m)[2])/20)&amp;&amp;(l[a]=[r,i,s],h.splice(o,1),c=!0);if(!c)throw\"findEmpties iterated with no new neighbors\";for(a in l)f[a]=l[a],u.push(l[a])}return u.sort((function(t,e){return e[2]-t[2]}))}},{\"../../lib\":515}],808:[function(t,e,r){\"use strict\";var n=t(\"../../components/fx\"),i=t(\"../../lib\"),a=t(\"../../plots/cartesian/axes\"),o=t(\"../../components/colorscale\").extractOpts;e.exports=function(t,e,r,s,l){l||(l={});var c,u,f,h,p=l.isContour,d=t.cd[0],m=d.trace,g=t.xa,v=t.ya,y=d.x,x=d.y,b=d.z,_=d.xCenter,w=d.yCenter,T=d.zmask,k=m.zhoverformat,A=y,M=x;if(!1!==t.index){try{f=Math.round(t.index[1]),h=Math.round(t.index[0])}catch(e){return void i.error(\"Error hovering on heatmap, pointNumber must be [row,col], found:\",t.index)}if(f&lt;0||f&gt;=b[0].length||h&lt;0||h&gt;b.length)return}else{if(n.inbox(e-y[0],e-y[y.length-1],0)&gt;0||n.inbox(r-x[0],r-x[x.length-1],0)&gt;0)return;if(p){var S;for(A=[2*y[0]-y[1]],S=1;Sm&amp;&amp;(v=Math.max(v,Math.abs(t[a][o]-d)/(g-m))))}return v}e.exports=function(t,e){var r,i=1;for(o(t,e),r=0;r.01;r++)i=o(t,e,a(i));return i&gt;.01&amp;&amp;n.log(\"interp2d didn't converge quickly\",i),t}},{\"../../lib\":515}],811:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e){t(\"texttemplate\");var r=n.extendFlat({},e.font,{color:\"auto\",size:\"auto\"});n.coerceFont(t,\"textfont\",r)}},{\"../../lib\":515}],812:[function(t,e,r){\"use strict\";var n=t(\"../../registry\"),i=t(\"../../lib\").isArrayOrTypedArray;e.exports=function(t,e,r,a,o,s){var l,c,u,f=[],h=n.traceIs(t,\"contour\"),p=n.traceIs(t,\"histogram\"),d=n.traceIs(t,\"gl2d\");if(i(e)&amp;&amp;e.length&gt;1&amp;&amp;!p&amp;&amp;\"category\"!==s.type){var m=e.length;if(!(m&lt;=o))return h?e.slice(0,o):e.slice(0,o+1);if(h||d)f=e.slice(0,o);else if(1===o)f=[e[0]-.5,e[0]+.5];else{for(f=[1.5*e[0]-.5*e[1]],u=1;u0;)_=w.c2p(R[S]),S--;for(_0;)M=T.c2p(F[S]),S--;if(MGt||Gt&gt;T._length))for(E=Ut;EWt||Wt&gt;w._length)){var Zt=u({x:Yt,y:qt},I,t._fullLayout);Zt.x=Yt,Zt.y=qt;var Xt=P.z[S][E];void 0===Xt?(Zt.z=\"\",Zt.zLabel=\"\"):(Zt.z=Xt,Zt.zLabel=s.tickText(Ft,Xt,\"hover\").text);var Jt=P.text&amp;&amp;P.text[S]&amp;&amp;P.text[S][E];void 0!==Jt&amp;&amp;!1!==Jt||(Jt=\"\"),Zt.text=Jt;var Kt=l.texttemplateString(Dt,Zt,t._fullLayout._d3locale,Zt,I._meta||{});if(Kt){var Qt=Kt.split(\"\"),$t=Qt.length,te=0;for(L=0;L&lt;$t;L++)te=Math.max(te,Qt[L].length);Ht.push({l:$t,c:te,t:Kt,x:Wt,y:Gt,z:Xt})}}}}var ee=I.textfont,re=ee.family,ne=ee.size,ie=t._fullLayout.font.size;if(!ne||\"auto\"===ne){var ae=1/0,oe=1/0,se=0,le=0;for(L=0;L0&amp;&amp;(a=!0);for(var l=0;la){var o=a-r[t];return r[t]=a,o}}return 0},max:function(t,e,r,i){var a=i[e];if(n(a)){if(a=Number(a),!n(r[t]))return r[t]=a,a;if(r[t]c?t&gt;o?t&gt;1.1*i?i:t&gt;1.1*a?a:o:t&gt;s?s:t&gt;l?l:c:Math.pow(10,Math.floor(Math.log(t)/Math.LN10))}function p(t,e,r,n,a,s){if(n&amp;&amp;t&gt;o){var l=d(e,a,s),c=d(r,a,s),u=t===i?0:1;return l[u]!==c[u]}return Math.floor(r/t)-Math.floor(e/t)&gt;.1}function d(t,e,r){var n=e.c2d(t,i,r).split(\"-\");return\"\"===n[0]&amp;&amp;(n.unshift(),n[0]=\"-\"+n[0]),n}e.exports=function(t,e,r,n,a){var s,l,c=-1.1*e,h=-.1*e,p=t-h,d=r[0],m=r[1],g=Math.min(f(d+h,d+p,n,a),f(m+h,m+p,n,a)),v=Math.min(f(d+c,d+h,n,a),f(m+c,m+h,n,a));if(g&gt;v&amp;&amp;vo){var y=s===i?1:6,x=s===i?\"M12\":\"M1\";return function(e,r){var o=n.c2d(e,i,a),s=o.indexOf(\"-\",y);s&gt;0&amp;&amp;(o=o.substr(0,s));var c=n.d2c(o,0,a);if(cr.r2l(B)&amp;&amp;(j=o.tickIncrement(j,b.size,!0,p)),z.start=r.l2r(j),F||i.nestedProperty(e,v+\".start\").set(z.start)}var U=b.end,V=r.r2l(O.end),H=void 0!==V;if((b.endFound||H)&amp;&amp;V!==r.r2l(U)){var q=H?V:i.aggNums(Math.max,null,d);z.end=r.l2r(q),H||i.nestedProperty(e,v+\".start\").set(z.end)}var G=\"autobin\"+s;return!1===e._input[G]&amp;&amp;(e._input[v]=i.extendFlat({},e[v]||{}),delete e._input[G],delete e[G]),[z,d]}e.exports={calc:function(t,e){var r,a,p,d,m=[],g=[],v=\"h\"===e.orientation,y=o.getFromId(t,v?e.yaxis:e.xaxis),x=v?\"y\":\"x\",b={x:\"y\",y:\"x\"}[x],_=e[x+\"calendar\"],w=e.cumulative,T=h(t,e,y,x),k=T[0],A=T[1],M=\"string\"==typeof k.size,S=[],E=M?S:k,L=[],C=[],P=[],I=0,O=e.histnorm,z=e.histfunc,D=-1!==O.indexOf(\"density\");w.enabled&amp;&amp;D&amp;&amp;(O=O.replace(/ ?density$/,\"\"),D=!1);var R,F=\"max\"===z||\"min\"===z?null:0,B=l.count,N=c[O],j=!1,U=function(t){return y.r2c(t,0,_)};for(i.isArrayOrTypedArray(e[b])&amp;&amp;\"count\"!==z&amp;&amp;(R=e[b],j=\"avg\"===z,B=l[z]),r=U(k.start),p=U(k.end)+(r-o.tickIncrement(r,k.size,!1,_))/1e6;r=0&amp;&amp;d=0;n--)s(n);else if(\"increasing\"===e){for(n=1;n=0;n--)t[n]+=t[n+1];\"exclude\"===r&amp;&amp;(t.push(0),t.shift())}}(g,w.direction,w.currentbin);var K=Math.min(m.length,g.length),Q=[],$=0,tt=K-1;for(r=0;r=$;r--)if(g[r]){tt=r;break}for(r=$;r&lt;=tt;r++)if(n(m[r])&amp;&amp;n(g[r])){var et={p:m[r],s:g[r],b:0};w.enabled||(et.pts=P[r],Y?et.ph0=et.ph1=P[r].length?A[P[r][0]]:m[r]:(e._computePh=!0,et.ph0=q(S[r]),et.ph1=q(S[r+1],!0))),Q.push(et)}return 1===Q.length&amp;&amp;(Q[0].width1=o.tickIncrement(Q[0].p,k.size,!1,_)-Q[0].p),s(Q,e),i.isArrayOrTypedArray(e.selectedpoints)&amp;&amp;i.tagSelected(Q,e,X),Q},calcAllAutoBins:h}},{\"../../lib\":515,\"../../plots/cartesian/axes\":566,\"../../registry\":647,\"../bar/arrays_to_calcdata\":656,\"./average\":822,\"./bin_functions\":824,\"./bin_label_vals\":825,\"./norm_functions\":833,\"fast-isnumeric\":190}],827:[function(t,e,r){\"use strict\";e.exports={eventDataKeys:[\"binNumber\"]}},{}],828:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../plots/cartesian/axis_ids\"),a=t(\"../../registry\").traceIs,o=t(\"../bar/defaults\").handleGroupingDefaults,s=n.nestedProperty,l=t(\"../../plots/cartesian/constraints\").getAxisGroup,c=[{aStr:{x:\"xbins.start\",y:\"ybins.start\"},name:\"start\"},{aStr:{x:\"xbins.end\",y:\"ybins.end\"},name:\"end\"},{aStr:{x:\"xbins.size\",y:\"ybins.size\"},name:\"size\"},{aStr:{x:\"nbinsx\",y:\"nbinsy\"},name:\"nbins\"}],u=[\"x\",\"y\"];e.exports=function(t,e){var r,f,h,p,d,m,g,v=e._histogramBinOpts={},y=[],x={},b=[];function _(t,e){return n.coerce(r._input,r,r._module.attributes,t,e)}function w(t){return\"v\"===t.orientation?\"x\":\"y\"}function T(t,r,a){var o=t.uid+\"__\"+a;r||(r=o);var s=function(t,r){return i.getFromTrace({_fullLayout:e},t,r).type}(t,a),l=t[a+\"calendar\"]||\"\",c=v[r],u=!0;c&amp;&amp;(s===c.axType&amp;&amp;l===c.calendar?(u=!1,c.traces.push(t),c.dirs.push(a)):(r=o,s!==c.axType&amp;&amp;n.warn([\"Attempted to group the bins of trace\",t.index,\"set on a\",\"type:\"+s,\"axis\",\"with bins on\",\"type:\"+c.axType,\"axis.\"].join(\" \")),l!==c.calendar&amp;&amp;n.warn([\"Attempted to group the bins of trace\",t.index,\"set with a\",l,\"calendar\",\"with bins\",c.calendar?\"on a \"+c.calendar+\" calendar\":\"w/o a set calendar\"].join(\" \")))),u&amp;&amp;(v[r]={traces:[t],dirs:[a],axType:s,calendar:t[a+\"calendar\"]||\"\"}),t[\"_\"+a+\"bingroup\"]=r}for(d=0;dS&amp;&amp;T.splice(S,T.length-S),M.length&gt;S&amp;&amp;M.splice(S,M.length-S);var E=[],L=[],C=[],P=\"string\"==typeof w.size,I=\"string\"==typeof A.size,O=[],z=[],D=P?O:w,R=I?z:A,F=0,B=[],N=[],j=e.histnorm,U=e.histfunc,V=-1!==j.indexOf(\"density\"),H=\"max\"===U||\"min\"===U?null:0,q=a.count,G=o[j],Y=!1,W=[],Z=[],X=\"z\"in e?e.z:\"marker\"in e&amp;&amp;Array.isArray(e.marker.color)?e.marker.color:\"\";X&amp;&amp;\"count\"!==U&amp;&amp;(Y=\"avg\"===U,q=a[U]);var J=w.size,K=x(w.start),Q=x(w.end)+(K-i.tickIncrement(K,J,!1,v))/1e6;for(r=K;r=0&amp;&amp;p=0&amp;&amp;d-1,flipY:L.tiling.flip.indexOf(\"y\")&gt;-1,orientation:L.tiling.orientation,pad:{inner:L.tiling.pad},maxDepth:L._maxDepth}).descendants(),z=1/0,D=-1/0;O.forEach((function(t){var e=t.depth;e&gt;=L._maxDepth?(t.x0=t.x1=(t.x0+t.x1)/2,t.y0=t.y1=(t.y0+t.y1)/2):(z=Math.min(z,e),D=Math.max(D,e))})),p=p.data(O,u.getPtId),L._maxVisibleLayers=isFinite(D)?D-z+1:0,p.enter().append(\"g\").classed(\"slice\",!0),T(p,!1,{},[m,g],x),p.order();var R=null;if(w&amp;&amp;M){var F=u.getPtId(M);p.each((function(t){null===R&amp;&amp;u.getPtId(t)===F&amp;&amp;(R={x0:t.x0,x1:t.x1,y0:t.y0,y1:t.y1})}))}var B=function(){return R||{x0:0,x1:m,y0:0,y1:g}},N=p;return w&amp;&amp;(N=N.transition().each(\"end\",(function(){var e=n.select(this);u.setSliceCursor(e,t,{hideOnRoot:!0,hideOnLeaves:!1,isTransitioning:!1})}))),N.each((function(s){s._x0=v(s.x0),s._x1=v(s.x1),s._y0=y(s.y0),s._y1=y(s.y1),s._hoverX=v(s.x1-L.tiling.pad),s._hoverY=y(I?s.y1-L.tiling.pad/2:s.y0+L.tiling.pad/2);var p=n.select(this),d=i.ensureSingle(p,\"path\",\"surface\",(function(t){t.style(\"pointer-events\",S?\"none\":\"all\")}));w?d.transition().attrTween(\"d\",(function(t){var e=k(t,!1,B(),[m,g],{orientation:L.tiling.orientation,flipX:L.tiling.flip.indexOf(\"x\")&gt;-1,flipY:L.tiling.flip.indexOf(\"y\")&gt;-1});return function(t){return x(e(t))}})):d.attr(\"d\",x),p.call(f,r,t,e,{styleOne:l,eventDataKeys:c.eventDataKeys,transitionTime:c.CLICK_TRANSITION_TIME,transitionEasing:c.CLICK_TRANSITION_EASING}).call(u.setSliceCursor,t,{isTransitioning:t._transitioning}),d.call(l,s,L,{hovered:!1}),s.x0===s.x1||s.y0===s.y1?s._text=\"\":s._text=h(s,r,L,e,E)||\"\";var T=i.ensureSingle(p,\"g\",\"slicetext\"),M=i.ensureSingle(T,\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),O=i.ensureUniformFontSize(t,u.determineTextFont(L,s,E.font));M.text(s._text||\" \").classed(\"slicetext\",!0).attr(\"text-anchor\",P?\"end\":C?\"start\":\"middle\").call(a.font,O).call(o.convertToTspans,t),s.textBB=a.bBox(M.node()),s.transform=b(s,{fontSize:O.size}),s.transform.fontSize=O.size,w?M.transition().attrTween(\"transform\",(function(t){var e=A(t,!1,B(),[m,g]);return function(t){return _(e(t))}})):M.attr(\"transform\",_(s))})),R}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../sunburst/fx\":1063,\"../sunburst/helpers\":1064,\"../sunburst/plot\":1068,\"../treemap/constants\":1087,\"./partition\":851,\"./style\":853,\"@plotly/d3\":58}],848:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"icicle\",basePlotModule:t(\"./base_plot\"),categories:[],animatable:!0,attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\"),supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\").calc,crossTraceCalc:t(\"./calc\").crossTraceCalc,plot:t(\"./plot\"),style:t(\"./style\").style,colorbar:t(\"../scatter/marker_colorbar\"),meta:{}}},{\"../scatter/marker_colorbar\":954,\"./attributes\":843,\"./base_plot\":844,\"./calc\":845,\"./defaults\":846,\"./layout_attributes\":849,\"./layout_defaults\":850,\"./plot\":852,\"./style\":853}],849:[function(t,e,r){\"use strict\";e.exports={iciclecolorway:{valType:\"colorlist\",editType:\"calc\"},extendiciclecolors:{valType:\"boolean\",dflt:!0,editType:\"calc\"}}},{}],850:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e){function r(r,a){return n.coerce(t,e,i,r,a)}r(\"iciclecolorway\",e.colorway),r(\"extendiciclecolors\")}},{\"../../lib\":515,\"./layout_attributes\":849}],851:[function(t,e,r){\"use strict\";var n=t(\"d3-hierarchy\"),i=t(\"../treemap/flip_tree\");e.exports=function(t,e,r){var a=r.flipX,o=r.flipY,s=\"h\"===r.orientation,l=r.maxDepth,c=e[0],u=e[1];l&amp;&amp;(c=(t.height+1)*e[0]/Math.min(t.height+1,l),u=(t.height+1)*e[1]/Math.min(t.height+1,l));var f=n.partition().padding(r.pad.inner).size(s?[e[1],c]:[e[0],u])(t);return(s||a||o)&amp;&amp;i(f,e,{swapXY:s,flipX:a,flipY:o}),f}},{\"../treemap/flip_tree\":1092,\"d3-hierarchy\":115}],852:[function(t,e,r){\"use strict\";var n=t(\"../treemap/draw\"),i=t(\"./draw_descendants\");e.exports=function(t,e,r,a){return n(t,e,r,a,{type:\"icicle\",drawDescendants:i})}},{\"../treemap/draw\":1089,\"./draw_descendants\":847}],853:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/color\"),a=t(\"../../lib\"),o=t(\"../bar/uniform_text\").resizeText;function s(t,e,r){var n=e.data.data,o=!e.children,s=n.i,l=a.castOption(r,s,\"marker.line.color\")||i.defaultLine,c=a.castOption(r,s,\"marker.line.width\")||0;t.style(\"stroke-width\",c).call(i.fill,n.color).call(i.stroke,l).style(\"opacity\",o?r.leaf.opacity:null)}e.exports={style:function(t){var e=t._fullLayout._iciclelayer.selectAll(\".trace\");o(t,e,\"icicle\"),e.each((function(t){var e=n.select(this),r=t[0].trace;e.style(\"opacity\",r.opacity),e.selectAll(\"path.surface\").each((function(t){n.select(this).call(s,t,r)}))}))},styleOne:s}},{\"../../components/color\":367,\"../../lib\":515,\"../bar/uniform_text\":673,\"@plotly/d3\":58}],854:[function(t,e,r){\"use strict\";for(var n=t(\"../../plots/attributes\"),i=t(\"../../plots/template_attributes\").hovertemplateAttrs,a=t(\"../../lib/extend\").extendFlat,o=t(\"./constants\").colormodel,s=[\"rgb\",\"rgba\",\"rgba256\",\"hsl\",\"hsla\"],l=[],c=[],u=0;u&lt;s.length;u++){var f=o[s[u]];l.push(\"For the `\"+s[u]+\"` colormodel, it is [\"+(f.zminDflt||f.min).join(\", \")+\"].\"),c.push(\"For the `\"+s[u]+\"` colormodel, it is [\"+(f.zmaxDflt||f.max).join(\", \")+\"].\")}e.exports=a({source:{valType:\"string\",editType:\"calc\"},z:{valType:\"data_array\",editType:\"calc\"},colormodel:{valType:\"enumerated\",values:s,editType:\"calc\"},zsmooth:{valType:\"enumerated\",values:[\"fast\",!1],dflt:!1,editType:\"plot\"},zmin:{valType:\"info_array\",items:[{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"}],editType:\"calc\"},zmax:{valType:\"info_array\",items:[{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"},{valType:\"number\",editType:\"calc\"}],editType:\"calc\"},x0:{valType:\"any\",dflt:0,editType:\"calc+clearAxisTypes\"},y0:{valType:\"any\",dflt:0,editType:\"calc+clearAxisTypes\"},dx:{valType:\"number\",dflt:1,editType:\"calc\"},dy:{valType:\"number\",dflt:1,editType:\"calc\"},text:{valType:\"data_array\",editType:\"plot\"},hovertext:{valType:\"data_array\",editType:\"plot\"},hoverinfo:a({},n.hoverinfo,{flags:[\"x\",\"y\",\"z\",\"color\",\"name\",\"text\"],dflt:\"x+y+z+text+name\"}),hovertemplate:i({},{keys:[\"z\",\"color\",\"colormodel\"]}),transforms:void 0})},{\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/template_attributes\":642,\"./constants\":856}],855:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./constants\"),a=t(\"fast-isnumeric\"),o=t(\"../../plots/cartesian/axes\"),s=t(\"../../lib\").maxRowLength,l=t(\"./helpers\").getImageSize;function c(t,e,r,i){return function(a){return n.constrain((a-t)*e,r,i)}}function u(t,e){return function(r){return n.constrain(r,t,e)}}e.exports=function(t,e){var r,n;if(e._hasZ)r=e.z.length,n=s(e.z);else if(e._hasSource){var f=l(e.source);r=f.height,n=f.width}var h,p=o.getFromId(t,e.xaxis||\"x\"),d=o.getFromId(t,e.yaxis||\"y\"),m=p.d2c(e.x0)-e.dx/2,g=d.d2c(e.y0)-e.dy/2,v=[m,m+n*e.dx],y=[g,g+r*e.dy];if(p&amp;&amp;\"log\"===p.type)for(h=0;h0||n.inbox(r-o.y0,r-(o.y0+o.h*s.dy),0)&gt;0)){var u,f=Math.floor((e-o.x0)/s.dx),h=Math.floor(Math.abs(r-o.y0)/s.dy);if(s._hasZ?u=o.z[h][f]:s._hasSource&amp;&amp;(u=s._canvas.el.getContext(\"2d\",{willReadFrequently:!0}).getImageData(f,h,1,1).data),u){var p,d=o.hi||s.hoverinfo;if(d){var m=d.split(\"+\");-1!==m.indexOf(\"all\")&amp;&amp;(m=[\"color\"]),-1!==m.indexOf(\"color\")&amp;&amp;(p=!0)}var g,v=a.colormodel[s.colormodel],y=v.colormodel||s.colormodel,x=y.length,b=s._scaler(u),_=v.suffix,w=[];(s.hovertemplate||p)&amp;&amp;(w.push(\"[\"+[b[0]+_[0],b[1]+_[1],b[2]+_[2]].join(\", \")),4===x&amp;&amp;w.push(\", \"+b[3]+_[3]),w.push(\"]\"),w=w.join(\"\"),t.extraText=y.toUpperCase()+\": \"+w),Array.isArray(s.hovertext)&amp;&amp;Array.isArray(s.hovertext[h])?g=s.hovertext[h][f]:Array.isArray(s.text)&amp;&amp;Array.isArray(s.text[h])&amp;&amp;(g=s.text[h][f]);var T=c.c2p(o.y0+(h+.5)*s.dy),k=o.x0+(f+.5)*s.dx,A=o.y0+(h+.5)*s.dy,M=\"[\"+u.slice(0,s.colormodel.length).join(\", \")+\"]\";return[i.extendFlat(t,{index:[h,f],x0:l.c2p(o.x0+f*s.dx),x1:l.c2p(o.x0+(f+1)*s.dx),y0:T,y1:T,color:b,xVal:k,xLabelVal:k,yVal:A,yLabelVal:A,zLabelVal:M,text:g,hovertemplateLabels:{zLabel:M,colorLabel:w,\"color[0]Label\":b[0]+_[0],\"color[1]Label\":b[1]+_[1],\"color[2]Label\":b[2]+_[2],\"color[3]Label\":b[3]+_[3]}})]}}}},{\"../../components/fx\":407,\"../../lib\":515,\"./constants\":856}],861:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"./style\"),hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),moduleType:\"trace\",name:\"image\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"cartesian\",\"svg\",\"2dMap\",\"noSortingByValue\"],animatable:!1,meta:{}}},{\"../../plots/cartesian\":578,\"./attributes\":854,\"./calc\":855,\"./defaults\":857,\"./event_data\":858,\"./hover\":860,\"./plot\":862,\"./style\":863}],862:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=i.strTranslate,o=t(\"../../constants/xmlns_namespaces\"),s=t(\"./constants\"),l=i.isIOS()||i.isSafari()||i.isIE();e.exports=function(t,e,r,c){var u=e.xaxis,f=e.yaxis,h=!(l||t._context._exportedPlot);i.makeTraceGroups(c,r,\"im\").each((function(e){var r=n.select(this),l=e[0],c=l.trace,p=(\"fast\"===c.zsmooth||!1===c.zsmooth&amp;&amp;h)&amp;&amp;!c._hasZ&amp;&amp;c._hasSource&amp;&amp;\"linear\"===u.type&amp;&amp;\"linear\"===f.type;c._realImage=p;var d,m,g,v,y,x,b=l.z,_=l.x0,w=l.y0,T=l.w,k=l.h,A=c.dx,M=c.dy;for(x=0;void 0===d&amp;&amp;x0;)m=u.c2p(_+x*A),x--;for(x=0;void 0===v&amp;&amp;x0;)y=f.c2p(w+x*M),x--;if(mI[0];if(O||z){var D=d+S/2,R=v+E/2;C+=\"transform:\"+a(D+\"px\",R+\"px\")+\"scale(\"+(O?-1:1)+\",\"+(z?-1:1)+\")\"+a(-D+\"px\",-R+\"px\")+\";\"}}L.attr(\"style\",C);var F=new Promise((function(t){if(c._hasZ)t();else if(c._hasSource)if(c._canvas&amp;&amp;c._canvas.el.width===T&amp;&amp;c._canvas.el.height===k&amp;&amp;c._canvas.source===c.source)t();else{var e=document.createElement(\"canvas\");e.width=T,e.height=k;var r=e.getContext(\"2d\",{willReadFrequently:!0});c._image=c._image||new Image;var n=c._image;n.onload=function(){r.drawImage(n,0,0),c._canvas={el:e,source:c.source},t()},n.setAttribute(\"src\",c.source)}})).then((function(){var t;if(c._hasZ)t=B((function(t,e){return b[e][t]})).toDataURL(\"image/png\");else if(c._hasSource)if(p)t=c.source;else{var e=c._canvas.el.getContext(\"2d\",{willReadFrequently:!0}).getImageData(0,0,T,k).data;t=B((function(t,r){var n=4*(r*T+t);return[e[n],e[n+1],e[n+2],e[n+3]]})).toDataURL(\"image/png\")}L.attr({\"xlink:href\":t,height:E,width:S,x:d,y:v})}));t._promises.push(F)}function B(t){var e=document.createElement(\"canvas\");e.width=S,e.height=E;var r,n=e.getContext(\"2d\",{willReadFrequently:!0}),a=function(t){return i.constrain(Math.round(u.c2p(_+t*A)-d),0,S)},o=function(t){return i.constrain(Math.round(f.c2p(w+t*M)-v),0,E)},h=s.colormodel[c.colormodel],p=h.colormodel||c.colormodel,m=h.fmt;for(x=0;x0}function T(t){t.each((function(t){y.stroke(n.select(this),t.line.color)})).each((function(t){y.fill(n.select(this),t.color)})).style(\"stroke-width\",(function(t){return t.line.width}))}function k(t,e,r){var n=t._fullLayout,i=o.extendFlat({type:\"linear\",ticks:\"outside\",range:r,showline:!0},e),a={type:\"linear\",_id:\"x\"+e._id},s={letter:\"x\",font:n.font,noHover:!0,noTickson:!0};function l(t,e){return o.coerce(i,a,v,t,e)}return m(i,a,l,s,n),g(i,a,l,s),a}function A(t,e,r){return[Math.min(e/t.width,r/t.height),t,e+\"x\"+r]}function M(t,e,r,i){var a=document.createElementNS(\"http://www.w3.org/2000/svg\",\"text\"),o=n.select(a);return o.text(t).attr(\"x\",0).attr(\"y\",0).attr(\"text-anchor\",r).attr(\"data-unformatted\",t).call(p.convertToTspans,i).call(f.font,e),f.bBox(o.node())}function S(t,e,r,n,i,a){var s=\"_cache\"+e;t[s]&amp;&amp;t[s].key===i||(t[s]={key:i,value:r});var l=o.aggNums(a,null,[t[s].value,n],2);return t[s].value=l,l}e.exports=function(t,e,r,m){var g,v=t._fullLayout;w(r)&amp;&amp;m&amp;&amp;(g=m()),o.makeTraceGroups(v._indicatorlayer,e,\"trace\").each((function(e){var m,E,L,C,P,I=e[0].trace,O=n.select(this),z=I._hasGauge,D=I._isAngular,R=I._isBullet,F=I.domain,B={w:v._size.w*(F.x[1]-F.x[0]),h:v._size.h*(F.y[1]-F.y[0]),l:v._size.l+v._size.w*F.x[0],r:v._size.r+v._size.w*(1-F.x[1]),t:v._size.t+v._size.h*(1-F.y[1]),b:v._size.b+v._size.h*F.y[0]},N=B.l+B.w/2,j=B.t+B.h/2,U=Math.min(B.w/2,B.h),V=h.innerRadius*U,H=I.align||\"center\";if(E=j,z){if(D&amp;&amp;(m=N,E=j+U/2,L=function(t){return function(t,e){var r=Math.sqrt(t.width/2*(t.width/2)+t.height*t.height);return[e/r,t,e]}(t,.9*V)}),R){var q=h.bulletPadding,G=1-h.bulletNumberDomainSize+q;m=B.l+(G+(1-G)*b[H])*B.w,L=function(t){return A(t,(h.bulletNumberDomainSize-q)*B.w,B.h)}}}else m=B.l+b[H]*B.w,L=function(t){return A(t,B.w,B.h)};!function(t,e,r,i){var c,u,h,m=r[0].trace,g=i.numbersX,v=i.numbersY,T=m.align||\"center\",A=x[T],E=i.transitionOpts,L=i.onComplete,C=o.ensureSingle(e,\"g\",\"numbers\"),P=[];m._hasNumber&amp;&amp;P.push(\"number\");m._hasDelta&amp;&amp;(P.push(\"delta\"),\"left\"===m.delta.position&amp;&amp;P.reverse());var I=C.selectAll(\"text\").data(P);function O(e,r,n,i){if(!e.match(\"s\")||n&gt;=0==i&gt;=0||r(n).slice(-1).match(_)||r(i).slice(-1).match(_))return r;var a=e.slice().replace(\"s\",\"f\").replace(/\\d+/,(function(t){return parseInt(t)-1})),o=k(t,{tickformat:a});return function(t){return Math.abs(t)&lt;1?d.tickText(o,t).text:r(t)}}I.enter().append(\"text\"),I.attr(\"text-anchor\",(function(){return A})).attr(\"class\",(function(t){return t})).attr(\"x\",null).attr(\"y\",null).attr(\"dx\",null).attr(\"dy\",null),I.exit().remove();var z,D=m.mode+m.align;m._hasDelta&amp;&amp;(z=function(){var e=k(t,{tickformat:m.delta.valueformat},m._range);e.setScale(),d.prepTicks(e);var i=function(t){return d.tickText(e,t).text},o=m.delta.suffix,s=m.delta.prefix,l=function(t){return m.delta.relative?t.relativeDelta:t.delta},c=function(t,e){return 0===t||\"number\"!=typeof t||isNaN(t)?\"-\":(t&gt;0?m.delta.increasing.symbol:m.delta.decreasing.symbol)+s+e(t)+o},h=function(t){return t.delta&gt;=0?m.delta.increasing.color:m.delta.decreasing.color};void 0===m._deltaLastValue&amp;&amp;(m._deltaLastValue=l(r[0]));var g=C.select(\"text.delta\");function v(){g.text(c(l(r[0]),i)).call(y.fill,h(r[0])).call(p.convertToTspans,t)}return g.call(f.font,m.delta.font).call(y.fill,h({delta:m._deltaLastValue})),w(E)?g.transition().duration(E.duration).ease(E.easing).tween(\"text\",(function(){var t=n.select(this),e=l(r[0]),o=m._deltaLastValue,s=O(m.delta.valueformat,i,o,e),u=a(o,e);return m._deltaLastValue=e,function(e){t.text(c(u(e),s)),t.call(y.fill,h({delta:u(e)}))}})).each(\"end\",(function(){v(),L&amp;&amp;L()})).each(\"interrupt\",(function(){v(),L&amp;&amp;L()})):v(),u=M(c(l(r[0]),i),m.delta.font,A,t),g}(),D+=m.delta.position+m.delta.font.size+m.delta.font.family+m.delta.valueformat,D+=m.delta.increasing.symbol+m.delta.decreasing.symbol,h=u);m._hasNumber&amp;&amp;(!function(){var e=k(t,{tickformat:m.number.valueformat},m._range);e.setScale(),d.prepTicks(e);var i=function(t){return d.tickText(e,t).text},o=m.number.suffix,s=m.number.prefix,l=C.select(\"text.number\");function u(){var e=\"number\"==typeof r[0].y?s+i(r[0].y)+o:\"-\";l.text(e).call(f.font,m.number.font).call(p.convertToTspans,t)}w(E)?l.transition().duration(E.duration).ease(E.easing).each(\"end\",(function(){u(),L&amp;&amp;L()})).each(\"interrupt\",(function(){u(),L&amp;&amp;L()})).attrTween(\"text\",(function(){var t=n.select(this),e=a(r[0].lastY,r[0].y);m._lastValue=r[0].y;var l=O(m.number.valueformat,i,r[0].lastY,r[0].y);return function(r){t.text(s+l(e(r))+o)}})):u(),c=M(s+i(r[0].y)+o,m.number.font,A,t)}(),D+=m.number.font.size+m.number.font.family+m.number.valueformat+m.number.suffix+m.number.prefix,h=c);if(m._hasDelta&amp;&amp;m._hasNumber){var R,F,B=[(c.left+c.right)/2,(c.top+c.bottom)/2],N=[(u.left+u.right)/2,(u.top+u.bottom)/2],j=.75*m.delta.font.size;\"left\"===m.delta.position&amp;&amp;(R=S(m,\"deltaPos\",0,-1*(c.width*b[m.align]+u.width*(1-b[m.align])+j),D,Math.min),F=B[1]-N[1],h={width:c.width+u.width+j,height:Math.max(c.height,u.height),left:u.left+R,right:c.right,top:Math.min(c.top,u.top+F),bottom:Math.max(c.bottom,u.bottom+F)}),\"right\"===m.delta.position&amp;&amp;(R=S(m,\"deltaPos\",0,c.width*(1-b[m.align])+u.width*b[m.align]+j,D,Math.max),F=B[1]-N[1],h={width:c.width+u.width+j,height:Math.max(c.height,u.height),left:c.left,right:u.right+R,top:Math.min(c.top,u.top+F),bottom:Math.max(c.bottom,u.bottom+F)}),\"bottom\"===m.delta.position&amp;&amp;(R=null,F=u.height,h={width:Math.max(c.width,u.width),height:c.height+u.height,left:Math.min(c.left,u.left),right:Math.max(c.right,u.right),top:c.bottom-c.height,bottom:c.bottom+u.height}),\"top\"===m.delta.position&amp;&amp;(R=null,F=c.top,h={width:Math.max(c.width,u.width),height:c.height+u.height,left:Math.min(c.left,u.left),right:Math.max(c.right,u.right),top:c.bottom-c.height-u.height,bottom:c.bottom}),z.attr({dx:R,dy:F})}(m._hasNumber||m._hasDelta)&amp;&amp;C.attr(\"transform\",(function(){var t=i.numbersScaler(h);D+=t[2];var e,r=S(m,\"numbersScale\",1,t[0],D,Math.min);m._scaleNumbers||(r=1),e=m._isAngular?v-r*h.bottom:v-r*(h.top+h.bottom)/2,m._numbersTop=r*h.top+e;var n=h[T];\"center\"===T&amp;&amp;(n=(h.left+h.right)/2);var a=g-r*n;return a=S(m,\"numbersTranslate\",0,a,D,Math.max),l(a,e)+s(r)}))}(t,O,e,{numbersX:m,numbersY:E,numbersScaler:L,transitionOpts:r,onComplete:g}),z&amp;&amp;(C={range:I.gauge.axis.range,color:I.gauge.bgcolor,line:{color:I.gauge.bordercolor,width:0},thickness:1},P={range:I.gauge.axis.range,color:\"rgba(0, 0, 0, 0)\",line:{color:I.gauge.bordercolor,width:I.gauge.borderwidth},thickness:1});var Y=O.selectAll(\"g.angular\").data(D?e:[]);Y.exit().remove();var W=O.selectAll(\"g.angularaxis\").data(D?e:[]);W.exit().remove(),D&amp;&amp;function(t,e,r,a){var o,s,f,h,p=r[0].trace,m=a.size,g=a.radius,v=a.innerRadius,y=a.gaugeBg,x=a.gaugeOutline,b=[m.l+m.w/2,m.t+m.h/2+g/2],_=a.gauge,A=a.layer,M=a.transitionOpts,S=a.onComplete,E=Math.PI/2;function L(t){var e=p.gauge.axis.range[0],r=(t-e)/(p.gauge.axis.range[1]-e)*Math.PI-E;return r&lt;-E?-E:r&gt;E?E:r}function C(t){return n.svg.arc().innerRadius((v+g)/2-t/2*(g-v)).outerRadius((v+g)/2+t/2*(g-v)).startAngle(-E)}function P(t){t.attr(\"d\",(function(t){return C(t.thickness).startAngle(L(t.range[0])).endAngle(L(t.range[1]))()}))}_.enter().append(\"g\").classed(\"angular\",!0),_.attr(\"transform\",l(b[0],b[1])),A.enter().append(\"g\").classed(\"angularaxis\",!0).classed(\"crisp\",!0),A.selectAll(\"g.xangularaxistick,path,text\").remove(),(o=k(t,p.gauge.axis)).type=\"linear\",o.range=p.gauge.axis.range,o._id=\"xangularaxis\",o.ticklabeloverflow=\"allow\",o.setScale();var I=function(t){return(o.range[0]-t.x)/(o.range[1]-o.range[0])*Math.PI+Math.PI},O={},z=d.makeLabelFns(o,0).labelStandoff;O.xFn=function(t){var e=I(t);return Math.cos(e)*z},O.yFn=function(t){var e=I(t),r=Math.sin(e)&gt;0?.2:1;return-Math.sin(e)*(z+t.fontSize*r)+Math.abs(Math.cos(e))*(t.fontSize*u)},O.anchorFn=function(t){var e=I(t),r=Math.cos(e);return Math.abs(r)&lt;.1?\"middle\":r&gt;0?\"start\":\"end\"},O.heightFn=function(t,e,r){var n=I(t);return-.5*(1+Math.sin(n))*r};var D=function(t){return l(b[0]+g*Math.cos(t),b[1]-g*Math.sin(t))};f=function(t){return D(I(t))};if(s=d.calcTicks(o),h=d.getTickSigns(o)[2],o.visible){h=\"inside\"===o.ticks?-1:1;var R=(o.linewidth||1)/2;d.drawTicks(t,o,{vals:s,layer:A,path:\"M\"+h*R+\",0h\"+h*o.ticklen,transFn:function(t){var e=I(t);return D(e)+\"rotate(\"+-c(e)+\")\"}}),d.drawLabels(t,o,{vals:s,layer:A,transFn:f,labelFns:O})}var F=[y].concat(p.gauge.steps),B=_.selectAll(\"g.bg-arc\").data(F);B.enter().append(\"g\").classed(\"bg-arc\",!0).append(\"path\"),B.select(\"path\").call(P).call(T),B.exit().remove();var N=C(p.gauge.bar.thickness),j=_.selectAll(\"g.value-arc\").data([p.gauge.bar]);j.enter().append(\"g\").classed(\"value-arc\",!0).append(\"path\");var U=j.select(\"path\");w(M)?(U.transition().duration(M.duration).ease(M.easing).each(\"end\",(function(){S&amp;&amp;S()})).each(\"interrupt\",(function(){S&amp;&amp;S()})).attrTween(\"d\",(V=N,H=L(r[0].lastY),q=L(r[0].y),function(){var t=i(H,q);return function(e){return V.endAngle(t(e))()}})),p._lastValue=r[0].y):U.attr(\"d\",\"number\"==typeof r[0].y?N.endAngle(L(r[0].y)):\"M0,0Z\");var V,H,q;U.call(T),j.exit().remove(),F=[];var G=p.gauge.threshold.value;(G||0===G)&amp;&amp;F.push({range:[G,G],color:p.gauge.threshold.color,line:{color:p.gauge.threshold.line.color,width:p.gauge.threshold.line.width},thickness:p.gauge.threshold.thickness});var Y=_.selectAll(\"g.threshold-arc\").data(F);Y.enter().append(\"g\").classed(\"threshold-arc\",!0).append(\"path\"),Y.select(\"path\").call(P).call(T),Y.exit().remove();var W=_.selectAll(\"g.gauge-outline\").data([x]);W.enter().append(\"g\").classed(\"gauge-outline\",!0).append(\"path\"),W.select(\"path\").call(P).call(T),W.exit().remove()}(t,0,e,{radius:U,innerRadius:V,gauge:Y,layer:W,size:B,gaugeBg:C,gaugeOutline:P,transitionOpts:r,onComplete:g});var Z=O.selectAll(\"g.bullet\").data(R?e:[]);Z.exit().remove();var X=O.selectAll(\"g.bulletaxis\").data(R?e:[]);X.exit().remove(),R&amp;&amp;function(t,e,r,n){var i,a,o,s,c,u=r[0].trace,f=n.gauge,p=n.layer,m=n.gaugeBg,g=n.gaugeOutline,v=n.size,x=u.domain,b=n.transitionOpts,_=n.onComplete;f.enter().append(\"g\").classed(\"bullet\",!0),f.attr(\"transform\",l(v.l,v.t)),p.enter().append(\"g\").classed(\"bulletaxis\",!0).classed(\"crisp\",!0),p.selectAll(\"g.xbulletaxistick,path,text\").remove();var A=v.h,M=u.gauge.bar.thickness*A,S=x.x[0],E=x.x[0]+(x.x[1]-x.x[0])*(u._hasNumber||u._hasDelta?1-h.bulletNumberDomainSize:1);(i=k(t,u.gauge.axis))._id=\"xbulletaxis\",i.domain=[S,E],i.setScale(),a=d.calcTicks(i),o=d.makeTransTickFn(i),s=d.getTickSigns(i)[2],c=v.t+v.h,i.visible&amp;&amp;(d.drawTicks(t,i,{vals:\"inside\"===i.ticks?d.clipEnds(i,a):a,layer:p,path:d.makeTickPath(i,c,s),transFn:o}),d.drawLabels(t,i,{vals:a,layer:p,transFn:o,labelFns:d.makeLabelFns(i,c)}));function L(t){t.attr(\"width\",(function(t){return Math.max(0,i.c2p(t.range[1])-i.c2p(t.range[0]))})).attr(\"x\",(function(t){return i.c2p(t.range[0])})).attr(\"y\",(function(t){return.5*(1-t.thickness)*A})).attr(\"height\",(function(t){return t.thickness*A}))}var C=[m].concat(u.gauge.steps),P=f.selectAll(\"g.bg-bullet\").data(C);P.enter().append(\"g\").classed(\"bg-bullet\",!0).append(\"rect\"),P.select(\"rect\").call(L).call(T),P.exit().remove();var I=f.selectAll(\"g.value-bullet\").data([u.gauge.bar]);I.enter().append(\"g\").classed(\"value-bullet\",!0).append(\"rect\"),I.select(\"rect\").attr(\"height\",M).attr(\"y\",(A-M)/2).call(T),w(b)?I.select(\"rect\").transition().duration(b.duration).ease(b.easing).each(\"end\",(function(){_&amp;&amp;_()})).each(\"interrupt\",(function(){_&amp;&amp;_()})).attr(\"width\",Math.max(0,i.c2p(Math.min(u.gauge.axis.range[1],r[0].y)))):I.select(\"rect\").attr(\"width\",\"number\"==typeof r[0].y?Math.max(0,i.c2p(Math.min(u.gauge.axis.range[1],r[0].y))):0);I.exit().remove();var O=r.filter((function(){return u.gauge.threshold.value||0===u.gauge.threshold.value})),z=f.selectAll(\"g.threshold-bullet\").data(O);z.enter().append(\"g\").classed(\"threshold-bullet\",!0).append(\"line\"),z.select(\"line\").attr(\"x1\",i.c2p(u.gauge.threshold.value)).attr(\"x2\",i.c2p(u.gauge.threshold.value)).attr(\"y1\",(1-u.gauge.threshold.thickness)/2*A).attr(\"y2\",(1-(1-u.gauge.threshold.thickness)/2)*A).call(y.stroke,u.gauge.threshold.line.color).style(\"stroke-width\",u.gauge.threshold.line.width),z.exit().remove();var D=f.selectAll(\"g.gauge-outline\").data([g]);D.enter().append(\"g\").classed(\"gauge-outline\",!0).append(\"rect\"),D.select(\"rect\").call(L).call(T),D.exit().remove()}(t,0,e,{gauge:Z,layer:X,size:B,gaugeBg:C,gaugeOutline:P,transitionOpts:r,onComplete:g});var J=O.selectAll(\"text.title\").data(e);J.exit().remove(),J.enter().append(\"text\").classed(\"title\",!0),J.attr(\"text-anchor\",(function(){return R?x.right:x[I.title.align]})).text(I.title.text).call(f.font,I.title.font).call(p.convertToTspans,t),J.attr(\"transform\",(function(){var t,e=B.l+B.w*b[I.title.align],r=h.titlePadding,n=f.bBox(J.node());if(z){if(D)if(I.gauge.axis.visible)t=f.bBox(W.node()).top-r-n.bottom;else t=B.t+B.h/2-U/2-n.bottom-r;R&amp;&amp;(t=E-(n.top+n.bottom)/2,e=B.l-h.bulletPadding*B.w)}else t=I._numbersTop-r-n.bottom;return l(e,t)}))}))}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../constants/alignment\":483,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../../plots/cartesian/axes\":566,\"../../plots/cartesian/axis_defaults\":568,\"../../plots/cartesian/layout_attributes\":579,\"../../plots/cartesian/position_defaults\":582,\"./constants\":867,\"@plotly/d3\":58,\"d3-interpolate\":116}],871:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/attributes\"),i=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../mesh3d/attributes\"),s=t(\"../../plots/attributes\"),l=t(\"../../lib/extend\").extendFlat,c=t(\"../../plot_api/edit_types\").overrideAll;var u=e.exports=c(l({x:{valType:\"data_array\"},y:{valType:\"data_array\"},z:{valType:\"data_array\"},value:{valType:\"data_array\"},isomin:{valType:\"number\"},isomax:{valType:\"number\"},surface:{show:{valType:\"boolean\",dflt:!0},count:{valType:\"integer\",dflt:2,min:1},fill:{valType:\"number\",min:0,max:1,dflt:1},pattern:{valType:\"flaglist\",flags:[\"A\",\"B\",\"C\",\"D\",\"E\"],extras:[\"all\",\"odd\",\"even\"],dflt:\"all\"}},spaceframe:{show:{valType:\"boolean\",dflt:!1},fill:{valType:\"number\",min:0,max:1,dflt:.15}},slices:{x:{show:{valType:\"boolean\",dflt:!1},locations:{valType:\"data_array\",dflt:[]},fill:{valType:\"number\",min:0,max:1,dflt:1}},y:{show:{valType:\"boolean\",dflt:!1},locations:{valType:\"data_array\",dflt:[]},fill:{valType:\"number\",min:0,max:1,dflt:1}},z:{show:{valType:\"boolean\",dflt:!1},locations:{valType:\"data_array\",dflt:[]},fill:{valType:\"number\",min:0,max:1,dflt:1}}},caps:{x:{show:{valType:\"boolean\",dflt:!0},fill:{valType:\"number\",min:0,max:1,dflt:1}},y:{show:{valType:\"boolean\",dflt:!0},fill:{valType:\"number\",min:0,max:1,dflt:1}},z:{show:{valType:\"boolean\",dflt:!0},fill:{valType:\"number\",min:0,max:1,dflt:1}}},text:{valType:\"string\",dflt:\"\",arrayOk:!0},hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0},hovertemplate:a(),xhoverformat:i(\"x\"),yhoverformat:i(\"y\"),zhoverformat:i(\"z\"),valuehoverformat:i(\"value\",1),showlegend:l({},s.showlegend,{dflt:!1})},n(\"\",{colorAttr:\"`value`\",showScaleDflt:!0,editTypeOverride:\"calc\"}),{opacity:o.opacity,lightposition:o.lightposition,lighting:o.lighting,flatshading:o.flatshading,contour:o.contour,hoverinfo:l({},s.hoverinfo)}),\"calc\",\"nested\");u.flatshading.dflt=!0,u.lighting.facenormalsepsilon.dflt=0,u.x.editType=u.y.editType=u.z.editType=u.value.editType=\"calc+clearAxisTypes\",u.transforms=void 0},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plot_api/edit_types\":548,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642,\"../mesh3d/attributes\":876}],872:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/calc\"),i=t(\"../streamtube/calc\").processGrid,a=t(\"../streamtube/calc\").filter;e.exports=function(t,e){e._len=Math.min(e.x.length,e.y.length,e.z.length,e.value.length),e._x=a(e.x,e._len),e._y=a(e.y,e._len),e._z=a(e.z,e._len),e._value=a(e.value,e._len);var r=i(e);e._gridFill=r.fill,e._Xs=r.Xs,e._Ys=r.Ys,e._Zs=r.Zs,e._len=r.len;for(var o=1/0,s=-1/0,l=0;l0;r--){var n=Math.min(e[r],e[r-1]),i=Math.max(e[r],e[r-1]);if(i&gt;n&amp;&amp;n-1}function R(t,e){return null===t?e:t}function F(e,r,n){C();var i,a,o,l=[r],c=[n];if(s&gt;=1)l=[r],c=[n];else if(s&gt;0){var u=function(t,e){var r=t[0],n=t[1],i=t[2],a=function(t,e,r){for(var n=[],i=0;i-1?n[p]:L(d,m,v);h[p]=x&gt;-1?x:I(d,m,v,R(e,y))}i=h[0],a=h[1],o=h[2],t._meshI.push(i),t._meshJ.push(a),t._meshK.push(o),++g}}function B(t,e,r,n){var i=t[3];in&amp;&amp;(i=n);for(var a=(t[3]-i)/(t[3]-e[3]+1e-9),o=[],s=0;s&lt;4;s++)o[s]=(1-a)*t[s]+a*e[s];return o}function N(t,e,r){return t&gt;=e&amp;&amp;t&lt;=r}function j(t){var e=.001*(E-S);return t&gt;=S-e&amp;&amp;t&lt;=E+e}function U(e){for(var r=[],n=0;n&lt;4;n++){var i=e[n];r.push([t._x[i],t._y[i],t._z[i],t._value[i]])}return r}function V(t,e,r,n,i,a){a||(a=1),r=[-1,-1,-1];var o=!1,s=[N(e[0][3],n,i),N(e[1][3],n,i),N(e[2][3],n,i)];if(!s[0]&amp;&amp;!s[1]&amp;&amp;!s[2])return!1;var l=function(t,e,r){return j(e[0][3])&amp;&amp;j(e[1][3])&amp;&amp;j(e[2][3])?(F(t,e,r),!0):a&lt;3&amp;&amp;V(t,e,r,S,E,++a)};if(s[0]&amp;&amp;s[1]&amp;&amp;s[2])return l(t,e,r)||o;var c=!1;return[[0,1,2],[2,0,1],[1,2,0]].forEach((function(a){if(s[a[0]]&amp;&amp;s[a[1]]&amp;&amp;!s[a[2]]){var u=e[a[0]],f=e[a[1]],h=e[a[2]],p=B(h,u,n,i),d=B(h,f,n,i);o=l(t,[d,p,u],[-1,-1,r[a[0]]])||o,o=l(t,[u,f,d],[r[a[0]],r[a[1]],-1])||o,c=!0}})),c||[[0,1,2],[1,2,0],[2,0,1]].forEach((function(a){if(s[a[0]]&amp;&amp;!s[a[1]]&amp;&amp;!s[a[2]]){var u=e[a[0]],f=e[a[1]],h=e[a[2]],p=B(f,u,n,i),d=B(h,u,n,i);o=l(t,[d,p,u],[-1,-1,r[a[0]]])||o,c=!0}})),o}function H(t,e,r,n){var i=!1,a=U(e),o=[N(a[0][3],r,n),N(a[1][3],r,n),N(a[2][3],r,n),N(a[3][3],r,n)];if(!(o[0]||o[1]||o[2]||o[3]))return i;if(o[0]&amp;&amp;o[1]&amp;&amp;o[2]&amp;&amp;o[3])return m&amp;&amp;(i=function(t,e,r){var n=function(n,i,a){F(t,[e[n],e[i],e[a]],[r[n],r[i],r[a]])};n(0,1,2),n(3,0,1),n(2,3,0),n(1,2,3)}(t,a,e)||i),i;var s=!1;return[[0,1,2,3],[3,0,1,2],[2,3,0,1],[1,2,3,0]].forEach((function(l){if(o[l[0]]&amp;&amp;o[l[1]]&amp;&amp;o[l[2]]&amp;&amp;!o[l[3]]){var c=a[l[0]],u=a[l[1]],f=a[l[2]],h=a[l[3]];if(m)i=F(t,[c,u,f],[e[l[0]],e[l[1]],e[l[2]]])||i;else{var p=B(h,c,r,n),d=B(h,u,r,n),g=B(h,f,r,n);i=F(null,[p,d,g],[-1,-1,-1])||i}s=!0}})),s?i:([[0,1,2,3],[1,2,3,0],[2,3,0,1],[3,0,1,2],[0,2,3,1],[1,3,2,0]].forEach((function(l){if(o[l[0]]&amp;&amp;o[l[1]]&amp;&amp;!o[l[2]]&amp;&amp;!o[l[3]]){var c=a[l[0]],u=a[l[1]],f=a[l[2]],h=a[l[3]],p=B(f,c,r,n),d=B(f,u,r,n),g=B(h,u,r,n),v=B(h,c,r,n);m?(i=F(t,[c,v,p],[e[l[0]],-1,-1])||i,i=F(t,[u,d,g],[e[l[1]],-1,-1])||i):i=function(t,e,r){var n=function(n,i,a){F(t,[e[n],e[i],e[a]],[r[n],r[i],r[a]])};n(0,1,2),n(2,3,0)}(null,[p,d,g,v],[-1,-1,-1,-1])||i,s=!0}})),s||[[0,1,2,3],[1,2,3,0],[2,3,0,1],[3,0,1,2]].forEach((function(l){if(o[l[0]]&amp;&amp;!o[l[1]]&amp;&amp;!o[l[2]]&amp;&amp;!o[l[3]]){var c=a[l[0]],u=a[l[1]],f=a[l[2]],h=a[l[3]],p=B(u,c,r,n),d=B(f,c,r,n),g=B(h,c,r,n);m?(i=F(t,[c,p,d],[e[l[0]],-1,-1])||i,i=F(t,[c,d,g],[e[l[0]],-1,-1])||i,i=F(t,[c,g,p],[e[l[0]],-1,-1])||i):i=F(null,[p,d,g],[-1,-1,-1])||i,s=!0}})),i)}function q(t,e,r,n,i,a,o,s,l,c,u){var f=!1;return d&amp;&amp;(D(t,\"A\")&amp;&amp;(f=H(null,[e,r,n,a],c,u)||f),D(t,\"B\")&amp;&amp;(f=H(null,[r,n,i,l],c,u)||f),D(t,\"C\")&amp;&amp;(f=H(null,[r,a,o,l],c,u)||f),D(t,\"D\")&amp;&amp;(f=H(null,[n,a,s,l],c,u)||f),D(t,\"E\")&amp;&amp;(f=H(null,[r,n,a,l],c,u)||f)),m&amp;&amp;(f=H(t,[r,n,a,l],c,u)||f),f}function G(t,e,r,n,i,a,o,s){return[!0===s[0]||V(t,U([e,r,n]),[e,r,n],a,o),!0===s[1]||V(t,U([n,i,e]),[n,i,e],a,o)]}function Y(t,e,r,n,i,a,o,s,l){return s?G(t,e,r,i,n,a,o,l):G(t,r,i,n,e,a,o,l)}function W(t,e,r,n,i,a,o){var s,l,c,u,f=!1,h=function(){f=V(t,[s,l,c],[-1,-1,-1],i,a)||f,f=V(t,[c,u,s],[-1,-1,-1],i,a)||f},p=o[0],d=o[1],m=o[2];return p&amp;&amp;(s=O(U([k(e,r-0,n-0)])[0],U([k(e-1,r-0,n-0)])[0],p),l=O(U([k(e,r-0,n-1)])[0],U([k(e-1,r-0,n-1)])[0],p),c=O(U([k(e,r-1,n-1)])[0],U([k(e-1,r-1,n-1)])[0],p),u=O(U([k(e,r-1,n-0)])[0],U([k(e-1,r-1,n-0)])[0],p),h()),d&amp;&amp;(s=O(U([k(e-0,r,n-0)])[0],U([k(e-0,r-1,n-0)])[0],d),l=O(U([k(e-0,r,n-1)])[0],U([k(e-0,r-1,n-1)])[0],d),c=O(U([k(e-1,r,n-1)])[0],U([k(e-1,r-1,n-1)])[0],d),u=O(U([k(e-1,r,n-0)])[0],U([k(e-1,r-1,n-0)])[0],d),h()),m&amp;&amp;(s=O(U([k(e-0,r-0,n)])[0],U([k(e-0,r-0,n-1)])[0],m),l=O(U([k(e-0,r-1,n)])[0],U([k(e-0,r-1,n-1)])[0],m),c=O(U([k(e-1,r-1,n)])[0],U([k(e-1,r-1,n-1)])[0],m),u=O(U([k(e-1,r-0,n)])[0],U([k(e-1,r-0,n-1)])[0],m),h()),f}function Z(t,e,r,n,i,a,o,s,l,c,u,f){var h=t;return f?(d&amp;&amp;\"even\"===t&amp;&amp;(h=null),q(h,e,r,n,i,a,o,s,l,c,u)):(d&amp;&amp;\"odd\"===t&amp;&amp;(h=null),q(h,l,s,o,a,i,n,r,e,c,u))}function X(t,e,r,n,i){for(var a=[],o=0,s=0;sMath.abs(d-M)?[A,d]:[d,M];$(e,T[0],T[1])}}var L=[[Math.min(S,M),Math.max(S,M)],[Math.min(A,E),Math.max(A,E)]];[\"x\",\"y\",\"z\"].forEach((function(e){for(var r=[],n=0;n0&amp;&amp;(u.push(p.id),\"x\"===e?f.push([p.distRatio,0,0]):\"y\"===e?f.push([0,p.distRatio,0]):f.push([0,0,p.distRatio]))}else c=nt(1,\"x\"===e?b-1:\"y\"===e?_-1:w-1);u.length&gt;0&amp;&amp;(r[i]=\"x\"===e?tt(null,u,a,o,f,r[i]):\"y\"===e?et(null,u,a,o,f,r[i]):rt(null,u,a,o,f,r[i]),i++),c.length&gt;0&amp;&amp;(r[i]=\"x\"===e?X(null,c,a,o,r[i]):\"y\"===e?J(null,c,a,o,r[i]):K(null,c,a,o,r[i]),i++)}var d=t.caps[e];d.show&amp;&amp;d.fill&amp;&amp;(z(d.fill),r[i]=\"x\"===e?X(null,[0,b-1],a,o,r[i]):\"y\"===e?J(null,[0,_-1],a,o,r[i]):K(null,[0,w-1],a,o,r[i]),i++)}})),0===g&amp;&amp;P(),t._meshX=n,t._meshY=i,t._meshZ=a,t._meshIntensity=o,t._Xs=v,t._Ys=y,t._Zs=x}(),t}e.exports={findNearestOnAxis:l,generateIsoMeshes:h,createIsosurfaceTrace:function(t,e){var r=t.glplot.gl,i=n({gl:r}),a=new c(t,i,e.uid);return i._trace=a,a.update(e),t.glplot.add(i),a}}},{\"../../../stackgl_modules\":1133,\"../../components/colorscale\":379,\"../../lib/gl_format_color\":511,\"../../lib/str2rgbarray\":540,\"../../plots/gl3d/zip3\":618}],874:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../registry\"),a=t(\"./attributes\"),o=t(\"../../components/colorscale/defaults\");function s(t,e,r,n,a){var s=a(\"isomin\"),l=a(\"isomax\");null!=l&amp;&amp;null!=s&amp;&amp;s&gt;l&amp;&amp;(e.isomin=null,e.isomax=null);var c=a(\"x\"),u=a(\"y\"),f=a(\"z\"),h=a(\"value\");c&amp;&amp;c.length&amp;&amp;u&amp;&amp;u.length&amp;&amp;f&amp;&amp;f.length&amp;&amp;h&amp;&amp;h.length?(i.getComponentMethod(\"calendars\",\"handleTraceDefaults\")(t,e,[\"x\",\"y\",\"z\"],n),a(\"valuehoverformat\"),[\"x\",\"y\",\"z\"].forEach((function(t){a(t+\"hoverformat\");var e=\"caps.\"+t;a(e+\".show\")&amp;&amp;a(e+\".fill\");var r=\"slices.\"+t;a(r+\".show\")&amp;&amp;(a(r+\".fill\"),a(r+\".locations\"))})),a(\"spaceframe.show\")&amp;&amp;a(\"spaceframe.fill\"),a(\"surface.show\")&amp;&amp;(a(\"surface.count\"),a(\"surface.fill\"),a(\"surface.pattern\")),a(\"contour.show\")&amp;&amp;(a(\"contour.color\"),a(\"contour.width\")),[\"text\",\"hovertext\",\"hovertemplate\",\"lighting.ambient\",\"lighting.diffuse\",\"lighting.specular\",\"lighting.roughness\",\"lighting.fresnel\",\"lighting.vertexnormalsepsilon\",\"lighting.facenormalsepsilon\",\"lightposition.x\",\"lightposition.y\",\"lightposition.z\",\"flatshading\",\"opacity\"].forEach((function(t){a(t)})),o(t,e,n,a,{prefix:\"\",cLetter:\"c\"}),e._length=null):e.visible=!1}e.exports={supplyDefaults:function(t,e,r,i){s(t,e,r,i,(function(r,i){return n.coerce(t,e,a,r,i)}))},supplyIsoDefaults:s}},{\"../../components/colorscale/defaults\":377,\"../../lib\":515,\"../../registry\":647,\"./attributes\":871}],875:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\").supplyDefaults,calc:t(\"./calc\"),colorbar:{min:\"cmin\",max:\"cmax\"},plot:t(\"./convert\").createIsosurfaceTrace,moduleType:\"trace\",name:\"isosurface\",basePlotModule:t(\"../../plots/gl3d\"),categories:[\"gl3d\",\"showLegend\"],meta:{}}},{\"../../plots/gl3d\":607,\"./attributes\":871,\"./calc\":872,\"./convert\":873,\"./defaults\":874}],876:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/attributes\"),i=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../surface/attributes\"),s=t(\"../../plots/attributes\"),l=t(\"../../lib/extend\").extendFlat;e.exports=l({x:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},y:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},z:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},i:{valType:\"data_array\",editType:\"calc\"},j:{valType:\"data_array\",editType:\"calc\"},k:{valType:\"data_array\",editType:\"calc\"},text:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"calc\"},hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"calc\"},hovertemplate:a({editType:\"calc\"}),xhoverformat:i(\"x\"),yhoverformat:i(\"y\"),zhoverformat:i(\"z\"),delaunayaxis:{valType:\"enumerated\",values:[\"x\",\"y\",\"z\"],dflt:\"z\",editType:\"calc\"},alphahull:{valType:\"number\",dflt:-1,editType:\"calc\"},intensity:{valType:\"data_array\",editType:\"calc\"},intensitymode:{valType:\"enumerated\",values:[\"vertex\",\"cell\"],dflt:\"vertex\",editType:\"calc\"},color:{valType:\"color\",editType:\"calc\"},vertexcolor:{valType:\"data_array\",editType:\"calc\"},facecolor:{valType:\"data_array\",editType:\"calc\"},transforms:void 0},n(\"\",{colorAttr:\"`intensity`\",showScaleDflt:!0,editTypeOverride:\"calc\"}),{opacity:o.opacity,flatshading:{valType:\"boolean\",dflt:!1,editType:\"calc\"},contour:{show:l({},o.contours.x.show,{}),color:o.contours.x.color,width:o.contours.x.width,editType:\"calc\"},lightposition:{x:l({},o.lightposition.x,{dflt:1e5}),y:l({},o.lightposition.y,{dflt:1e5}),z:l({},o.lightposition.z,{dflt:0}),editType:\"calc\"},lighting:l({vertexnormalsepsilon:{valType:\"number\",min:0,max:1,dflt:1e-12,editType:\"calc\"},facenormalsepsilon:{valType:\"number\",min:0,max:1,dflt:1e-6,editType:\"calc\"},editType:\"calc\"},o.lighting),hoverinfo:l({},s.hoverinfo,{editType:\"calc\"}),showlegend:l({},s.showlegend,{dflt:!1})})},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642,\"../surface/attributes\":1070}],877:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/calc\");e.exports=function(t,e){e.intensity&amp;&amp;n(t,e,{vals:e.intensity,containerStr:\"\",cLetter:\"c\"})}},{\"../../components/colorscale/calc\":375}],878:[function(t,e,r){\"use strict\";var n=t(\"../../../stackgl_modules\").gl_mesh3d,i=t(\"../../../stackgl_modules\").delaunay_triangulate,a=t(\"../../../stackgl_modules\").alpha_shape,o=t(\"../../../stackgl_modules\").convex_hull,s=t(\"../../lib/gl_format_color\").parseColorScale,l=t(\"../../lib/str2rgbarray\"),c=t(\"../../components/colorscale\").extractOpts,u=t(\"../../plots/gl3d/zip3\");function f(t,e,r){this.scene=t,this.uid=r,this.mesh=e,this.name=\"\",this.color=\"#fff\",this.data=null,this.showContour=!1}var h=f.prototype;function p(t){for(var e=[],r=t.length,n=0;n=e-.5)return!1;return!0}h.handlePick=function(t){if(t.object===this.mesh){var e=t.index=t.data.index;t.data._cellCenter?t.traceCoordinate=t.data.dataCoordinate:t.traceCoordinate=[this.data.x[e],this.data.y[e],this.data.z[e]];var r=this.data.hovertext||this.data.text;return Array.isArray(r)&amp;&amp;void 0!==r[e]?t.textLabel=r[e]:r&amp;&amp;(t.textLabel=r),!0}},h.update=function(t){var e=this.scene,r=e.fullSceneLayout;this.data=t;var n,f=t.x.length,h=u(d(r.xaxis,t.x,e.dataScale[0],t.xcalendar),d(r.yaxis,t.y,e.dataScale[1],t.ycalendar),d(r.zaxis,t.z,e.dataScale[2],t.zcalendar));if(t.i&amp;&amp;t.j&amp;&amp;t.k){if(t.i.length!==t.j.length||t.j.length!==t.k.length||!g(t.i,f)||!g(t.j,f)||!g(t.k,f))return;n=u(m(t.i),m(t.j),m(t.k))}else n=0===t.alphahull?o(h):t.alphahull&gt;0?a(t.alphahull,h):function(t,e){for(var r=[\"x\",\"y\",\"z\"].indexOf(t),n=[],a=e.length,o=0;ov):g=A&gt;w,v=A;var M=c(w,T,k,A);M.pos=_,M.yc=(w+A)/2,M.i=b,M.dir=g?\"increasing\":\"decreasing\",M.x=M.pos,M.y=[k,T],y&amp;&amp;(M.orig_p=r[b]),d&amp;&amp;(M.tx=e.text[b]),m&amp;&amp;(M.htx=e.hovertext[b]),x.push(M)}else x.push({pos:_,empty:!0})}return e._extremes[l._id]=a.findExtremes(l,n.concat(h,f),{padded:!0}),x.length&amp;&amp;(x[0].t={labels:{open:i(t,\"open:\")+\" \",high:i(t,\"high:\")+\" \",low:i(t,\"low:\")+\" \",close:i(t,\"close:\")+\" \"}}),x}e.exports={calc:function(t,e){var r=a.getFromId(t,e.xaxis),i=a.getFromId(t,e.yaxis),s=function(t,e,r){var i=r._minDiff;if(!i){var a,s=t._fullData,l=[];for(i=1/0,a=0;a\"+c.labels[x]+n.hoverLabelText(s,b,l.yhoverformat):((y=i.extendFlat({},h)).y0=y.y1=_,y.yLabelVal=b,y.yLabel=c.labels[x]+n.hoverLabelText(s,b,l.yhoverformat),y.name=\"\",f.push(y),g[b]=y)}return f}function h(t,e,r,i){var a=t.cd,o=t.ya,l=a[0].trace,f=a[0].t,h=u(t,e,r,i);if(!h)return[];var p=a[h.index],d=h.index=p.i,m=p.dir;function g(t){return f.labels[t]+n.hoverLabelText(o,l[t][d],l.yhoverformat)}var v=p.hi||l.hoverinfo,y=v.split(\"+\"),x=\"all\"===v,b=x||-1!==y.indexOf(\"y\"),_=x||-1!==y.indexOf(\"text\"),w=b?[g(\"open\"),g(\"high\"),g(\"low\"),g(\"close\")+\"  \"+c[m]]:[];return _&amp;&amp;s(p,l,w),h.extraText=w.join(\"\"),h.y0=h.y1=o.c2p(p.yc,!0),[h]}e.exports={hoverPoints:function(t,e,r,n){return t.cd[0].trace.hoverlabel.split?f(t,e,r,n):h(t,e,r,n)},hoverSplit:f,hoverOnPoints:h}},{\"../../components/color\":367,\"../../components/fx\":407,\"../../constants/delta.js\":485,\"../../lib\":515,\"../../plots/cartesian/axes\":566}],885:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"ohlc\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"cartesian\",\"svg\",\"showLegend\"],meta:{},attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"./calc\").calc,plot:t(\"./plot\"),style:t(\"./style\"),hoverPoints:t(\"./hover\").hoverPoints,selectPoints:t(\"./select\")}},{\"../../plots/cartesian\":578,\"./attributes\":881,\"./calc\":882,\"./defaults\":883,\"./hover\":884,\"./plot\":887,\"./select\":888,\"./style\":889}],886:[function(t,e,r){\"use strict\";var n=t(\"../../registry\"),i=t(\"../../lib\");e.exports=function(t,e,r,a){var o=r(\"x\"),s=r(\"open\"),l=r(\"high\"),c=r(\"low\"),u=r(\"close\");if(r(\"hoverlabel.split\"),n.getComponentMethod(\"calendars\",\"handleTraceDefaults\")(t,e,[\"x\"],a),s&amp;&amp;l&amp;&amp;c&amp;&amp;u){var f=Math.min(s.length,l.length,c.length,u.length);return o&amp;&amp;(f=Math.min(f,i.minRowLength(o))),e._length=f,f}}},{\"../../lib\":515,\"../../registry\":647}],887:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\");e.exports=function(t,e,r,a){var o=e.yaxis,s=e.xaxis,l=!!s.rangebreaks;i.makeTraceGroups(a,r,\"trace ohlc\").each((function(t){var e=n.select(this),r=t[0],a=r.t;if(!0!==r.trace.visible||a.empty)e.remove();else{var c=a.tickLen,u=e.selectAll(\"path\").data(i.identity);u.enter().append(\"path\"),u.exit().remove(),u.attr(\"d\",(function(t){if(t.empty)return\"M0,0Z\";var e=s.c2p(t.pos-c,!0),r=s.c2p(t.pos+c,!0),n=l?(e+r)/2:s.c2p(t.pos,!0);return\"M\"+e+\",\"+o.c2p(t.o,!0)+\"H\"+n+\"M\"+n+\",\"+o.c2p(t.h,!0)+\"V\"+o.c2p(t.l,!0)+\"M\"+r+\",\"+o.c2p(t.c,!0)+\"H\"+n}))}}))}},{\"../../lib\":515,\"@plotly/d3\":58}],888:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,n=t.cd,i=t.xaxis,a=t.yaxis,o=[],s=n[0].t.bPos||0;if(!1===e)for(r=0;r=t.length)return!1;if(void 0!==e[t[r]])return!1;e[t[r]]=!0}return!0}(t.map((function(t){return t.displayindex}))))for(e=0;e0;c&amp;&amp;(o=\"array\");var u=r(\"categoryorder\",o);\"array\"===u?(r(\"categoryarray\"),r(\"ticktext\")):(delete t.categoryarray,delete t.ticktext),c||\"array\"!==u||(e.categoryorder=\"trace\")}}e.exports=function(t,e,r,f){function h(r,i){return n.coerce(t,e,l,r,i)}var p=s(t,e,{name:\"dimensions\",handleItemDefaults:u}),d=function(t,e,r,o,s){s(\"line.shape\"),s(\"line.hovertemplate\");var l=s(\"line.color\",o.colorway[0]);if(i(t,\"line\")&amp;&amp;n.isArrayOrTypedArray(l)){if(l.length)return s(\"line.colorscale\"),a(t,e,o,s,{prefix:\"line.\",cLetter:\"c\"}),l.length;e.line.color=r}return 1/0}(t,e,r,f,h);o(e,f,h),Array.isArray(p)&amp;&amp;p.length||(e.visible=!1),c(e,p,\"values\",d),h(\"hoveron\"),h(\"hovertemplate\"),h(\"arrangement\"),h(\"bundlecolors\"),h(\"sortpaths\"),h(\"counts\");var m={family:f.font.family,size:Math.round(f.font.size),color:f.font.color};n.coerceFont(h,\"labelfont\",m);var g={family:f.font.family,size:Math.round(f.font.size/1.2),color:f.font.color};n.coerceFont(h,\"tickfont\",g)}},{\"../../components/colorscale/defaults\":377,\"../../components/colorscale/helpers\":378,\"../../lib\":515,\"../../plots/array_container_defaults\":561,\"../../plots/domain\":593,\"../parcoords/merge_length\":907,\"./attributes\":890}],894:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"./calc\"),plot:t(\"./plot\"),colorbar:{container:\"line\",min:\"cmin\",max:\"cmax\"},moduleType:\"trace\",name:\"parcats\",basePlotModule:t(\"./base_plot\"),categories:[\"noOpacity\"],meta:{}}},{\"./attributes\":890,\"./base_plot\":891,\"./calc\":892,\"./defaults\":893,\"./plot\":896}],895:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"d3-interpolate\").interpolateNumber,a=t(\"../../plot_api/plot_api\"),o=t(\"../../components/fx\"),s=t(\"../../lib\"),l=s.strTranslate,c=t(\"../../components/drawing\"),u=t(\"tinycolor2\"),f=t(\"../../lib/svg_text_utils\");function h(t,e,r,i){var a=e._context.staticPlot,o=t.map(F.bind(0,e,r)),u=i.selectAll(\"g.parcatslayer\").data([null]);u.enter().append(\"g\").attr(\"class\",\"parcatslayer\").style(\"pointer-events\",a?\"none\":\"all\");var h=u.selectAll(\"g.trace.parcats\").data(o,p),y=h.enter().append(\"g\").attr(\"class\",\"trace parcats\");h.attr(\"transform\",(function(t){return l(t.x,t.y)})),y.append(\"g\").attr(\"class\",\"paths\");var x=h.select(\"g.paths\").selectAll(\"path.path\").data((function(t){return t.paths}),p);x.attr(\"fill\",(function(t){return t.model.color}));var w=x.enter().append(\"path\").attr(\"class\",\"path\").attr(\"stroke-opacity\",0).attr(\"fill\",(function(t){return t.model.color})).attr(\"fill-opacity\",0);_(w),x.attr(\"d\",(function(t){return t.svgD})),w.empty()||x.sort(m),x.exit().remove(),x.on(\"mouseover\",g).on(\"mouseout\",v).on(\"click\",b),y.append(\"g\").attr(\"class\",\"dimensions\");var A=h.select(\"g.dimensions\").selectAll(\"g.dimension\").data((function(t){return t.dimensions}),p);A.enter().append(\"g\").attr(\"class\",\"dimension\"),A.attr(\"transform\",(function(t){return l(t.x,0)})),A.exit().remove();var M=A.selectAll(\"g.category\").data((function(t){return t.categories}),p),S=M.enter().append(\"g\").attr(\"class\",\"category\");M.attr(\"transform\",(function(t){return l(0,t.y)})),S.append(\"rect\").attr(\"class\",\"catrect\").attr(\"pointer-events\",\"none\"),M.select(\"rect.catrect\").attr(\"fill\",\"none\").attr(\"width\",(function(t){return t.width})).attr(\"height\",(function(t){return t.height})),T(S);var E=M.selectAll(\"rect.bandrect\").data((function(t){return t.bands}),p);E.each((function(){s.raiseToTop(this)})),E.attr(\"fill\",(function(t){return t.color}));var z=E.enter().append(\"rect\").attr(\"class\",\"bandrect\").attr(\"stroke-opacity\",0).attr(\"fill\",(function(t){return t.color})).attr(\"fill-opacity\",0);E.attr(\"fill\",(function(t){return t.color})).attr(\"width\",(function(t){return t.width})).attr(\"height\",(function(t){return t.height})).attr(\"y\",(function(t){return t.y})).attr(\"cursor\",(function(t){return\"fixed\"===t.parcatsViewModel.arrangement?\"default\":\"perpendicular\"===t.parcatsViewModel.arrangement?\"ns-resize\":\"move\"})),k(z),E.exit().remove(),S.append(\"text\").attr(\"class\",\"catlabel\").attr(\"pointer-events\",\"none\");var D=e._fullLayout.paper_bgcolor;M.select(\"text.catlabel\").attr(\"text-anchor\",(function(t){return d(t)?\"start\":\"end\"})).attr(\"alignment-baseline\",\"middle\").style(\"text-shadow\",f.makeTextShadow(D)).style(\"fill\",\"rgb(0, 0, 0)\").attr(\"x\",(function(t){return d(t)?t.width+5:-5})).attr(\"y\",(function(t){return t.height/2})).text((function(t){return t.model.categoryLabel})).each((function(t){c.font(n.select(this),t.parcatsViewModel.categorylabelfont),f.convertToTspans(n.select(this),e)})),S.append(\"text\").attr(\"class\",\"dimlabel\"),M.select(\"text.dimlabel\").attr(\"text-anchor\",\"middle\").attr(\"alignment-baseline\",\"baseline\").attr(\"cursor\",(function(t){return\"fixed\"===t.parcatsViewModel.arrangement?\"default\":\"ew-resize\"})).attr(\"x\",(function(t){return t.width/2})).attr(\"y\",-5).text((function(t,e){return 0===e?t.parcatsViewModel.model.dimensions[t.model.dimensionInd].dimensionLabel:null})).each((function(t){c.font(n.select(this),t.parcatsViewModel.labelfont)})),M.selectAll(\"rect.bandrect\").on(\"mouseover\",L).on(\"mouseout\",C),M.exit().remove(),A.call(n.behavior.drag().origin((function(t){return{x:t.x,y:0}})).on(\"dragstart\",P).on(\"drag\",I).on(\"dragend\",O)),h.each((function(t){t.traceSelection=n.select(this),t.pathSelection=n.select(this).selectAll(\"g.paths\").selectAll(\"path.path\"),t.dimensionSelection=n.select(this).selectAll(\"g.dimensions\").selectAll(\"g.dimension\")})),h.exit().remove()}function p(t){return t.key}function d(t){var e=t.parcatsViewModel.dimensions.length,r=t.parcatsViewModel.dimensions[e-1].model.dimensionInd;return t.model.dimensionInd===r}function m(t,e){return t.model.rawColor&gt;e.model.rawColor?1:t.model.rawColor\"),L=n.mouse(f)[0];o.loneHover({trace:h,x:b-d.left+m.left,y:_-d.top+m.top,text:E,color:t.model.color,borderColor:\"black\",fontFamily:'Monaco, \"Courier New\", monospace',fontSize:10,fontColor:T,idealAlign:L1&amp;&amp;h.displayInd===f.dimensions.length-1?(i=c.left,a=\"left\"):(i=c.left+c.width,a=\"right\");var m=u.model.count,g=u.model.categoryLabel,v=m/u.parcatsViewModel.model.count,y={countLabel:m,categoryLabel:g,probabilityLabel:v.toFixed(3)},x=[];-1!==u.parcatsViewModel.hoverinfoItems.indexOf(\"count\")&amp;&amp;x.push([\"Count:\",y.countLabel].join(\" \")),-1!==u.parcatsViewModel.hoverinfoItems.indexOf(\"probability\")&amp;&amp;x.push([\"P(\"+y.categoryLabel+\"):\",y.probabilityLabel].join(\" \"));var b=x.join(\"\");return{trace:p,x:o*(i-e.left),y:s*(d-e.top),text:b,color:\"lightgray\",borderColor:\"black\",fontFamily:'Monaco, \"Courier New\", monospace',fontSize:12,fontColor:\"black\",idealAlign:a,hovertemplate:p.hovertemplate,hovertemplateLabels:y,eventData:[{data:p._input,fullData:p,count:m,category:g,probability:v}]}}function L(t){if(!t.parcatsViewModel.dragDimension&amp;&amp;-1===t.parcatsViewModel.hoverinfoItems.indexOf(\"skip\")){if(n.mouse(this)[1]&lt;-1)return;var e,r=t.parcatsViewModel.graphDiv,i=r._fullLayout,a=i._paperdiv.node().getBoundingClientRect(),l=t.parcatsViewModel.hoveron;if(\"color\"===l?(!function(t){var e=n.select(t).datum(),r=A(e);w(r),r.each((function(){s.raiseToTop(this)})),n.select(t.parentNode).selectAll(\"rect.bandrect\").filter((function(t){return t.color===e.color})).each((function(){s.raiseToTop(this),n.select(this).attr(\"stroke\",\"black\").attr(\"stroke-width\",1.5)}))}(this),S(this,\"plotly_hover\",n.event)):(!function(t){n.select(t.parentNode).selectAll(\"rect.bandrect\").each((function(t){var e=A(t);w(e),e.each((function(){s.raiseToTop(this)}))})),n.select(t.parentNode).select(\"rect.catrect\").attr(\"stroke\",\"black\").attr(\"stroke-width\",2.5)}(this),M(this,\"plotly_hover\",n.event)),-1===t.parcatsViewModel.hoverinfoItems.indexOf(\"none\"))\"category\"===l?e=E(r,a,this):\"color\"===l?e=function(t,e,r){t._fullLayout._calcInverseTransform(t);var i,a,o=t._fullLayout._invScaleX,s=t._fullLayout._invScaleY,l=r.getBoundingClientRect(),c=n.select(r).datum(),f=c.categoryViewModel,h=f.parcatsViewModel,p=h.model.dimensions[f.model.dimensionInd],d=h.trace,m=l.y+l.height/2;h.dimensions.length&gt;1&amp;&amp;p.displayInd===h.dimensions.length-1?(i=l.left,a=\"left\"):(i=l.left+l.width,a=\"right\");var g=f.model.categoryLabel,v=c.parcatsViewModel.model.count,y=0;c.categoryViewModel.bands.forEach((function(t){t.color===c.color&amp;&amp;(y+=t.count)}));var x=f.model.count,b=0;h.pathSelection.each((function(t){t.model.color===c.color&amp;&amp;(b+=t.model.count)}));var _=y/v,w=y/b,T=y/x,k={countLabel:v,categoryLabel:g,probabilityLabel:_.toFixed(3)},A=[];-1!==f.parcatsViewModel.hoverinfoItems.indexOf(\"count\")&amp;&amp;A.push([\"Count:\",k.countLabel].join(\" \")),-1!==f.parcatsViewModel.hoverinfoItems.indexOf(\"probability\")&amp;&amp;(A.push(\"P(color \\u2229 \"+g+\"): \"+k.probabilityLabel),A.push(\"P(\"+g+\" | color): \"+w.toFixed(3)),A.push(\"P(color | \"+g+\"): \"+T.toFixed(3)));var M=A.join(\"\"),S=u.mostReadable(c.color,[\"black\",\"white\"]);return{trace:d,x:o*(i-e.left),y:s*(m-e.top),text:M,color:c.color,borderColor:\"black\",fontFamily:'Monaco, \"Courier New\", monospace',fontColor:S,fontSize:10,idealAlign:a,hovertemplate:d.hovertemplate,hovertemplateLabels:k,eventData:[{data:d._input,fullData:d,category:g,count:v,probability:_,categorycount:x,colorcount:b,bandcolorcount:y}]}}(r,a,this):\"dimension\"===l&amp;&amp;(e=function(t,e,r){var i=[];return n.select(r.parentNode.parentNode).selectAll(\"g.category\").select(\"rect.catrect\").each((function(){i.push(E(t,e,this))})),i}(r,a,this)),e&amp;&amp;o.loneHover(e,{container:i._hoverlayer.node(),outerContainer:i._paper.node(),gd:r})}}function C(t){var e=t.parcatsViewModel;if(!e.dragDimension&amp;&amp;(_(e.pathSelection),T(e.dimensionSelection.selectAll(\"g.category\")),k(e.dimensionSelection.selectAll(\"g.category\").selectAll(\"rect.bandrect\")),o.loneUnhover(e.graphDiv._fullLayout._hoverlayer.node()),e.pathSelection.sort(m),-1===e.hoverinfoItems.indexOf(\"skip\"))){\"color\"===t.parcatsViewModel.hoveron?S(this,\"plotly_unhover\",n.event):M(this,\"plotly_unhover\",n.event)}}function P(t){\"fixed\"!==t.parcatsViewModel.arrangement&amp;&amp;(t.dragDimensionDisplayInd=t.model.displayInd,t.initialDragDimensionDisplayInds=t.parcatsViewModel.model.dimensions.map((function(t){return t.displayInd})),t.dragHasMoved=!1,t.dragCategoryDisplayInd=null,n.select(this).selectAll(\"g.category\").select(\"rect.catrect\").each((function(e){var r=n.mouse(this)[0],i=n.mouse(this)[1];-2&lt;=r&amp;&amp;r&lt;=e.width+2&amp;&amp;-2&lt;=i&amp;&amp;i&lt;=e.height+2&amp;&amp;(t.dragCategoryDisplayInd=e.model.displayInd,t.initialDragCategoryDisplayInds=t.model.categories.map((function(t){return t.displayInd})),e.model.dragY=e.y,s.raiseToTop(this.parentNode),n.select(this.parentNode).selectAll(\"rect.bandrect\").each((function(e){e.yf.y+f.height/2&amp;&amp;(o.model.displayInd=f.model.displayInd,f.model.displayInd=l),t.dragCategoryDisplayInd=o.model.displayInd}if(null===t.dragCategoryDisplayInd||\"freeform\"===t.parcatsViewModel.arrangement){a.model.dragX=n.event.x;var h=t.parcatsViewModel.dimensions[r],p=t.parcatsViewModel.dimensions[i];void 0!==h&amp;&amp;a.model.dragXp.x&amp;&amp;(a.model.displayInd=p.model.displayInd,p.model.displayInd=t.dragDimensionDisplayInd),t.dragDimensionDisplayInd=a.model.displayInd}j(t.parcatsViewModel),N(t.parcatsViewModel),R(t.parcatsViewModel),D(t.parcatsViewModel)}}function O(t){if(\"fixed\"!==t.parcatsViewModel.arrangement&amp;&amp;null!==t.dragDimensionDisplayInd){n.select(this).selectAll(\"text\").attr(\"font-weight\",\"normal\");var e={},r=z(t.parcatsViewModel),i=t.parcatsViewModel.model.dimensions.map((function(t){return t.displayInd})),o=t.initialDragDimensionDisplayInds.some((function(t,e){return t!==i[e]}));o&amp;&amp;i.forEach((function(r,n){var i=t.parcatsViewModel.model.dimensions[n].containerInd;e[\"dimensions[\"+i+\"].displayindex\"]=r}));var s=!1;if(null!==t.dragCategoryDisplayInd){var l=t.model.categories.map((function(t){return t.displayInd}));if(s=t.initialDragCategoryDisplayInds.some((function(t,e){return t!==l[e]}))){var c=t.model.categories.slice().sort((function(t,e){return t.displayInd-e.displayInd})),u=c.map((function(t){return t.categoryValue})),f=c.map((function(t){return t.categoryLabel}));e[\"dimensions[\"+t.model.containerInd+\"].categoryarray\"]=[u],e[\"dimensions[\"+t.model.containerInd+\"].ticktext\"]=[f],e[\"dimensions[\"+t.model.containerInd+\"].categoryorder\"]=\"array\"}}if(-1===t.parcatsViewModel.hoverinfoItems.indexOf(\"skip\")&amp;&amp;!t.dragHasMoved&amp;&amp;t.potentialClickBand&amp;&amp;(\"color\"===t.parcatsViewModel.hoveron?S(t.potentialClickBand,\"plotly_click\",n.event.sourceEvent):M(t.potentialClickBand,\"plotly_click\",n.event.sourceEvent)),t.model.dragX=null,null!==t.dragCategoryDisplayInd)t.parcatsViewModel.dimensions[t.dragDimensionDisplayInd].categories[t.dragCategoryDisplayInd].model.dragY=null,t.dragCategoryDisplayInd=null;t.dragDimensionDisplayInd=null,t.parcatsViewModel.dragDimension=null,t.dragHasMoved=null,t.potentialClickBand=null,j(t.parcatsViewModel),N(t.parcatsViewModel),n.transition().duration(300).ease(\"cubic-in-out\").each((function(){R(t.parcatsViewModel,!0),D(t.parcatsViewModel,!0)})).each(\"end\",(function(){(o||s)&amp;&amp;a.restyle(t.parcatsViewModel.graphDiv,e,[r])}))}}function z(t){for(var e,r=t.graphDiv._fullData,n=0;n=0;s--)u+=\"C\"+c[s]+\",\"+(e[s+1]+n)+\" \"+l[s]+\",\"+(e[s]+n)+\" \"+(t[s]+r[s])+\",\"+(e[s]+n),u+=\"l-\"+r[s]+\",0 \";return u+=\"Z\"}function N(t){var e=t.dimensions,r=t.model,n=e.map((function(t){return t.categories.map((function(t){return t.y}))})),i=t.model.dimensions.map((function(t){return t.categories.map((function(t){return t.displayInd}))})),a=t.model.dimensions.map((function(t){return t.displayInd})),o=t.dimensions.map((function(t){return t.model.dimensionInd})),s=e.map((function(t){return t.x})),l=e.map((function(t){return t.width})),c=[];for(var u in r.paths)r.paths.hasOwnProperty(u)&amp;&amp;c.push(r.paths[u]);function f(t){var e=t.categoryInds.map((function(t,e){return i[e][t]}));return o.map((function(t){return e[t]}))}c.sort((function(e,r){var n=f(e),i=f(r);return\"backward\"===t.sortpaths&amp;&amp;(n.reverse(),i.reverse()),n.push(e.valueInds[0]),i.push(r.valueInds[0]),t.bundlecolors&amp;&amp;(n.unshift(e.rawColor),i.unshift(r.rawColor)),ni?1:0}));for(var h=new Array(c.length),p=e[0].model.count,d=e[0].categories.map((function(t){return t.height})).reduce((function(t,e){return t+e})),m=0;m0?d*(v.count/p):0;for(var y,x=new Array(n.length),b=0;b1?(t.width-80-16)/(n-1):0)*i;var a,o,s,l,c,u=[],f=t.model.maxCats,h=e.categories.length,p=e.count,d=t.height-8*(f-1),m=8*(f-h)/2,g=e.categories.map((function(t){return{displayInd:t.displayInd,categoryInd:t.categoryInd}}));for(g.sort((function(t,e){return t.displayInd-e.displayInd})),c=0;c0?o.count/p*d:0,s={key:o.valueInds[0],model:o,width:16,height:a,y:null!==o.dragY?o.dragY:m,bands:[],parcatsViewModel:t},m=m+a+8,u.push(s);return{key:e.dimensionInd,x:null!==e.dragX?e.dragX:r,y:0,width:16,model:e,categories:u,parcatsViewModel:t,dragCategoryDisplayInd:null,dragDimensionDisplayInd:null,initialDragDimensionDisplayInds:null,initialDragCategoryDisplayInds:null,dragHasMoved:null,potentialClickBand:null}}e.exports=function(t,e,r,n){h(r,t,n,e)}},{\"../../components/drawing\":389,\"../../components/fx\":407,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../../plot_api/plot_api\":552,\"@plotly/d3\":58,\"d3-interpolate\":116,tinycolor2:313}],896:[function(t,e,r){\"use strict\";var n=t(\"./parcats\");e.exports=function(t,e,r,i){var a=t._fullLayout,o=a._paper,s=a._size;n(t,o,e,{width:s.w,height:s.h,margin:{t:s.t,r:s.r,b:s.b,l:s.l}},r,i)}},{\"./parcats\":895}],897:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/attributes\"),i=t(\"../../plots/cartesian/layout_attributes\"),a=t(\"../../plots/font_attributes\"),o=t(\"../../plots/domain\").attributes,s=t(\"../../lib/extend\").extendFlat,l=t(\"../../plot_api/plot_template\").templatedArray;e.exports={domain:o({name:\"parcoords\",trace:!0,editType:\"plot\"}),labelangle:{valType:\"angle\",dflt:0,editType:\"plot\"},labelside:{valType:\"enumerated\",values:[\"top\",\"bottom\"],dflt:\"top\",editType:\"plot\"},labelfont:a({editType:\"plot\"}),tickfont:a({editType:\"plot\"}),rangefont:a({editType:\"plot\"}),dimensions:l(\"dimension\",{label:{valType:\"string\",editType:\"plot\"},tickvals:s({},i.tickvals,{editType:\"plot\"}),ticktext:s({},i.ticktext,{editType:\"plot\"}),tickformat:s({},i.tickformat,{editType:\"plot\"}),visible:{valType:\"boolean\",dflt:!0,editType:\"plot\"},range:{valType:\"info_array\",items:[{valType:\"number\",editType:\"plot\"},{valType:\"number\",editType:\"plot\"}],editType:\"plot\"},constraintrange:{valType:\"info_array\",freeLength:!0,dimensions:\"1-2\",items:[{valType:\"any\",editType:\"plot\"},{valType:\"any\",editType:\"plot\"}],editType:\"plot\"},multiselect:{valType:\"boolean\",dflt:!0,editType:\"plot\"},values:{valType:\"data_array\",editType:\"calc\"},editType:\"calc\"}),line:s({editType:\"calc\"},n(\"line\",{colorscaleDflt:\"Viridis\",autoColorDflt:!1,editTypeOverride:\"calc\"})),unselected:{line:{color:{valType:\"color\",dflt:\"#7f7f7f\",editType:\"plot\"},opacity:{valType:\"number\",min:0,max:1,dflt:\"auto\",editType:\"plot\"},editType:\"plot\"},editType:\"plot\"}}},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plot_api/plot_template\":555,\"../../plots/cartesian/layout_attributes\":579,\"../../plots/domain\":593,\"../../plots/font_attributes\":594}],898:[function(t,e,r){\"use strict\";var n=t(\"./constants\"),i=t(\"@plotly/d3\"),a=t(\"../../lib/gup\").keyFun,o=t(\"../../lib/gup\").repeat,s=t(\"../../lib\").sorterAsc,l=t(\"../../lib\").strTranslate,c=n.bar.snapRatio;function u(t,e){return t*(1-c)+e*c}var f=n.bar.snapClose;function h(t,e){return t*(1-f)+e*f}function p(t,e,r,n){if(function(t,e){for(var r=0;r=e[r][0]&amp;&amp;t&lt;=e[r][1])return!0;return!1}(r,n))return r;var i=t?-1:1,a=0,o=e.length-1;if(i&lt;0){var s=a;a=o,o=s}for(var l=e[a],c=l,f=a;i*fe){h=r;break}}if(a=u,isNaN(a)&amp;&amp;(a=isNaN(f)||isNaN(h)?isNaN(f)?h:f:e-c[f][1]t[1]+r||e=.9*t[1]+.1*t[0]?\"n\":e&lt;=.9*t[0]+.1*t[1]?\"s\":\"ns\"}(d,e);m&amp;&amp;(o.interval=l[a],o.intervalPix=d,o.region=m)}}if(t.ordinal&amp;&amp;!o.region){var g=t.unitTickvals,y=t.unitToPaddedPx.invert(e);for(r=0;r=x[0]&amp;&amp;y&lt;=x[1]){o.clickableOrdinalRange=x;break}}}return o}function w(t,e){i.event.sourceEvent.stopPropagation();var r=e.height-i.mouse(t)[1]-2*n.verticalPadding,a=e.brush.svgBrush;a.wasDragged=!0,a._dragging=!0,a.grabbingBar?a.newExtent=[r-a.grabPoint,r+a.barLength-a.grabPoint].map(e.unitToPaddedPx.invert):a.newExtent=[a.startExtent,e.unitToPaddedPx.invert(r)].sort(s),e.brush.filterSpecified=!0,a.extent=a.stayingIntervals.concat([a.newExtent]),a.brushCallback(e),b(t.parentNode)}function T(t,e){var r=_(e,e.height-i.mouse(t)[1]-2*n.verticalPadding),a=\"crosshair\";r.clickableOrdinalRange?a=\"pointer\":r.region&amp;&amp;(a=r.region+\"-resize\"),i.select(document.body).style(\"cursor\",a)}function k(t){t.on(\"mousemove\",(function(t){i.event.preventDefault(),t.parent.inBrushDrag||T(this,t)})).on(\"mouseleave\",(function(t){t.parent.inBrushDrag||y()})).call(i.behavior.drag().on(\"dragstart\",(function(t){!function(t,e){i.event.sourceEvent.stopPropagation();var r=e.height-i.mouse(t)[1]-2*n.verticalPadding,a=e.unitToPaddedPx.invert(r),o=e.brush,s=_(e,r),l=s.interval,c=o.svgBrush;if(c.wasDragged=!1,c.grabbingBar=\"ns\"===s.region,c.grabbingBar){var u=l.map(e.unitToPaddedPx);c.grabPoint=r-u[0]-n.verticalPadding,c.barLength=u[1]-u[0]}c.clickableOrdinalRange=s.clickableOrdinalRange,c.stayingIntervals=e.multiselect&amp;&amp;o.filterSpecified?o.filter.getConsolidated():[],l&amp;&amp;(c.stayingIntervals=c.stayingIntervals.filter((function(t){return t[0]!==l[0]&amp;&amp;t[1]!==l[1]}))),c.startExtent=s.region?l[\"s\"===s.region?1:0]:a,e.parent.inBrushDrag=!0,c.brushStartCallback()}(this,t)})).on(\"drag\",(function(t){w(this,t)})).on(\"dragend\",(function(t){!function(t,e){var r=e.brush,n=r.filter,a=r.svgBrush;a._dragging||(T(t,e),w(t,e),e.brush.svgBrush.wasDragged=!1),a._dragging=!1,i.event.sourceEvent.stopPropagation();var o=a.grabbingBar;if(a.grabbingBar=!1,a.grabLocation=void 0,e.parent.inBrushDrag=!1,y(),!a.wasDragged)return a.wasDragged=void 0,a.clickableOrdinalRange?r.filterSpecified&amp;&amp;e.multiselect?a.extent.push(a.clickableOrdinalRange):(a.extent=[a.clickableOrdinalRange],r.filterSpecified=!0):o?(a.extent=a.stayingIntervals,0===a.extent.length&amp;&amp;M(r)):M(r),a.brushCallback(e),b(t.parentNode),void a.brushEndCallback(r.filterSpecified?n.getConsolidated():[]);var s=function(){n.set(n.getConsolidated())};if(e.ordinal){var l=e.unitTickvals;l[l.length-1]a.newExtent[0];a.extent=a.stayingIntervals.concat(c?[a.newExtent]:[]),a.extent.length||M(r),a.brushCallback(e),c?b(t.parentNode,s):(s(),b(t.parentNode))}else s();a.brushEndCallback(r.filterSpecified?n.getConsolidated():[])}(this,t)})))}function A(t,e){return t[0]-e[0]}function M(t){t.filterSpecified=!1,t.svgBrush.extent=[[-1/0,1/0]]}function S(t){for(var e,r=t.slice(),n=[],i=r.shift();i;){for(e=i.slice();(i=r.shift())&amp;&amp;i[0]&lt;=e[1];)e[1]=Math.max(e[1],i[1]);n.push(e)}return 1===n.length&amp;&amp;n[0][0]&gt;n[0][1]&amp;&amp;(n=[]),n}e.exports={makeBrush:function(t,e,r,n,i,a){var o,l=function(){var t,e,r=[];return{set:function(n){1===(r=n.map((function(t){return t.slice().sort(s)})).sort(A)).length&amp;&amp;r[0][0]===-1/0&amp;&amp;r[0][1]===1/0&amp;&amp;(r=[[0,-1]]),t=S(r),e=r.reduce((function(t,e){return[Math.min(t[0],e[0]),Math.max(t[1],e[1])]}),[1/0,-1/0])},get:function(){return r.slice()},getConsolidated:function(){return t},getBounds:function(){return e}}}();return l.set(r),{filter:l,filterSpecified:e,svgBrush:{extent:[],brushStartCallback:n,brushCallback:(o=i,function(t){var e=t.brush,r=function(t){return t.svgBrush.extent.map((function(t){return t.slice()}))}(e).slice();e.filter.set(r),o()}),brushEndCallback:a}}},ensureAxisBrush:function(t,e,r){var i=t.selectAll(\".\"+n.cn.axisBrush).data(o,a);i.enter().append(\"g\").classed(n.cn.axisBrush,!0),function(t,e,r){var i=r._context.staticPlot,a=t.selectAll(\".background\").data(o);a.enter().append(\"rect\").classed(\"background\",!0).call(d).call(m).style(\"pointer-events\",i?\"none\":\"auto\").attr(\"transform\",l(0,n.verticalPadding)),a.call(k).attr(\"height\",(function(t){return t.height-n.verticalPadding}));var s=t.selectAll(\".highlight-shadow\").data(o);s.enter().append(\"line\").classed(\"highlight-shadow\",!0).attr(\"x\",-n.bar.width/2).attr(\"stroke-width\",n.bar.width+n.bar.strokeWidth).attr(\"stroke\",e).attr(\"opacity\",n.bar.strokeOpacity).attr(\"stroke-linecap\",\"butt\"),s.attr(\"y1\",(function(t){return t.height})).call(x);var c=t.selectAll(\".highlight\").data(o);c.enter().append(\"line\").classed(\"highlight\",!0).attr(\"x\",-n.bar.width/2).attr(\"stroke-width\",n.bar.width-n.bar.strokeWidth).attr(\"stroke\",n.bar.fillColor).attr(\"opacity\",n.bar.fillOpacity).attr(\"stroke-linecap\",\"butt\"),c.attr(\"y1\",(function(t){return t.height})).call(x)}(i,e,r)},cleanRanges:function(t,e){if(Array.isArray(t[0])?(t=t.map((function(t){return t.sort(s)})),t=e.multiselect?S(t.sort(A)):[t[0]]):t=[t.sort(s)],e.tickvals){var r=e.tickvals.slice().sort(s);if(!(t=t.map((function(t){var e=[p(0,r,t[0],[]),p(1,r,t[1],[])];if(e[1]&gt;e[0])return e})).filter((function(t){return t}))).length)return}return t.length&gt;1?t:t[0]}}},{\"../../lib\":515,\"../../lib/gup\":512,\"./constants\":902,\"@plotly/d3\":58}],899:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"./calc\"),colorbar:{container:\"line\",min:\"cmin\",max:\"cmax\"},moduleType:\"trace\",name:\"parcoords\",basePlotModule:t(\"./base_plot\"),categories:[\"gl\",\"regl\",\"noOpacity\",\"noHover\"],meta:{}}},{\"./attributes\":897,\"./base_plot\":900,\"./calc\":901,\"./defaults\":903}],900:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../plots/get_data\").getModuleCalcData,a=t(\"./plot\"),o=t(\"../../constants/xmlns_namespaces\");r.name=\"parcoords\",r.plot=function(t){var e=i(t.calcdata,\"parcoords\")[0];e.length&amp;&amp;a(t,e)},r.clean=function(t,e,r,n){var i=n._has&amp;&amp;n._has(\"parcoords\"),a=e._has&amp;&amp;e._has(\"parcoords\");i&amp;&amp;!a&amp;&amp;(n._paperdiv.selectAll(\".parcoords\").remove(),n._glimages.selectAll(\"*\").remove())},r.toSVG=function(t){var e=t._fullLayout._glimages,r=n.select(t).selectAll(\".svg-container\");r.filter((function(t,e){return e===r.size()-1})).selectAll(\".gl-canvas-context, .gl-canvas-focus\").each((function(){var t=this.toDataURL(\"image/png\");e.append(\"svg:image\").attr({xmlns:o.svg,\"xlink:href\":t,preserveAspectRatio:\"none\",x:0,y:0,width:this.style.width,height:this.style.height})})),window.setTimeout((function(){n.selectAll(\"#filterBarPattern\").attr(\"id\",\"filterBarPattern\")}),60)}},{\"../../constants/xmlns_namespaces\":492,\"../../plots/get_data\":602,\"./plot\":909,\"@plotly/d3\":58}],901:[function(t,e,r){\"use strict\";var n=t(\"../../lib\").isArrayOrTypedArray,i=t(\"../../components/colorscale\"),a=t(\"../../lib/gup\").wrap;e.exports=function(t,e){var r,o;return i.hasColorscale(e,\"line\")&amp;&amp;n(e.line.color)?(r=e.line.color,o=i.extractOpts(e.line).colorscale,i.calc(t,e,{vals:r,containerStr:\"line\",cLetter:\"c\"})):(r=function(t){for(var e=new Array(t),r=0;rf&amp;&amp;(n.log(\"parcoords traces support up to \"+f+\" dimensions at the moment\"),d.splice(f));var m=s(t,e,{name:\"dimensions\",layout:l,handleItemDefaults:p}),g=function(t,e,r,o,s){var l=s(\"line.color\",r);if(i(t,\"line\")&amp;&amp;n.isArrayOrTypedArray(l)){if(l.length)return s(\"line.colorscale\"),a(t,e,o,s,{prefix:\"line.\",cLetter:\"c\"}),l.length;e.line.color=r}return 1/0}(t,e,r,l,u);o(e,l,u),Array.isArray(m)&amp;&amp;m.length||(e.visible=!1),h(e,m,\"values\",g);var v={family:l.font.family,size:Math.round(l.font.size/1.2),color:l.font.color};n.coerceFont(u,\"labelfont\",v),n.coerceFont(u,\"tickfont\",v),n.coerceFont(u,\"rangefont\",v),u(\"labelangle\"),u(\"labelside\"),u(\"unselected.line.color\"),u(\"unselected.line.opacity\")}},{\"../../components/colorscale/defaults\":377,\"../../components/colorscale/helpers\":378,\"../../lib\":515,\"../../plots/array_container_defaults\":561,\"../../plots/cartesian/axes\":566,\"../../plots/domain\":593,\"./attributes\":897,\"./axisbrush\":898,\"./constants\":902,\"./merge_length\":907}],904:[function(t,e,r){\"use strict\";var n=t(\"../../lib\").isTypedArray;r.convertTypedArray=function(t){return n(t)?Array.prototype.slice.call(t):t},r.isOrdinal=function(t){return!!t.tickvals},r.isVisible=function(t){return t.visible||!(\"visible\"in t)}},{\"../../lib\":515}],905:[function(t,e,r){\"use strict\";var n=t(\"./base_index\");n.plot=t(\"./plot\"),e.exports=n},{\"./base_index\":899,\"./plot\":909}],906:[function(t,e,r){\"use strict\";var n=t(\"glslify\"),i=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor;\\n\\nattribute vec4 p01_04, p05_08, p09_12, p13_16,\\n               p17_20, p21_24, p25_28, p29_32,\\n               p33_36, p37_40, p41_44, p45_48,\\n               p49_52, p53_56, p57_60, colors;\\n\\nuniform mat4 dim0A, dim1A, dim0B, dim1B, dim0C, dim1C, dim0D, dim1D,\\n             loA, hiA, loB, hiB, loC, hiC, loD, hiD;\\n\\nuniform vec2 resolution, viewBoxPos, viewBoxSize;\\nuniform float maskHeight;\\nuniform float drwLayer; // 0: context, 1: focus, 2: pick\\nuniform vec4 contextColor;\\nuniform sampler2D maskTexture, palette;\\n\\nbool isPick    = (drwLayer &gt; 1.5);\\nbool isContext = (drwLayer &lt; 0.5);\\n\\nconst vec4 ZEROS = vec4(0.0, 0.0, 0.0, 0.0);\\nconst vec4 UNITS = vec4(1.0, 1.0, 1.0, 1.0);\\n\\nfloat val(mat4 p, mat4 v) {\\n    return dot(matrixCompMult(p, v) * UNITS, UNITS);\\n}\\n\\nfloat axisY(float ratio, mat4 A, mat4 B, mat4 C, mat4 D) {\\n    float y1 = val(A, dim0A) + val(B, dim0B) + val(C, dim0C) + val(D, dim0D);\\n    float y2 = val(A, dim1A) + val(B, dim1B) + val(C, dim1C) + val(D, dim1D);\\n    return y1 * (1.0 - ratio) + y2 * ratio;\\n}\\n\\nint iMod(int a, int b) {\\n    return a - b * (a / b);\\n}\\n\\nbool fOutside(float p, float lo, float hi) {\\n    return (lo &lt; hi) &amp;&amp; (lo &gt; p || p &gt; hi);\\n}\\n\\nbool vOutside(vec4 p, vec4 lo, vec4 hi) {\\n    return (\\n        fOutside(p[0], lo[0], hi[0]) ||\\n        fOutside(p[1], lo[1], hi[1]) ||\\n        fOutside(p[2], lo[2], hi[2]) ||\\n        fOutside(p[3], lo[3], hi[3])\\n    );\\n}\\n\\nbool mOutside(mat4 p, mat4 lo, mat4 hi) {\\n    return (\\n        vOutside(p[0], lo[0], hi[0]) ||\\n        vOutside(p[1], lo[1], hi[1]) ||\\n        vOutside(p[2], lo[2], hi[2]) ||\\n        vOutside(p[3], lo[3], hi[3])\\n    );\\n}\\n\\nbool outsideBoundingBox(mat4 A, mat4 B, mat4 C, mat4 D) {\\n    return mOutside(A, loA, hiA) ||\\n           mOutside(B, loB, hiB) ||\\n           mOutside(C, loC, hiC) ||\\n           mOutside(D, loD, hiD);\\n}\\n\\nbool outsideRasterMask(mat4 A, mat4 B, mat4 C, mat4 D) {\\n    mat4 pnts[4];\\n    pnts[0] = A;\\n    pnts[1] = B;\\n    pnts[2] = C;\\n    pnts[3] = D;\\n\\n    for(int i = 0; i &lt; 4; ++i) {\\n        for(int j = 0; j &lt; 4; ++j) {\\n            for(int k = 0; k &lt; 4; ++k) {\\n                if(0 == iMod(\\n                    int(255.0 * texture2D(maskTexture,\\n                        vec2(\\n                            (float(i * 2 + j / 2) + 0.5) / 8.0,\\n                            (pnts[i][j][k] * (maskHeight - 1.0) + 1.0) / maskHeight\\n                        ))[3]\\n                    ) / int(pow(2.0, float(iMod(j * 4 + k, 8)))),\\n                    2\\n                )) return true;\\n            }\\n        }\\n    }\\n    return false;\\n}\\n\\nvec4 position(bool isContext, float v, mat4 A, mat4 B, mat4 C, mat4 D) {\\n    float x = 0.5 * sign(v) + 0.5;\\n    float y = axisY(x, A, B, C, D);\\n    float z = 1.0 - abs(v);\\n\\n    z += isContext ? 0.0 : 2.0 * float(\\n        outsideBoundingBox(A, B, C, D) ||\\n        outsideRasterMask(A, B, C, D)\\n    );\\n\\n    return vec4(\\n        2.0 * (vec2(x, y) * viewBoxSize + viewBoxPos) / resolution - 1.0,\\n        z,\\n        1.0\\n    );\\n}\\n\\nvoid main() {\\n    mat4 A = mat4(p01_04, p05_08, p09_12, p13_16);\\n    mat4 B = mat4(p17_20, p21_24, p25_28, p29_32);\\n    mat4 C = mat4(p33_36, p37_40, p41_44, p45_48);\\n    mat4 D = mat4(p49_52, p53_56, p57_60, ZEROS);\\n\\n    float v = colors[3];\\n\\n    gl_Position = position(isContext, v, A, B, C, D);\\n\\n    fragColor =\\n        isContext ? vec4(contextColor) :\\n        isPick ? vec4(colors.rgb, 1.0) : texture2D(palette, vec2(abs(v), 0.5));\\n}\\n\"]),a=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragColor;\\n\\nvoid main() {\\n    gl_FragColor = fragColor;\\n}\\n\"]),o=t(\"./constants\").maxDimensionCount,s=t(\"../../lib\"),l=new Uint8Array(4),c=new Uint8Array(4),u={shape:[256,1],format:\"rgba\",type:\"uint8\",mag:\"nearest\",min:\"nearest\"};function f(t,e,r,n,i){var a=t._gl;a.enable(a.SCISSOR_TEST),a.scissor(e,r,n,i),t.clear({color:[0,0,0,0],depth:1})}function h(t,e,r,n,i,a){var o=a.key;r.drawCompleted||(!function(t){t.read({x:0,y:0,width:1,height:1,data:l})}(t),r.drawCompleted=!0),function s(l){var c=Math.min(n,i-l*n);0===l&amp;&amp;(window.cancelAnimationFrame(r.currentRafs[o]),delete r.currentRafs[o],f(t,a.scissorX,a.scissorY,a.scissorWidth,a.viewBoxSize[1])),r.clearOnly||(a.count=2*c,a.offset=2*l*n,e(a),l*n+c&gt;&gt;8*e)%256/255}function m(t,e,r){for(var n=new Array(8*e),i=0,a=0;au&amp;&amp;(u=t[i].dim1.canvasX,o=i);0===s&amp;&amp;f(T,0,0,r.canvasWidth,r.canvasHeight);var p=function(t){var e,r,n,i=[[],[]];for(n=0;n&lt;64;n++){var a=!t&amp;&amp;n&lt;l.length?l[n].brush.filter.getBounds():[-1/0,1/0];i[0][n]=a[0],i[1][n]=a[1]}var o=new Array(16384);for(e=0;e&lt;16384;e++)o[e]=255;if(!t)for(e=0;e&lt;l.length;e++){var s=e%8,c=(e-s)/8,u=Math.pow(2,s),f=l[e].brush.filter.get();if(!(f.length&lt;2)){var h=x(f[0])[1];for(r=1;r&lt;f.length;r++){var p=x(f[r]);for(n=h+1;n&lt;p[0];n++)o[8*n+c]&amp;=~u;h=Math.max(h,p[1])}}}var d={shape:[8,2048],format:\"alpha\",type:\"uint8\",mag:\"nearest\",min:\"nearest\",data:o};return b?b(d):b=T.texture(d),{maskTexture:b,maskHeight:2048,loA:i[0].slice(0,16),loB:i[0].slice(16,32),loC:i[0].slice(32,48),loD:i[0].slice(48,64),hiA:i[1].slice(0,16),hiB:i[1].slice(16,32),hiC:i[1].slice(32,48),hiD:i[1].slice(48,64)}}(_);for(i=0;i&lt;s;i++){var d=t[i],m=d.dim0.crossfilterDimensionIndex,v=d.dim1.crossfilterDimensionIndex,k=d.canvasX,A=d.canvasY,M=k+d.panelSizeX,E=d.plotGlPixelRatio;if(e||!C[m]||C[m][0]!==k||C[m][1]!==M){C[m]=[k,M];var L=y(r,a,o,i,m,v,k,A,d.panelSizeX,d.panelSizeY,d.dim0.crossfilterDimensionIndex,_?0:w?2:1,p,E);S.clearOnly=n;var I=e?r.lines.blockLineCount:g;h(T,P,S,I,g,L)}}},readPixel:function(t,e){return T.read({x:t,y:e,width:1,height:1,data:c}),c},readPixels:function(t,e,r,n){var i=new Uint8Array(4*r*n);return T.read({x:t,y:e,width:r,height:n,data:i}),i},destroy:function(){for(var e in t.style[\"pointer-events\"]=\"none\",L.destroy(),b&amp;&amp;b.destroy(),E)E[e].destroy()},update:I}}},{\"../../lib\":515,\"./constants\":902,glslify:227}],907:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n){var i,a;for(n||(n=1/0),i=0;i&lt;e.length;i++)(a=e[i]).visible&amp;&amp;(n=Math.min(n,a[r].length));for(n===1/0&amp;&amp;(n=0),t._length=n,i=0;i&lt;e.length;i++)(a=e[i]).visible&amp;&amp;(a._length=n);return n}},{}],908:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=i.numberFormat,o=t(\"color-rgba\"),s=t(\"../../plots/cartesian/axes\"),l=i.strRotate,c=i.strTranslate,u=t(\"../../lib/svg_text_utils\"),f=t(\"../../components/drawing\"),h=t(\"../../components/colorscale\"),p=t(\"../../lib/gup\"),d=p.keyFun,m=p.repeat,g=p.unwrap,v=t(\"./helpers\"),y=t(\"./constants\"),x=t(\"./axisbrush\"),b=t(\"./lines\");function _(t,e,r){return i.aggNums(t,null,e,r)}function w(t,e){return k(_(Math.min,t,e),_(Math.max,t,e))}function T(t){var e=t.range;return e?k(e[0],e[1]):w(t.values,t._length)}function k(t,e){return!isNaN(t)&amp;&amp;isFinite(t)||(t=0),!isNaN(e)&amp;&amp;isFinite(e)||(e=0),t===e&amp;&amp;(0===t?(t-=1,e+=1):(t*=.9,e*=1.1)),[t,e]}function A(t,e,r,i,o){var s,l,c=T(r);return i?n.scale.ordinal().domain(i.map((s=a(r.tickformat),l=o,l?function(t,e){var r=l[e];return null==r?s(t):r}:s))).range(i.map((function(r){var n=(r-c[0])/(c[1]-c[0]);return t-e+n*(2*e-t)}))):n.scale.linear().domain(c).range([t-e,e])}function M(t){if(t.tickvals){var e=T(t);return n.scale.ordinal().domain(t.tickvals).range(t.tickvals.map((function(t){return(t-e[0])/(e[1]-e[0])})))}}function S(t){var e=t.map((function(t){return t[0]})),r=t.map((function(t){var e=o(t[1]);return n.rgb(\"rgb(\"+e[0]+\",\"+e[1]+\",\"+e[2]+\")\")})),i=\"rgb\".split(\"\").map((function(t){return n.scale.linear().clamp(!0).domain(e).range(r.map((i=t,function(t){return t[i]})));var i}));return function(t){return i.map((function(e){return e(t)}))}}function E(t){return t.dimensions.some((function(t){return t.brush.filterSpecified}))}function L(t,e,r){var a=g(e),s=a.trace,l=v.convertTypedArray(a.lineColor),c=s.line,u={color:o(s.unselected.line.color),opacity:s.unselected.line.opacity},f=h.extractOpts(c),p=f.reversescale?h.flipScale(a.cscale):a.cscale,d=s.domain,m=s.dimensions,x=t.width,b=s.labelangle,_=s.labelside,w=s.labelfont,k=s.tickfont,A=s.rangefont,M=i.extendDeepNoArrays({},c,{color:l.map(n.scale.linear().domain(T({values:l,range:[f.min,f.max],_length:s._length}))),blockLineCount:y.blockLineCount,canvasOverdrag:y.overdrag*y.canvasPixelRatio}),E=Math.floor(x*(d.x[1]-d.x[0])),L=Math.floor(t.height*(d.y[1]-d.y[0])),C=t.margin||{l:80,r:80,t:100,b:80},P=E,I=L;return{key:r,colCount:m.filter(v.isVisible).length,dimensions:m,tickDistance:y.tickDistance,unitToColor:S(p),lines:M,deselectedLines:u,labelAngle:b,labelSide:_,labelFont:w,tickFont:k,rangeFont:A,layoutWidth:x,layoutHeight:t.height,domain:d,translateX:d.x[0]*x,translateY:t.height-d.y[1]*t.height,pad:C,canvasWidth:P*y.canvasPixelRatio+2*M.canvasOverdrag,canvasHeight:I*y.canvasPixelRatio,width:P,height:I,canvasPixelRatio:y.canvasPixelRatio}}function C(t,e,r){var o=r.width,s=r.height,l=r.dimensions,c=r.canvasPixelRatio,u=function(t){return o*t/Math.max(1,r.colCount-1)},f=y.verticalPadding/s,h=function(t,e){return n.scale.linear().range([e,t-e])}(s,y.verticalPadding),p={key:r.key,xScale:u,model:r,inBrushDrag:!1},d={};return p.dimensions=l.filter(v.isVisible).map((function(o,l){var m=function(t,e){return n.scale.linear().domain(T(t)).range([e,1-e])}(o,f),g=d[o.label];d[o.label]=(g||0)+1;var b=o.label+(g?\"__\"+g:\"\"),_=o.constraintrange,w=_&amp;&amp;_.length;w&amp;&amp;!Array.isArray(_[0])&amp;&amp;(_=[_]);var k=w?_.map((function(t){return t.map(m)})):[[-1/0,1/0]],S=o.values;S.length&gt;o._length&amp;&amp;(S=S.slice(0,o._length));var L,C=o.tickvals;function P(t,e){return{val:t,text:L[e]}}function I(t,e){return t.val-e.val}if(Array.isArray(C)&amp;&amp;C.length){L=o.ticktext,Array.isArray(L)&amp;&amp;L.length?L.length&gt;C.length?L=L.slice(0,C.length):C.length&gt;L.length&amp;&amp;(C=C.slice(0,L.length)):L=C.map(a(o.tickformat));for(var O=1;O=r||l&gt;=i)return;var c=t.lineLayer.readPixel(s,i-1-l),u=0!==c[3],f=u?c[2]+256*(c[1]+256*c[0]):null,h={x:s,y:l,clientX:e.clientX,clientY:e.clientY,dataIndex:t.model.key,curveNumber:f};f!==N&amp;&amp;(u?a.hover(h):a.unhover&amp;&amp;a.unhover(h),N=f)}})),B.style(\"opacity\",(function(t){return t.pick?0:1})),p.style(\"background\",\"rgba(255, 255, 255, 0)\");var j=p.selectAll(\".\"+y.cn.parcoords).data(F,d);j.exit().remove(),j.enter().append(\"g\").classed(y.cn.parcoords,!0).style(\"shape-rendering\",\"crispEdges\").style(\"pointer-events\",\"none\"),j.attr(\"transform\",(function(t){return c(t.model.translateX,t.model.translateY)}));var U=j.selectAll(\".\"+y.cn.parcoordsControlView).data(m,d);U.enter().append(\"g\").classed(y.cn.parcoordsControlView,!0),U.attr(\"transform\",(function(t){return c(t.model.pad.l,t.model.pad.t)}));var V=U.selectAll(\".\"+y.cn.yAxis).data((function(t){return t.dimensions}),d);V.enter().append(\"g\").classed(y.cn.yAxis,!0),U.each((function(t){O(V,t,T)})),B.each((function(t){if(t.viewModel){!t.lineLayer||a?t.lineLayer=b(this,t):t.lineLayer.update(t),(t.key||0===t.key)&amp;&amp;(t.viewModel[t.key]=t.lineLayer);var e=!t.context||a;t.lineLayer.render(t.viewModel.panels,e)}})),V.attr(\"transform\",(function(t){return c(t.xScale(t.xIndex),0)})),V.call(n.behavior.drag().origin((function(t){return t})).on(\"drag\",(function(t){var e=t.parent;R.linePickActive(!1),t.x=Math.max(-y.overdrag,Math.min(t.model.width+y.overdrag,n.event.x)),t.canvasX=t.x*t.model.canvasPixelRatio,V.sort((function(t,e){return t.x-e.x})).each((function(e,r){e.xIndex=r,e.x=t===e?e.x:e.xScale(e.xIndex),e.canvasX=e.x*e.model.canvasPixelRatio})),O(V,e,T),V.filter((function(e){return 0!==Math.abs(t.xIndex-e.xIndex)})).attr(\"transform\",(function(t){return c(t.xScale(t.xIndex),0)})),n.select(this).attr(\"transform\",c(t.x,0)),V.each((function(r,n,i){i===t.parent.key&amp;&amp;(e.dimensions[n]=r)})),e.contextLayer&amp;&amp;e.contextLayer.render(e.panels,!1,!E(e)),e.focusLayer.render&amp;&amp;e.focusLayer.render(e.panels)})).on(\"dragend\",(function(t){var e=t.parent;t.x=t.xScale(t.xIndex),t.canvasX=t.x*t.model.canvasPixelRatio,O(V,e,T),n.select(this).attr(\"transform\",(function(t){return c(t.x,0)})),e.contextLayer&amp;&amp;e.contextLayer.render(e.panels,!1,!E(e)),e.focusLayer&amp;&amp;e.focusLayer.render(e.panels),e.pickLayer&amp;&amp;e.pickLayer.render(e.panels,!0),R.linePickActive(!0),a&amp;&amp;a.axesMoved&amp;&amp;a.axesMoved(e.key,e.dimensions.map((function(t){return t.crossfilterDimensionIndex})))}))),V.exit().remove();var H=V.selectAll(\".\"+y.cn.axisOverlays).data(m,d);H.enter().append(\"g\").classed(y.cn.axisOverlays,!0),H.selectAll(\".\"+y.cn.axis).remove();var q=H.selectAll(\".\"+y.cn.axis).data(m,d);q.enter().append(\"g\").classed(y.cn.axis,!0),q.each((function(t){var e=t.model.height/t.model.tickDistance,r=t.domainScale,i=r.domain();n.select(this).call(n.svg.axis().orient(\"left\").tickSize(4).outerTickSize(2).ticks(e,t.tickFormat).tickValues(t.ordinal?i:null).tickFormat((function(e){return v.isOrdinal(t)?e:z(t.model.dimensions[t.visibleIndex],e)})).scale(r)),f.font(q.selectAll(\"text\"),t.model.tickFont)})),q.selectAll(\".domain, .tick&gt;line\").attr(\"fill\",\"none\").attr(\"stroke\",\"black\").attr(\"stroke-opacity\",.25).attr(\"stroke-width\",\"1px\"),q.selectAll(\"text\").style(\"text-shadow\",u.makeTextShadow(A)).style(\"cursor\",\"default\");var G=H.selectAll(\".\"+y.cn.axisHeading).data(m,d);G.enter().append(\"g\").classed(y.cn.axisHeading,!0);var Y=G.selectAll(\".\"+y.cn.axisTitle).data(m,d);Y.enter().append(\"text\").classed(y.cn.axisTitle,!0).attr(\"text-anchor\",\"middle\").style(\"cursor\",\"ew-resize\").style(\"pointer-events\",o?\"none\":\"auto\"),Y.text((function(t){return t.label})).each((function(e){var r=n.select(this);f.font(r,e.model.labelFont),u.convertToTspans(r,t)})).attr(\"transform\",(function(t){var e=I(t.model.labelAngle,t.model.labelSide),r=y.axisTitleOffset;return(e.dir&gt;0?\"\":c(0,2*r+t.model.height))+l(e.degrees)+c(-r*e.dx,-r*e.dy)})).attr(\"text-anchor\",(function(t){var e=I(t.model.labelAngle,t.model.labelSide);return 2*Math.abs(e.dx)&gt;Math.abs(e.dy)?e.dir*e.dx&lt;0?\"start\":\"end\":\"middle\"}));var W=H.selectAll(\".\"+y.cn.axisExtent).data(m,d);W.enter().append(\"g\").classed(y.cn.axisExtent,!0);var Z=W.selectAll(\".\"+y.cn.axisExtentTop).data(m,d);Z.enter().append(\"g\").classed(y.cn.axisExtentTop,!0),Z.attr(\"transform\",c(0,-y.axisExtentOffset));var X=Z.selectAll(\".\"+y.cn.axisExtentTopText).data(m,d);X.enter().append(\"text\").classed(y.cn.axisExtentTopText,!0).call(P),X.text((function(t){return D(t,!0)})).each((function(t){f.font(n.select(this),t.model.rangeFont)}));var J=W.selectAll(\".\"+y.cn.axisExtentBottom).data(m,d);J.enter().append(\"g\").classed(y.cn.axisExtentBottom,!0),J.attr(\"transform\",(function(t){return c(0,t.model.height+y.axisExtentOffset)}));var K=J.selectAll(\".\"+y.cn.axisExtentBottomText).data(m,d);K.enter().append(\"text\").classed(y.cn.axisExtentBottomText,!0).attr(\"dy\",\"0.75em\").call(P),K.text((function(t){return D(t,!1)})).each((function(t){f.font(n.select(this),t.model.rangeFont)})),x.ensureAxisBrush(H,A,t)}},{\"../../components/colorscale\":379,\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/gup\":512,\"../../lib/svg_text_utils\":541,\"../../plots/cartesian/axes\":566,\"./axisbrush\":898,\"./constants\":902,\"./helpers\":904,\"./lines\":906,\"@plotly/d3\":58,\"color-rgba\":91}],909:[function(t,e,r){\"use strict\";var n=t(\"./parcoords\"),i=t(\"../../lib/prepare_regl\"),a=t(\"./helpers\").isVisible,o={};function s(t,e,r){var n=e.indexOf(r),i=t.indexOf(n);return-1===i&amp;&amp;(i+=e.length),i}(e.exports=function(t,e){var r=t._fullLayout;if(i(t,[],o)){var l={},c={},u={},f={},h=r._size;e.forEach((function(e,r){var n=e[0].trace;u[r]=n.index;var i=f[r]=n._fullInput.index;l[r]=t.data[i].dimensions,c[r]=t.data[i].dimensions.slice()}));n(t,e,{width:h.w,height:h.h,margin:{t:h.t,r:h.r,b:h.b,l:h.l}},{filterChanged:function(e,n,i){var a=c[e][n],o=i.map((function(t){return t.slice()})),s=\"dimensions[\"+n+\"].constraintrange\",l=r._tracePreGUI[t._fullData[u[e]]._fullInput.uid];if(void 0===l[s]){var h=a.constraintrange;l[s]=h||null}var p=t._fullData[u[e]].dimensions[n];o.length?(1===o.length&amp;&amp;(o=o[0]),a.constraintrange=o,p.constraintrange=o.slice(),o=[o]):(delete a.constraintrange,delete p.constraintrange,o=null);var d={};d[s]=o,t.emit(\"plotly_restyle\",[d,[f[e]]])},hover:function(e){t.emit(\"plotly_hover\",e)},unhover:function(e){t.emit(\"plotly_unhover\",e)},axesMoved:function(e,r){var n=function(t,e){return function(r,n){return s(t,e,r)-s(t,e,n)}}(r,c[e].filter(a));l[e].sort(n),c[e].filter((function(t){return!a(t)})).sort((function(t){return c[e].indexOf(t)})).forEach((function(t){l[e].splice(l[e].indexOf(t),1),l[e].splice(c[e].indexOf(t),0,t)})),t.emit(\"plotly_restyle\",[{dimensions:[l[e]]},[f[e]]])}})}}).reglPrecompiled=o},{\"../../lib/prepare_regl\":528,\"./helpers\":904,\"./parcoords\":908}],910:[function(t,e,r){\"use strict\";var n=t(\"../../plots/attributes\"),i=t(\"../../plots/domain\").attributes,a=t(\"../../plots/font_attributes\"),o=t(\"../../components/color/attributes\"),s=t(\"../../plots/template_attributes\").hovertemplateAttrs,l=t(\"../../plots/template_attributes\").texttemplateAttrs,c=t(\"../../lib/extend\").extendFlat,u=a({editType:\"plot\",arrayOk:!0,colorEditType:\"plot\"});e.exports={labels:{valType:\"data_array\",editType:\"calc\"},label0:{valType:\"number\",dflt:0,editType:\"calc\"},dlabel:{valType:\"number\",dflt:1,editType:\"calc\"},values:{valType:\"data_array\",editType:\"calc\"},marker:{colors:{valType:\"data_array\",editType:\"calc\"},line:{color:{valType:\"color\",dflt:o.defaultLine,arrayOk:!0,editType:\"style\"},width:{valType:\"number\",min:0,dflt:0,arrayOk:!0,editType:\"style\"},editType:\"calc\"},editType:\"calc\"},text:{valType:\"data_array\",editType:\"plot\"},hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"style\"},scalegroup:{valType:\"string\",dflt:\"\",editType:\"calc\"},textinfo:{valType:\"flaglist\",flags:[\"label\",\"text\",\"value\",\"percent\"],extras:[\"none\"],editType:\"calc\"},hoverinfo:c({},n.hoverinfo,{flags:[\"label\",\"text\",\"value\",\"percent\",\"name\"]}),hovertemplate:s({},{keys:[\"label\",\"color\",\"value\",\"percent\",\"text\"]}),texttemplate:l({editType:\"plot\"},{keys:[\"label\",\"color\",\"value\",\"percent\",\"text\"]}),textposition:{valType:\"enumerated\",values:[\"inside\",\"outside\",\"auto\",\"none\"],dflt:\"auto\",arrayOk:!0,editType:\"plot\"},textfont:c({},u,{}),insidetextorientation:{valType:\"enumerated\",values:[\"horizontal\",\"radial\",\"tangential\",\"auto\"],dflt:\"auto\",editType:\"plot\"},insidetextfont:c({},u,{}),outsidetextfont:c({},u,{}),automargin:{valType:\"boolean\",dflt:!1,editType:\"plot\"},title:{text:{valType:\"string\",dflt:\"\",editType:\"plot\"},font:c({},u,{}),position:{valType:\"enumerated\",values:[\"top left\",\"top center\",\"top right\",\"middle center\",\"bottom left\",\"bottom center\",\"bottom right\"],editType:\"plot\"},editType:\"plot\"},domain:i({name:\"pie\",trace:!0,editType:\"calc\"}),hole:{valType:\"number\",min:0,max:1,dflt:0,editType:\"calc\"},sort:{valType:\"boolean\",dflt:!0,editType:\"calc\"},direction:{valType:\"enumerated\",values:[\"clockwise\",\"counterclockwise\"],dflt:\"counterclockwise\",editType:\"calc\"},rotation:{valType:\"angle\",dflt:0,editType:\"calc\"},pull:{valType:\"number\",min:0,max:1,dflt:0,arrayOk:!0,editType:\"calc\"},_deprecated:{title:{valType:\"string\",dflt:\"\",editType:\"calc\"},titlefont:c({},u,{}),titleposition:{valType:\"enumerated\",values:[\"top left\",\"top center\",\"top right\",\"middle center\",\"bottom left\",\"bottom center\",\"bottom right\"],editType:\"calc\"}}}},{\"../../components/color/attributes\":366,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/domain\":593,\"../../plots/font_attributes\":594,\"../../plots/template_attributes\":642}],911:[function(t,e,r){\"use strict\";var n=t(\"../../plots/plots\");r.name=\"pie\",r.plot=function(t,e,i,a){n.plotBasePlot(r.name,t,e,i,a)},r.clean=function(t,e,i,a){n.cleanBasePlot(r.name,t,e,i,a)}},{\"../../plots/plots\":628}],912:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"tinycolor2\"),a=t(\"../../components/color\"),o={};function s(t){return function(e,r){return!!e&amp;&amp;(!!(e=i(e)).isValid()&amp;&amp;(e=a.addOpacity(e,e.getAlpha()),t[r]||(t[r]=e),e))}}function l(t,e){var r,n=JSON.stringify(t),a=e[n];if(!a){for(a=t.slice(),r=0;r=0})),(\"funnelarea\"===e.type?v:e.sort)&amp;&amp;a.sort((function(t,e){return e.v-t.v})),a[0]&amp;&amp;(a[0].vTotal=g),a},crossTraceCalc:function(t,e){var r=(e||{}).type;r||(r=\"pie\");var n=t._fullLayout,i=t.calcdata,a=n[r+\"colorway\"],s=n[\"_\"+r+\"colormap\"];n[\"extend\"+r+\"colors\"]&amp;&amp;(a=l(a,o));for(var c=0,u=0;u0){s=!0;break}}s||(o=0)}return{hasLabels:r,hasValues:a,len:o}}e.exports={handleLabelsAndValues:l,supplyDefaults:function(t,e,r,n){function c(r,n){return i.coerce(t,e,a,r,n)}var u=l(c(\"labels\"),c(\"values\")),f=u.len;if(e._hasLabels=u.hasLabels,e._hasValues=u.hasValues,!e._hasLabels&amp;&amp;e._hasValues&amp;&amp;(c(\"label0\"),c(\"dlabel\")),f){e._length=f,c(\"marker.line.width\")&amp;&amp;c(\"marker.line.color\"),c(\"marker.colors\"),c(\"scalegroup\");var h,p=c(\"text\"),d=c(\"texttemplate\");if(d||(h=c(\"textinfo\",Array.isArray(p)?\"text+percent\":\"percent\")),c(\"hovertext\"),c(\"hovertemplate\"),d||h&amp;&amp;\"none\"!==h){var m=c(\"textposition\");s(t,e,n,c,m,{moduleHasSelected:!1,moduleHasUnselected:!1,moduleHasConstrain:!1,moduleHasCliponaxis:!1,moduleHasTextangle:!1,moduleHasInsideanchor:!1}),(Array.isArray(m)||\"auto\"===m||\"outside\"===m)&amp;&amp;c(\"automargin\"),(\"inside\"===m||\"auto\"===m||Array.isArray(m))&amp;&amp;c(\"insidetextorientation\")}o(e,n,c);var g=c(\"hole\");if(c(\"title.text\")){var v=c(\"title.position\",g?\"middle center\":\"top center\");g||\"middle center\"!==v||(e.title.position=\"top center\"),i.coerceFont(c,\"title.font\",n.font)}c(\"sort\"),c(\"direction\"),c(\"rotation\"),c(\"pull\")}else e.visible=!1}}},{\"../../lib\":515,\"../../plots/domain\":593,\"../bar/defaults\":661,\"./attributes\":910,\"fast-isnumeric\":190}],914:[function(t,e,r){\"use strict\";var n=t(\"../../components/fx/helpers\").appendArrayMultiPointValues;e.exports=function(t,e){var r={curveNumber:e.index,pointNumbers:t.pts,data:e._input,fullData:e,label:t.label,color:t.color,value:t.v,percent:t.percent,text:t.text,bbox:t.bbox,v:t.v};return 1===t.pts.length&amp;&amp;(r.pointNumber=r.i=t.pts[0]),n(r,e,t.pts),\"funnelarea\"===e.type&amp;&amp;(delete r.v,delete r.i),r}},{\"../../components/fx/helpers\":403}],915:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");function i(t){return-1!==t.indexOf(\"e\")?t.replace(/[.]?0+e/,\"e\"):-1!==t.indexOf(\".\")?t.replace(/[.]?0+$/,\"\"):t}r.formatPiePercent=function(t,e){var r=i((100*t).toPrecision(3));return n.numSeparate(r,e)+\"%\"},r.formatPieValue=function(t,e){var r=i(t.toPrecision(10));return n.numSeparate(r,e)},r.getFirstFilled=function(t,e){if(Array.isArray(t))for(var r=0;r\"),name:f.hovertemplate||-1!==h.indexOf(\"name\")?f.name:void 0,idealAlign:t.pxmid[0]&lt;0?\"left\":\"right\",color:g.castOption(_.bgcolor,t.pts)||t.color,borderColor:g.castOption(_.bordercolor,t.pts),fontFamily:g.castOption(w.family,t.pts),fontSize:g.castOption(w.size,t.pts),fontColor:g.castOption(w.color,t.pts),nameLength:g.castOption(_.namelength,t.pts),textAlign:g.castOption(_.align,t.pts),hovertemplate:g.castOption(f.hovertemplate,t.pts),hovertemplateLabels:t,eventData:[v(t,f)]},{container:r._hoverlayer.node(),outerContainer:r._paper.node(),gd:e,inOut_bbox:T}),t.bbox=T[0],c._hasHoverLabel=!0}c._hasHoverEvent=!0,e.emit(\"plotly_hover\",{points:[v(t,f)],event:n.event})}})),t.on(\"mouseout\",(function(t){var r=e._fullLayout,i=e._fullData[c.index],o=n.select(this).datum();c._hasHoverEvent&amp;&amp;(t.originalEvent=n.event,e.emit(\"plotly_unhover\",{points:[v(o,i)],event:n.event}),c._hasHoverEvent=!1),c._hasHoverLabel&amp;&amp;(a.loneUnhover(r._hoverlayer.node()),c._hasHoverLabel=!1)})),t.on(\"click\",(function(t){var r=e._fullLayout,i=e._fullData[c.index];e._dragging||!1===r.hovermode||(e._hoverdata=[v(t,i)],a.click(e,n.event))}))}function b(t,e,r){var n=g.castOption(t.insidetextfont.color,e.pts);!n&amp;&amp;t._input.textfont&amp;&amp;(n=g.castOption(t._input.textfont.color,e.pts));var i=g.castOption(t.insidetextfont.family,e.pts)||g.castOption(t.textfont.family,e.pts)||r.family,a=g.castOption(t.insidetextfont.size,e.pts)||g.castOption(t.textfont.size,e.pts)||r.size;return{color:n||o.contrast(e.color),family:i,size:a}}function _(t,e){for(var r,n,i=0;ie&amp;&amp;e&gt;n||r=-4;g-=2)v(Math.PI*g,\"tan\");for(g=4;g&gt;=-4;g-=2)v(Math.PI*(g+1),\"tan\")}if(f||p){for(g=4;g&gt;=-4;g-=2)v(Math.PI*(g+1.5),\"rad\");for(g=4;g&gt;=-4;g-=2)v(Math.PI*(g+.5),\"rad\")}}if(s||d||f){var y=Math.sqrt(t.width*t.width+t.height*t.height);if((a={scale:i*n*2/y,rCenter:1-i,rotate:0}).textPosAngle=(e.startangle+e.stopangle)/2,a.scale&gt;=1)return a;m.push(a)}(d||p)&amp;&amp;((a=T(t,n,o,l,c)).textPosAngle=(e.startangle+e.stopangle)/2,m.push(a)),(d||h)&amp;&amp;((a=k(t,n,o,l,c)).textPosAngle=(e.startangle+e.stopangle)/2,m.push(a));for(var x=0,b=0,_=0;_=1)break}return m[x]}function T(t,e,r,n,i){e=Math.max(0,e-2*m);var a=t.width/t.height,o=S(a,n,e,r);return{scale:2*o/t.height,rCenter:A(a,o/e),rotate:M(i)}}function k(t,e,r,n,i){e=Math.max(0,e-2*m);var a=t.height/t.width,o=S(a,n,e,r);return{scale:2*o/t.width,rCenter:A(a,o/e),rotate:M(i+Math.PI/2)}}function A(t,e){return Math.cos(e)-t*e}function M(t){return(180/Math.PI*t+720)%180-90}function S(t,e,r,n){var i=t+1/(2*Math.tan(e));return r*Math.min(1/(Math.sqrt(i*i+.5)+i),n/(Math.sqrt(t*t+n/2)+t))}function E(t,e){return t.v!==e.vTotal||e.trace.hole?Math.min(1/(1+1/Math.sin(t.halfangle)),t.ring/2):1}function L(t,e){var r=e.pxmid[0],n=e.pxmid[1],i=t.width/2,a=t.height/2;return r&lt;0&amp;&amp;(i*=-1),n&lt;0&amp;&amp;(a*=-1),{scale:1,rCenter:1,rotate:0,x:i+Math.abs(a)*(i&gt;0?1:-1)/2,y:a/(1+r*r/(n*n)),outside:!0}}function C(t,e){var r,n,i,a=t.trace,o={x:t.cx,y:t.cy},s={tx:0,ty:0};s.ty+=a.title.font.size,i=I(a),-1!==a.title.position.indexOf(\"top\")?(o.y-=(1+i)*t.r,s.ty-=t.titleBox.height):-1!==a.title.position.indexOf(\"bottom\")&amp;&amp;(o.y+=(1+i)*t.r);var l,c,u=(l=t.r,c=t.trace.aspectratio,l/(void 0===c?1:c)),f=e.w*(a.domain.x[1]-a.domain.x[0])/2;return-1!==a.title.position.indexOf(\"left\")?(f+=u,o.x-=(1+i)*u,s.tx+=t.titleBox.width/2):-1!==a.title.position.indexOf(\"center\")?f*=2:-1!==a.title.position.indexOf(\"right\")&amp;&amp;(f+=u,o.x+=(1+i)*u,s.tx-=t.titleBox.width/2),r=f/t.titleBox.width,n=P(t,e)/t.titleBox.height,{x:o.x,y:o.y,scale:Math.min(r,n),tx:s.tx,ty:s.ty}}function P(t,e){var r=t.trace,n=e.h*(r.domain.y[1]-r.domain.y[0]);return Math.min(t.titleBox.height,n/2)}function I(t){var e,r=t.pull;if(!r)return 0;if(Array.isArray(r))for(r=0,e=0;er&amp;&amp;(r=t.pull[e]);return r}function O(t,e){for(var r=[],n=0;n1?(c=r.r,u=c/i.aspectratio):(u=r.r,c=u*i.aspectratio),c*=(1+i.baseratio)/2,l=c*u}o=Math.min(o,l/r.vTotal)}for(n=0;n\")}if(a){var x=l.castOption(i,e.i,\"texttemplate\");if(x){var b=function(t){return{label:t.label,value:t.v,valueLabel:g.formatPieValue(t.v,n.separators),percent:t.v/r.vTotal,percentLabel:g.formatPiePercent(t.v/r.vTotal,n.separators),color:t.color,text:t.text,customdata:l.castOption(i,t.i,\"customdata\")}}(e),_=g.getFirstFilled(i.text,e.pts);(y(_)||\"\"===_)&amp;&amp;(b.text=_),e.text=l.texttemplateString(x,b,t._fullLayout._d3locale,b,i._meta||{})}else e.text=\"\"}}function R(t,e){var r=t.rotate*Math.PI/180,n=Math.cos(r),i=Math.sin(r),a=(e.left+e.right)/2,o=(e.top+e.bottom)/2;t.textX=a*n-o*i,t.textY=a*i+o*n,t.noCenter=!0}e.exports={plot:function(t,e){var r=t._context.staticPlot,a=t._fullLayout,h=a._size;d(\"pie\",a),_(e,t),O(e,h);var m=l.makeTraceGroups(a._pielayer,e,\"trace\").each((function(e){var d=n.select(this),m=e[0],v=m.trace;!function(t){var e,r,n,i=t[0],a=i.r,o=i.trace,s=g.getRotationAngle(o.rotation),l=2*Math.PI/i.vTotal,c=\"px0\",u=\"px1\";if(\"counterclockwise\"===o.direction){for(e=0;ei.vTotal/2?1:0,r.halfangle=Math.PI*Math.min(r.v/i.vTotal,.5),r.ring=1-o.hole,r.rInscribed=E(r,i))}(e),d.attr(\"stroke-linejoin\",\"round\"),d.each((function(){var y=n.select(this).selectAll(\"g.slice\").data(e);y.enter().append(\"g\").classed(\"slice\",!0),y.exit().remove();var _=[[[],[]],[[],[]]],T=!1;y.each((function(i,o){if(i.hidden)n.select(this).selectAll(\"path,g\").remove();else{i.pointNumber=i.i,i.curveNumber=v.index,_[i.pxmid[1]&lt;0?0:1][i.pxmid[0]&lt;0?0:1].push(i);var c=m.cx,u=m.cy,h=n.select(this),d=h.selectAll(\"path.surface\").data([i]);if(d.enter().append(\"path\").classed(\"surface\",!0).style({\"pointer-events\":r?\"none\":\"all\"}),h.call(x,t,e),v.pull){var y=+g.castOption(v.pull,i.pts)||0;y&gt;0&amp;&amp;(c+=y*i.pxmid[0],u+=y*i.pxmid[1])}i.cxFinal=c,i.cyFinal=u;var k=v.hole;if(i.v===m.vTotal){var A=\"M\"+(c+i.px0[0])+\",\"+(u+i.px0[1])+P(i.px0,i.pxmid,!0,1)+P(i.pxmid,i.px0,!0,1)+\"Z\";k?d.attr(\"d\",\"M\"+(c+k*i.px0[0])+\",\"+(u+k*i.px0[1])+P(i.px0,i.pxmid,!1,k)+P(i.pxmid,i.px0,!1,k)+\"Z\"+A):d.attr(\"d\",A)}else{var M=P(i.px0,i.px1,!0,1);if(k){var S=1-k;d.attr(\"d\",\"M\"+(c+k*i.px1[0])+\",\"+(u+k*i.px1[1])+P(i.px1,i.px0,!1,k)+\"l\"+S*i.px0[0]+\",\"+S*i.px0[1]+M+\"Z\")}else d.attr(\"d\",\"M\"+c+\",\"+u+\"l\"+i.px0[0]+\",\"+i.px0[1]+M+\"Z\")}D(t,i,m);var E=g.castOption(v.textposition,i.pts),C=h.selectAll(\"g.slicetext\").data(i.text&amp;&amp;\"none\"!==E?[0]:[]);C.enter().append(\"g\").classed(\"slicetext\",!0),C.exit().remove(),C.each((function(){var r=l.ensureSingle(n.select(this),\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),h=l.ensureUniformFontSize(t,\"outside\"===E?function(t,e,r){var n=g.castOption(t.outsidetextfont.color,e.pts)||g.castOption(t.textfont.color,e.pts)||r.color,i=g.castOption(t.outsidetextfont.family,e.pts)||g.castOption(t.textfont.family,e.pts)||r.family,a=g.castOption(t.outsidetextfont.size,e.pts)||g.castOption(t.textfont.size,e.pts)||r.size;return{color:n,family:i,size:a}}(v,i,a.font):b(v,i,a.font));r.text(i.text).attr({class:\"slicetext\",transform:\"\",\"text-anchor\":\"middle\"}).call(s.font,h).call(f.convertToTspans,t);var d,y=s.bBox(r.node());if(\"outside\"===E)d=L(y,i);else if(d=w(y,i,m),\"auto\"===E&amp;&amp;d.scale&lt;1){var x=l.ensureUniformFontSize(t,v.outsidetextfont);r.call(s.font,x),d=L(y=s.bBox(r.node()),i)}var _=d.textPosAngle,k=void 0===_?i.pxmid:z(m.r,_);if(d.targetX=c+k[0]*d.rCenter+(d.x||0),d.targetY=u+k[1]*d.rCenter+(d.y||0),R(d,y),d.outside){var A=d.targetY;i.yLabelMin=A-y.height/2,i.yLabelMid=A,i.yLabelMax=A+y.height/2,i.labelExtraX=0,i.labelExtraY=0,T=!0}d.fontSize=h.size,p(v.type,d,a),e[o].transform=d,l.setTransormAndDisplay(r,d)}))}function P(t,e,r,n){var a=n*(e[0]-t[0]),o=n*(e[1]-t[1]);return\"a\"+n*m.r+\",\"+n*m.r+\" 0 \"+i.largeArc+(r?\" 1 \":\" 0 \")+a+\",\"+o}}));var k=n.select(this).selectAll(\"g.titletext\").data(v.title.text?[0]:[]);if(k.enter().append(\"g\").classed(\"titletext\",!0),k.exit().remove(),k.each((function(){var e,r=l.ensureSingle(n.select(this),\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),i=v.title.text;v._meta&amp;&amp;(i=l.templateString(i,v._meta)),r.text(i).attr({class:\"titletext\",transform:\"\",\"text-anchor\":\"middle\"}).call(s.font,v.title.font).call(f.convertToTspans,t),e=\"middle center\"===v.title.position?function(t){var e=Math.sqrt(t.titleBox.width*t.titleBox.width+t.titleBox.height*t.titleBox.height);return{x:t.cx,y:t.cy,scale:t.trace.hole*t.r*2/e,tx:0,ty:-t.titleBox.height/2+t.trace.title.font.size}}(m):C(m,h),r.attr(\"transform\",u(e.x,e.y)+c(Math.min(1,e.scale))+u(e.tx,e.ty))})),T&amp;&amp;function(t,e){var r,n,i,a,o,s,l,c,u,f,h,p,d;function m(t,e){return t.pxmid[1]-e.pxmid[1]}function v(t,e){return e.pxmid[1]-t.pxmid[1]}function y(t,r){r||(r={});var i,c,u,h,p=r.labelExtraY+(n?r.yLabelMax:r.yLabelMin),d=n?t.yLabelMin:t.yLabelMax,m=n?t.yLabelMax:t.yLabelMin,v=t.cyFinal+o(t.px0[1],t.px1[1]),y=p-d;if(y*l&gt;0&amp;&amp;(t.labelExtraY=y),Array.isArray(e.pull))for(c=0;c=(g.castOption(e.pull,u.pts)||0)||((t.pxmid[1]-u.pxmid[1])*l&gt;0?(y=u.cyFinal+o(u.px0[1],u.px1[1])-d-t.labelExtraY)*l&gt;0&amp;&amp;(t.labelExtraY+=y):(m+t.labelExtraY-v)*l&gt;0&amp;&amp;(i=3*s*Math.abs(c-f.indexOf(t)),(h=u.cxFinal+a(u.px0[0],u.px1[0])+i-(t.cxFinal+t.pxmid[0])-t.labelExtraX)*s&gt;0&amp;&amp;(t.labelExtraX+=h)))}for(n=0;n&lt;2;n++)for(i=n?m:v,o=n?Math.max:Math.min,l=n?1:-1,r=0;r&lt;2;r++){for(a=r?Math.max:Math.min,s=r?1:-1,(c=t[n][r]).sort(i),u=t[1-n][r],f=u.concat(c),p=[],h=0;hMath.abs(f)?s+=\"l\"+f*t.pxmid[0]/t.pxmid[1]+\",\"+f+\"H\"+(a+t.labelExtraX+c):s+=\"l\"+t.labelExtraX+\",\"+u+\"v\"+(f-u)+\"h\"+c}else s+=\"V\"+(t.yLabelMid+t.labelExtraY)+\"h\"+c;l.ensureSingle(r,\"path\",\"textline\").call(o.stroke,e.outsidetextfont.color).attr({\"stroke-width\":Math.min(2,e.outsidetextfont.size/8),d:s,fill:\"none\"})}else r.select(\"path.textline\").remove()}))}(y,v),T&amp;&amp;v.automargin){var A=s.bBox(d.node()),M=v.domain,S=h.w*(M.x[1]-M.x[0]),E=h.h*(M.y[1]-M.y[0]),P=(.5*S-m.r)/h.w,I=(.5*E-m.r)/h.h;i.autoMargin(t,\"pie.\"+v.uid+\".automargin\",{xl:M.x[0]-P,xr:M.x[1]+P,yb:M.y[0]-I,yt:M.y[1]+I,l:Math.max(m.cx-m.r-A.left,0),r:Math.max(A.right-(m.cx+m.r),0),b:Math.max(A.bottom-(m.cy+m.r),0),t:Math.max(m.cy-m.r-A.top,0),pad:5})}}))}));setTimeout((function(){m.selectAll(\"tspan\").each((function(){var t=n.select(this);t.attr(\"dy\")&amp;&amp;t.attr(\"dy\",t.attr(\"dy\"))}))}),0)},formatSliceLabel:D,transformInsideText:w,determineInsideTextFont:b,positionTitleOutside:C,prerenderTitles:_,layoutAreas:O,attachFxHandlers:x,computeTransform:R}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../components/fx\":407,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../../plots/plots\":628,\"../bar/constants\":659,\"../bar/uniform_text\":673,\"./event_data\":914,\"./helpers\":915,\"@plotly/d3\":58}],920:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"./style_one\"),a=t(\"../bar/uniform_text\").resizeText;e.exports=function(t){var e=t._fullLayout._pielayer.selectAll(\".trace\");a(t,e,\"pie\"),e.each((function(t){var e=t[0].trace,r=n.select(this);r.style({opacity:e.opacity}),r.selectAll(\"path.surface\").each((function(t){n.select(this).call(i,t,e)}))}))}},{\"../bar/uniform_text\":673,\"./style_one\":921,\"@plotly/d3\":58}],921:[function(t,e,r){\"use strict\";var n=t(\"../../components/color\"),i=t(\"./helpers\").castOption;e.exports=function(t,e,r){var a=r.marker.line,o=i(a.color,e.pts)||n.defaultLine,s=i(a.width,e.pts)||0;t.style(\"stroke-width\",s).call(n.fill,e.color).call(n.stroke,o)}},{\"../../components/color\":367,\"./helpers\":915}],922:[function(t,e,r){\"use strict\";var n=t(\"../scatter/attributes\");e.exports={x:n.x,y:n.y,xy:{valType:\"data_array\",editType:\"calc\"},indices:{valType:\"data_array\",editType:\"calc\"},xbounds:{valType:\"data_array\",editType:\"calc\"},ybounds:{valType:\"data_array\",editType:\"calc\"},text:n.text,marker:{color:{valType:\"color\",arrayOk:!1,editType:\"calc\"},opacity:{valType:\"number\",min:0,max:1,dflt:1,arrayOk:!1,editType:\"calc\"},blend:{valType:\"boolean\",dflt:null,editType:\"calc\"},sizemin:{valType:\"number\",min:.1,max:2,dflt:.5,editType:\"calc\"},sizemax:{valType:\"number\",min:.1,dflt:20,editType:\"calc\"},border:{color:{valType:\"color\",arrayOk:!1,editType:\"calc\"},arearatio:{valType:\"number\",min:0,max:1,dflt:0,editType:\"calc\"},editType:\"calc\"},editType:\"calc\"},transforms:void 0}},{\"../scatter/attributes\":936}],923:[function(t,e,r){\"use strict\";var n=t(\"../../../stackgl_modules\").gl_pointcloud2d,i=t(\"../../lib/str2rgbarray\"),a=t(\"../../plots/cartesian/autorange\").findExtremes,o=t(\"../scatter/get_trace_color\");function s(t,e){this.scene=t,this.uid=e,this.type=\"pointcloud\",this.pickXData=[],this.pickYData=[],this.xData=[],this.yData=[],this.textLabels=[],this.color=\"rgb(0, 0, 0)\",this.name=\"\",this.hoverinfo=\"all\",this.idToIndex=new Int32Array(0),this.bounds=[0,0,0,0],this.pointcloudOptions={positions:new Float32Array(0),idToIndex:this.idToIndex,sizemin:.5,sizemax:12,color:[0,0,0,1],areaRatio:1,borderColor:[0,0,0,1]},this.pointcloud=n(t.glplot,this.pointcloudOptions),this.pointcloud._trace=this}var l=s.prototype;l.handlePick=function(t){var e=this.idToIndex[t.pointId];return{trace:this,dataCoord:t.dataCoord,traceCoord:this.pickXYData?[this.pickXYData[2*e],this.pickXYData[2*e+1]]:[this.pickXData[e],this.pickYData[e]],textLabel:Array.isArray(this.textLabels)?this.textLabels[e]:this.textLabels,color:this.color,name:this.name,pointIndex:e,hoverinfo:this.hoverinfo}},l.update=function(t){this.index=t.index,this.textLabels=t.text,this.name=t.name,this.hoverinfo=t.hoverinfo,this.bounds=[1/0,1/0,-1/0,-1/0],this.updateFast(t),this.color=o(t,{})},l.updateFast=function(t){var e,r,n,o,s,l,c=this.xData=this.pickXData=t.x,u=this.yData=this.pickYData=t.y,f=this.pickXYData=t.xy,h=t.xbounds&amp;&amp;t.ybounds,p=t.indices,d=this.bounds;if(f){if(n=f,e=f.length&gt;&gt;&gt;1,h)d[0]=t.xbounds[0],d[2]=t.xbounds[1],d[1]=t.ybounds[0],d[3]=t.ybounds[1];else for(l=0;ld[2]&amp;&amp;(d[2]=o),sd[3]&amp;&amp;(d[3]=s);if(p)r=p;else for(r=new Int32Array(e),l=0;ld[2]&amp;&amp;(d[2]=o),sd[3]&amp;&amp;(d[3]=s);this.idToIndex=r,this.pointcloudOptions.idToIndex=r,this.pointcloudOptions.positions=n;var m=i(t.marker.color),g=i(t.marker.border.color),v=t.opacity*t.marker.opacity;m[3]*=v,this.pointcloudOptions.color=m;var y=t.marker.blend;if(null===y){y=c.length&lt;100||u.length&lt;100}this.pointcloudOptions.blend=y,g[3]*=v,this.pointcloudOptions.borderColor=g;var x=t.marker.sizemin,b=Math.max(t.marker.sizemax,t.marker.sizemin);this.pointcloudOptions.sizeMin=x,this.pointcloudOptions.sizeMax=b,this.pointcloudOptions.areaRatio=t.marker.border.arearatio,this.pointcloud.update(this.pointcloudOptions);var _=this.scene.xaxis,w=this.scene.yaxis,T=b/2||.5;t._extremes[_._id]=a(_,[d[0],d[2]],{ppad:T}),t._extremes[w._id]=a(w,[d[1],d[3]],{ppad:T})},l.dispose=function(){this.pointcloud.dispose()},e.exports=function(t,e){var r=new s(t,e.uid);return r.update(e),r}},{\"../../../stackgl_modules\":1133,\"../../lib/str2rgbarray\":540,\"../../plots/cartesian/autorange\":565,\"../scatter/get_trace_color\":946}],924:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\");e.exports=function(t,e,r){function a(r,a){return n.coerce(t,e,i,r,a)}a(\"x\"),a(\"y\"),a(\"xbounds\"),a(\"ybounds\"),t.xy&amp;&amp;t.xy instanceof Float32Array&amp;&amp;(e.xy=t.xy),t.indices&amp;&amp;t.indices instanceof Int32Array&amp;&amp;(e.indices=t.indices),a(\"text\"),a(\"marker.color\",r),a(\"marker.opacity\"),a(\"marker.blend\"),a(\"marker.sizemin\"),a(\"marker.sizemax\"),a(\"marker.border.color\",r),a(\"marker.border.arearatio\"),e._length=null}},{\"../../lib\":515,\"./attributes\":922}],925:[function(t,e,r){\"use strict\";[\"*pointcloud* trace is deprecated!\",\"Please consider switching to the *scattergl* trace type.\"].join(\" \");e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"../scatter3d/calc\"),plot:t(\"./convert\"),moduleType:\"trace\",name:\"pointcloud\",basePlotModule:t(\"../../plots/gl2d\"),categories:[\"gl\",\"gl2d\",\"showLegend\"],meta:{}}},{\"../../plots/gl2d\":605,\"../scatter3d/calc\":965,\"./attributes\":922,\"./convert\":923,\"./defaults\":924}],926:[function(t,e,r){\"use strict\";var n=t(\"../../plots/font_attributes\"),i=t(\"../../plots/attributes\"),a=t(\"../../components/color/attributes\"),o=t(\"../../components/fx/attributes\"),s=t(\"../../plots/domain\").attributes,l=t(\"../../plots/template_attributes\").hovertemplateAttrs,c=t(\"../../components/colorscale/attributes\"),u=t(\"../../plot_api/plot_template\").templatedArray,f=t(\"../../plots/cartesian/axis_format_attributes\").descriptionOnlyNumbers,h=t(\"../../lib/extend\").extendFlat,p=t(\"../../plot_api/edit_types\").overrideAll;(e.exports=p({hoverinfo:h({},i.hoverinfo,{flags:[],arrayOk:!1}),hoverlabel:o.hoverlabel,domain:s({name:\"sankey\",trace:!0}),orientation:{valType:\"enumerated\",values:[\"v\",\"h\"],dflt:\"h\"},valueformat:{valType:\"string\",dflt:\".3s\",description:f(\"value\")},valuesuffix:{valType:\"string\",dflt:\"\"},arrangement:{valType:\"enumerated\",values:[\"snap\",\"perpendicular\",\"freeform\",\"fixed\"],dflt:\"snap\"},textfont:n({}),customdata:void 0,node:{label:{valType:\"data_array\",dflt:[]},groups:{valType:\"info_array\",impliedEdits:{x:[],y:[]},dimensions:2,freeLength:!0,dflt:[],items:{valType:\"number\",editType:\"calc\"}},x:{valType:\"data_array\",dflt:[]},y:{valType:\"data_array\",dflt:[]},color:{valType:\"color\",arrayOk:!0},customdata:{valType:\"data_array\",editType:\"calc\"},line:{color:{valType:\"color\",dflt:a.defaultLine,arrayOk:!0},width:{valType:\"number\",min:0,dflt:.5,arrayOk:!0}},pad:{valType:\"number\",arrayOk:!1,min:0,dflt:20},thickness:{valType:\"number\",arrayOk:!1,min:1,dflt:20},hoverinfo:{valType:\"enumerated\",values:[\"all\",\"none\",\"skip\"],dflt:\"all\"},hoverlabel:o.hoverlabel,hovertemplate:l({},{keys:[\"value\",\"label\"]})},link:{arrowlen:{valType:\"number\",min:0,dflt:0},label:{valType:\"data_array\",dflt:[]},color:{valType:\"color\",arrayOk:!0},customdata:{valType:\"data_array\",editType:\"calc\"},line:{color:{valType:\"color\",dflt:a.defaultLine,arrayOk:!0},width:{valType:\"number\",min:0,dflt:0,arrayOk:!0}},source:{valType:\"data_array\",dflt:[]},target:{valType:\"data_array\",dflt:[]},value:{valType:\"data_array\",dflt:[]},hoverinfo:{valType:\"enumerated\",values:[\"all\",\"none\",\"skip\"],dflt:\"all\"},hoverlabel:o.hoverlabel,hovertemplate:l({},{keys:[\"value\",\"label\"]}),colorscales:u(\"concentrationscales\",{editType:\"calc\",label:{valType:\"string\",editType:\"calc\",dflt:\"\"},cmax:{valType:\"number\",editType:\"calc\",dflt:1},cmin:{valType:\"number\",editType:\"calc\",dflt:0},colorscale:h(c().colorscale,{dflt:[[0,\"white\"],[1,\"black\"]]})})}},\"calc\",\"nested\")).transforms=void 0},{\"../../components/color/attributes\":366,\"../../components/colorscale/attributes\":374,\"../../components/fx/attributes\":398,\"../../lib/extend\":505,\"../../plot_api/edit_types\":548,\"../../plot_api/plot_template\":555,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/domain\":593,\"../../plots/font_attributes\":594,\"../../plots/template_attributes\":642}],927:[function(t,e,r){\"use strict\";var n=t(\"../../plot_api/edit_types\").overrideAll,i=t(\"../../plots/get_data\").getModuleCalcData,a=t(\"./plot\"),o=t(\"../../components/fx/layout_attributes\"),s=t(\"../../lib/setcursor\"),l=t(\"../../components/dragelement\"),c=t(\"../../components/selections\").prepSelect,u=t(\"../../lib\"),f=t(\"../../registry\");function h(t,e){var r=t._fullData[e],n=t._fullLayout,i=n.dragmode,a=\"pan\"===n.dragmode?\"move\":\"crosshair\",o=r._bgRect;if(o&amp;&amp;\"pan\"!==i&amp;&amp;\"zoom\"!==i){s(o,a);var h={_id:\"x\",c2p:u.identity,_offset:r._sankey.translateX,_length:r._sankey.width},p={_id:\"y\",c2p:u.identity,_offset:r._sankey.translateY,_length:r._sankey.height},d={gd:t,element:o.node(),plotinfo:{id:e,xaxis:h,yaxis:p,fillRangeItems:u.noop},subplot:e,xaxes:[h],yaxes:[p],doneFnCompleted:function(r){var n,i=t._fullData[e],a=i.node.groups.slice(),o=[];function s(t){for(var e=i._sankey.graph.nodes,r=0;ry&amp;&amp;(y=a.source[e]),a.target[e]&gt;y&amp;&amp;(y=a.target[e]);var x,b=y+1;t.node._count=b;var _=t.node.groups,w={};for(e=0;e&lt;_.length;e++){var T=_[e];for(x=0;x0&amp;&amp;s(E,b)&amp;&amp;s(L,b)&amp;&amp;(!w.hasOwnProperty(E)||!w.hasOwnProperty(L)||w[E]!==w[L])){w.hasOwnProperty(L)&amp;&amp;(L=w[L]),w.hasOwnProperty(E)&amp;&amp;(E=w[E]),L=+L,h[E=+E]=h[L]=!0;var C=\"\";a.label&amp;&amp;a.label[e]&amp;&amp;(C=a.label[e]);var P=null;C&amp;&amp;p.hasOwnProperty(C)&amp;&amp;(P=p[C]),c.push({pointNumber:e,label:C,color:u?a.color[e]:a.color,customdata:f?a.customdata[e]:a.customdata,concentrationscale:P,source:E,target:L,value:+S}),M.source.push(E),M.target.push(L)}}var I=b+_.length,O=o(r.color),z=o(r.customdata),D=[];for(e=0;eb-1,childrenNodes:[],pointNumber:e,label:R,color:O?r.color[e]:r.color,customdata:z?r.customdata[e]:r.customdata})}var F=!1;return function(t,e,r){for(var a=i.init2dArray(t,0),o=0;o1}))}(I,M.source,M.target)&amp;&amp;(F=!0),{circular:F,links:c,nodes:D,groups:_,groupLookup:w}}e.exports=function(t,e){var r=c(e);return a({circular:r.circular,_nodes:r.nodes,_links:r.links,_groups:r.groups,_groupLookup:r.groupLookup})}},{\"../../components/colorscale\":379,\"../../lib\":515,\"../../lib/gup\":512,\"strongly-connected-components\":307}],929:[function(t,e,r){\"use strict\";e.exports={nodeTextOffsetHorizontal:4,nodeTextOffsetVertical:3,nodePadAcross:10,sankeyIterations:50,forceIterations:5,forceTicksPerFrame:10,duration:500,ease:\"linear\",cn:{sankey:\"sankey\",sankeyLinks:\"sankey-links\",sankeyLink:\"sankey-link\",sankeyNodeSet:\"sankey-node-set\",sankeyNode:\"sankey-node\",nodeRect:\"node-rect\",nodeLabel:\"node-label\"}}},{}],930:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\"),a=t(\"../../components/color\"),o=t(\"tinycolor2\"),s=t(\"../../plots/domain\").defaults,l=t(\"../../components/fx/hoverlabel_defaults\"),c=t(\"../../plot_api/plot_template\"),u=t(\"../../plots/array_container_defaults\");function f(t,e){function r(r,a){return n.coerce(t,e,i.link.colorscales,r,a)}r(\"label\"),r(\"cmin\"),r(\"cmax\"),r(\"colorscale\")}e.exports=function(t,e,r,h){function p(r,a){return n.coerce(t,e,i,r,a)}var d=n.extendDeep(h.hoverlabel,t.hoverlabel),m=t.node,g=c.newContainer(e,\"node\");function v(t,e){return n.coerce(m,g,i.node,t,e)}v(\"label\"),v(\"groups\"),v(\"x\"),v(\"y\"),v(\"pad\"),v(\"thickness\"),v(\"line.color\"),v(\"line.width\"),v(\"hoverinfo\",t.hoverinfo),l(m,g,v,d),v(\"hovertemplate\");var y=h.colorway;v(\"color\",g.label.map((function(t,e){return a.addOpacity(function(t){return y[t%y.length]}(e),.8)}))),v(\"customdata\");var x=t.link||{},b=c.newContainer(e,\"link\");function _(t,e){return n.coerce(x,b,i.link,t,e)}_(\"label\"),_(\"arrowlen\"),_(\"source\"),_(\"target\"),_(\"value\"),_(\"line.color\"),_(\"line.width\"),_(\"hoverinfo\",t.hoverinfo),l(x,b,_,d),_(\"hovertemplate\");var w,T=o(h.paper_bgcolor).getLuminance()&lt;.333?\"rgba(255, 255, 255, 0.6)\":\"rgba(0, 0, 0, 0.2)\";_(\"color\",n.repeat(T,b.value.length)),_(\"customdata\"),u(x,b,{name:\"colorscales\",handleItemDefaults:f}),s(e,h,p),p(\"orientation\"),p(\"valueformat\"),p(\"valuesuffix\"),g.x.length&amp;&amp;g.y.length&amp;&amp;(w=\"freeform\"),p(\"arrangement\",w),n.coerceFont(p,\"textfont\",n.extendFlat({},h.font)),e._length=null}},{\"../../components/color\":367,\"../../components/fx/hoverlabel_defaults\":405,\"../../lib\":515,\"../../plot_api/plot_template\":555,\"../../plots/array_container_defaults\":561,\"../../plots/domain\":593,\"./attributes\":926,tinycolor2:313}],931:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"./calc\"),plot:t(\"./plot\"),moduleType:\"trace\",name:\"sankey\",basePlotModule:t(\"./base_plot\"),selectPoints:t(\"./select.js\"),categories:[\"noOpacity\"],meta:{}}},{\"./attributes\":926,\"./base_plot\":927,\"./calc\":928,\"./defaults\":930,\"./plot\":932,\"./select.js\":934}],932:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=i.numberFormat,o=t(\"./render\"),s=t(\"../../components/fx\"),l=t(\"../../components/color\"),c=t(\"./constants\").cn,u=i._;function f(t){return\"\"!==t}function h(t,e){return t.filter((function(t){return t.key===e.traceId}))}function p(t,e){n.select(t).select(\"path\").style(\"fill-opacity\",e),n.select(t).select(\"rect\").style(\"fill-opacity\",e)}function d(t){n.select(t).select(\"text.name\").style(\"fill\",\"black\")}function m(t){return function(e){return-1!==t.node.sourceLinks.indexOf(e.link)||-1!==t.node.targetLinks.indexOf(e.link)}}function g(t){return function(e){return-1!==e.node.sourceLinks.indexOf(t.link)||-1!==e.node.targetLinks.indexOf(t.link)}}function v(t,e,r){e&amp;&amp;r&amp;&amp;h(r,e).selectAll(\".\"+c.sankeyLink).filter(m(e)).call(x.bind(0,e,r,!1))}function y(t,e,r){e&amp;&amp;r&amp;&amp;h(r,e).selectAll(\".\"+c.sankeyLink).filter(m(e)).call(b.bind(0,e,r,!1))}function x(t,e,r,n){var i=n.datum().link.label;n.style(\"fill-opacity\",(function(t){if(!t.link.concentrationscale)return.4})),i&amp;&amp;h(e,t).selectAll(\".\"+c.sankeyLink).filter((function(t){return t.link.label===i})).style(\"fill-opacity\",(function(t){if(!t.link.concentrationscale)return.4})),r&amp;&amp;h(e,t).selectAll(\".\"+c.sankeyNode).filter(g(t)).call(v)}function b(t,e,r,n){var i=n.datum().link.label;n.style(\"fill-opacity\",(function(t){return t.tinyColorAlpha})),i&amp;&amp;h(e,t).selectAll(\".\"+c.sankeyLink).filter((function(t){return t.link.label===i})).style(\"fill-opacity\",(function(t){return t.tinyColorAlpha})),r&amp;&amp;h(e,t).selectAll(c.sankeyNode).filter(g(t)).call(y)}function _(t,e){var r=t.hoverlabel||{},n=i.nestedProperty(r,e).get();return!Array.isArray(n)&amp;&amp;n}e.exports=function(t,e){for(var r=t._fullLayout,i=r._paper,h=r._size,m=0;m\"),color:_(o,\"bgcolor\")||l.addOpacity(m.color,1),borderColor:_(o,\"bordercolor\"),fontFamily:_(o,\"font.family\"),fontSize:_(o,\"font.size\"),fontColor:_(o,\"font.color\"),nameLength:_(o,\"namelength\"),textAlign:_(o,\"align\"),idealAlign:n.event.x\"),color:_(o,\"bgcolor\")||i.tinyColorHue,borderColor:_(o,\"bordercolor\"),fontFamily:_(o,\"font.family\"),fontSize:_(o,\"font.size\"),fontColor:_(o,\"font.color\"),nameLength:_(o,\"namelength\"),textAlign:_(o,\"align\"),idealAlign:\"left\",hovertemplate:o.hovertemplate,hovertemplateLabels:y,eventData:[i.node]},{container:r._hoverlayer.node(),outerContainer:r._paper.node(),gd:t});p(w,.85),d(w)}}},unhover:function(e,i,a){!1!==t._fullLayout.hovermode&amp;&amp;(n.select(e).call(y,i,a),\"skip\"!==i.node.trace.node.hoverinfo&amp;&amp;(i.node.fullData=i.node.trace,t.emit(\"plotly_unhover\",{event:n.event,points:[i.node]})),s.loneUnhover(r._hoverlayer.node()))},select:function(e,r,i){var a=r.node;a.originalEvent=n.event,t._hoverdata=[a],n.select(e).call(y,r,i),s.click(t,{target:!0})}}})}},{\"../../components/color\":367,\"../../components/fx\":407,\"../../lib\":515,\"./constants\":929,\"./render\":933,\"@plotly/d3\":58}],933:[function(t,e,r){\"use strict\";var n=t(\"d3-force\"),i=t(\"d3-interpolate\").interpolateNumber,a=t(\"@plotly/d3\"),o=t(\"@plotly/d3-sankey\"),s=t(\"@plotly/d3-sankey-circular\"),l=t(\"./constants\"),c=t(\"tinycolor2\"),u=t(\"../../components/color\"),f=t(\"../../components/drawing\"),h=t(\"../../lib\"),p=h.strTranslate,d=h.strRotate,m=t(\"../../lib/gup\"),g=m.keyFun,v=m.repeat,y=m.unwrap,x=t(\"../../lib/svg_text_utils\"),b=t(\"../../registry\"),_=t(\"../../constants/alignment\"),w=_.CAP_SHIFT,T=_.LINE_SPACING;function k(t,e,r){var n,i=y(e),a=i.trace,u=a.domain,f=\"h\"===a.orientation,p=a.node.pad,d=a.node.thickness,m=t.width*(u.x[1]-u.x[0]),g=t.height*(u.y[1]-u.y[0]),v=i._nodes,x=i._links,b=i.circular;(n=b?s.sankeyCircular().circularLinkGap(0):o.sankey()).iterations(l.sankeyIterations).size(f?[m,g]:[g,m]).nodeWidth(d).nodePadding(p).nodeId((function(t){return t.pointNumber})).nodes(v).links(x);var _,w,T,k=n();for(var A in n.nodePadding()=i||(r=i-e.y0)&gt;1e-6&amp;&amp;(e.y0+=r,e.y1+=r),i=e.y1+p}))}(function(t){var e,r,n=t.map((function(t,e){return{x0:t.x0,index:e}})).sort((function(t,e){return t.x0-e.x0})),i=[],a=-1,o=-1/0;for(_=0;_o+d&amp;&amp;(a+=1,e=s.x0),o=s.x0,i[a]||(i[a]=[]),i[a].push(s),r=e-s.x0,s.x0+=r,s.x1+=r}return i}(v=k.nodes));n.update(k)}return{circular:b,key:r,trace:a,guid:h.randstr(),horizontal:f,width:m,height:g,nodePad:a.node.pad,nodeLineColor:a.node.line.color,nodeLineWidth:a.node.line.width,linkLineColor:a.link.line.color,linkLineWidth:a.link.line.width,linkArrowLength:a.link.arrowlen,valueFormat:a.valueformat,valueSuffix:a.valuesuffix,textFont:a.textfont,translateX:u.x[0]*t.width+t.margin.l,translateY:t.height-u.y[1]*t.height+t.margin.t,dragParallel:f?g:m,dragPerpendicular:f?m:g,arrangement:a.arrangement,sankey:n,graph:k,forceLayouts:{},interactionState:{dragInProgress:!1,hovered:!1}}}function A(t,e,r){var n=c(e.color),i=e.source.label+\"|\"+e.target.label+\"__\"+r;return e.trace=t.trace,e.curveNumber=t.trace.index,{circular:t.circular,key:i,traceId:t.key,pointNumber:e.pointNumber,link:e,tinyColorHue:u.tinyRGB(n),tinyColorAlpha:n.getAlpha(),linkPath:M,linkLineColor:t.linkLineColor,linkLineWidth:t.linkLineWidth,linkArrowLength:t.linkArrowLength,valueFormat:t.valueFormat,valueSuffix:t.valueSuffix,sankey:t.sankey,parent:t,interactionState:t.interactionState,flow:e.flow}}function M(){return function(t){var e=t.linkArrowLength;if(t.link.circular)return function(t,e){var r=t.width/2,n=t.circularPathData;return\"top\"===t.circularLinkType?\"M \"+(n.targetX-e)+\" \"+(n.targetY+r)+\" L\"+(n.rightInnerExtent-e)+\" \"+(n.targetY+r)+\"A\"+(n.rightLargeArcRadius+r)+\" \"+(n.rightSmallArcRadius+r)+\" 0 0 1 \"+(n.rightFullExtent-r-e)+\" \"+(n.targetY-n.rightSmallArcRadius)+\"L\"+(n.rightFullExtent-r-e)+\" \"+n.verticalRightInnerExtent+\"A\"+(n.rightLargeArcRadius+r)+\" \"+(n.rightLargeArcRadius+r)+\" 0 0 1 \"+(n.rightInnerExtent-e)+\" \"+(n.verticalFullExtent-r)+\"L\"+n.leftInnerExtent+\" \"+(n.verticalFullExtent-r)+\"A\"+(n.leftLargeArcRadius+r)+\" \"+(n.leftLargeArcRadius+r)+\" 0 0 1 \"+(n.leftFullExtent+r)+\" \"+n.verticalLeftInnerExtent+\"L\"+(n.leftFullExtent+r)+\" \"+(n.sourceY-n.leftSmallArcRadius)+\"A\"+(n.leftLargeArcRadius+r)+\" \"+(n.leftSmallArcRadius+r)+\" 0 0 1 \"+n.leftInnerExtent+\" \"+(n.sourceY+r)+\"L\"+n.sourceX+\" \"+(n.sourceY+r)+\"L\"+n.sourceX+\" \"+(n.sourceY-r)+\"L\"+n.leftInnerExtent+\" \"+(n.sourceY-r)+\"A\"+(n.leftLargeArcRadius-r)+\" \"+(n.leftSmallArcRadius-r)+\" 0 0 0 \"+(n.leftFullExtent-r)+\" \"+(n.sourceY-n.leftSmallArcRadius)+\"L\"+(n.leftFullExtent-r)+\" \"+n.verticalLeftInnerExtent+\"A\"+(n.leftLargeArcRadius-r)+\" \"+(n.leftLargeArcRadius-r)+\" 0 0 0 \"+n.leftInnerExtent+\" \"+(n.verticalFullExtent+r)+\"L\"+(n.rightInnerExtent-e)+\" \"+(n.verticalFullExtent+r)+\"A\"+(n.rightLargeArcRadius-r)+\" \"+(n.rightLargeArcRadius-r)+\" 0 0 0 \"+(n.rightFullExtent+r-e)+\" \"+n.verticalRightInnerExtent+\"L\"+(n.rightFullExtent+r-e)+\" \"+(n.targetY-n.rightSmallArcRadius)+\"A\"+(n.rightLargeArcRadius-r)+\" \"+(n.rightSmallArcRadius-r)+\" 0 0 0 \"+(n.rightInnerExtent-e)+\" \"+(n.targetY-r)+\"L\"+(n.targetX-e)+\" \"+(n.targetY-r)+(e&gt;0?\"L\"+n.targetX+\" \"+n.targetY:\"\")+\"Z\":\"M \"+(n.targetX-e)+\" \"+(n.targetY-r)+\" L\"+(n.rightInnerExtent-e)+\" \"+(n.targetY-r)+\"A\"+(n.rightLargeArcRadius+r)+\" \"+(n.rightSmallArcRadius+r)+\" 0 0 0 \"+(n.rightFullExtent-r-e)+\" \"+(n.targetY+n.rightSmallArcRadius)+\"L\"+(n.rightFullExtent-r-e)+\" \"+n.verticalRightInnerExtent+\"A\"+(n.rightLargeArcRadius+r)+\" \"+(n.rightLargeArcRadius+r)+\" 0 0 0 \"+(n.rightInnerExtent-e)+\" \"+(n.verticalFullExtent+r)+\"L\"+n.leftInnerExtent+\" \"+(n.verticalFullExtent+r)+\"A\"+(n.leftLargeArcRadius+r)+\" \"+(n.leftLargeArcRadius+r)+\" 0 0 0 \"+(n.leftFullExtent+r)+\" \"+n.verticalLeftInnerExtent+\"L\"+(n.leftFullExtent+r)+\" \"+(n.sourceY+n.leftSmallArcRadius)+\"A\"+(n.leftLargeArcRadius+r)+\" \"+(n.leftSmallArcRadius+r)+\" 0 0 0 \"+n.leftInnerExtent+\" \"+(n.sourceY-r)+\"L\"+n.sourceX+\" \"+(n.sourceY-r)+\"L\"+n.sourceX+\" \"+(n.sourceY+r)+\"L\"+n.leftInnerExtent+\" \"+(n.sourceY+r)+\"A\"+(n.leftLargeArcRadius-r)+\" \"+(n.leftSmallArcRadius-r)+\" 0 0 1 \"+(n.leftFullExtent-r)+\" \"+(n.sourceY+n.leftSmallArcRadius)+\"L\"+(n.leftFullExtent-r)+\" \"+n.verticalLeftInnerExtent+\"A\"+(n.leftLargeArcRadius-r)+\" \"+(n.leftLargeArcRadius-r)+\" 0 0 1 \"+n.leftInnerExtent+\" \"+(n.verticalFullExtent-r)+\"L\"+(n.rightInnerExtent-e)+\" \"+(n.verticalFullExtent-r)+\"A\"+(n.rightLargeArcRadius-r)+\" \"+(n.rightLargeArcRadius-r)+\" 0 0 1 \"+(n.rightFullExtent+r-e)+\" \"+n.verticalRightInnerExtent+\"L\"+(n.rightFullExtent+r-e)+\" \"+(n.targetY+n.rightSmallArcRadius)+\"A\"+(n.rightLargeArcRadius-r)+\" \"+(n.rightSmallArcRadius-r)+\" 0 0 1 \"+(n.rightInnerExtent-e)+\" \"+(n.targetY+r)+\"L\"+(n.targetX-e)+\" \"+(n.targetY+r)+(e&gt;0?\"L\"+n.targetX+\" \"+n.targetY:\"\")+\"Z\"}(t.link,e);var r=Math.abs((t.link.target.x0-t.link.source.x1)/2);e&gt;r&amp;&amp;(e=r);var n=t.link.source.x1,a=t.link.target.x0-e,o=i(n,a),s=o(.5),l=o(.5),c=t.link.y0-t.link.width/2,u=t.link.y0+t.link.width/2,f=t.link.y1-t.link.width/2,h=t.link.y1+t.link.width/2,p=\"M\"+n+\",\"+c,d=\"C\"+s+\",\"+c+\" \"+l+\",\"+f+\" \"+a+\",\"+f,m=\"C\"+l+\",\"+h+\" \"+s+\",\"+u+\" \"+n+\",\"+u,g=e&gt;0?\"L\"+(a+e)+\",\"+(f+t.link.width/2):\"\";return p+d+(g+=\"L\"+a+\",\"+h)+m+\"Z\"}}function S(t,e){var r=c(e.color),n=l.nodePadAcross,i=t.nodePad/2;e.dx=e.x1-e.x0,e.dy=e.y1-e.y0;var a=e.dx,o=Math.max(.5,e.dy),s=\"node_\"+e.pointNumber;return e.group&amp;&amp;(s=h.randstr()),e.trace=t.trace,e.curveNumber=t.trace.index,{index:e.pointNumber,key:s,partOfGroup:e.partOfGroup||!1,group:e.group,traceId:t.key,trace:t.trace,node:e,nodePad:t.nodePad,nodeLineColor:t.nodeLineColor,nodeLineWidth:t.nodeLineWidth,textFont:t.textFont,size:t.horizontal?t.height:t.width,visibleWidth:Math.ceil(a),visibleHeight:o,zoneX:-n,zoneY:-i,zoneWidth:a+2*n,zoneHeight:o+2*i,labelY:t.horizontal?e.dy/2+1:e.dx/2+1,left:1===e.originalLayer,sizeAcross:t.width,forceLayouts:t.forceLayouts,horizontal:t.horizontal,darkBackground:r.getBrightness()&lt;=128,tinyColorHue:u.tinyRGB(r),tinyColorAlpha:r.getAlpha(),valueFormat:t.valueFormat,valueSuffix:t.valueSuffix,sankey:t.sankey,graph:t.graph,arrangement:t.arrangement,uniqueNodeLabelPathId:[t.guid,t.key,s].join(\"_\"),interactionState:t.interactionState,figure:t}}function E(t){t.attr(\"transform\",(function(t){return p(t.node.x0.toFixed(3),t.node.y0.toFixed(3))}))}function L(t){t.call(E)}function C(t,e){t.call(L),e.attr(\"d\",M())}function P(t){t.attr(\"width\",(function(t){return t.node.x1-t.node.x0})).attr(\"height\",(function(t){return t.visibleHeight}))}function I(t){return t.link.width&gt;1||t.linkLineWidth&gt;0}function O(t){return p(t.translateX,t.translateY)+(t.horizontal?\"matrix(1 0 0 1 0 0)\":\"matrix(0 1 1 0 0 0)\")}function z(t,e,r){t.on(\".basic\",null).on(\"mouseover.basic\",(function(t){t.interactionState.dragInProgress||t.partOfGroup||(r.hover(this,t,e),t.interactionState.hovered=[this,t])})).on(\"mousemove.basic\",(function(t){t.interactionState.dragInProgress||t.partOfGroup||(r.follow(this,t),t.interactionState.hovered=[this,t])})).on(\"mouseout.basic\",(function(t){t.interactionState.dragInProgress||t.partOfGroup||(r.unhover(this,t,e),t.interactionState.hovered=!1)})).on(\"click.basic\",(function(t){t.interactionState.hovered&amp;&amp;(r.unhover(this,t,e),t.interactionState.hovered=!1),t.interactionState.dragInProgress||t.partOfGroup||r.select(this,t,e)}))}function D(t,e,r,i){var o=a.behavior.drag().origin((function(t){return{x:t.node.x0+t.visibleWidth/2,y:t.node.y0+t.visibleHeight/2}})).on(\"dragstart\",(function(a){if(\"fixed\"!==a.arrangement&amp;&amp;(h.ensureSingle(i._fullLayout._infolayer,\"g\",\"dragcover\",(function(t){i._fullLayout._dragCover=t})),h.raiseToTop(this),a.interactionState.dragInProgress=a.node,F(a.node),a.interactionState.hovered&amp;&amp;(r.nodeEvents.unhover.apply(0,a.interactionState.hovered),a.interactionState.hovered=!1),\"snap\"===a.arrangement)){var o=a.traceId+\"|\"+a.key;a.forceLayouts[o]?a.forceLayouts[o].alpha(1):function(t,e,r,i){!function(t){for(var e=0;e0&amp;&amp;n.forceLayouts[e].alpha(0)}}(0,e,a,r)).stop()}(0,o,a),function(t,e,r,n,i){window.requestAnimationFrame((function a(){var o;for(o=0;o0)window.requestAnimationFrame(a);else{var s=r.node.originalX;r.node.x0=s-r.visibleWidth/2,r.node.x1=s+r.visibleWidth/2,R(r,i)}}))}(t,e,a,o,i)}})).on(\"drag\",(function(r){if(\"fixed\"!==r.arrangement){var n=a.event.x,i=a.event.y;\"snap\"===r.arrangement?(r.node.x0=n-r.visibleWidth/2,r.node.x1=n+r.visibleWidth/2,r.node.y0=i-r.visibleHeight/2,r.node.y1=i+r.visibleHeight/2):(\"freeform\"===r.arrangement&amp;&amp;(r.node.x0=n-r.visibleWidth/2,r.node.x1=n+r.visibleWidth/2),i=Math.max(0,Math.min(r.size-r.visibleHeight/2,i)),r.node.y0=i-r.visibleHeight/2,r.node.y1=i+r.visibleHeight/2),F(r.node),\"snap\"!==r.arrangement&amp;&amp;(r.sankey.update(r.graph),C(t.filter(B(r)),e))}})).on(\"dragend\",(function(t){if(\"fixed\"!==t.arrangement){t.interactionState.dragInProgress=!1;for(var e=0;e&lt;t.node.childrenNodes.length;e++)t.node.childrenNodes[e].x=t.node.x,t.node.childrenNodes[e].y=t.node.y;\"snap\"!==t.arrangement&amp;&amp;R(t,i)}}));t.on(\".drag\",null).call(o)}function R(t,e){for(var r=[],n=[],i=0;i&lt;t.graph.nodes.length;i++){var a=(t.graph.nodes[i].x0+t.graph.nodes[i].x1)/2,o=(t.graph.nodes[i].y0+t.graph.nodes[i].y1)/2;r.push(a/t.figure.width),n.push(o/t.figure.height)}b.call(\"_guiRestyle\",e,{\"node.x\":[r],\"node.y\":[n]},t.trace.index).then((function(){e._fullLayout._dragCover&amp;&amp;e._fullLayout._dragCover.remove()}))}function F(t){t.lastDraggedX=t.x0+t.dx/2,t.lastDraggedY=t.y0+t.dy/2}function B(t){return function(e){return e.node.originalX===t.node.originalX}}e.exports=function(t,e,r,n,i){var o=t._context.staticPlot,s=!1;h.ensureSingle(t._fullLayout._infolayer,\"g\",\"first-render\",(function(){s=!0}));var m=t._fullLayout._dragCover,b=r.filter((function(t){return y(t).trace.visible})).map(k.bind(null,n)),_=e.selectAll(\".\"+l.cn.sankey).data(b,g);_.exit().remove(),_.enter().append(\"g\").classed(l.cn.sankey,!0).style(\"box-sizing\",\"content-box\").style(\"position\",\"absolute\").style(\"left\",0).style(\"shape-rendering\",\"geometricPrecision\").style(\"pointer-events\",o?\"none\":\"auto\").attr(\"transform\",O),_.each((function(e,r){t._fullData[r]._sankey=e;var n=\"bgsankey-\"+e.trace.uid+\"-\"+r;h.ensureSingle(t._fullLayout._draggers,\"rect\",n),t._fullData[r]._bgRect=a.select(\".\"+n),t._fullData[r]._bgRect.style(\"pointer-events\",o?\"none\":\"all\").attr(\"width\",e.width).attr(\"height\",e.height).attr(\"x\",e.translateX).attr(\"y\",e.translateY).classed(\"bgsankey\",!0).style({fill:\"transparent\",\"stroke-width\":0})})),_.transition().ease(l.ease).duration(l.duration).attr(\"transform\",O);var L=_.selectAll(\".\"+l.cn.sankeyLinks).data(v,g);L.enter().append(\"g\").classed(l.cn.sankeyLinks,!0).style(\"fill\",\"none\");var C=L.selectAll(\".\"+l.cn.sankeyLink).data((function(t){return t.graph.links.filter((function(t){return t.value})).map(A.bind(null,t))}),g);C.enter().append(\"path\").classed(l.cn.sankeyLink,!0).call(z,_,i.linkEvents),C.style(\"stroke\",(function(t){return I(t)?u.tinyRGB(c(t.linkLineColor)):t.tinyColorHue})).style(\"stroke-opacity\",(function(t){return I(t)?u.opacity(t.linkLineColor):t.tinyColorAlpha})).style(\"fill\",(function(t){return t.tinyColorHue})).style(\"fill-opacity\",(function(t){return t.tinyColorAlpha})).style(\"stroke-width\",(function(t){return I(t)?t.linkLineWidth:1})).attr(\"d\",M()),C.style(\"opacity\",(function(){return t._context.staticPlot||s||m?1:0})).transition().ease(l.ease).duration(l.duration).style(\"opacity\",1),C.exit().transition().ease(l.ease).duration(l.duration).style(\"opacity\",0).remove();var R=_.selectAll(\".\"+l.cn.sankeyNodeSet).data(v,g);R.enter().append(\"g\").classed(l.cn.sankeyNodeSet,!0),R.style(\"cursor\",(function(t){switch(t.arrangement){case\"fixed\":return\"default\";case\"perpendicular\":return\"ns-resize\";default:return\"move\"}}));var F=R.selectAll(\".\"+l.cn.sankeyNode).data((function(t){var e=t.graph.nodes;return function(t){var e,r=[];for(e=0;e&lt;t.length;e++)t[e].originalX=(t[e].x0+t[e].x1)/2,t[e].originalY=(t[e].y0+t[e].y1)/2,-1===r.indexOf(t[e].originalX)&amp;&amp;r.push(t[e].originalX);for(r.sort((function(t,e){return t-e})),e=0;e&lt;t.length;e++)t[e].originalLayerIndex=r.indexOf(t[e].originalX),t[e].originalLayer=t[e].originalLayerIndex/(r.length-1)}(e),e.map(S.bind(null,t))}),g);F.enter().append(\"g\").classed(l.cn.sankeyNode,!0).call(E).style(\"opacity\",(function(e){return!t._context.staticPlot&amp;&amp;!s||e.partOfGroup?0:1})),F.call(z,_,i.nodeEvents).call(D,C,i,t),F.transition().ease(l.ease).duration(l.duration).call(E).style(\"opacity\",(function(t){return t.partOfGroup?0:1})),F.exit().transition().ease(l.ease).duration(l.duration).style(\"opacity\",0).remove();var B=F.selectAll(\".\"+l.cn.nodeRect).data(v);B.enter().append(\"rect\").classed(l.cn.nodeRect,!0).call(P),B.style(\"stroke-width\",(function(t){return t.nodeLineWidth})).style(\"stroke\",(function(t){return u.tinyRGB(c(t.nodeLineColor))})).style(\"stroke-opacity\",(function(t){return u.opacity(t.nodeLineColor)})).style(\"fill\",(function(t){return t.tinyColorHue})).style(\"fill-opacity\",(function(t){return t.tinyColorAlpha})),B.transition().ease(l.ease).duration(l.duration).call(P);var N=F.selectAll(\".\"+l.cn.nodeLabel).data(v);N.enter().append(\"text\").classed(l.cn.nodeLabel,!0).style(\"cursor\",\"default\"),N.attr(\"data-notex\",1).text((function(t){return t.node.label})).each((function(e){var r=a.select(this);f.font(r,e.textFont),x.convertToTspans(r,t)})).style(\"text-shadow\",x.makeTextShadow(t._fullLayout.paper_bgcolor)).attr(\"text-anchor\",(function(t){return t.horizontal&amp;&amp;t.left?\"end\":\"start\"})).attr(\"transform\",(function(t){var e=a.select(this),r=x.lineCount(e),n=t.textFont.size*((r-1)*T-w),i=t.nodeLineWidth/2+3,o=((t.horizontal?t.visibleHeight:t.visibleWidth)-n)/2;t.horizontal&amp;&amp;(t.left?i=-i:i+=t.visibleWidth);var s=t.horizontal?\"\":\"scale(-1,1)\"+d(90);return p(t.horizontal?i:o,t.horizontal?o:i)+s})),N.transition().ease(l.ease).duration(l.duration)}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../constants/alignment\":483,\"../../lib\":515,\"../../lib/gup\":512,\"../../lib/svg_text_utils\":541,\"../../registry\":647,\"./constants\":929,\"@plotly/d3\":58,\"@plotly/d3-sankey\":57,\"@plotly/d3-sankey-circular\":56,\"d3-force\":111,\"d3-interpolate\":116,tinycolor2:313}],934:[function(t,e,r){\"use strict\";e.exports=function(t,e){for(var r=[],n=t.cd[0].trace,i=n._sankey.graph.nodes,a=0;a&lt;i.length;a++){var o=i[a];if(!o.partOfGroup){var s=[(o.x0+o.x1)/2,(o.y0+o.y1)/2];\"v\"===n.orientation&amp;&amp;s.reverse(),e&amp;&amp;e.contains(s,!1,a,t)&amp;&amp;r.push({pointNumber:o.pointNumber})}}return r}},{}],935:[function(t,e,r){\"use strict\";var n=t(\"../../lib\");e.exports=function(t,e){for(var r=0;r&lt;t.length;r++)t[r].i=r;n.mergeArray(e.text,t,\"tx\"),n.mergeArray(e.texttemplate,t,\"txt\"),n.mergeArray(e.hovertext,t,\"htx\"),n.mergeArray(e.customdata,t,\"data\"),n.mergeArray(e.textposition,t,\"tp\"),e.textfont&amp;&amp;(n.mergeArrayCastPositive(e.textfont.size,t,\"ts\"),n.mergeArray(e.textfont.color,t,\"tc\"),n.mergeArray(e.textfont.family,t,\"tf\"));var i=e.marker;if(i){n.mergeArrayCastPositive(i.size,t,\"ms\"),n.mergeArrayCastPositive(i.opacity,t,\"mo\"),n.mergeArray(i.symbol,t,\"mx\"),n.mergeArray(i.angle,t,\"ma\"),n.mergeArray(i.standoff,t,\"mf\"),n.mergeArray(i.color,t,\"mc\");var a=i.line;i.line&amp;&amp;(n.mergeArray(a.color,t,\"mlc\"),n.mergeArrayCastPositive(a.width,t,\"mlw\"));var o=i.gradient;o&amp;&amp;\"none\"!==o.type&amp;&amp;(n.mergeArray(o.type,t,\"mgt\"),n.mergeArray(o.color,t,\"mgc\"))}}},{\"../../lib\":515}],936:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,i=t(\"../../plots/template_attributes\").texttemplateAttrs,a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../../components/colorscale/attributes\"),s=t(\"../../plots/font_attributes\"),l=t(\"../../components/drawing/attributes\").dash,c=t(\"../../components/drawing/attributes\").pattern,u=t(\"../../components/drawing\"),f=t(\"./constants\"),h=t(\"../../lib/extend\").extendFlat;e.exports={x:{valType:\"data_array\",editType:\"calc+clearAxisTypes\",anim:!0},x0:{valType:\"any\",dflt:0,editType:\"calc+clearAxisTypes\",anim:!0},dx:{valType:\"number\",dflt:1,editType:\"calc\",anim:!0},y:{valType:\"data_array\",editType:\"calc+clearAxisTypes\",anim:!0},y0:{valType:\"any\",dflt:0,editType:\"calc+clearAxisTypes\",anim:!0},dy:{valType:\"number\",dflt:1,editType:\"calc\",anim:!0},xperiod:{valType:\"any\",dflt:0,editType:\"calc\"},yperiod:{valType:\"any\",dflt:0,editType:\"calc\"},xperiod0:{valType:\"any\",editType:\"calc\"},yperiod0:{valType:\"any\",editType:\"calc\"},xperiodalignment:{valType:\"enumerated\",values:[\"start\",\"middle\",\"end\"],dflt:\"middle\",editType:\"calc\"},yperiodalignment:{valType:\"enumerated\",values:[\"start\",\"middle\",\"end\"],dflt:\"middle\",editType:\"calc\"},xhoverformat:n(\"x\"),yhoverformat:n(\"y\"),stackgroup:{valType:\"string\",dflt:\"\",editType:\"calc\"},orientation:{valType:\"enumerated\",values:[\"v\",\"h\"],editType:\"calc\"},groupnorm:{valType:\"enumerated\",values:[\"\",\"fraction\",\"percent\"],dflt:\"\",editType:\"calc\"},stackgaps:{valType:\"enumerated\",values:[\"infer zero\",\"interpolate\"],dflt:\"infer zero\",editType:\"calc\"},text:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"calc\"},texttemplate:i({},{}),hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0,editType:\"style\"},mode:{valType:\"flaglist\",flags:[\"lines\",\"markers\",\"text\"],extras:[\"none\"],editType:\"calc\"},hoveron:{valType:\"flaglist\",flags:[\"points\",\"fills\"],editType:\"style\"},hovertemplate:a({},{keys:f.eventDataKeys}),line:{color:{valType:\"color\",editType:\"style\",anim:!0},width:{valType:\"number\",min:0,dflt:2,editType:\"style\",anim:!0},shape:{valType:\"enumerated\",values:[\"linear\",\"spline\",\"hv\",\"vh\",\"hvh\",\"vhv\"],dflt:\"linear\",editType:\"plot\"},smoothing:{valType:\"number\",min:0,max:1.3,dflt:1,editType:\"plot\"},dash:h({},l,{editType:\"style\"}),backoff:{valType:\"number\",min:0,dflt:\"auto\",arrayOk:!0,editType:\"plot\"},simplify:{valType:\"boolean\",dflt:!0,editType:\"plot\"},editType:\"plot\"},connectgaps:{valType:\"boolean\",dflt:!1,editType:\"calc\"},cliponaxis:{valType:\"boolean\",dflt:!0,editType:\"plot\"},fill:{valType:\"enumerated\",values:[\"none\",\"tozeroy\",\"tozerox\",\"tonexty\",\"tonextx\",\"toself\",\"tonext\"],editType:\"calc\"},fillcolor:{valType:\"color\",editType:\"style\",anim:!0},fillpattern:c,marker:h({symbol:{valType:\"enumerated\",values:u.symbolList,dflt:\"circle\",arrayOk:!0,editType:\"style\"},opacity:{valType:\"number\",min:0,max:1,arrayOk:!0,editType:\"style\",anim:!0},angle:{valType:\"angle\",dflt:0,arrayOk:!0,editType:\"plot\",anim:!1},angleref:{valType:\"enumerated\",values:[\"previous\",\"up\"],dflt:\"up\",editType:\"plot\",anim:!1},standoff:{valType:\"number\",min:0,dflt:0,arrayOk:!0,editType:\"plot\",anim:!0},size:{valType:\"number\",min:0,dflt:6,arrayOk:!0,editType:\"calc\",anim:!0},maxdisplayed:{valType:\"number\",min:0,dflt:0,editType:\"plot\"},sizeref:{valType:\"number\",dflt:1,editType:\"calc\"},sizemin:{valType:\"number\",min:0,dflt:0,editType:\"calc\"},sizemode:{valType:\"enumerated\",values:[\"diameter\",\"area\"],dflt:\"diameter\",editType:\"calc\"},line:h({width:{valType:\"number\",min:0,arrayOk:!0,editType:\"style\",anim:!0},editType:\"calc\"},o(\"marker.line\",{anim:!0})),gradient:{type:{valType:\"enumerated\",values:[\"radial\",\"horizontal\",\"vertical\",\"none\"],arrayOk:!0,dflt:\"none\",editType:\"calc\"},color:{valType:\"color\",arrayOk:!0,editType:\"calc\"},editType:\"calc\"},editType:\"calc\"},o(\"marker\",{anim:!0})),selected:{marker:{opacity:{valType:\"number\",min:0,max:1,editType:\"style\"},color:{valType:\"color\",editType:\"style\"},size:{valType:\"number\",min:0,editType:\"style\"},editType:\"style\"},textfont:{color:{valType:\"color\",editType:\"style\"},editType:\"style\"},editType:\"style\"},unselected:{marker:{opacity:{valType:\"number\",min:0,max:1,editType:\"style\"},color:{valType:\"color\",editType:\"style\"},size:{valType:\"number\",min:0,editType:\"style\"},editType:\"style\"},textfont:{color:{valType:\"color\",editType:\"style\"},editType:\"style\"},editType:\"style\"},textposition:{valType:\"enumerated\",values:[\"top left\",\"top center\",\"top right\",\"middle left\",\"middle center\",\"middle right\",\"bottom left\",\"bottom center\",\"bottom right\"],dflt:\"middle center\",arrayOk:!0,editType:\"calc\"},textfont:s({editType:\"calc\",colorEditType:\"style\",arrayOk:!0})}},{\"../../components/colorscale/attributes\":374,\"../../components/drawing\":389,\"../../components/drawing/attributes\":388,\"../../lib/extend\":505,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/font_attributes\":594,\"../../plots/template_attributes\":642,\"./constants\":940}],937:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../lib\"),a=t(\"../../plots/cartesian/axes\"),o=t(\"../../plots/cartesian/align_period\"),s=t(\"../../constants/numerical\").BADNUM,l=t(\"./subtypes\"),c=t(\"./colorscale_calc\"),u=t(\"./arrays_to_calcdata\"),f=t(\"./calc_selection\");function h(t,e,r,n,i,o,s){var c=e._length,u=t._fullLayout,f=r._id,h=n._id,p=u._firstScatter[m(e)]===e.uid,d=(g(e,u,r,n)||{}).orientation,v=e.fill;r._minDtick=0,n._minDtick=0;var y={padded:!0},x={padded:!0};s&amp;&amp;(y.ppad=x.ppad=s);var b=c&lt;2||i[0]!==i[c-1]||o[0]!==o[c-1];b&amp;&amp;(\"tozerox\"===v||\"tonextx\"===v&amp;&amp;(p||\"h\"===d))?y.tozero=!0:(e.error_y||{}).visible||\"tonexty\"!==v&amp;&amp;\"tozeroy\"!==v&amp;&amp;(l.hasMarkers(e)||l.hasText(e))||(y.padded=!1,y.ppad=0),b&amp;&amp;(\"tozeroy\"===v||\"tonexty\"===v&amp;&amp;(p||\"v\"===d))?x.tozero=!0:\"tonextx\"!==v&amp;&amp;\"tozerox\"!==v||(x.padded=!1),f&amp;&amp;(e._extremes[f]=a.findExtremes(r,i,y)),h&amp;&amp;(e._extremes[h]=a.findExtremes(n,o,x))}function p(t,e){if(l.hasMarkers(t)){var r,n=t.marker,o=1.6*(t.marker.sizeref||1);if(r=\"area\"===t.marker.sizemode?function(t){return Math.max(Math.sqrt((t||0)/o),3)}:function(t){return Math.max((t||0)/o,3)},i.isArrayOrTypedArray(n.size)){var s={type:\"linear\"};a.setConvert(s);for(var c=s.makeCalcdata(t.marker,\"size\"),u=new Array(e),f=0;f&lt;e;f++)u[f]=r(c[f]);return u}return r(n.size)}}function d(t,e){var r=m(e),n=t._firstScatter;n[r]||(n[r]=e.uid)}function m(t){var e=t.stackgroup;return t.xaxis+t.yaxis+t.type+(e?\"-\"+e:\"\")}function g(t,e,r,n){var i=t.stackgroup;if(i){var a=e._scatterStackOpts[r._id+n._id][i],o=\"v\"===a.orientation?n:r;return\"linear\"===o.type||\"log\"===o.type?a:void 0}}e.exports={calc:function(t,e){var r,l,m,v,y,x,b=t._fullLayout,_=e._xA=a.getFromId(t,e.xaxis||\"x\",\"x\"),w=e._yA=a.getFromId(t,e.yaxis||\"y\",\"y\"),T=_.makeCalcdata(e,\"x\"),k=w.makeCalcdata(e,\"y\"),A=o(e,_,\"x\",T),M=o(e,w,\"y\",k),S=A.vals,E=M.vals,L=e._length,C=new Array(L),P=e.ids,I=g(e,b,_,w),O=!1;d(b,e);var z,D=\"x\",R=\"y\";I?(i.pushUnique(I.traceIndices,e._expandedIndex),(r=\"v\"===I.orientation)?(R=\"s\",z=\"x\"):(D=\"s\",z=\"y\"),y=\"interpolate\"===I.stackgaps):h(t,e,_,w,S,E,p(e,L));var F=!!e.xperiodalignment,B=!!e.yperiodalignment;for(l=0;l&lt;L;l++){var N=C[l]={},j=n(S[l]),U=n(E[l]);j&amp;&amp;U?(N[D]=S[l],N[R]=E[l],F&amp;&amp;(N.orig_x=T[l],N.xEnd=A.ends[l],N.xStart=A.starts[l]),B&amp;&amp;(N.orig_y=k[l],N.yEnd=M.ends[l],N.yStart=M.starts[l])):I&amp;&amp;(r?j:U)?(N[z]=r?S[l]:E[l],N.gap=!0,y?(N.s=s,O=!0):N.s=0):N[D]=N[R]=s,P&amp;&amp;(N.id=String(P[l]))}if(u(C,e),c(t,e),f(C,e),I){for(l=0;l&lt;C.length;)C[l][z]===s?C.splice(l,1):l++;if(i.sort(C,(function(t,e){return t[z]-e[z]||t.i-e.i})),O){for(l=0;l&lt;C.length-1&amp;&amp;C[l].gap;)l++;for((x=C[l].s)||(x=C[l].s=0),m=0;m&lt;l;m++)C[m].s=x;for(v=C.length-1;v&gt;l&amp;&amp;C[v].gap;)v--;for(x=C[v].s,m=C.length-1;m&gt;v;m--)C[m].s=x;for(;lM[u]&amp;&amp;u=0;i--){var a=t[i];if(\"scatter\"===a.type&amp;&amp;a.xaxis===r.xaxis&amp;&amp;a.yaxis===r.yaxis){a.opacity=void 0;break}}}}}},{}],943:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../registry\"),a=t(\"./attributes\"),o=t(\"./constants\"),s=t(\"./subtypes\"),l=t(\"./xy_defaults\"),c=t(\"./period_defaults\"),u=t(\"./stack_defaults\"),f=t(\"./marker_defaults\"),h=t(\"./line_defaults\"),p=t(\"./line_shape_defaults\"),d=t(\"./text_defaults\"),m=t(\"./fillcolor_defaults\"),g=t(\"../../lib\").coercePattern;e.exports=function(t,e,r,v){function y(r,i){return n.coerce(t,e,a,r,i)}var x=l(t,e,v,y);if(x||(e.visible=!1),e.visible){c(t,e,v,y),y(\"xhoverformat\"),y(\"yhoverformat\");var b=u(t,e,v,y),_=!b&amp;&amp;x=Math.min(e,r)&amp;&amp;d&lt;=Math.max(e,r)?0:1/0}var n=Math.max(3,t.mrc||0),i=1-1/n,a=Math.abs(h.c2p(t.x)-d);return a=Math.min(e,r)&amp;&amp;m&lt;=Math.max(e,r)?0:1/0}var n=Math.max(3,t.mrc||0),i=1-1/n,a=Math.abs(p.c2p(t.y)-m);return aW!=(N=z[I][1])&gt;=W&amp;&amp;(R=z[I-1][0],F=z[I][0],N-B&amp;&amp;(D=R+(F-R)*(W-B)/(N-B),H=Math.min(H,D),q=Math.max(q,D)));H=Math.max(H,0),q=Math.min(q,h._length);var Z=s.defaultLine;return s.opacity(f.fillcolor)?Z=f.fillcolor:s.opacity((f.line||{}).color)&amp;&amp;(Z=f.line.color),n.extendFlat(t,{distance:t.maxHoverDistance,x0:H,x1:q,y0:W,y1:W,color:Z,hovertemplate:!1}),delete t.index,f.text&amp;&amp;!Array.isArray(f.text)?t.text=String(f.text):t.text=f.name,[t]}}}},{\"../../components/color\":367,\"../../components/fx\":407,\"../../lib\":515,\"../../registry\":647,\"./get_trace_color\":946}],948:[function(t,e,r){\"use strict\";var n=t(\"./subtypes\");e.exports={hasLines:n.hasLines,hasMarkers:n.hasMarkers,hasText:n.hasText,isBubble:n.isBubble,attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),crossTraceDefaults:t(\"./cross_trace_defaults\"),calc:t(\"./calc\").calc,crossTraceCalc:t(\"./cross_trace_calc\"),arraysToCalcdata:t(\"./arrays_to_calcdata\"),plot:t(\"./plot\"),colorbar:t(\"./marker_colorbar\"),formatLabels:t(\"./format_labels\"),style:t(\"./style\").style,styleOnSelect:t(\"./style\").styleOnSelect,hoverPoints:t(\"./hover\"),selectPoints:t(\"./select\"),animatable:!0,moduleType:\"trace\",name:\"scatter\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"cartesian\",\"svg\",\"symbols\",\"errorBarsOK\",\"showLegend\",\"scatter-like\",\"zoomScale\"],meta:{}}},{\"../../plots/cartesian\":578,\"./arrays_to_calcdata\":935,\"./attributes\":936,\"./calc\":937,\"./cross_trace_calc\":941,\"./cross_trace_defaults\":942,\"./defaults\":943,\"./format_labels\":945,\"./hover\":947,\"./marker_colorbar\":954,\"./plot\":957,\"./select\":958,\"./style\":960,\"./subtypes\":961}],949:[function(t,e,r){\"use strict\";var n=t(\"../../lib\").isArrayOrTypedArray,i=t(\"../../components/colorscale/helpers\").hasColorscale,a=t(\"../../components/colorscale/defaults\");e.exports=function(t,e,r,o,s,l){l||(l={});var c=(t.marker||{}).color;(s(\"line.color\",r),i(t,\"line\"))?a(t,e,o,s,{prefix:\"line.\",cLetter:\"c\"}):s(\"line.color\",!n(c)&amp;&amp;c||r);s(\"line.width\"),l.noDash||s(\"line.dash\"),l.backoff&amp;&amp;s(\"line.backoff\")}},{\"../../components/colorscale/defaults\":377,\"../../components/colorscale/helpers\":378,\"../../lib\":515}],950:[function(t,e,r){\"use strict\";var n=t(\"../../components/drawing\"),i=t(\"../../constants/numerical\"),a=i.BADNUM,o=i.LOG_CLIP,s=o+.5,l=o-.5,c=t(\"../../lib\"),u=c.segmentsIntersect,f=c.constrain,h=t(\"./constants\");e.exports=function(t,e){var r,i,o,p,d,m,g,v,y,x,b,_,w,T,k,A,M,S,E=e.trace||{},L=e.xaxis,C=e.yaxis,P=\"log\"===L.type,I=\"log\"===C.type,O=L._length,z=C._length,D=e.backoff,R=E.marker,F=e.connectGaps,B=e.baseTolerance,N=e.shape,j=\"linear\"===N,U=E.fill&amp;&amp;\"none\"!==E.fill,V=[],H=h.minTolerance,q=t.length,G=new Array(q),Y=0;function W(r){var n=t[r];if(!n)return!1;var i=e.linearized?L.l2p(n.x):L.c2p(n.x),o=e.linearized?C.l2p(n.y):C.c2p(n.y);if(i===a){if(P&amp;&amp;(i=L.c2p(n.x,!0)),i===a)return!1;I&amp;&amp;o===a&amp;&amp;(i*=Math.abs(L._m*z*(L._m&gt;0?s:l)/(C._m*O*(C._m&gt;0?s:l)))),i*=1e3}if(o===a){if(I&amp;&amp;(o=C.c2p(n.y,!0)),o===a)return!1;o*=1e3}return[i,o]}function Z(t,e,r,n){var i=r-t,a=n-e,o=.5-t,s=.5-e,l=i*i+a*a,c=i*o+a*s;if(c&gt;0&amp;&amp;cot||t[1]lt)return[f(t[0],at,ot),f(t[1],st,lt)]}function ft(t,e){return t[0]===e[0]&amp;&amp;(t[0]===at||t[0]===ot)||(t[1]===e[1]&amp;&amp;(t[1]===st||t[1]===lt)||void 0)}function ht(t,e,r){return function(n,i){var a=ut(n),o=ut(i),s=[];if(a&amp;&amp;o&amp;&amp;ft(a,o))return s;a&amp;&amp;s.push(a),o&amp;&amp;s.push(o);var l=2*c.constrain((n[t]+i[t])/2,e,r)-((a||n)[t]+(o||i)[t]);l&amp;&amp;((a&amp;&amp;o?l&gt;0==a[t]&gt;o[t]?a:o:a||o)[t]+=l);return s}}function pt(t){var e=t[0],r=t[1],n=e===G[Y-1][0],i=r===G[Y-1][1];if(!n||!i)if(Y&gt;1){var a=e===G[Y-2][0],o=r===G[Y-2][1];n&amp;&amp;(e===at||e===ot)&amp;&amp;a?o?Y--:G[Y-1]=t:i&amp;&amp;(r===st||r===lt)&amp;&amp;o?a?Y--:G[Y-1]=t:G[Y++]=t}else G[Y++]=t}function dt(t){G[Y-1][0]!==t[0]&amp;&amp;G[Y-1][1]!==t[1]&amp;&amp;pt([$,tt]),pt(t),et=null,$=tt=0}\"linear\"===N||\"spline\"===N?nt=function(t,e){for(var r=[],n=0,i=0;i&lt;4;i++){var a=ct[i],o=u(t[0],t[1],e[0],e[1],a[0],a[1],a[2],a[3]);o&amp;&amp;(!n||Math.abs(o.x-r[0][0])&gt;1||Math.abs(o.y-r[0][1])&gt;1)&amp;&amp;(o=[o.x,o.y],n&amp;&amp;J(o,t)ot?ot:0,Q=e[1]lt?lt:0,K||Q){if(Y)if(et){var n=nt(et,e);n.length&gt;1&amp;&amp;(dt(n[0]),G[Y++]=n[1])}else rt=nt(G[Y-1],e)[0],G[Y++]=rt;else G[Y++]=[K||e[0],Q||e[1]];var i=G[Y-1];K&amp;&amp;Q&amp;&amp;(i[0]!==K||i[1]!==Q)?(et&amp;&amp;($!==K&amp;&amp;tt!==Q?pt($&amp;&amp;tt?(a=et,s=(o=e)[0]-a[0],l=(o[1]-a[1])/s,(a[1]*o[0]-o[1]*a[0])/s&gt;0?[l&gt;0?at:ot,lt]:[l&gt;0?ot:at,st]):[$||K,tt||Q]):$&amp;&amp;tt&amp;&amp;pt([$,tt])),pt([K,Q])):$-K&amp;&amp;tt-Q&amp;&amp;pt([K||$,Q||tt]),et=e,$=K,tt=Q}else et&amp;&amp;dt(nt(et,e)[0]),G[Y++]=e;var a,o,s,l}for(r=0;rX(m,vt))break;o=m,(w=y[0]*v[0]+y[1]*v[1])&gt;b?(b=w,p=m,g=!1):w&lt;_&amp;&amp;(_=w,d=m,g=!0)}if(g?(gt(p),o!==d&amp;&amp;gt(d)):(d!==i&amp;&amp;gt(d),o!==p&amp;&amp;gt(p)),gt(o),r&gt;=t.length||!m)break;gt(m),i=m}}else gt(p)}et&amp;&amp;pt([$||et[0],tt||et[1]]),V.push(G.slice(0,Y))}var yt=N.slice(N.length-1);if(D&amp;&amp;\"h\"!==yt&amp;&amp;\"v\"!==yt){for(var xt=!1,bt=-1,_t=[],wt=0;wt=0?l=p:(l=p=h,h++),l0?Math.max(r,a):0}}},{\"fast-isnumeric\":190}],954:[function(t,e,r){\"use strict\";e.exports={container:\"marker\",min:\"cmin\",max:\"cmax\"}},{}],955:[function(t,e,r){\"use strict\";var n=t(\"../../components/color\"),i=t(\"../../components/colorscale/helpers\").hasColorscale,a=t(\"../../components/colorscale/defaults\"),o=t(\"./subtypes\");e.exports=function(t,e,r,s,l,c){var u=o.isBubble(t),f=(t.line||{}).color;(c=c||{},f&amp;&amp;(r=f),l(\"marker.symbol\"),l(\"marker.opacity\",u?.7:1),l(\"marker.size\"),c.noAngle||(l(\"marker.angle\"),c.noAngleRef||l(\"marker.angleref\"),c.noStandOff||l(\"marker.standoff\")),l(\"marker.color\",r),i(t,\"marker\")&amp;&amp;a(t,e,s,l,{prefix:\"marker.\",cLetter:\"c\"}),c.noSelect||(l(\"selected.marker.color\"),l(\"unselected.marker.color\"),l(\"selected.marker.size\"),l(\"unselected.marker.size\")),c.noLine||(l(\"marker.line.color\",f&amp;&amp;!Array.isArray(f)&amp;&amp;e.marker.color!==f?f:u?n.background:n.defaultLine),i(t,\"marker.line\")&amp;&amp;a(t,e,s,l,{prefix:\"marker.line.\",cLetter:\"c\"}),l(\"marker.line.width\",u?1:0)),u&amp;&amp;(l(\"marker.sizeref\"),l(\"marker.sizemin\"),l(\"marker.sizemode\")),c.gradient)&amp;&amp;(\"none\"!==l(\"marker.gradient.type\")&amp;&amp;l(\"marker.gradient.color\"))}},{\"../../components/color\":367,\"../../components/colorscale/defaults\":377,\"../../components/colorscale/helpers\":378,\"./subtypes\":961}],956:[function(t,e,r){\"use strict\";var n=t(\"../../lib\").dateTick0,i=t(\"../../constants/numerical\").ONEWEEK;function a(t,e){return n(e,t%i==0?1:0)}e.exports=function(t,e,r,n,i){if(i||(i={x:!0,y:!0}),i.x){var o=n(\"xperiod\");o&amp;&amp;(n(\"xperiod0\",a(o,e.xcalendar)),n(\"xperiodalignment\"))}if(i.y){var s=n(\"yperiod\");s&amp;&amp;(n(\"yperiod0\",a(s,e.ycalendar)),n(\"yperiodalignment\"))}}},{\"../../constants/numerical\":491,\"../../lib\":515}],957:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../registry\"),a=t(\"../../lib\"),o=a.ensureSingle,s=a.identity,l=t(\"../../components/drawing\"),c=t(\"./subtypes\"),u=t(\"./line_points\"),f=t(\"./link_traces\"),h=t(\"../../lib/polygon\").tester;function p(t,e,r,f,p,d,m){var g;!function(t,e,r,i,o){var s=r.xaxis,l=r.yaxis,u=n.extent(a.simpleMap(s.range,s.r2c)),f=n.extent(a.simpleMap(l.range,l.r2c)),h=i[0].trace;if(!c.hasMarkers(h))return;var p=h.marker.maxdisplayed;if(0===p)return;var d=i.filter((function(t){return t.x&gt;=u[0]&amp;&amp;t.x&lt;=u[1]&amp;&amp;t.y&gt;=f[0]&amp;&amp;t.y&lt;=f[1]})),m=Math.ceil(d.length/p),g=0;o.forEach((function(t,r){var n=t[0].trace;c.hasMarkers(n)&amp;&amp;n.marker.maxdisplayed&gt;0&amp;&amp;r0;function y(t){return v?t.transition():t}var x=r.xaxis,b=r.yaxis,_=f[0].trace,w=_.line,T=n.select(d),k=o(T,\"g\",\"errorbars\"),A=o(T,\"g\",\"lines\"),M=o(T,\"g\",\"points\"),S=o(T,\"g\",\"text\");if(i.getComponentMethod(\"errorbars\",\"plot\")(t,k,r,m),!0===_.visible){var E,L;y(T).style(\"opacity\",_.opacity);var C=_.fill.charAt(_.fill.length-1);\"x\"!==C&amp;&amp;\"y\"!==C&amp;&amp;(C=\"\"),f[0][r.isRangePlot?\"nodeRangePlot3\":\"node3\"]=T;var P,I,O=\"\",z=[],D=_._prevtrace;D&amp;&amp;(O=D._prevRevpath||\"\",L=D._nextFill,z=D._polygons);var R,F,B,N,j,U,V,H=\"\",q=\"\",G=[],Y=a.noop;if(E=_._ownFill,c.hasLines(_)||\"none\"!==_.fill){for(L&amp;&amp;L.datum(f),-1!==[\"hv\",\"vh\",\"hvh\",\"vhv\"].indexOf(w.shape)?(R=l.steps(w.shape),F=l.steps(w.shape.split(\"\").reverse().join(\"\"))):R=F=\"spline\"===w.shape?function(t){var e=t[t.length-1];return t.length&gt;1&amp;&amp;t[0][0]===e[0]&amp;&amp;t[0][1]===e[1]?l.smoothclosed(t.slice(1),w.smoothing):l.smoothopen(t,w.smoothing)}:function(t){return\"M\"+t.join(\"L\")},B=function(t){return F(t.reverse())},G=u(f,{xaxis:x,yaxis:b,trace:_,connectGaps:_.connectgaps,baseTolerance:Math.max(w.width||1,3)/4,shape:w.shape,backoff:w.backoff,simplify:w.simplify,fill:_.fill}),V=_._polygons=new Array(G.length),g=0;g1){var r=n.select(this);if(r.datum(f),t)y(r.style(\"opacity\",0).attr(\"d\",P).call(l.lineGroupStyle)).style(\"opacity\",1);else{var i=y(r);i.attr(\"d\",P),l.singleLineStyle(f,i)}}}}}var W=A.selectAll(\".js-line\").data(G);y(W.exit()).style(\"opacity\",0).remove(),W.each(Y(!1)),W.enter().append(\"path\").classed(\"js-line\",!0).style(\"vector-effect\",\"non-scaling-stroke\").call(l.lineGroupStyle).each(Y(!0)),l.setClipUrl(W,r.layerClipId,t),G.length?(E?(E.datum(f),N&amp;&amp;U&amp;&amp;(C?(\"y\"===C?N[1]=U[1]=b.c2p(0,!0):\"x\"===C&amp;&amp;(N[0]=U[0]=x.c2p(0,!0)),y(E).attr(\"d\",\"M\"+U+\"L\"+N+\"L\"+H.substr(1)).call(l.singleFillStyle,t)):y(E).attr(\"d\",H+\"Z\").call(l.singleFillStyle,t))):L&amp;&amp;(\"tonext\"===_.fill.substr(0,6)&amp;&amp;H&amp;&amp;O?(\"tonext\"===_.fill?y(L).attr(\"d\",H+\"Z\"+O+\"Z\").call(l.singleFillStyle,t):y(L).attr(\"d\",H+\"L\"+O.substr(1)+\"Z\").call(l.singleFillStyle,t),_._polygons=_._polygons.concat(z)):(X(L),_._polygons=null)),_._prevRevpath=q,_._prevPolygons=V):(E?X(E):L&amp;&amp;X(L),_._polygons=_._prevRevpath=_._prevPolygons=null),M.datum(f),S.datum(f),function(e,i,a){var o,u=a[0].trace,f=c.hasMarkers(u),h=c.hasText(u),p=tt(u),d=et,m=et;if(f||h){var g=s,_=u.stackgroup,w=_&amp;&amp;\"infer zero\"===t._fullLayout._scatterStackOpts[x._id+b._id][_].stackgaps;u.marker.maxdisplayed||u._needsCull?g=w?K:J:_&amp;&amp;!w&amp;&amp;(g=Q),f&amp;&amp;(d=g),h&amp;&amp;(m=g)}var T,k=(o=e.selectAll(\"path.point\").data(d,p)).enter().append(\"path\").classed(\"point\",!0);v&amp;&amp;k.call(l.pointStyle,u,t).call(l.translatePoints,x,b).style(\"opacity\",0).transition().style(\"opacity\",1),o.order(),f&amp;&amp;(T=l.makePointStyleFns(u)),o.each((function(e){var i=n.select(this),a=y(i);l.translatePoint(e,a,x,b)?(l.singlePointStyle(e,a,u,T,t),r.layerClipId&amp;&amp;l.hideOutsideRangePoint(e,a,x,b,u.xcalendar,u.ycalendar),u.customdata&amp;&amp;i.classed(\"plotly-customdata\",null!==e.data&amp;&amp;void 0!==e.data)):a.remove()})),v?o.exit().transition().style(\"opacity\",0).remove():o.exit().remove(),(o=i.selectAll(\"g\").data(m,p)).enter().append(\"g\").classed(\"textpoint\",!0).append(\"text\"),o.order(),o.each((function(t){var e=n.select(this),i=y(e.select(\"text\"));l.translatePoint(t,i,x,b)?r.layerClipId&amp;&amp;l.hideOutsideRangePoint(t,e,x,b,u.xcalendar,u.ycalendar):e.remove()})),o.selectAll(\"text\").call(l.textPointStyle,u,t).each((function(t){var e=x.c2p(t.x),r=b.c2p(t.y);n.select(this).selectAll(\"tspan.line\").each((function(){y(n.select(this)).attr({x:e,y:r})}))})),o.exit().remove()}(M,S,f);var Z=!1===_.cliponaxis?null:r.layerClipId;l.setClipUrl(M,Z,t),l.setClipUrl(S,Z,t)}function X(t){y(t).attr(\"d\",\"M0,0Z\")}function J(t){return t.filter((function(t){return!t.gap&amp;&amp;t.vis}))}function K(t){return t.filter((function(t){return t.vis}))}function Q(t){return t.filter((function(t){return!t.gap}))}function $(t){return t.id}function tt(t){if(t.ids)return $}function et(){return!1}}e.exports=function(t,e,r,i,a,c){var u,h,d=!a,m=!!a&amp;&amp;a.duration&gt;0,g=f(t,e,r);((u=i.selectAll(\"g.trace\").data(g,(function(t){return t[0].trace.uid}))).enter().append(\"g\").attr(\"class\",(function(t){return\"trace scatter trace\"+t[0].trace.uid})).style(\"stroke-miterlimit\",2),u.order(),function(t,e,r){e.each((function(e){var i=o(n.select(this),\"g\",\"fills\");l.setClipUrl(i,r.layerClipId,t);var a=e[0].trace,c=[];a._ownfill&amp;&amp;c.push(\"_ownFill\"),a._nexttrace&amp;&amp;c.push(\"_nextFill\");var u=i.selectAll(\"g\").data(c,s);u.enter().append(\"g\"),u.exit().each((function(t){a[t]=null})).remove(),u.order().each((function(t){a[t]=o(n.select(this),\"path\",\"js-fill\")}))}))}(t,u,e),m)?(c&amp;&amp;(h=c()),n.transition().duration(a.duration).ease(a.easing).each(\"end\",(function(){h&amp;&amp;h()})).each(\"interrupt\",(function(){h&amp;&amp;h()})).each((function(){i.selectAll(\"g.trace\").each((function(r,n){p(t,n,e,r,g,this,a)}))}))):u.each((function(r,n){p(t,n,e,r,g,this,a)}));d&amp;&amp;u.exit().remove(),i.selectAll(\"path:not([d])\").remove()}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/polygon\":527,\"../../registry\":647,\"./line_points\":950,\"./link_traces\":952,\"./subtypes\":961,\"@plotly/d3\":58}],958:[function(t,e,r){\"use strict\";var n=t(\"./subtypes\");e.exports=function(t,e){var r,i,a,o,s=t.cd,l=t.xaxis,c=t.yaxis,u=[],f=s[0].trace;if(!n.hasMarkers(f)&amp;&amp;!n.hasText(f))return[];if(!1===e)for(r=0;r0){var h=i.c2l(u);i._lowerLogErrorBound||(i._lowerLogErrorBound=h),i._lowerErrorBound=Math.min(i._lowerLogErrorBound,h)}}else o[s]=[-l[0]*r,l[1]*r]}return o}e.exports=function(t,e,r){var n=[i(t.x,t.error_x,e[0],r.xaxis),i(t.y,t.error_y,e[1],r.yaxis),i(t.z,t.error_z,e[2],r.zaxis)],a=function(t){for(var e=0;e-1?-1:t.indexOf(\"right\")&gt;-1?1:0}function b(t){return null==t?0:t.indexOf(\"top\")&gt;-1?-1:t.indexOf(\"bottom\")&gt;-1?1:0}function _(t,e){return e(4*t)}function w(t){return p[t]}function T(t,e,r,n,i){var a=null;if(l.isArrayOrTypedArray(t)){a=[];for(var o=0;o=0){var m=function(t,e,r){var n,i=(r+1)%3,a=(r+2)%3,o=[],l=[];for(n=0;n=0&amp;&amp;f(\"surfacecolor\",h||p);for(var d=[\"x\",\"y\",\"z\"],m=0;m&lt;3;++m){var g=\"projection.\"+d[m];f(g+\".show\")&amp;&amp;(f(g+\".opacity\"),f(g+\".scale\"))}var v=n.getComponentMethod(\"errorbars\",\"supplyDefaults\");v(t,e,h||p||r,{axis:\"z\"}),v(t,e,h||p||r,{axis:\"y\",inherit:\"z\"}),v(t,e,h||p||r,{axis:\"x\",inherit:\"z\"})}else e.visible=!1}},{\"../../lib\":515,\"../../registry\":647,\"../scatter/line_defaults\":949,\"../scatter/marker_defaults\":955,\"../scatter/subtypes\":961,\"../scatter/text_defaults\":962,\"./attributes\":964}],969:[function(t,e,r){\"use strict\";e.exports={plot:t(\"./convert\"),attributes:t(\"./attributes\"),markerSymbols:t(\"../../constants/gl3d_markers\"),supplyDefaults:t(\"./defaults\"),colorbar:[{container:\"marker\",min:\"cmin\",max:\"cmax\"},{container:\"line\",min:\"cmin\",max:\"cmax\"}],calc:t(\"./calc\"),moduleType:\"trace\",name:\"scatter3d\",basePlotModule:t(\"../../plots/gl3d\"),categories:[\"gl3d\",\"symbols\",\"showLegend\",\"scatter-like\"],meta:{}}},{\"../../constants/gl3d_markers\":489,\"../../plots/gl3d\":607,\"./attributes\":964,\"./calc\":965,\"./convert\":967,\"./defaults\":968}],970:[function(t,e,r){\"use strict\";var n=t(\"../scatter/attributes\"),i=t(\"../../plots/attributes\"),a=t(\"../../plots/template_attributes\").hovertemplateAttrs,o=t(\"../../plots/template_attributes\").texttemplateAttrs,s=t(\"../../components/colorscale/attributes\"),l=t(\"../../lib/extend\").extendFlat,c=n.marker,u=n.line,f=c.line;e.exports={carpet:{valType:\"string\",editType:\"calc\"},a:{valType:\"data_array\",editType:\"calc\"},b:{valType:\"data_array\",editType:\"calc\"},mode:l({},n.mode,{dflt:\"markers\"}),text:l({},n.text,{}),texttemplate:o({editType:\"plot\"},{keys:[\"a\",\"b\",\"text\"]}),hovertext:l({},n.hovertext,{}),line:{color:u.color,width:u.width,dash:u.dash,backoff:u.backoff,shape:l({},u.shape,{values:[\"linear\",\"spline\"]}),smoothing:u.smoothing,editType:\"calc\"},connectgaps:n.connectgaps,fill:l({},n.fill,{values:[\"none\",\"toself\",\"tonext\"],dflt:\"none\"}),fillcolor:n.fillcolor,marker:l({symbol:c.symbol,opacity:c.opacity,maxdisplayed:c.maxdisplayed,angle:c.angle,angleref:c.angleref,standoff:c.standoff,size:c.size,sizeref:c.sizeref,sizemin:c.sizemin,sizemode:c.sizemode,line:l({width:f.width,editType:\"calc\"},s(\"marker.line\")),gradient:c.gradient,editType:\"calc\"},s(\"marker\")),textfont:n.textfont,textposition:n.textposition,selected:n.selected,unselected:n.unselected,hoverinfo:l({},i.hoverinfo,{flags:[\"a\",\"b\",\"text\",\"name\"]}),hoveron:n.hoveron,hovertemplate:a()}},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/template_attributes\":642,\"../scatter/attributes\":936}],971:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../scatter/colorscale_calc\"),a=t(\"../scatter/arrays_to_calcdata\"),o=t(\"../scatter/calc_selection\"),s=t(\"../scatter/calc\").calcMarkerSize,l=t(\"../carpet/lookup_carpetid\");e.exports=function(t,e){var r=e._carpetTrace=l(t,e);if(r&amp;&amp;r.visible&amp;&amp;\"legendonly\"!==r.visible){var c;e.xaxis=r.xaxis,e.yaxis=r.yaxis;var u,f,h=e._length,p=new Array(h),d=!1;for(c=0;c&lt;h;c++)if(u=e.a[c],f=e.b[c],n(u)&amp;&amp;n(f)){var m=r.ab2xy(+u,+f,!0),g=r.isVisible(+u,+f);g||(d=!0),p[c]={x:m[0],y:m[1],a:u,b:f,vis:g}}else p[c]={x:!1,y:!1};return e._needsCull=d,p[0].carpet=r,p[0].trace=e,s(e,h),i(t,e),a(p,e),o(p,e),p}}},{\"../carpet/lookup_carpetid\":717,\"../scatter/arrays_to_calcdata\":935,\"../scatter/calc\":937,\"../scatter/calc_selection\":938,\"../scatter/colorscale_calc\":939,\"fast-isnumeric\":190}],972:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../scatter/constants\"),a=t(\"../scatter/subtypes\"),o=t(\"../scatter/marker_defaults\"),s=t(\"../scatter/line_defaults\"),l=t(\"../scatter/line_shape_defaults\"),c=t(\"../scatter/text_defaults\"),u=t(\"../scatter/fillcolor_defaults\"),f=t(\"./attributes\");e.exports=function(t,e,r,h){function p(r,i){return n.coerce(t,e,f,r,i)}p(\"carpet\"),e.xaxis=\"x\",e.yaxis=\"y\";var d=p(\"a\"),m=p(\"b\"),g=Math.min(d.length,m.length);if(g){e._length=g,p(\"text\"),p(\"texttemplate\"),p(\"hovertext\"),p(\"mode\",g&lt;i.PTS_LINESONLY?\"lines+markers\":\"lines\"),a.hasLines(e)&amp;&amp;(s(t,e,r,h,p,{backoff:!0}),l(t,e,p),p(\"connectgaps\")),a.hasMarkers(e)&amp;&amp;o(t,e,r,h,p,{gradient:!0}),a.hasText(e)&amp;&amp;c(t,e,h,p);var v=[];(a.hasMarkers(e)||a.hasText(e))&amp;&amp;(p(\"marker.maxdisplayed\"),v.push(\"points\")),p(\"fill\"),\"none\"!==e.fill&amp;&amp;(u(t,e,r,p),a.hasLines(e)||l(t,e,p)),\"tonext\"!==e.fill&amp;&amp;\"toself\"!==e.fill||v.push(\"fills\"),\"fills\"!==p(\"hoveron\",v.join(\"+\")||\"points\")&amp;&amp;p(\"hovertemplate\"),n.coerceSelectionMarkerOpacity(e,p)}else e.visible=!1}},{\"../../lib\":515,\"../scatter/constants\":940,\"../scatter/fillcolor_defaults\":944,\"../scatter/line_defaults\":949,\"../scatter/line_shape_defaults\":951,\"../scatter/marker_defaults\":955,\"../scatter/subtypes\":961,\"../scatter/text_defaults\":962,\"./attributes\":970}],973:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n,i){var a=n[i];return t.a=a.a,t.b=a.b,t.y=a.y,t}},{}],974:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r={},n=e._carpet,i=n.ab2ij([t.a,t.b]),a=Math.floor(i[0]),o=i[0]-a,s=Math.floor(i[1]),l=i[1]-s,c=n.evalxy([],a,s,o,l);return r.yLabel=c[1].toFixed(3),r}},{}],975:[function(t,e,r){\"use strict\";var n=t(\"../scatter/hover\"),i=t(\"../../lib\").fillText;e.exports=function(t,e,r,a){var o=n(t,e,r,a);if(o&amp;&amp;!1!==o[0].index){var s=o[0];if(void 0===s.index){var l=1-s.y0/t.ya._length,c=t.xa._length,u=c*l/2,f=c-u;return s.x0=Math.max(Math.min(s.x0,f),u),s.x1=Math.max(Math.min(s.x1,f),u),o}var h=s.cd[s.index];s.a=h.a,s.b=h.b,s.xLabelVal=void 0,s.yLabelVal=void 0;var p=s.trace,d=p._carpet,m=p._module.formatLabels(h,p);s.yLabel=m.yLabel,delete s.text;var g=[];if(!p.hovertemplate){var v=(h.hi||p.hoverinfo).split(\"+\");-1!==v.indexOf(\"all\")&amp;&amp;(v=[\"a\",\"b\",\"text\"]),-1!==v.indexOf(\"a\")&amp;&amp;y(d.aaxis,h.a),-1!==v.indexOf(\"b\")&amp;&amp;y(d.baxis,h.b),g.push(\"y: \"+s.yLabel),-1!==v.indexOf(\"text\")&amp;&amp;i(h,p,g),s.extraText=g.join(\"&lt;br&gt;\")}return o}function y(t,e){var r;r=t.labelprefix&amp;&amp;t.labelprefix.length&gt;0?t.labelprefix.replace(/ = $/,\"\"):t._hovertitle,g.push(r+\": \"+e.toFixed(3)+t.labelsuffix)}}},{\"../../lib\":515,\"../scatter/hover\":947}],976:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"../scatter/style\").style,styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\"),selectPoints:t(\"../scatter/select\"),eventData:t(\"./event_data\"),moduleType:\"trace\",name:\"scattercarpet\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"svg\",\"carpet\",\"symbols\",\"showLegend\",\"carpetDependent\",\"zoomScale\"],meta:{}}},{\"../../plots/cartesian\":578,\"../scatter/marker_colorbar\":954,\"../scatter/select\":958,\"../scatter/style\":960,\"./attributes\":970,\"./calc\":971,\"./defaults\":972,\"./event_data\":973,\"./format_labels\":974,\"./hover\":975,\"./plot\":977}],977:[function(t,e,r){\"use strict\";var n=t(\"../scatter/plot\"),i=t(\"../../plots/cartesian/axes\"),a=t(\"../../components/drawing\");e.exports=function(t,e,r,o){var s,l,c,u=r[0][0].carpet,f=i.getFromId(t,u.xaxis||\"x\"),h=i.getFromId(t,u.yaxis||\"y\"),p={xaxis:f,yaxis:h,plot:e.plot};for(s=0;s\")}(c,m,t,l[0].t.labels),t.hovertemplate=c.hovertemplate,[t]}}},{\"../../components/fx\":407,\"../../constants/numerical\":491,\"../../lib\":515,\"../scatter/get_trace_color\":946,\"./attributes\":978}],984:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"./calc\"),calcGeoJSON:t(\"./plot\").calcGeoJSON,plot:t(\"./plot\").plot,style:t(\"./style\"),styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),selectPoints:t(\"./select\"),moduleType:\"trace\",name:\"scattergeo\",basePlotModule:t(\"../../plots/geo\"),categories:[\"geo\",\"symbols\",\"showLegend\",\"scatter-like\"],meta:{}}},{\"../../plots/geo\":598,\"../scatter/marker_colorbar\":954,\"../scatter/style\":960,\"./attributes\":978,\"./calc\":979,\"./defaults\":980,\"./event_data\":981,\"./format_labels\":982,\"./hover\":983,\"./plot\":985,\"./select\":986,\"./style\":987}],985:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../lib/topojson_utils\").getTopojsonFeatures,o=t(\"../../lib/geojson_utils\"),s=t(\"../../lib/geo_location_utils\"),l=t(\"../../plots/cartesian/autorange\").findExtremes,c=t(\"../../constants/numerical\").BADNUM,u=t(\"../scatter/calc\").calcMarkerSize,f=t(\"../scatter/subtypes\"),h=t(\"./style\");e.exports={calcGeoJSON:function(t,e){var r,n,i=t[0].trace,o=e[i.geo],f=o._subplot,h=i._length;if(Array.isArray(i.locations)){var p=i.locationmode,d=\"geojson-id\"===p?s.extractTraceFeature(t):a(i,f.topojson);for(r=0;r=g,w=2*b,T={},k=l.makeCalcdata(e,\"x\"),A=y.makeCalcdata(e,\"y\"),M=s(e,l,\"x\",k),S=s(e,y,\"y\",A),E=M.vals,L=S.vals;e._x=E,e._y=L,e.xperiodalignment&amp;&amp;(e._origX=k,e._xStarts=M.starts,e._xEnds=M.ends),e.yperiodalignment&amp;&amp;(e._origY=A,e._yStarts=S.starts,e._yEnds=S.ends);var C=new Array(w),P=new Array(b);for(r=0;r1&amp;&amp;i.extendFlat(s.line,p.linePositions(t,r,n));if(s.errorX||s.errorY){var l=p.errorBarPositions(t,r,n,a,o);s.errorX&amp;&amp;i.extendFlat(s.errorX,l.x),s.errorY&amp;&amp;i.extendFlat(s.errorY,l.y)}s.text&amp;&amp;(i.extendFlat(s.text,{positions:n},p.textPosition(t,r,s.text,s.marker)),i.extendFlat(s.textSel,{positions:n},p.textPosition(t,r,s.text,s.markerSel)),i.extendFlat(s.textUnsel,{positions:n},p.textPosition(t,r,s.text,s.markerUnsel)));return s}(t,0,e,C,E,L),z=d(t,x);return f(o,e),_?O.marker&amp;&amp;(I=O.marker.sizeAvg||Math.max(O.marker.size,3)):I=c(e,b),u(t,e,l,y,E,L,I),O.errorX&amp;&amp;v(e,l,O.errorX),O.errorY&amp;&amp;v(e,y,O.errorY),O.fill&amp;&amp;!z.fill2d&amp;&amp;(z.fill2d=!0),O.marker&amp;&amp;!z.scatter2d&amp;&amp;(z.scatter2d=!0),O.line&amp;&amp;!z.line2d&amp;&amp;(z.line2d=!0),!O.errorX&amp;&amp;!O.errorY||z.error2d||(z.error2d=!0),O.text&amp;&amp;!z.glText&amp;&amp;(z.glText=!0),O.marker&amp;&amp;(O.marker.snap=b),z.lineOptions.push(O.line),z.errorXOptions.push(O.errorX),z.errorYOptions.push(O.errorY),z.fillOptions.push(O.fill),z.markerOptions.push(O.marker),z.markerSelectedOptions.push(O.markerSel),z.markerUnselectedOptions.push(O.markerUnsel),z.textOptions.push(O.text),z.textSelectedOptions.push(O.textSel),z.textUnselectedOptions.push(O.textUnsel),z.selectBatch.push([]),z.unselectBatch.push([]),T._scene=z,T.index=z.count,T.x=E,T.y=L,T.positions=C,z.count++,[{x:!1,y:!1,t:T,trace:e}]}},{\"../../constants/numerical\":491,\"../../lib\":515,\"../../plots/cartesian/align_period\":563,\"../../plots/cartesian/autorange\":565,\"../../plots/cartesian/axis_ids\":570,\"../scatter/calc\":937,\"../scatter/colorscale_calc\":939,\"./constants\":991,\"./convert\":992,\"./scene_update\":1e3,\"@plotly/point-cluster\":59}],991:[function(t,e,r){\"use strict\";e.exports={TOO_MANY_POINTS:1e5,SYMBOL_SDF_SIZE:200,SYMBOL_SIZE:20,SYMBOL_STROKE:1,DOT_RE:/-dot/,OPEN_RE:/-open/,DASHES:{solid:[1],dot:[1,1],dash:[4,1],longdash:[8,1],dashdot:[4,1,1,1],longdashdot:[8,1,1,1]}}},{}],992:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"svg-path-sdf\"),a=t(\"color-normalize\"),o=t(\"../../registry\"),s=t(\"../../lib\"),l=t(\"../../components/drawing\"),c=t(\"../../plots/cartesian/axis_ids\"),u=t(\"../../lib/gl_format_color\").formatColor,f=t(\"../scatter/subtypes\"),h=t(\"../scatter/make_bubble_size_func\"),p=t(\"./helpers\"),d=t(\"./constants\"),m=t(\"../../constants/interactions\").DESELECTDIM,g={start:1,left:1,end:-1,right:-1,middle:0,center:0,bottom:1,top:-1},v=t(\"../../components/fx/helpers\").appendArrayPointValue;function y(t,e){var r,i=t._fullLayout,a=e._length,o=e.textfont,l=e.textposition,c=Array.isArray(l)?l:[l],u=o.color,f=o.size,h=o.family,p={},d=t._context.plotGlPixelRatio,m=e.texttemplate;if(m){p.text=[];var g=i._d3locale,y=Array.isArray(m),x=y?Math.min(m.length,a):a,b=y?function(t){return m[t]}:function(){return m};for(r=0;rd.TOO_MANY_POINTS||f.hasMarkers(e)?\"rect\":\"round\";if(c&amp;&amp;e.connectgaps){var h=n[0],p=n[1];for(i=0;i1?l[i]:l[0]:l,d=Array.isArray(c)?c.length&gt;1?c[i]:c[0]:c,m=g[p],v=g[d],y=u?u/.8+1:0,x=-v*y-.5*v;o.offset[i]=[m*y/h,x/h]}}return o}}},{\"../../components/drawing\":389,\"../../components/fx/helpers\":403,\"../../constants/interactions\":490,\"../../lib\":515,\"../../lib/gl_format_color\":511,\"../../plots/cartesian/axis_ids\":570,\"../../registry\":647,\"../scatter/make_bubble_size_func\":953,\"../scatter/subtypes\":961,\"./constants\":991,\"./helpers\":996,\"color-normalize\":89,\"fast-isnumeric\":190,\"svg-path-sdf\":311}],993:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../registry\"),a=t(\"./helpers\"),o=t(\"./attributes\"),s=t(\"../scatter/constants\"),l=t(\"../scatter/subtypes\"),c=t(\"../scatter/xy_defaults\"),u=t(\"../scatter/period_defaults\"),f=t(\"../scatter/marker_defaults\"),h=t(\"../scatter/line_defaults\"),p=t(\"../scatter/fillcolor_defaults\"),d=t(\"../scatter/text_defaults\");e.exports=function(t,e,r,m){function g(r,i){return n.coerce(t,e,o,r,i)}var v=!!t.marker&amp;&amp;a.isOpenSymbol(t.marker.symbol),y=l.isBubble(t),x=c(t,e,m,g);if(x){u(t,e,m,g),g(\"xhoverformat\"),g(\"yhoverformat\");var b=x100},r.isDotSymbol=function(t){return\"string\"==typeof t?n.DOT_RE.test(t):t&gt;200}},{\"./constants\":991}],997:[function(t,e,r){\"use strict\";var n=t(\"../../registry\"),i=t(\"../../lib\"),a=t(\"../scatter/get_trace_color\");function o(t,e,r,o){var s=t.xa,l=t.ya,c=t.distance,u=t.dxy,f=t.index,h={pointNumber:f,x:e[f],y:r[f]};h.tx=Array.isArray(o.text)?o.text[f]:o.text,h.htx=Array.isArray(o.hovertext)?o.hovertext[f]:o.hovertext,h.data=Array.isArray(o.customdata)?o.customdata[f]:o.customdata,h.tp=Array.isArray(o.textposition)?o.textposition[f]:o.textposition;var p=o.textfont;p&amp;&amp;(h.ts=i.isArrayOrTypedArray(p.size)?p.size[f]:p.size,h.tc=Array.isArray(p.color)?p.color[f]:p.color,h.tf=Array.isArray(p.family)?p.family[f]:p.family);var d=o.marker;d&amp;&amp;(h.ms=i.isArrayOrTypedArray(d.size)?d.size[f]:d.size,h.mo=i.isArrayOrTypedArray(d.opacity)?d.opacity[f]:d.opacity,h.mx=i.isArrayOrTypedArray(d.symbol)?d.symbol[f]:d.symbol,h.ma=i.isArrayOrTypedArray(d.angle)?d.angle[f]:d.angle,h.mc=i.isArrayOrTypedArray(d.color)?d.color[f]:d.color);var m=d&amp;&amp;d.line;m&amp;&amp;(h.mlc=Array.isArray(m.color)?m.color[f]:m.color,h.mlw=i.isArrayOrTypedArray(m.width)?m.width[f]:m.width);var g=d&amp;&amp;d.gradient;g&amp;&amp;\"none\"!==g.type&amp;&amp;(h.mgt=Array.isArray(g.type)?g.type[f]:g.type,h.mgc=Array.isArray(g.color)?g.color[f]:g.color);var v=s.c2p(h.x,!0),y=l.c2p(h.y,!0),x=h.mrc||1,b=o.hoverlabel;b&amp;&amp;(h.hbg=Array.isArray(b.bgcolor)?b.bgcolor[f]:b.bgcolor,h.hbc=Array.isArray(b.bordercolor)?b.bordercolor[f]:b.bordercolor,h.hts=i.isArrayOrTypedArray(b.font.size)?b.font.size[f]:b.font.size,h.htc=Array.isArray(b.font.color)?b.font.color[f]:b.font.color,h.htf=Array.isArray(b.font.family)?b.font.family[f]:b.font.family,h.hnl=i.isArrayOrTypedArray(b.namelength)?b.namelength[f]:b.namelength);var _=o.hoverinfo;_&amp;&amp;(h.hi=Array.isArray(_)?_[f]:_);var w=o.hovertemplate;w&amp;&amp;(h.ht=Array.isArray(w)?w[f]:w);var T={};T[t.index]=h;var k=o._origX,A=o._origY,M=i.extendFlat({},t,{color:a(o,h),x0:v-x,x1:v+x,xLabelVal:k?k[f]:h.x,y0:y-x,y1:y+x,yLabelVal:A?A[f]:h.y,cd:T,distance:c,spikeDistance:u,hovertemplate:h.ht});return h.htx?M.text=h.htx:h.tx?M.text=h.tx:o.text&amp;&amp;(M.text=o.text),i.fillText(h,o,M),n.getComponentMethod(\"errorbars\",\"hoverInfo\")(h,o,M),M}e.exports={hoverPoints:function(t,e,r,n){var i,a,s,l,c,u,f,h,p,d,m=t.cd,g=m[0].t,v=m[0].trace,y=t.xa,x=t.ya,b=g.x,_=g.y,w=y.c2p(e),T=x.c2p(r),k=t.distance;if(g.tree){var A=y.p2c(w-k),M=y.p2c(w+k),S=x.p2c(T-k),E=x.p2c(T+k);i=\"x\"===n?g.tree.range(Math.min(A,M),Math.min(x._rl[0],x._rl[1]),Math.max(A,M),Math.max(x._rl[0],x._rl[1])):g.tree.range(Math.min(A,M),Math.min(S,E),Math.max(A,M),Math.max(S,E))}else i=g.ids;var L=k;if(\"x\"===n){var C=!!v.xperiodalignment,P=!!v.yperiodalignment;for(u=0;u=Math.min(I,O)&amp;&amp;w&lt;=Math.max(I,O)?0:1/0}if(f=Math.min(z,D)&amp;&amp;T&lt;=Math.max(z,D)?0:1/0}d=Math.sqrt(f*f+h*h),s=i[u]}}}else for(u=i.length-1;u&gt;-1;u--)l=b[a=i[u]],c=_[a],f=y.c2p(l)-w,h=x.c2p(c)-T,(p=Math.sqrt(f*f+h*h))y.glText.length){var T=_-y.glText.length;for(m=0;mr&amp;&amp;(isNaN(e[n])||isNaN(e[n+1]));)n-=2;t.positions=e.slice(r,n+2)}return t})),y.line2d.update(y.lineOptions)),y.error2d){var A=(y.errorXOptions||[]).concat(y.errorYOptions||[]);y.error2d.update(A)}y.scatter2d&amp;&amp;y.scatter2d.update(y.markerOptions),y.fillOrder=s.repeat(null,_),y.fill2d&amp;&amp;(y.fillOptions=y.fillOptions.map((function(t,e){var n=r[e];if(t&amp;&amp;n&amp;&amp;n[0]&amp;&amp;n[0].trace){var i,a,o=n[0],s=o.trace,l=o.t,c=y.lineOptions[e],u=[];s._ownfill&amp;&amp;u.push(e),s._nexttrace&amp;&amp;u.push(e+1),u.length&amp;&amp;(y.fillOrder[e]=u);var f,h,p=[],d=c&amp;&amp;c.positions||l.positions;if(\"tozeroy\"===s.fill){for(f=0;ff&amp;&amp;isNaN(d[h+1]);)h-=2;0!==d[f+1]&amp;&amp;(p=[d[f],0]),p=p.concat(d.slice(f,h+2)),0!==d[h+1]&amp;&amp;(p=p.concat([d[h],0]))}else if(\"tozerox\"===s.fill){for(f=0;ff&amp;&amp;isNaN(d[h]);)h-=2;0!==d[f]&amp;&amp;(p=[0,d[f+1]]),p=p.concat(d.slice(f,h+2)),0!==d[h]&amp;&amp;(p=p.concat([0,d[h+1]]))}else if(\"toself\"===s.fill||\"tonext\"===s.fill){for(p=[],i=0,t.splitNull=!0,a=0;a-1;for(m=0;m&lt;_;m++){var L=r[m][0],C=L.trace,P=L.t,I=P.index,O=C._length,z=P.x,D=P.y;if(C.selectedpoints||S||E){if(S||(S=!0),C.selectedpoints){var R=y.selectBatch[I]=s.selIndices2selPoints(C),F={};for(g=0;g\")}function u(t){return t+\"\\xb0\"}}e.exports={hoverPoints:function(t,e,r){var o=t.cd,u=o[0].trace,f=t.xa,h=t.ya,p=t.subplot,d=[],m=l+u.uid+\"-circle\",g=u.cluster&amp;&amp;u.cluster.enabled;if(g){var v=p.map.queryRenderedFeatures(null,{layers:[m]});d=v.map((function(t){return t.id}))}var y=360*(e&gt;=0?Math.floor((e+180)/360):Math.ceil((e-180)/360)),x=e-y;if(n.getClosest(o,(function(t){var e=t.lonlat;if(e[0]===s)return 1/0;if(g&amp;&amp;-1===d.indexOf(t.i+1))return 1/0;var n=i.modHalf(e[0],360),a=e[1],o=p.project([n,a]),l=o.x-f.c2p([x,a]),c=o.y-h.c2p([n,r]),u=Math.max(3,t.mrc||0);return Math.max(Math.sqrt(l*l+c*c)-u,1-3/u)}),t),!1!==t.index){var b=o[t.index],_=b.lonlat,w=[i.modHalf(_[0],360)+y,_[1]],T=f.c2p(w),k=h.c2p(w),A=b.mrc||1;t.x0=T-A,t.x1=T+A,t.y0=k-A,t.y1=k+A;var M={};M[u.subplot]={_subplot:p};var S=u._module.formatLabels(b,u,M);return t.lonLabel=S.lonLabel,t.latLabel=S.latLabel,t.color=a(u,b),t.extraText=c(u,b,o[0].t.labels),t.hovertemplate=u.hovertemplate,[t]}},getExtraText:c}},{\"../../components/fx\":407,\"../../constants/numerical\":491,\"../../lib\":515,\"../../plots/mapbox/constants\":620,\"../scatter/get_trace_color\":946}],1008:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"../scattergeo/calc\"),plot:t(\"./plot\"),hoverPoints:t(\"./hover\").hoverPoints,eventData:t(\"./event_data\"),selectPoints:t(\"./select\"),styleOnSelect:function(t,e){e&amp;&amp;e[0].trace._glTrace.update(e)},moduleType:\"trace\",name:\"scattermapbox\",basePlotModule:t(\"../../plots/mapbox\"),categories:[\"mapbox\",\"gl\",\"symbols\",\"showLegend\",\"scatter-like\"],meta:{}}},{\"../../plots/mapbox\":622,\"../scatter/marker_colorbar\":954,\"../scattergeo/calc\":979,\"./attributes\":1002,\"./defaults\":1004,\"./event_data\":1005,\"./format_labels\":1006,\"./hover\":1007,\"./plot\":1009,\"./select\":1010}],1009:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./convert\"),a=t(\"../../plots/mapbox/constants\").traceLayerPrefix,o={cluster:[\"cluster\",\"clusterCount\",\"circle\"],nonCluster:[\"fill\",\"line\",\"circle\",\"symbol\"]};function s(t,e,r){this.type=\"scattermapbox\",this.subplot=t,this.uid=e,this.clusterEnabled=r,this.sourceIds={fill:\"source-\"+e+\"-fill\",line:\"source-\"+e+\"-line\",circle:\"source-\"+e+\"-circle\",symbol:\"source-\"+e+\"-symbol\",cluster:\"source-\"+e+\"-circle\",clusterCount:\"source-\"+e+\"-circle\"},this.layerIds={fill:a+e+\"-fill\",line:a+e+\"-line\",circle:a+e+\"-circle\",symbol:a+e+\"-symbol\",cluster:a+e+\"-cluster\",clusterCount:a+e+\"-cluster-count\"},this.below=null}var l=s.prototype;l.addSource=function(t,e,r){var i={type:\"geojson\",data:e.geojson};r&amp;&amp;r.enabled&amp;&amp;n.extendFlat(i,{cluster:!0,clusterMaxZoom:r.maxzoom}),this.subplot.map.addSource(this.sourceIds[t],i)},l.setSourceData=function(t,e){this.subplot.map.getSource(this.sourceIds[t]).setData(e.geojson)},l.addLayer=function(t,e,r){var n={type:e.type,id:this.layerIds[t],source:this.sourceIds[t],layout:e.layout,paint:e.paint};e.filter&amp;&amp;(n.filter=e.filter),this.subplot.addLayer(n,r)},l.update=function(t){var e,r,n,a=t[0].trace,s=this.subplot,l=s.map,c=i(s.gd,t),u=s.belowLookup[\"trace-\"+this.uid],f=!(!a.cluster||!a.cluster.enabled),h=!!this.clusterEnabled;if(u!==this.below){var p=o.nonCluster;for(e=p.length-1;e&gt;=0;e--)r=p[e],l.removeLayer(this.layerIds[r]);for(e=0;e=0;e--)r=o.nonCluster[e],l.removeLayer(this.layerIds[r]),l.removeSource(this.sourceIds[r]);for(this.addSource(\"circle\",c.circle,a.cluster),e=0;e=0;r--){var n=e[r];t.removeLayer(this.layerIds[n]),t.removeSource(this.sourceIds[n])}},e.exports=function(t,e){var r,n,a,l=e[0].trace,c=l.cluster&amp;&amp;l.cluster.enabled,u=new s(t,l.uid,c),f=i(t.gd,e),h=u.below=t.belowLookup[\"trace-\"+l.uid];if(c)for(u.addSource(\"circle\",f.circle,l.cluster),r=0;r\")}}e.exports={hoverPoints:function(t,e,r,a){var o=n(t,e,r,a);if(o&amp;&amp;!1!==o[0].index){var s=o[0];if(void 0===s.index)return o;var l=t.subplot,c=s.cd[s.index],u=s.trace;if(l.isPtInside(c))return s.xLabelVal=void 0,s.yLabelVal=void 0,i(c,u,l,s),s.hovertemplate=u.hovertemplate,o}},makeHoverPointText:i}},{\"../scatter/hover\":947}],1016:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"scatterpolar\",basePlotModule:t(\"../../plots/polar\"),categories:[\"polar\",\"symbols\",\"showLegend\",\"scatter-like\"],attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\").supplyDefaults,colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"../scatter/style\").style,styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\").hoverPoints,selectPoints:t(\"../scatter/select\"),meta:{}}},{\"../../plots/polar\":631,\"../scatter/marker_colorbar\":954,\"../scatter/select\":958,\"../scatter/style\":960,\"./attributes\":1011,\"./calc\":1012,\"./defaults\":1013,\"./format_labels\":1014,\"./hover\":1015,\"./plot\":1017}],1017:[function(t,e,r){\"use strict\";var n=t(\"../scatter/plot\"),i=t(\"../../constants/numerical\").BADNUM;e.exports=function(t,e,r){for(var a=e.layers.frontplot.select(\"g.scatterlayer\"),o=e.xaxis,s=e.yaxis,l={xaxis:o,yaxis:s,plot:e.framework,layerClipId:e._hasClipOnAxisFalse?e.clipIds.forTraces:null},c=e.radialAxis,u=e.angularAxis,f=0;f=c&amp;&amp;(y.marker.cluster=d.tree),y.marker&amp;&amp;(y.markerSel.positions=y.markerUnsel.positions=y.marker.positions=_),y.line&amp;&amp;_.length&gt;1&amp;&amp;l.extendFlat(y.line,s.linePositions(t,p,_)),y.text&amp;&amp;(l.extendFlat(y.text,{positions:_},s.textPosition(t,p,y.text,y.marker)),l.extendFlat(y.textSel,{positions:_},s.textPosition(t,p,y.text,y.markerSel)),l.extendFlat(y.textUnsel,{positions:_},s.textPosition(t,p,y.text,y.markerUnsel))),y.fill&amp;&amp;!h.fill2d&amp;&amp;(h.fill2d=!0),y.marker&amp;&amp;!h.scatter2d&amp;&amp;(h.scatter2d=!0),y.line&amp;&amp;!h.line2d&amp;&amp;(h.line2d=!0),y.text&amp;&amp;!h.glText&amp;&amp;(h.glText=!0),h.lineOptions.push(y.line),h.fillOptions.push(y.fill),h.markerOptions.push(y.marker),h.markerSelectedOptions.push(y.markerSel),h.markerUnselectedOptions.push(y.markerUnsel),h.textOptions.push(y.text),h.textSelectedOptions.push(y.textSel),h.textUnselectedOptions.push(y.textUnsel),h.selectBatch.push([]),h.unselectBatch.push([]),d.x=w,d.y=T,d.rawx=w,d.rawy=T,d.r=g,d.theta=v,d.positions=_,d._scene=h,d.index=h.count,h.count++}})),a(t,e,r)}},e.exports.reglPrecompiled={}},{\"../../lib\":515,\"../scattergl/constants\":991,\"../scattergl/convert\":992,\"../scattergl/plot\":999,\"../scattergl/scene_update\":1e3,\"@plotly/point-cluster\":59,\"fast-isnumeric\":190}],1026:[function(t,e,r){\"use strict\";var n=t(\"../../plots/template_attributes\").hovertemplateAttrs,i=t(\"../../plots/template_attributes\").texttemplateAttrs,a=t(\"../../lib/extend\").extendFlat,o=t(\"../scatter/attributes\"),s=t(\"../../plots/attributes\"),l=o.line;e.exports={mode:o.mode,real:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},imag:{valType:\"data_array\",editType:\"calc+clearAxisTypes\"},text:o.text,texttemplate:i({editType:\"plot\"},{keys:[\"real\",\"imag\",\"text\"]}),hovertext:o.hovertext,line:{color:l.color,width:l.width,dash:l.dash,backoff:l.backoff,shape:a({},l.shape,{values:[\"linear\",\"spline\"]}),smoothing:l.smoothing,editType:\"calc\"},connectgaps:o.connectgaps,marker:o.marker,cliponaxis:a({},o.cliponaxis,{dflt:!1}),textposition:o.textposition,textfont:o.textfont,fill:a({},o.fill,{values:[\"none\",\"toself\",\"tonext\"],dflt:\"none\"}),fillcolor:o.fillcolor,hoverinfo:a({},s.hoverinfo,{flags:[\"real\",\"imag\",\"text\",\"name\"]}),hoveron:o.hoveron,hovertemplate:n(),selected:o.selected,unselected:o.unselected}},{\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/template_attributes\":642,\"../scatter/attributes\":936}],1027:[function(t,e,r){\"use strict\";var n=t(\"fast-isnumeric\"),i=t(\"../../constants/numerical\").BADNUM,a=t(\"../scatter/colorscale_calc\"),o=t(\"../scatter/arrays_to_calcdata\"),s=t(\"../scatter/calc_selection\"),l=t(\"../scatter/calc\").calcMarkerSize;e.exports=function(t,e){for(var r=t._fullLayout,c=e.subplot,u=r[c].realaxis,f=r[c].imaginaryaxis,h=u.makeCalcdata(e,\"real\"),p=f.makeCalcdata(e,\"imag\"),d=e._length,m=new Array(d),g=0;g\")}}e.exports={hoverPoints:function(t,e,r,a){var o=n(t,e,r,a);if(o&amp;&amp;!1!==o[0].index){var s=o[0];if(void 0===s.index)return o;var l=t.subplot,c=s.cd[s.index],u=s.trace;if(l.isPtInside(c))return s.xLabelVal=void 0,s.yLabelVal=void 0,i(c,u,l,s),s.hovertemplate=u.hovertemplate,o}},makeHoverPointText:i}},{\"../scatter/hover\":947}],1031:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"scattersmith\",basePlotModule:t(\"../../plots/smith\"),categories:[\"smith\",\"symbols\",\"showLegend\",\"scatter-like\"],attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"../scatter/style\").style,styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\").hoverPoints,selectPoints:t(\"../scatter/select\"),meta:{}}},{\"../../plots/smith\":638,\"../scatter/marker_colorbar\":954,\"../scatter/select\":958,\"../scatter/style\":960,\"./attributes\":1026,\"./calc\":1027,\"./defaults\":1028,\"./format_labels\":1029,\"./hover\":1030,\"./plot\":1032}],1032:[function(t,e,r){\"use strict\";var n=t(\"../scatter/plot\"),i=t(\"../../constants/numerical\").BADNUM,a=t(\"../../plots/smith/helpers\").smith;e.exports=function(t,e,r){for(var o=e.layers.frontplot.select(\"g.scatterlayer\"),s=e.xaxis,l=e.yaxis,c={xaxis:s,yaxis:l,plot:e.framework,layerClipId:e._hasClipOnAxisFalse?e.clipIds.forTraces:null},u=0;u\"),o.hovertemplate=h.hovertemplate,a}function x(t,e){v.push(t._hovertitle+\": \"+e)}}},{\"../scatter/hover\":947}],1039:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),colorbar:t(\"../scatter/marker_colorbar\"),formatLabels:t(\"./format_labels\"),calc:t(\"./calc\"),plot:t(\"./plot\"),style:t(\"../scatter/style\").style,styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\"),selectPoints:t(\"../scatter/select\"),eventData:t(\"./event_data\"),moduleType:\"trace\",name:\"scatterternary\",basePlotModule:t(\"../../plots/ternary\"),categories:[\"ternary\",\"symbols\",\"showLegend\",\"scatter-like\"],meta:{}}},{\"../../plots/ternary\":643,\"../scatter/marker_colorbar\":954,\"../scatter/select\":958,\"../scatter/style\":960,\"./attributes\":1033,\"./calc\":1034,\"./defaults\":1035,\"./event_data\":1036,\"./format_labels\":1037,\"./hover\":1038,\"./plot\":1040}],1040:[function(t,e,r){\"use strict\";var n=t(\"../scatter/plot\");e.exports=function(t,e,r){var i=e.plotContainer;i.select(\".scatterlayer\").selectAll(\"*\").remove();for(var a=e.xaxis,o=e.yaxis,s={xaxis:a,yaxis:o,plot:i,layerClipId:e._hasClipOnAxisFalse?e.clipIdRelative:null},l=e.layers.frontplot.select(\"g.scatterlayer\"),c=0;ch?b.sizeAvg||Math.max(b.size,3):a(e,x),p=0;pa&amp;&amp;l||i-1,P=!0;if(o(x)||!!p.selectedpoints||C){var I=p._length;if(p.selectedpoints){m.selectBatch=p.selectedpoints;var O=p.selectedpoints,z={};for(l=0;l1&amp;&amp;(u=m[y-1],h=g[y-1],d=v[y-1]),e=0;eu?\"-\":\"+\")+\"x\")).replace(\"y\",(f&gt;h?\"-\":\"+\")+\"y\")).replace(\"z\",(p&gt;d?\"-\":\"+\")+\"z\");var L=function(){y=0,M=[],S=[],E=[]};(!y||y2?t.slice(1,e-1):2===e?[(t[0]+t[1])/2]:t}function p(t){var e=t.length;return 1===e?[.5,.5]:[t[1]-t[0],t[e-1]-t[e-2]]}function d(t,e){var r=t.fullSceneLayout,i=t.dataScale,u=e._len,f={};function d(t,e){var n=r[e],o=i[c[e]];return a.simpleMap(t,(function(t){return n.d2l(t)*o}))}if(f.vectors=l(d(e._u,\"xaxis\"),d(e._v,\"yaxis\"),d(e._w,\"zaxis\"),u),!u)return{positions:[],cells:[]};var m=d(e._Xs,\"xaxis\"),g=d(e._Ys,\"yaxis\"),v=d(e._Zs,\"zaxis\");if(f.meshgrid=[m,g,v],f.gridFill=e._gridFill,e._slen)f.startingPositions=l(d(e._startsX,\"xaxis\"),d(e._startsY,\"yaxis\"),d(e._startsZ,\"zaxis\"));else{for(var y=g[0],x=h(m),b=h(v),_=new Array(x.length*b.length),w=0,T=0;T=0};v?(r=Math.min(g.length,x.length),l=function(t){return A(g[t])&amp;&amp;M(t)},f=function(t){return String(g[t])}):(r=Math.min(y.length,x.length),l=function(t){return A(y[t])&amp;&amp;M(t)},f=function(t){return String(y[t])}),_&amp;&amp;(r=Math.min(r,b.length));for(var S=0;S1){for(var P=a.randstr(),I=0;I\"),name:A||z(\"name\")?y.name:void 0,color:k(\"hoverlabel.bgcolor\")||x.color,borderColor:k(\"hoverlabel.bordercolor\"),fontFamily:k(\"hoverlabel.font.family\"),fontSize:k(\"hoverlabel.font.size\"),fontColor:k(\"hoverlabel.font.color\"),nameLength:k(\"hoverlabel.namelength\"),textAlign:k(\"hoverlabel.align\"),hovertemplate:A,hovertemplateLabels:P,eventData:l};g&amp;&amp;(F.x0=E-i.rInscribed*i.rpx1,F.x1=E+i.rInscribed*i.rpx1,F.idealAlign=i.pxmid[0]&lt;0?\"left\":\"right\"),v&amp;&amp;(F.x=E,F.idealAlign=E&lt;0?\"left\":\"right\");var B=[];o.loneHover(F,{container:a._hoverlayer.node(),outerContainer:a._paper.node(),gd:r,inOut_bbox:B}),l[0].bbox=B[0],d._hasHoverLabel=!0}if(v){var N=t.select(\"path.surface\");h.styleOne(N,i,y,{hovered:!0})}d._hasHoverEvent=!0,r.emit(\"plotly_hover\",{points:l||[f(i,y,h.eventDataKeys)],event:n.event})}})),t.on(\"mouseout\",(function(e){var i=r._fullLayout,a=r._fullData[d.index],s=n.select(this).datum();if(d._hasHoverEvent&amp;&amp;(e.originalEvent=n.event,r.emit(\"plotly_unhover\",{points:[f(s,a,h.eventDataKeys)],event:n.event}),d._hasHoverEvent=!1),d._hasHoverLabel&amp;&amp;(o.loneUnhover(i._hoverlayer.node()),d._hasHoverLabel=!1),v){var l=t.select(\"path.surface\");h.styleOne(l,s,a,{hovered:!1})}})),t.on(\"click\",(function(t){var e=r._fullLayout,a=r._fullData[d.index],s=g&amp;&amp;(c.isHierarchyRoot(t)||c.isLeaf(t)),u=c.getPtId(t),p=c.isEntry(t)?c.findEntryWithChild(m,u):c.findEntryWithLevel(m,u),v=c.getPtId(p),y={points:[f(t,a,h.eventDataKeys)],event:n.event};s||(y.nextLevel=v);var x=l.triggerHandler(r,\"plotly_\"+d.type+\"click\",y);if(!1!==x&amp;&amp;e.hovermode&amp;&amp;(r._hoverdata=[f(t,a,h.eventDataKeys)],o.click(r,n.event)),!s&amp;&amp;!1!==x&amp;&amp;!r._dragging&amp;&amp;!r._transitioning){i.call(\"_storeDirectGUIEdit\",a,e._tracePreGUI[a.uid],{level:a.level});var b={data:[{level:v}],traces:[d.index]},_={frame:{redraw:!1,duration:h.transitionTime},transition:{duration:h.transitionTime,easing:h.transitionEasing},mode:\"immediate\",fromcurrent:!0};o.loneUnhover(e._hoverlayer.node()),i.call(\"animate\",r,b,_)}}))}},{\"../../components/fx\":407,\"../../components/fx/helpers\":403,\"../../lib\":515,\"../../lib/events\":504,\"../../registry\":647,\"../pie/helpers\":915,\"./helpers\":1064,\"@plotly/d3\":58}],1064:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"../../components/color\"),a=t(\"../../lib/setcursor\"),o=t(\"../pie/helpers\");function s(t){return t.data.data.pid}r.findEntryWithLevel=function(t,e){var n;return e&amp;&amp;t.eachAfter((function(t){if(r.getPtId(t)===e)return n=t.copy()})),n||t},r.findEntryWithChild=function(t,e){var n;return t.eachAfter((function(t){for(var i=t.children||[],a=0;a0)},r.getMaxDepth=function(t){return t.maxdepth&gt;=0?t.maxdepth:1/0},r.isHeader=function(t,e){return!(r.isLeaf(t)||t.depth===e._maxDepth-1)},r.getParent=function(t,e){return r.findEntryWithLevel(t,s(e))},r.listPath=function(t,e){var n=t.parent;if(!n)return[];var i=e?[n.data[e]]:[n];return r.listPath(n,e).concat(i)},r.getPath=function(t){return r.listPath(t,\"label\").join(\"/\")+\"/\"},r.formatValue=o.formatPieValue,r.formatPercent=function(t,e){var r=n.formatPercent(t,0);return\"0%\"===r&amp;&amp;(r=o.formatPiePercent(t,e)),r}},{\"../../components/color\":367,\"../../lib\":515,\"../../lib/setcursor\":536,\"../pie/helpers\":915}],1065:[function(t,e,r){\"use strict\";e.exports={moduleType:\"trace\",name:\"sunburst\",basePlotModule:t(\"./base_plot\"),categories:[],animatable:!0,attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\"),supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\").calc,crossTraceCalc:t(\"./calc\").crossTraceCalc,plot:t(\"./plot\").plot,style:t(\"./style\").style,colorbar:t(\"../scatter/marker_colorbar\"),meta:{}}},{\"../scatter/marker_colorbar\":954,\"./attributes\":1058,\"./base_plot\":1059,\"./calc\":1060,\"./defaults\":1062,\"./layout_attributes\":1066,\"./layout_defaults\":1067,\"./plot\":1068,\"./style\":1069}],1066:[function(t,e,r){\"use strict\";e.exports={sunburstcolorway:{valType:\"colorlist\",editType:\"calc\"},extendsunburstcolors:{valType:\"boolean\",dflt:!0,editType:\"calc\"}}},{}],1067:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e){function r(r,a){return n.coerce(t,e,i,r,a)}r(\"sunburstcolorway\",e.colorway),r(\"extendsunburstcolors\")}},{\"../../lib\":515,\"./layout_attributes\":1066}],1068:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"d3-hierarchy\"),a=t(\"d3-interpolate\").interpolate,o=t(\"../../components/drawing\"),s=t(\"../../lib\"),l=t(\"../../lib/svg_text_utils\"),c=t(\"../bar/uniform_text\"),u=c.recordMinTextSize,f=c.clearMinTextSize,h=t(\"../pie/plot\"),p=t(\"../pie/helpers\").getRotationAngle,d=h.computeTransform,m=h.transformInsideText,g=t(\"./style\").styleOne,v=t(\"../bar/style\").resizeText,y=t(\"./fx\"),x=t(\"./constants\"),b=t(\"./helpers\");function _(t,e,c,f){var h=t._context.staticPlot,v=t._fullLayout,_=!v.uniformtext.mode&amp;&amp;b.hasTransition(f),T=n.select(c).selectAll(\"g.slice\"),k=e[0],A=k.trace,M=k.hierarchy,S=b.findEntryWithLevel(M,A.level),E=b.getMaxDepth(A),L=v._size,C=A.domain,P=L.w*(C.x[1]-C.x[0]),I=L.h*(C.y[1]-C.y[0]),O=.5*Math.min(P,I),z=k.cx=L.l+L.w*(C.x[1]+C.x[0])/2,D=k.cy=L.t+L.h*(1-C.y[0])-I/2;if(!S)return T.remove();var R=null,F={};_&amp;&amp;T.each((function(t){F[b.getPtId(t)]={rpx0:t.rpx0,rpx1:t.rpx1,x0:t.x0,x1:t.x1,transform:t.transform},!R&amp;&amp;b.isEntry(t)&amp;&amp;(R=t)}));var B=function(t){return i.partition().size([2*Math.PI,t.height+1])(t)}(S).descendants(),N=S.height+1,j=0,U=E;k.hasMultipleRoots&amp;&amp;b.isHierarchyRoot(S)&amp;&amp;(B=B.slice(1),N-=1,j=1,U+=1),B=B.filter((function(t){return t.y1&lt;=U}));var V=p(A.rotation);V&amp;&amp;B.forEach((function(t){t.x0+=V,t.x1+=V}));var H=Math.min(N,E),q=function(t){return(t-j)/H*O},G=function(t,e){return[t*Math.cos(e),-t*Math.sin(e)]},Y=function(t){return s.pathAnnulus(t.rpx0,t.rpx1,t.x0,t.x1,z,D)},W=function(t){return z+w(t)[0]*(t.transform.rCenter||0)+(t.transform.x||0)},Z=function(t){return D+w(t)[1]*(t.transform.rCenter||0)+(t.transform.y||0)};(T=T.data(B,b.getPtId)).enter().append(\"g\").classed(\"slice\",!0),_?T.exit().transition().each((function(){var t=n.select(this);t.select(\"path.surface\").transition().attrTween(\"d\",(function(t){var e=function(t){var e,r=b.getPtId(t),n=F[r],i=F[b.getPtId(S)];if(i){var o=(t.x1&gt;i.x1?2*Math.PI:0)+V;e=t.rpx1X?2*Math.PI:0)+V;e={x0:i,x1:i}}else e={rpx0:O,rpx1:O},s.extendFlat(e,Q(t));else e={rpx0:0,rpx1:0};else e={x0:V,x1:V};return a(e,n)}(t);return function(t){return Y(e(t))}})):f.attr(\"d\",Y),c.call(y,S,t,e,{eventDataKeys:x.eventDataKeys,transitionTime:x.CLICK_TRANSITION_TIME,transitionEasing:x.CLICK_TRANSITION_EASING}).call(b.setSliceCursor,t,{hideOnRoot:!0,hideOnLeaves:!0,isTransitioning:t._transitioning}),f.call(g,i,A);var p=s.ensureSingle(c,\"g\",\"slicetext\"),w=s.ensureSingle(p,\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),T=s.ensureUniformFontSize(t,b.determineTextFont(A,i,v.font));w.text(r.formatSliceLabel(i,S,A,e,v)).classed(\"slicetext\",!0).attr(\"text-anchor\",\"middle\").call(o.font,T).call(l.convertToTspans,t);var M=o.bBox(w.node());i.transform=m(M,i,k),i.transform.targetX=W(i),i.transform.targetY=Z(i);var E=function(t,e){var r=t.transform;return d(r,e),r.fontSize=T.size,u(A.type,r,v),s.getTextTransform(r)};_?w.transition().attrTween(\"transform\",(function(t){var e=function(t){var e,r=F[b.getPtId(t)],n=t.transform;if(r)e=r;else if(e={rpx1:t.rpx1,transform:{textPosAngle:n.textPosAngle,scale:0,rotate:n.rotate,rCenter:n.rCenter,x:n.x,y:n.y}},R)if(t.parent)if(X){var i=t.x1&gt;X?2*Math.PI:0;e.x0=e.x1=i}else s.extendFlat(e,Q(t));else e.x0=e.x1=V;else e.x0=e.x1=V;var o=a(e.transform.textPosAngle,t.transform.textPosAngle),l=a(e.rpx1,t.rpx1),c=a(e.x0,t.x0),f=a(e.x1,t.x1),h=a(e.transform.scale,n.scale),p=a(e.transform.rotate,n.rotate),d=0===n.rCenter?3:0===e.transform.rCenter?1/3:1,m=a(e.transform.rCenter,n.rCenter);return function(t){var e=l(t),r=c(t),i=f(t),a=function(t){return m(Math.pow(t,d))}(t),s={pxmid:G(e,(r+i)/2),rpx1:e,transform:{textPosAngle:o(t),rCenter:a,x:n.x,y:n.y}};return u(A.type,n,v),{transform:{targetX:W(s),targetY:Z(s),scale:h(t),rotate:p(t),rCenter:a}}}}(t);return function(t){return E(e(t),M)}})):w.attr(\"transform\",E(i,M))}))}function w(t){return e=t.rpx1,r=t.transform.textPosAngle,[e*Math.sin(r),-e*Math.cos(r)];var e,r}r.plot=function(t,e,r,i){var a,o,s=t._fullLayout,l=s._sunburstlayer,c=!r,u=!s.uniformtext.mode&amp;&amp;b.hasTransition(r);(f(\"sunburst\",s),(a=l.selectAll(\"g.trace.sunburst\").data(e,(function(t){return t[0].trace.uid}))).enter().append(\"g\").classed(\"trace\",!0).classed(\"sunburst\",!0).attr(\"stroke-linejoin\",\"round\"),a.order(),u)?(i&amp;&amp;(o=i()),n.transition().duration(r.duration).ease(r.easing).each(\"end\",(function(){o&amp;&amp;o()})).each(\"interrupt\",(function(){o&amp;&amp;o()})).each((function(){l.selectAll(\"g.trace\").each((function(e){_(t,e,this,r)}))}))):(a.each((function(e){_(t,e,this,r)})),s.uniformtext.mode&amp;&amp;v(t,s._sunburstlayer.selectAll(\".trace\"),\"sunburst\"));c&amp;&amp;a.exit().remove()},r.formatSliceLabel=function(t,e,r,n,i){var a=r.texttemplate,o=r.textinfo;if(!(a||o&amp;&amp;\"none\"!==o))return\"\";var l=i.separators,c=n[0],u=t.data.data,f=c.hierarchy,h=b.isHierarchyRoot(t),p=b.getParent(f,t),d=b.getValue(t);if(!a){var m,g=o.split(\"+\"),v=function(t){return-1!==g.indexOf(t)},y=[];if(v(\"label\")&amp;&amp;u.label&amp;&amp;y.push(u.label),u.hasOwnProperty(\"v\")&amp;&amp;v(\"value\")&amp;&amp;y.push(b.formatValue(u.v,l)),!h){v(\"current path\")&amp;&amp;y.push(b.getPath(t.data));var x=0;v(\"percent parent\")&amp;&amp;x++,v(\"percent entry\")&amp;&amp;x++,v(\"percent root\")&amp;&amp;x++;var _=x&gt;1;if(x){var w,T=function(t){m=b.formatPercent(w,l),_&amp;&amp;(m+=\" of \"+t),y.push(m)};v(\"percent parent\")&amp;&amp;!h&amp;&amp;(w=d/b.getValue(p),T(\"parent\")),v(\"percent entry\")&amp;&amp;(w=d/b.getValue(e),T(\"entry\")),v(\"percent root\")&amp;&amp;(w=d/b.getValue(f),T(\"root\"))}}return v(\"text\")&amp;&amp;(m=s.castOption(r,u.i,\"text\"),s.isValidTextValue(m)&amp;&amp;y.push(m)),y.join(\"\")}var k=s.castOption(r,u.i,\"texttemplate\");if(!k)return\"\";var A={};u.label&amp;&amp;(A.label=u.label),u.hasOwnProperty(\"v\")&amp;&amp;(A.value=u.v,A.valueLabel=b.formatValue(u.v,l)),A.currentPath=b.getPath(t.data),h||(A.percentParent=d/b.getValue(p),A.percentParentLabel=b.formatPercent(A.percentParent,l),A.parent=b.getPtLabel(p)),A.percentEntry=d/b.getValue(e),A.percentEntryLabel=b.formatPercent(A.percentEntry,l),A.entry=b.getPtLabel(e),A.percentRoot=d/b.getValue(f),A.percentRootLabel=b.formatPercent(A.percentRoot,l),A.root=b.getPtLabel(f),u.hasOwnProperty(\"color\")&amp;&amp;(A.color=u.color);var M=s.castOption(r,u.i,\"text\");return(s.isValidTextValue(M)||\"\"===M)&amp;&amp;(A.text=M),A.customdata=s.castOption(r,u.i,\"customdata\"),s.texttemplateString(k,A,i._d3locale,A,r._meta||{})}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../bar/style\":671,\"../bar/uniform_text\":673,\"../pie/helpers\":915,\"../pie/plot\":919,\"./constants\":1061,\"./fx\":1063,\"./helpers\":1064,\"./style\":1069,\"@plotly/d3\":58,\"d3-hierarchy\":115,\"d3-interpolate\":116}],1069:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/color\"),a=t(\"../../lib\"),o=t(\"../bar/uniform_text\").resizeText;function s(t,e,r){var n=e.data.data,o=!e.children,s=n.i,l=a.castOption(r,s,\"marker.line.color\")||i.defaultLine,c=a.castOption(r,s,\"marker.line.width\")||0;t.style(\"stroke-width\",c).call(i.fill,n.color).call(i.stroke,l).style(\"opacity\",o?r.leaf.opacity:null)}e.exports={style:function(t){var e=t._fullLayout._sunburstlayer.selectAll(\".trace\");o(t,e,\"sunburst\"),e.each((function(t){var e=n.select(this),r=t[0].trace;e.style(\"opacity\",r.opacity),e.selectAll(\"path.surface\").each((function(t){n.select(this).call(s,t,r)}))}))},styleOne:s}},{\"../../components/color\":367,\"../../lib\":515,\"../bar/uniform_text\":673,\"@plotly/d3\":58}],1070:[function(t,e,r){\"use strict\";var n=t(\"../../components/color\"),i=t(\"../../components/colorscale/attributes\"),a=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,o=t(\"../../plots/template_attributes\").hovertemplateAttrs,s=t(\"../../plots/attributes\"),l=t(\"../../lib/extend\").extendFlat,c=t(\"../../plot_api/edit_types\").overrideAll;function u(t){return{show:{valType:\"boolean\",dflt:!1},start:{valType:\"number\",dflt:null,editType:\"plot\"},end:{valType:\"number\",dflt:null,editType:\"plot\"},size:{valType:\"number\",dflt:null,min:0,editType:\"plot\"},project:{x:{valType:\"boolean\",dflt:!1},y:{valType:\"boolean\",dflt:!1},z:{valType:\"boolean\",dflt:!1}},color:{valType:\"color\",dflt:n.defaultLine},usecolormap:{valType:\"boolean\",dflt:!1},width:{valType:\"number\",min:1,max:16,dflt:2},highlight:{valType:\"boolean\",dflt:!0},highlightcolor:{valType:\"color\",dflt:n.defaultLine},highlightwidth:{valType:\"number\",min:1,max:16,dflt:2}}}var f=e.exports=c(l({z:{valType:\"data_array\"},x:{valType:\"data_array\"},y:{valType:\"data_array\"},text:{valType:\"string\",dflt:\"\",arrayOk:!0},hovertext:{valType:\"string\",dflt:\"\",arrayOk:!0},hovertemplate:o(),xhoverformat:a(\"x\"),yhoverformat:a(\"y\"),zhoverformat:a(\"z\"),connectgaps:{valType:\"boolean\",dflt:!1,editType:\"calc\"},surfacecolor:{valType:\"data_array\"}},i(\"\",{colorAttr:\"z or surfacecolor\",showScaleDflt:!0,autoColorDflt:!1,editTypeOverride:\"calc\"}),{contours:{x:u(),y:u(),z:u()},hidesurface:{valType:\"boolean\",dflt:!1},lightposition:{x:{valType:\"number\",min:-1e5,max:1e5,dflt:10},y:{valType:\"number\",min:-1e5,max:1e5,dflt:1e4},z:{valType:\"number\",min:-1e5,max:1e5,dflt:0}},lighting:{ambient:{valType:\"number\",min:0,max:1,dflt:.8},diffuse:{valType:\"number\",min:0,max:1,dflt:.8},specular:{valType:\"number\",min:0,max:2,dflt:.05},roughness:{valType:\"number\",min:0,max:1,dflt:.5},fresnel:{valType:\"number\",min:0,max:5,dflt:.2}},opacity:{valType:\"number\",min:0,max:1,dflt:1},opacityscale:{valType:\"any\",editType:\"calc\"},_deprecated:{zauto:l({},i.zauto,{}),zmin:l({},i.zmin,{}),zmax:l({},i.zmax,{})},hoverinfo:l({},s.hoverinfo),showlegend:l({},s.showlegend,{dflt:!1})}),\"calc\",\"nested\");f.x.editType=f.y.editType=f.z.editType=\"calc+clearAxisTypes\",f.transforms=void 0},{\"../../components/color\":367,\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plot_api/edit_types\":548,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642}],1071:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/calc\");e.exports=function(t,e){e.surfacecolor?n(t,e,{vals:e.surfacecolor,containerStr:\"\",cLetter:\"c\"}):n(t,e,{vals:e.z,containerStr:\"\",cLetter:\"c\"})}},{\"../../components/colorscale/calc\":375}],1072:[function(t,e,r){\"use strict\";var n=t(\"../../../stackgl_modules\").gl_surface3d,i=t(\"../../../stackgl_modules\").ndarray,a=t(\"../../../stackgl_modules\").ndarray_linear_interpolate.d2,o=t(\"../heatmap/interp2d\"),s=t(\"../heatmap/find_empties\"),l=t(\"../../lib\").isArrayOrTypedArray,c=t(\"../../lib/gl_format_color\").parseColorScale,u=t(\"../../lib/str2rgbarray\"),f=t(\"../../components/colorscale\").extractOpts;function h(t,e,r){this.scene=t,this.uid=r,this.surface=e,this.data=null,this.showContour=[!1,!1,!1],this.contourStart=[null,null,null],this.contourEnd=[null,null,null],this.contourSize=[0,0,0],this.minValues=[1/0,1/0,1/0],this.maxValues=[-1/0,-1/0,-1/0],this.dataScaleX=1,this.dataScaleY=1,this.refineData=!0,this.objectOffset=[0,0,0]}var p=h.prototype;p.getXat=function(t,e,r,n){var i=l(this.data.x)?l(this.data.x[0])?this.data.x[e][t]:this.data.x[t]:t;return void 0===r?i:n.d2l(i,0,r)},p.getYat=function(t,e,r,n){var i=l(this.data.y)?l(this.data.y[0])?this.data.y[e][t]:this.data.y[e]:e;return void 0===r?i:n.d2l(i,0,r)},p.getZat=function(t,e,r,n){var i=this.data.z[e][t];return null===i&amp;&amp;this.data.connectgaps&amp;&amp;this.data._interpolatedZ&amp;&amp;(i=this.data._interpolatedZ[e][t]),void 0===r?i:n.d2l(i,0,r)},p.handlePick=function(t){if(t.object===this.surface){var e=(t.data.index[0]-1)/this.dataScaleX-1,r=(t.data.index[1]-1)/this.dataScaleY-1,n=Math.max(Math.min(Math.round(e),this.data.z[0].length-1),0),i=Math.max(Math.min(Math.round(r),this.data._ylength-1),0);t.index=[n,i],t.traceCoordinate=[this.getXat(n,i),this.getYat(n,i),this.getZat(n,i)],t.dataCoordinate=[this.getXat(n,i,this.data.xcalendar,this.scene.fullSceneLayout.xaxis),this.getYat(n,i,this.data.ycalendar,this.scene.fullSceneLayout.yaxis),this.getZat(n,i,this.data.zcalendar,this.scene.fullSceneLayout.zaxis)];for(var a=0;a&lt;3;a++){var o=t.dataCoordinate[a];null!=o&amp;&amp;(t.dataCoordinate[a]*=this.scene.dataScale[a])}var s=this.data.hovertext||this.data.text;return Array.isArray(s)&amp;&amp;s[i]&amp;&amp;void 0!==s[i][n]?t.textLabel=s[i][n]:t.textLabel=s||\"\",t.data.dataCoordinate=t.dataCoordinate.slice(),this.surface.highlight(t.data),this.scene.glplot.spikes.position=t.dataCoordinate,!0}};var d=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999];function m(t,e){if(t0){r=d[n];break}return r}function y(t,e){if(!(t&lt;1||e&lt;1)){for(var r=g(t),n=g(e),i=1,a=0;a_;)r--,r/=v(r),++r1?n:1},p.refineCoords=function(t){for(var e=this.dataScaleX,r=this.dataScaleY,n=t[0].shape[0],a=t[0].shape[1],o=0|Math.floor(t[0].shape[0]*e+1),s=0|Math.floor(t[0].shape[1]*r+1),l=1+n+1,c=1+a+1,u=i(new Float32Array(l*c),[l,c]),f=[1/e,0,0,0,1/r,0,0,0,1],h=0;h0&amp;&amp;null!==this.contourStart[t]&amp;&amp;null!==this.contourEnd[t]&amp;&amp;this.contourEnd[t]&gt;this.contourStart[t]))for(i[t]=!0,e=this.contourStart[t];ea&amp;&amp;(this.minValues[e]=a),this.maxValues[e]\",maxDimensionCount:60,overdrag:45,releaseTransitionDuration:120,releaseTransitionEase:\"cubic-out\",scrollbarCaptureWidth:18,scrollbarHideDelay:1e3,scrollbarHideDuration:1e3,scrollbarOffset:5,scrollbarWidth:8,transitionDuration:100,transitionEase:\"cubic-out\",uplift:5,wrapSpacer:\" \",wrapSplitCharacter:\" \",cn:{table:\"table\",tableControlView:\"table-control-view\",scrollBackground:\"scroll-background\",yColumn:\"y-column\",columnBlock:\"column-block\",scrollAreaClip:\"scroll-area-clip\",scrollAreaClipRect:\"scroll-area-clip-rect\",columnBoundary:\"column-boundary\",columnBoundaryClippath:\"column-boundary-clippath\",columnBoundaryRect:\"column-boundary-rect\",columnCells:\"column-cells\",columnCell:\"column-cell\",cellRect:\"cell-rect\",cellText:\"cell-text\",cellTextHolder:\"cell-text-holder\",scrollbarKit:\"scrollbar-kit\",scrollbar:\"scrollbar\",scrollbarSlider:\"scrollbar-slider\",scrollbarGlyph:\"scrollbar-glyph\",scrollbarCaptureZone:\"scrollbar-capture-zone\"}}},{}],1079:[function(t,e,r){\"use strict\";var n=t(\"./constants\"),i=t(\"../../lib/extend\").extendFlat,a=t(\"fast-isnumeric\");function o(t){if(Array.isArray(t)){for(var e=0,r=0;r=e||c===t.length-1)&amp;&amp;(n[i]=o,o.key=l++,o.firstRowIndex=s,o.lastRowIndex=c,o={firstRowIndex:null,lastRowIndex:null,rows:[]},i+=a,s=c+1,a=0);return n}e.exports=function(t,e){var r=l(e.cells.values),p=function(t){return t.slice(e.header.values.length,t.length)},d=l(e.header.values);d.length&amp;&amp;!d[0].length&amp;&amp;(d[0]=[\"\"],d=l(d));var m=d.concat(p(r).map((function(){return c((d[0]||[\"\"]).length)}))),g=e.domain,v=Math.floor(t._fullLayout._size.w*(g.x[1]-g.x[0])),y=Math.floor(t._fullLayout._size.h*(g.y[1]-g.y[0])),x=e.header.values.length?m[0].map((function(){return e.header.height})):[n.emptyHeaderHeight],b=r.length?r[0].map((function(){return e.cells.height})):[],_=x.reduce(s,0),w=h(b,y-_+n.uplift),T=f(h(x,_),[]),k=f(w,T),A={},M=e._fullInput.columnorder.concat(p(r.map((function(t,e){return e})))),S=m.map((function(t,r){var n=Array.isArray(e.columnwidth)?e.columnwidth[Math.min(r,e.columnwidth.length-1)]:e.columnwidth;return a(n)?Number(n):1})),E=S.reduce(s,0);S=S.map((function(t){return t/E*v}));var L=Math.max(o(e.header.line.width),o(e.cells.line.width)),C={key:e.uid+t._context.staticPlot,translateX:g.x[0]*t._fullLayout._size.w,translateY:t._fullLayout._size.h*(1-g.y[1]),size:t._fullLayout._size,width:v,maxLineWidth:L,height:y,columnOrder:M,groupHeight:y,rowBlocks:k,headerRowBlocks:T,scrollY:0,cells:i({},e.cells,{values:r}),headerCells:i({},e.header,{values:m}),gdColumns:m.map((function(t){return t[0]})),gdColumnsOriginalOrder:m.map((function(t){return t[0]})),prevPages:[0,0],scrollbarState:{scrollbarScrollInProgress:!1},columns:m.map((function(t,e){var r=A[t];return A[t]=(r||0)+1,{key:t+\"__\"+A[t],label:t,specIndex:e,xIndex:M[e],xScale:u,x:void 0,calcdata:void 0,columnWidth:S[e]}}))};return C.columns.forEach((function(t){t.calcdata=C,t.x=u(t)})),C}},{\"../../lib/extend\":505,\"./constants\":1078,\"fast-isnumeric\":190}],1080:[function(t,e,r){\"use strict\";var n=t(\"../../lib/extend\").extendFlat;r.splitToPanels=function(t){var e=[0,0],r=n({},t,{key:\"header\",type:\"header\",page:0,prevPages:e,currentRepaint:[null,null],dragHandle:!0,values:t.calcdata.headerCells.values[t.specIndex],rowBlocks:t.calcdata.headerRowBlocks,calcdata:n({},t.calcdata,{cells:t.calcdata.headerCells})});return[n({},t,{key:\"cells1\",type:\"cells\",page:0,prevPages:e,currentRepaint:[null,null],dragHandle:!1,values:t.calcdata.cells.values[t.specIndex],rowBlocks:t.calcdata.rowBlocks}),n({},t,{key:\"cells2\",type:\"cells\",page:1,prevPages:e,currentRepaint:[null,null],dragHandle:!1,values:t.calcdata.cells.values[t.specIndex],rowBlocks:t.calcdata.rowBlocks}),r]},r.splitToCells=function(t){var e=function(t){var e=t.rowBlocks[t.page],r=e?e.rows[0].rowIndex:0,n=e?r+e.rows.length:0;return[r,n]}(t);return(t.values||[]).slice(e[0],e[1]).map((function(r,n){return{keyWithinBlock:n+(\"string\"==typeof r&amp;&amp;r.match(/[&lt;$&amp;&gt; ]/)?\"_keybuster_\"+Math.random():\"\"),key:e[0]+n,column:t,calcdata:t.calcdata,page:t.page,rowBlocks:t.rowBlocks,value:r}}))}},{\"../../lib/extend\":505}],1081:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\"),a=t(\"../../plots/domain\").defaults;e.exports=function(t,e,r,o){function s(r,a){return n.coerce(t,e,i,r,a)}a(e,o,s),s(\"columnwidth\"),s(\"header.values\"),s(\"header.format\"),s(\"header.align\"),s(\"header.prefix\"),s(\"header.suffix\"),s(\"header.height\"),s(\"header.line.width\"),s(\"header.line.color\"),s(\"header.fill.color\"),n.coerceFont(s,\"header.font\",n.extendFlat({},o.font)),function(t,e){for(var r=t.columnorder||[],n=t.header.values.length,i=r.slice(0,n),a=i.slice().sort((function(t,e){return t-e})),o=i.map((function(t){return a.indexOf(t)})),s=o.length;s/i),l=!o||s;t.mayHaveMarkup=o&amp;&amp;i.match(/[&lt;&amp;&gt;]/);var c,u=\"string\"==typeof(c=i)&amp;&amp;c.match(n.latexCheck);t.latex=u;var f,h,p=u?\"\":T(t.calcdata.cells.prefix,e,r)||\"\",d=u?\"\":T(t.calcdata.cells.suffix,e,r)||\"\",m=u?null:T(t.calcdata.cells.format,e,r)||null,g=p+(m?a(m)(t.value):t.value)+d;if(t.wrappingNeeded=!t.wrapped&amp;&amp;!l&amp;&amp;!u&amp;&amp;(f=w(g)),t.cellHeightMayIncrease=s||u||t.mayHaveMarkup||(void 0===f?w(g):f),t.needsConvertToTspans=t.mayHaveMarkup||t.wrappingNeeded||t.latex,t.wrappingNeeded){var v=(\" \"===n.wrapSplitCharacter?g.replace(/i&amp;&amp;n.push(a),i+=l}return n}(i,l,s);1===c.length&amp;&amp;(c[0]===i.length-1?c.unshift(c[0]-1):c.push(c[0]+1)),c[0]%2&amp;&amp;c.reverse(),e.each((function(t,e){t.page=c[e],t.scrollY=l})),e.attr(\"transform\",(function(t){var e=D(t.rowBlocks,t.page)-t.scrollY;return u(0,e)})),t&amp;&amp;(C(t,r,e,c,n.prevPages,n,0),C(t,r,e,c,n.prevPages,n,1),x(r,t))}}function L(t,e,r,a){return function(o){var s=o.calcdata?o.calcdata:o,l=e.filter((function(t){return s.key===t.key})),c=r||s.scrollbarState.dragMultiplier,u=s.scrollY;s.scrollY=void 0===a?s.scrollY+c*i.event.dy:a;var f=l.selectAll(\".\"+n.cn.yColumn).selectAll(\".\"+n.cn.columnBlock).filter(A);return E(t,f,l),s.scrollY===u}}function C(t,e,r,n,i,a,o){n[o]!==i[o]&amp;&amp;(clearTimeout(a.currentRepaint[o]),a.currentRepaint[o]=setTimeout((function(){var a=r.filter((function(t,e){return e===o&amp;&amp;n[e]!==i[e]}));b(t,e,a,r),i[o]=n[o]})))}function P(t,e,r,a){return function(){var o=i.select(e.parentNode);o.each((function(t){var e=t.fragments;o.selectAll(\"tspan.line\").each((function(t,r){e[r].width=this.getComputedTextLength()}));var r,i,a=e[e.length-1].width,s=e.slice(0,-1),l=[],c=0,u=t.column.columnWidth-2*n.cellPad;for(t.value=\"\";s.length;)c+(i=(r=s.shift()).width+a)&gt;u&amp;&amp;(t.value+=l.join(n.wrapSpacer)+n.lineBreaker,l=[],c=0),l.push(r.text),c+=i;c&amp;&amp;(t.value+=l.join(n.wrapSpacer)),t.wrapped=!0})),o.selectAll(\"tspan.line\").remove(),_(o.select(\".\"+n.cn.cellText),r,t,a),i.select(e.parentNode.parentNode).call(z)}}function I(t,e,r,a,o){return function(){if(!o.settledY){var s=i.select(e.parentNode),l=B(o),c=o.key-l.firstRowIndex,f=l.rows[c].rowHeight,h=o.cellHeightMayIncrease?e.parentNode.getBoundingClientRect().height+2*n.cellPad:f,p=Math.max(h,f);p-l.rows[c].rowHeight&amp;&amp;(l.rows[c].rowHeight=p,t.selectAll(\".\"+n.cn.columnCell).call(z),E(null,t.filter(A),0),x(r,a,!0)),s.attr(\"transform\",(function(){var t=this.parentNode.getBoundingClientRect(),e=i.select(this.parentNode).select(\".\"+n.cn.cellRect).node().getBoundingClientRect(),r=this.transform.baseVal.consolidate(),a=e.top-t.top+(r?r.matrix.f:n.cellPad);return u(O(o,i.select(this.parentNode).select(\".\"+n.cn.cellTextHolder).node().getBoundingClientRect().width),a)})),o.settledY=!0}}}function O(t,e){switch(t.align){case\"left\":return n.cellPad;case\"right\":return t.column.columnWidth-(e||0)-n.cellPad;case\"center\":return(t.column.columnWidth-(e||0))/2;default:return n.cellPad}}function z(t){t.attr(\"transform\",(function(t){var e=t.rowBlocks[0].auxiliaryBlocks.reduce((function(t,e){return t+R(e,1/0)}),0),r=R(B(t),t.key);return u(0,r+e)})).selectAll(\".\"+n.cn.cellRect).attr(\"height\",(function(t){return(e=B(t),r=t.key,e.rows[r-e.firstRowIndex]).rowHeight;var e,r}))}function D(t,e){for(var r=0,n=e-1;n&gt;=0;n--)r+=F(t[n]);return r}function R(t,e){for(var r=0,n=0;n\",\"&lt;\",\"|\",\"/\",\"\\\\\"],dflt:\"&gt;\",editType:\"plot\"},thickness:{valType:\"number\",min:12,editType:\"plot\"},textfont:u({},s.textfont,{}),editType:\"calc\"},text:s.text,textinfo:l.textinfo,texttemplate:i({editType:\"plot\"},{keys:c.eventDataKeys.concat([\"label\",\"value\"])}),hovertext:s.hovertext,hoverinfo:l.hoverinfo,hovertemplate:n({},{keys:c.eventDataKeys}),textfont:s.textfont,insidetextfont:s.insidetextfont,outsidetextfont:u({},s.outsidetextfont,{}),textposition:{valType:\"enumerated\",values:[\"top left\",\"top center\",\"top right\",\"middle left\",\"middle center\",\"middle right\",\"bottom left\",\"bottom center\",\"bottom right\"],dflt:\"top left\",editType:\"plot\"},sort:s.sort,root:l.root,domain:o({name:\"treemap\",trace:!0,editType:\"calc\"})}},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plots/domain\":593,\"../../plots/template_attributes\":642,\"../pie/attributes\":910,\"../sunburst/attributes\":1058,\"./constants\":1087}],1085:[function(t,e,r){\"use strict\";var n=t(\"../../plots/plots\");r.name=\"treemap\",r.plot=function(t,e,i,a){n.plotBasePlot(r.name,t,e,i,a)},r.clean=function(t,e,i,a){n.cleanBasePlot(r.name,t,e,i,a)}},{\"../../plots/plots\":628}],1086:[function(t,e,r){\"use strict\";var n=t(\"../sunburst/calc\");r.calc=function(t,e){return n.calc(t,e)},r.crossTraceCalc=function(t){return n._runCrossTraceCalc(\"treemap\",t)}},{\"../sunburst/calc\":1060}],1087:[function(t,e,r){\"use strict\";e.exports={CLICK_TRANSITION_TIME:750,CLICK_TRANSITION_EASING:\"poly\",eventDataKeys:[\"currentPath\",\"root\",\"entry\",\"percentRoot\",\"percentEntry\",\"percentParent\"],gapWithPathbar:1}},{}],1088:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\"),a=t(\"../../components/color\"),o=t(\"../../plots/domain\").defaults,s=t(\"../bar/defaults\").handleText,l=t(\"../bar/constants\").TEXTPAD,c=t(\"../../components/colorscale\"),u=c.hasColorscale,f=c.handleDefaults;e.exports=function(t,e,r,c){function h(r,a){return n.coerce(t,e,i,r,a)}var p=h(\"labels\"),d=h(\"parents\");if(p&amp;&amp;p.length&amp;&amp;d&amp;&amp;d.length){var m=h(\"values\");m&amp;&amp;m.length?h(\"branchvalues\"):h(\"count\"),h(\"level\"),h(\"maxdepth\"),\"squarify\"===h(\"tiling.packing\")&amp;&amp;h(\"tiling.squarifyratio\"),h(\"tiling.flip\"),h(\"tiling.pad\");var g=h(\"text\");h(\"texttemplate\"),e.texttemplate||h(\"textinfo\",Array.isArray(g)?\"text+label\":\"label\"),h(\"hovertext\"),h(\"hovertemplate\");var v=h(\"pathbar.visible\");s(t,e,c,h,\"auto\",{hasPathbar:v,moduleHasSelected:!1,moduleHasUnselected:!1,moduleHasConstrain:!1,moduleHasCliponaxis:!1,moduleHasTextangle:!1,moduleHasInsideanchor:!1}),h(\"textposition\");var y=-1!==e.textposition.indexOf(\"bottom\");h(\"marker.line.width\")&amp;&amp;h(\"marker.line.color\",c.paper_bgcolor);var x=h(\"marker.colors\");(e._hasColorscale=u(t,\"marker\",\"colors\")||(t.marker||{}).coloraxis)?f(t,e,c,h,{prefix:\"marker.\",cLetter:\"c\"}):h(\"marker.depthfade\",!(x||[]).length);var b=2*e.textfont.size;h(\"marker.pad.t\",y?b/4:b),h(\"marker.pad.l\",b/4),h(\"marker.pad.r\",b/4),h(\"marker.pad.b\",y?b:b/4),e._hovered={marker:{line:{width:2,color:a.contrast(c.paper_bgcolor)}}},v&amp;&amp;(h(\"pathbar.thickness\",e.pathbar.textfont.size+2*l),h(\"pathbar.side\"),h(\"pathbar.edgeshape\")),h(\"sort\"),h(\"root.color\"),o(e,c,h),e._length=null}else e.visible=!1}},{\"../../components/color\":367,\"../../components/colorscale\":379,\"../../lib\":515,\"../../plots/domain\":593,\"../bar/constants\":659,\"../bar/defaults\":661,\"./attributes\":1084}],1089:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../sunburst/helpers\"),a=t(\"../bar/uniform_text\").clearMinTextSize,o=t(\"../bar/style\").resizeText,s=t(\"./plot_one\");e.exports=function(t,e,r,l,c){var u,f,h=c.type,p=c.drawDescendants,d=t._fullLayout,m=d[\"_\"+h+\"layer\"],g=!r;(a(h,d),(u=m.selectAll(\"g.trace.\"+h).data(e,(function(t){return t[0].trace.uid}))).enter().append(\"g\").classed(\"trace\",!0).classed(h,!0),u.order(),!d.uniformtext.mode&amp;&amp;i.hasTransition(r))?(l&amp;&amp;(f=l()),n.transition().duration(r.duration).ease(r.easing).each(\"end\",(function(){f&amp;&amp;f()})).each(\"interrupt\",(function(){f&amp;&amp;f()})).each((function(){m.selectAll(\"g.trace\").each((function(e){s(t,e,this,r,p)}))}))):(u.each((function(e){s(t,e,this,r,p)})),d.uniformtext.mode&amp;&amp;o(t,m.selectAll(\".trace\"),h));g&amp;&amp;u.exit().remove()}},{\"../bar/style\":671,\"../bar/uniform_text\":673,\"../sunburst/helpers\":1064,\"./plot_one\":1098,\"@plotly/d3\":58}],1090:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../components/drawing\"),o=t(\"../../lib/svg_text_utils\"),s=t(\"./partition\"),l=t(\"./style\").styleOne,c=t(\"./constants\"),u=t(\"../sunburst/helpers\"),f=t(\"../sunburst/fx\");e.exports=function(t,e,r,h,p){var d=p.barDifY,m=p.width,g=p.height,v=p.viewX,y=p.viewY,x=p.pathSlice,b=p.toMoveInsideSlice,_=p.strTransform,w=p.hasTransition,T=p.handleSlicesExit,k=p.makeUpdateSliceInterpolator,A=p.makeUpdateTextInterpolator,M={},S=t._context.staticPlot,E=t._fullLayout,L=e[0],C=L.trace,P=L.hierarchy,I=m/C._entryDepth,O=u.listPath(r.data,\"id\"),z=s(P.copy(),[m,g],{packing:\"dice\",pad:{inner:0,top:0,left:0,right:0,bottom:0}}).descendants();(z=z.filter((function(t){var e=O.indexOf(t.data.id);return-1!==e&amp;&amp;(t.x0=I*e,t.x1=I*(e+1),t.y0=d,t.y1=d+g,t.onPathbar=!0,!0)}))).reverse(),(h=h.data(z,u.getPtId)).enter().append(\"g\").classed(\"pathbar\",!0),T(h,!0,M,[m,g],x),h.order();var D=h;w&amp;&amp;(D=D.transition().each(\"end\",(function(){var e=n.select(this);u.setSliceCursor(e,t,{hideOnRoot:!1,hideOnLeaves:!1,isTransitioning:!1})}))),D.each((function(s){s._x0=v(s.x0),s._x1=v(s.x1),s._y0=y(s.y0),s._y1=y(s.y1),s._hoverX=v(s.x1-Math.min(m,g)/2),s._hoverY=y(s.y1-g/2);var h=n.select(this),p=i.ensureSingle(h,\"path\",\"surface\",(function(t){t.style(\"pointer-events\",S?\"none\":\"all\")}));w?p.transition().attrTween(\"d\",(function(t){var e=k(t,!0,M,[m,g]);return function(t){return x(e(t))}})):p.attr(\"d\",x),h.call(f,r,t,e,{styleOne:l,eventDataKeys:c.eventDataKeys,transitionTime:c.CLICK_TRANSITION_TIME,transitionEasing:c.CLICK_TRANSITION_EASING}).call(u.setSliceCursor,t,{hideOnRoot:!1,hideOnLeaves:!1,isTransitioning:t._transitioning}),p.call(l,s,C,{hovered:!1}),s._text=(u.getPtLabel(s)||\"\").split(\"\").join(\" \")||\"\";var d=i.ensureSingle(h,\"g\",\"slicetext\"),T=i.ensureSingle(d,\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),L=i.ensureUniformFontSize(t,u.determineTextFont(C,s,E.font,{onPathbar:!0}));T.text(s._text||\" \").classed(\"slicetext\",!0).attr(\"text-anchor\",\"start\").call(a.font,L).call(o.convertToTspans,t),s.textBB=a.bBox(T.node()),s.transform=b(s,{fontSize:L.size,onPathbar:!0}),s.transform.fontSize=L.size,w?T.transition().attrTween(\"transform\",(function(t){var e=A(t,!0,M,[m,g]);return function(t){return _(e(t))}})):T.attr(\"transform\",_(s))}))}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../sunburst/fx\":1063,\"../sunburst/helpers\":1064,\"./constants\":1087,\"./partition\":1096,\"./style\":1099,\"@plotly/d3\":58}],1091:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../components/drawing\"),o=t(\"../../lib/svg_text_utils\"),s=t(\"./partition\"),l=t(\"./style\").styleOne,c=t(\"./constants\"),u=t(\"../sunburst/helpers\"),f=t(\"../sunburst/fx\"),h=t(\"../sunburst/plot\").formatSliceLabel;e.exports=function(t,e,r,p,d){var m=d.width,g=d.height,v=d.viewX,y=d.viewY,x=d.pathSlice,b=d.toMoveInsideSlice,_=d.strTransform,w=d.hasTransition,T=d.handleSlicesExit,k=d.makeUpdateSliceInterpolator,A=d.makeUpdateTextInterpolator,M=d.prevEntry,S=t._context.staticPlot,E=t._fullLayout,L=e[0].trace,C=-1!==L.textposition.indexOf(\"left\"),P=-1!==L.textposition.indexOf(\"right\"),I=-1!==L.textposition.indexOf(\"bottom\"),O=!I&amp;&amp;!L.marker.pad.t||I&amp;&amp;!L.marker.pad.b,z=s(r,[m,g],{packing:L.tiling.packing,squarifyratio:L.tiling.squarifyratio,flipX:L.tiling.flip.indexOf(\"x\")&gt;-1,flipY:L.tiling.flip.indexOf(\"y\")&gt;-1,pad:{inner:L.tiling.pad,top:L.marker.pad.t,left:L.marker.pad.l,right:L.marker.pad.r,bottom:L.marker.pad.b}}).descendants(),D=1/0,R=-1/0;z.forEach((function(t){var e=t.depth;e&gt;=L._maxDepth?(t.x0=t.x1=(t.x0+t.x1)/2,t.y0=t.y1=(t.y0+t.y1)/2):(D=Math.min(D,e),R=Math.max(R,e))})),p=p.data(z,u.getPtId),L._maxVisibleLayers=isFinite(R)?R-D+1:0,p.enter().append(\"g\").classed(\"slice\",!0),T(p,!1,{},[m,g],x),p.order();var F=null;if(w&amp;&amp;M){var B=u.getPtId(M);p.each((function(t){null===F&amp;&amp;u.getPtId(t)===B&amp;&amp;(F={x0:t.x0,x1:t.x1,y0:t.y0,y1:t.y1})}))}var N=function(){return F||{x0:0,x1:m,y0:0,y1:g}},j=p;return w&amp;&amp;(j=j.transition().each(\"end\",(function(){var e=n.select(this);u.setSliceCursor(e,t,{hideOnRoot:!0,hideOnLeaves:!1,isTransitioning:!1})}))),j.each((function(s){var p=u.isHeader(s,L);s._x0=v(s.x0),s._x1=v(s.x1),s._y0=y(s.y0),s._y1=y(s.y1),s._hoverX=v(s.x1-L.marker.pad.r),s._hoverY=y(I?s.y1-L.marker.pad.b/2:s.y0+L.marker.pad.t/2);var d=n.select(this),T=i.ensureSingle(d,\"path\",\"surface\",(function(t){t.style(\"pointer-events\",S?\"none\":\"all\")}));w?T.transition().attrTween(\"d\",(function(t){var e=k(t,!1,N(),[m,g]);return function(t){return x(e(t))}})):T.attr(\"d\",x),d.call(f,r,t,e,{styleOne:l,eventDataKeys:c.eventDataKeys,transitionTime:c.CLICK_TRANSITION_TIME,transitionEasing:c.CLICK_TRANSITION_EASING}).call(u.setSliceCursor,t,{isTransitioning:t._transitioning}),T.call(l,s,L,{hovered:!1}),s.x0===s.x1||s.y0===s.y1?s._text=\"\":s._text=p?O?\"\":u.getPtLabel(s)||\"\":h(s,r,L,e,E)||\"\";var M=i.ensureSingle(d,\"g\",\"slicetext\"),z=i.ensureSingle(M,\"text\",\"\",(function(t){t.attr(\"data-notex\",1)})),D=i.ensureUniformFontSize(t,u.determineTextFont(L,s,E.font));z.text(s._text||\" \").classed(\"slicetext\",!0).attr(\"text-anchor\",P?\"end\":C||p?\"start\":\"middle\").call(a.font,D).call(o.convertToTspans,t),s.textBB=a.bBox(z.node()),s.transform=b(s,{fontSize:D.size,isHeader:p}),s.transform.fontSize=D.size,w?z.transition().attrTween(\"transform\",(function(t){var e=A(t,!1,N(),[m,g]);return function(t){return _(e(t))}})):z.attr(\"transform\",_(s))})),F}},{\"../../components/drawing\":389,\"../../lib\":515,\"../../lib/svg_text_utils\":541,\"../sunburst/fx\":1063,\"../sunburst/helpers\":1064,\"../sunburst/plot\":1068,\"./constants\":1087,\"./partition\":1096,\"./style\":1099,\"@plotly/d3\":58}],1092:[function(t,e,r){\"use strict\";e.exports=function t(e,r,n){var i;n.swapXY&amp;&amp;(i=e.x0,e.x0=e.y0,e.y0=i,i=e.x1,e.x1=e.y1,e.y1=i),n.flipX&amp;&amp;(i=e.x0,e.x0=r[0]-e.x1,e.x1=r[0]-i),n.flipY&amp;&amp;(i=e.y0,e.y0=r[1]-e.y1,e.y1=r[1]-i);var a=e.children;if(a)for(var o=0;o-1?C+O:-(I+O):0,D={x0:P,x1:P,y0:z,y1:z+I},R=function(t,e,r){var n=v.tiling.pad,i=function(t){return t-n&lt;=e.x0},a=function(t){return t+n&gt;=e.x1},o=function(t){return t-n&lt;=e.y0},s=function(t){return t+n&gt;=e.y1};return t.x0===e.x0&amp;&amp;t.x1===e.x1&amp;&amp;t.y0===e.y0&amp;&amp;t.y1===e.y1?{x0:t.x0,x1:t.x1,y0:t.y0,y1:t.y1}:{x0:i(t.x0-n)?0:a(t.x0-n)?r[0]:t.x0,x1:i(t.x1+n)?0:a(t.x1+n)?r[0]:t.x1,y0:o(t.y0-n)?0:s(t.y0-n)?r[1]:t.y0,y1:o(t.y1+n)?0:s(t.y1+n)?r[1]:t.y1}},F=null,B={},N={},j=null,U=function(t,e){return e?B[h(t)]:N[h(t)]},V=function(t,e,r,n){if(e)return B[h(x)]||D;var i=N[v.level]||r;return function(t){return t.data.depth-b.data.depth=(n-=(y?g:g.r)-s)){var x=(r+n)/2;r=x,n=x}var b;f?i&lt;(b=a-(y?g:g.b))&amp;&amp;b\"===tt?(l.x-=a,c.x-=a,u.x-=a,f.x-=a):\"/\"===tt?(u.x-=a,f.x-=a,o.x-=a/2,s.x-=a/2):\"\\\\\"===tt?(l.x-=a,c.x-=a,o.x-=a/2,s.x-=a/2):\"&lt;\"===tt&amp;&amp;(o.x-=a,s.x-=a),$(l),$(f),$(o),$(c),$(u),$(s),\"M\"+K(l.x,l.y)+\"L\"+K(c.x,c.y)+\"L\"+K(s.x,s.y)+\"L\"+K(u.x,u.y)+\"L\"+K(f.x,f.y)+\"L\"+K(o.x,o.y)+\"Z\"},toMoveInsideSlice:et,makeUpdateSliceInterpolator:nt,makeUpdateTextInterpolator:it,handleSlicesExit:at,hasTransition:A,strTransform:ot}):w.remove()}},{\"../../lib\":515,\"../bar/constants\":659,\"../bar/plot\":668,\"../bar/uniform_text\":673,\"../sunburst/helpers\":1064,\"./constants\":1087,\"./draw_ancestors\":1090,\"@plotly/d3\":58,\"d3-interpolate\":116}],1099:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/color\"),a=t(\"../../lib\"),o=t(\"../sunburst/helpers\"),s=t(\"../bar/uniform_text\").resizeText;function l(t,e,r,n){var s,l,c=(n||{}).hovered,u=e.data.data,f=u.i,h=u.color,p=o.isHierarchyRoot(e),d=1;if(c)s=r._hovered.marker.line.color,l=r._hovered.marker.line.width;else if(p&amp;&amp;h===r.root.color)d=100,s=\"rgba(0,0,0,0)\",l=0;else if(s=a.castOption(r,f,\"marker.line.color\")||i.defaultLine,l=a.castOption(r,f,\"marker.line.width\")||0,!r._hasColorscale&amp;&amp;!e.onPathbar){var m=r.marker.depthfade;if(m){var g,v=i.combine(i.addOpacity(r._backgroundColor,.75),h);if(!0===m){var y=o.getMaxDepth(r);g=isFinite(y)?o.isLeaf(e)?0:r._maxVisibleLayers-(e.data.depth-r._entryDepth):e.data.height+1}else g=e.data.depth-r._entryDepth,r._atRootLevel||g++;if(g&gt;0)for(var x=0;x0){var b,_,w,T,k,A=t.xa,M=t.ya;\"h\"===d.orientation?(k=e,b=\"y\",w=M,_=\"x\",T=A):(k=r,b=\"x\",w=A,_=\"y\",T=M);var S=p[t.index];if(k&gt;=S.span[0]&amp;&amp;k&lt;=S.span[1]){var E=i.extendFlat({},t),L=T.c2p(k,!0),C=s.getKdeValue(S,d,k),P=s.getPositionOnKdePath(S,d,L),I=w._offset,O=w._length;E[b+\"0\"]=P[0],E[b+\"1\"]=P[1],E[_+\"0\"]=E[_+\"1\"]=L,E[_+\"Label\"]=_+\": \"+a.hoverLabelText(T,k,d[_+\"hoverformat\"])+\", \"+p[0].t.labels.kde+\" \"+C.toFixed(3);for(var z=0,D=0;D&lt;x.length;D++)if(\"med\"===x[D].attr){z=D;break}E.spikeDistance=x[z].spikeDistance;var R=b+\"Spike\";E[R]=x[z][R],x[z].spikeDistance=void 0,x[z][R]=void 0,E.hovertemplate=!1,y.push(E),(f={})[b+\"1\"]=i.constrain(I+P[0],I,I+O),f[b+\"2\"]=i.constrain(I+P[1],I,I+O),f[_+\"1\"]=f[_+\"2\"]=T._offset+L}}g&amp;&amp;(y=y.concat(x))}-1!==m.indexOf(\"points\")&amp;&amp;(u=o.hoverOnPoints(t,e,r));var F=h.selectAll(\".violinline-\"+d.uid).data(f?[0]:[]);return F.enter().append(\"line\").classed(\"violinline-\"+d.uid,!0).attr(\"stroke-width\",1.5),F.exit().remove(),F.attr(f).call(n.stroke,t.color),\"closest\"===l?u?[u]:y:u?(y.push(u),y):y}},{\"../../components/color\":367,\"../../lib\":515,\"../../plots/cartesian/axes\":566,\"../box/hover\":687,\"./helpers\":1104}],1106:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\"),crossTraceDefaults:t(\"../box/defaults\").crossTraceDefaults,supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\"),crossTraceCalc:t(\"./cross_trace_calc\"),plot:t(\"./plot\"),style:t(\"./style\"),styleOnSelect:t(\"../scatter/style\").styleOnSelect,hoverPoints:t(\"./hover\"),selectPoints:t(\"../box/select\"),moduleType:\"trace\",name:\"violin\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"cartesian\",\"svg\",\"symbols\",\"oriented\",\"box-violin\",\"showLegend\",\"violinLayout\",\"zoomScale\"],meta:{}}},{\"../../plots/cartesian\":578,\"../box/defaults\":685,\"../box/select\":692,\"../scatter/style\":960,\"./attributes\":1100,\"./calc\":1101,\"./cross_trace_calc\":1102,\"./defaults\":1103,\"./hover\":1105,\"./layout_attributes\":1107,\"./layout_defaults\":1108,\"./plot\":1109,\"./style\":1110}],1107:[function(t,e,r){\"use strict\";var n=t(\"../box/layout_attributes\"),i=t(\"../../lib\").extendFlat;e.exports={violinmode:i({},n.boxmode,{}),violingap:i({},n.boxgap,{}),violingroupgap:i({},n.boxgroupgap,{})}},{\"../../lib\":515,\"../box/layout_attributes\":689}],1108:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\"),a=t(\"../box/layout_defaults\");e.exports=function(t,e,r){a._supply(t,e,r,(function(r,a){return n.coerce(t,e,i,r,a)}),\"violin\")}},{\"../../lib\":515,\"../box/layout_defaults\":690,\"./layout_attributes\":1107}],1109:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../lib\"),a=t(\"../../components/drawing\"),o=t(\"../box/plot\"),s=t(\"../scatter/line_points\"),l=t(\"./helpers\");e.exports=function(t,e,r,c){var u=t._fullLayout,f=e.xaxis,h=e.yaxis;function p(t,e){var r=s(t,{xaxis:f,yaxis:h,trace:e,connectGaps:!0,baseTolerance:.75,shape:\"spline\",simplify:!0,linearized:!0});return a.smoothopen(r[0],1)}i.makeTraceGroups(c,r,\"trace violins\").each((function(t){var r=n.select(this),a=t[0],s=a.t,c=a.trace;if(!0!==c.visible||s.empty)r.remove();else{var d=s.bPos,m=s.bdPos,g=e[s.valLetter+\"axis\"],v=e[s.posLetter+\"axis\"],y=\"both\"===c.side,x=y||\"positive\"===c.side,b=y||\"negative\"===c.side,_=r.selectAll(\"path.violin\").data(i.identity);_.enter().append(\"path\").style(\"vector-effect\",\"non-scaling-stroke\").attr(\"class\",\"violin\"),_.exit().remove(),_.each((function(t){var e,r,i,a,o,l,f,h,_=n.select(this),w=t.density,T=w.length,k=v.c2l(t.pos+d,!0),A=v.l2p(k);if(c.width)e=s.maxKDE/m;else{var M=u._violinScaleGroupStats[c.scalegroup];e=\"count\"===c.scalemode?M.maxKDE/m*(M.maxCount/t.pts.length):M.maxKDE/m}if(x){for(f=new Array(T),o=0;o&lt;T;o++)(h=f[o]={})[s.posLetter]=k+w[o].v/e,h[s.valLetter]=g.c2l(w[o].t,!0);r=p(f,c)}if(b){for(f=new Array(T),l=0,o=T-1;l&lt;T;l++,o--)(h=f[l]={})[s.posLetter]=k-w[o].v/e,h[s.valLetter]=g.c2l(w[o].t,!0);i=p(f,c)}if(y)a=r+\"L\"+i.substr(1)+\"Z\";else{var S=[A,g.c2p(w[0].t)],E=[A,g.c2p(w[T-1].t)];\"h\"===c.orientation&amp;&amp;(S.reverse(),E.reverse()),a=x?\"M\"+S+\"L\"+r.substr(1)+\"L\"+E:\"M\"+E+\"L\"+i.substr(1)+\"L\"+S}_.attr(\"d\",a),t.posCenterPx=A,t.posDensityScale=e*m,t.path=_.node(),t.pathLength=t.path.getTotalLength()/(y?2:1)}));var w,T,k,A=c.box,M=A.width,S=(A.line||{}).width;y?(w=m*M,T=0):x?(w=[0,m*M/2],T=S*{x:1,y:-1}[s.posLetter]):(w=[m*M/2,0],T=S*{x:-1,y:1}[s.posLetter]),o.plotBoxAndWhiskers(r,{pos:v,val:g},c,{bPos:d,bdPos:w,bPosPxOffset:T}),o.plotBoxMean(r,{pos:v,val:g},c,{bPos:d,bdPos:w,bPosPxOffset:T}),!c.box.visible&amp;&amp;c.meanline.visible&amp;&amp;(k=i.identity);var E=r.selectAll(\"path.meanline\").data(k||[]);E.enter().append(\"path\").attr(\"class\",\"meanline\").style(\"fill\",\"none\").style(\"vector-effect\",\"non-scaling-stroke\"),E.exit().remove(),E.each((function(t){var e=g.c2p(t.mean,!0),r=l.getPositionOnKdePath(t,c,e);n.select(this).attr(\"d\",\"h\"===c.orientation?\"M\"+e+\",\"+r[0]+\"V\"+r[1]:\"M\"+r[0]+\",\"+e+\"H\"+r[1])})),o.plotPoints(r,{x:f,y:h},c,s)}}))}},{\"../../components/drawing\":389,\"../../lib\":515,\"../box/plot\":691,\"../scatter/line_points\":950,\"./helpers\":1104,\"@plotly/d3\":58}],1110:[function(t,e,r){\"use strict\";var n=t(\"@plotly/d3\"),i=t(\"../../components/color\"),a=t(\"../scatter/style\").stylePoints;e.exports=function(t){var e=n.select(t).selectAll(\"g.trace.violins\");e.style(\"opacity\",(function(t){return t[0].trace.opacity})),e.each((function(e){var r=e[0].trace,o=n.select(this),s=r.box||{},l=s.line||{},c=r.meanline||{},u=c.width;o.selectAll(\"path.violin\").style(\"stroke-width\",r.line.width+\"px\").call(i.stroke,r.line.color).call(i.fill,r.fillcolor),o.selectAll(\"path.box\").style(\"stroke-width\",l.width+\"px\").call(i.stroke,l.color).call(i.fill,s.fillcolor);var f={\"stroke-width\":u+\"px\",\"stroke-dasharray\":2*u+\"px,\"+u+\"px\"};o.selectAll(\"path.mean\").style(f).call(i.stroke,c.color),o.selectAll(\"path.meanline\").style(f).call(i.stroke,c.color),a(o,r,t)}))}},{\"../../components/color\":367,\"../scatter/style\":960,\"@plotly/d3\":58}],1111:[function(t,e,r){\"use strict\";var n=t(\"../../components/colorscale/attributes\"),i=t(\"../isosurface/attributes\"),a=t(\"../surface/attributes\"),o=t(\"../../plots/attributes\"),s=t(\"../../lib/extend\").extendFlat,l=t(\"../../plot_api/edit_types\").overrideAll,c=e.exports=l(s({x:i.x,y:i.y,z:i.z,value:i.value,isomin:i.isomin,isomax:i.isomax,surface:i.surface,spaceframe:{show:{valType:\"boolean\",dflt:!1},fill:{valType:\"number\",min:0,max:1,dflt:1}},slices:i.slices,caps:i.caps,text:i.text,hovertext:i.hovertext,xhoverformat:i.xhoverformat,yhoverformat:i.yhoverformat,zhoverformat:i.zhoverformat,valuehoverformat:i.valuehoverformat,hovertemplate:i.hovertemplate},n(\"\",{colorAttr:\"`value`\",showScaleDflt:!0,editTypeOverride:\"calc\"}),{colorbar:i.colorbar,opacity:i.opacity,opacityscale:a.opacityscale,lightposition:i.lightposition,lighting:i.lighting,flatshading:i.flatshading,contour:i.contour,hoverinfo:s({},o.hoverinfo),showlegend:s({},o.showlegend,{dflt:!1})}),\"calc\",\"nested\");c.x.editType=c.y.editType=c.z.editType=c.value.editType=\"calc+clearAxisTypes\",c.transforms=void 0},{\"../../components/colorscale/attributes\":374,\"../../lib/extend\":505,\"../../plot_api/edit_types\":548,\"../../plots/attributes\":562,\"../isosurface/attributes\":871,\"../surface/attributes\":1070}],1112:[function(t,e,r){\"use strict\";var n=t(\"../../../stackgl_modules\").gl_mesh3d,i=t(\"../../lib/gl_format_color\").parseColorScale,a=t(\"../../lib/str2rgbarray\"),o=t(\"../../components/colorscale\").extractOpts,s=t(\"../../plots/gl3d/zip3\"),l=t(\"../isosurface/convert\").findNearestOnAxis,c=t(\"../isosurface/convert\").generateIsoMeshes;function u(t,e,r){this.scene=t,this.uid=r,this.mesh=e,this.name=\"\",this.data=null,this.showContour=!1}var f=u.prototype;f.handlePick=function(t){if(t.object===this.mesh){var e=t.data.index,r=this.data._meshX[e],n=this.data._meshY[e],i=this.data._meshZ[e],a=this.data._Ys.length,o=this.data._Zs.length,s=l(r,this.data._Xs).id,c=l(n,this.data._Ys).id,u=l(i,this.data._Zs).id,f=t.index=u+o*c+o*a*s;t.traceCoordinate=[this.data._meshX[f],this.data._meshY[f],this.data._meshZ[f],this.data._value[f]];var h=this.data.hovertext||this.data.text;return Array.isArray(h)&amp;&amp;void 0!==h[f]?t.textLabel=h[f]:h&amp;&amp;(t.textLabel=h),!0}},f.update=function(t){var e=this.scene,r=e.fullSceneLayout;function n(t,e,r,n){return e.map((function(e){return t.d2l(e,0,n)*r}))}this.data=c(t);var l={positions:s(n(r.xaxis,t._meshX,e.dataScale[0],t.xcalendar),n(r.yaxis,t._meshY,e.dataScale[1],t.ycalendar),n(r.zaxis,t._meshZ,e.dataScale[2],t.zcalendar)),cells:s(t._meshI,t._meshJ,t._meshK),lightPosition:[t.lightposition.x,t.lightposition.y,t.lightposition.z],ambient:t.lighting.ambient,diffuse:t.lighting.diffuse,specular:t.lighting.specular,roughness:t.lighting.roughness,fresnel:t.lighting.fresnel,vertexNormalsEpsilon:t.lighting.vertexnormalsepsilon,faceNormalsEpsilon:t.lighting.facenormalsepsilon,opacity:t.opacity,opacityscale:t.opacityscale,contourEnable:t.contour.show,contourColor:a(t.contour.color).slice(0,3),contourWidth:t.contour.width,useFacetNormals:t.flatshading},u=o(t);l.vertexIntensity=t._meshIntensity,l.vertexIntensityBounds=[u.min,u.max],l.colormap=i(t),this.mesh.update(l)},f.dispose=function(){this.scene.glplot.remove(this.mesh),this.mesh.dispose()},e.exports=function(t,e){var r=t.glplot.gl,i=n({gl:r}),a=new u(t,i,e.uid);return i._trace=a,a.update(e),t.glplot.add(i),a}},{\"../../../stackgl_modules\":1133,\"../../components/colorscale\":379,\"../../lib/gl_format_color\":511,\"../../lib/str2rgbarray\":540,\"../../plots/gl3d/zip3\":618,\"../isosurface/convert\":873}],1113:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./attributes\"),a=t(\"../isosurface/defaults\").supplyIsoDefaults,o=t(\"../surface/defaults\").opacityscaleDefaults;e.exports=function(t,e,r,s){function l(r,a){return n.coerce(t,e,i,r,a)}a(t,e,r,s,l),o(t,e,s,l)}},{\"../../lib\":515,\"../isosurface/defaults\":874,\"../surface/defaults\":1073,\"./attributes\":1111}],1114:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),supplyDefaults:t(\"./defaults\"),calc:t(\"../isosurface/calc\"),colorbar:{min:\"cmin\",max:\"cmax\"},plot:t(\"./convert\"),moduleType:\"trace\",name:\"volume\",basePlotModule:t(\"../../plots/gl3d\"),categories:[\"gl3d\",\"showLegend\"],meta:{}}},{\"../../plots/gl3d\":607,\"../isosurface/calc\":872,\"./attributes\":1111,\"./convert\":1112,\"./defaults\":1113}],1115:[function(t,e,r){\"use strict\";var n=t(\"../bar/attributes\"),i=t(\"../scatter/attributes\").line,a=t(\"../../plots/attributes\"),o=t(\"../../plots/cartesian/axis_format_attributes\").axisHoverFormat,s=t(\"../../plots/template_attributes\").hovertemplateAttrs,l=t(\"../../plots/template_attributes\").texttemplateAttrs,c=t(\"./constants\"),u=t(\"../../lib/extend\").extendFlat,f=t(\"../../components/color\");function h(t){return{marker:{color:u({},n.marker.color,{arrayOk:!1,editType:\"style\"}),line:{color:u({},n.marker.line.color,{arrayOk:!1,editType:\"style\"}),width:u({},n.marker.line.width,{arrayOk:!1,editType:\"style\"}),editType:\"style\"},editType:\"style\"},editType:\"style\"}}e.exports={measure:{valType:\"data_array\",dflt:[],editType:\"calc\"},base:{valType:\"number\",dflt:null,arrayOk:!1,editType:\"calc\"},x:n.x,x0:n.x0,dx:n.dx,y:n.y,y0:n.y0,dy:n.dy,xperiod:n.xperiod,yperiod:n.yperiod,xperiod0:n.xperiod0,yperiod0:n.yperiod0,xperiodalignment:n.xperiodalignment,yperiodalignment:n.yperiodalignment,xhoverformat:o(\"x\"),yhoverformat:o(\"y\"),hovertext:n.hovertext,hovertemplate:s({},{keys:c.eventDataKeys}),hoverinfo:u({},a.hoverinfo,{flags:[\"name\",\"x\",\"y\",\"text\",\"initial\",\"delta\",\"final\"]}),textinfo:{valType:\"flaglist\",flags:[\"label\",\"text\",\"initial\",\"delta\",\"final\"],extras:[\"none\"],editType:\"plot\",arrayOk:!1},texttemplate:l({editType:\"plot\"},{keys:c.eventDataKeys.concat([\"label\"])}),text:n.text,textposition:n.textposition,insidetextanchor:n.insidetextanchor,textangle:n.textangle,textfont:n.textfont,insidetextfont:n.insidetextfont,outsidetextfont:n.outsidetextfont,constraintext:n.constraintext,cliponaxis:n.cliponaxis,orientation:n.orientation,offset:n.offset,width:n.width,increasing:h(),decreasing:h(),totals:h(),connector:{line:{color:u({},i.color,{dflt:f.defaultLine}),width:u({},i.width,{editType:\"plot\"}),dash:i.dash,editType:\"plot\"},mode:{valType:\"enumerated\",values:[\"spanning\",\"between\"],dflt:\"between\",editType:\"plot\"},visible:{valType:\"boolean\",dflt:!0,editType:\"plot\"},editType:\"plot\"},offsetgroup:n.offsetgroup,alignmentgroup:n.alignmentgroup}},{\"../../components/color\":367,\"../../lib/extend\":505,\"../../plots/attributes\":562,\"../../plots/cartesian/axis_format_attributes\":569,\"../../plots/template_attributes\":642,\"../bar/attributes\":657,\"../scatter/attributes\":936,\"./constants\":1117}],1116:[function(t,e,r){\"use strict\";var n=t(\"../../plots/cartesian/axes\"),i=t(\"../../plots/cartesian/align_period\"),a=t(\"../../lib\").mergeArray,o=t(\"../scatter/calc_selection\"),s=t(\"../../constants/numerical\").BADNUM;function l(t){return\"a\"===t||\"absolute\"===t}function c(t){return\"t\"===t||\"total\"===t}e.exports=function(t,e){var r,u,f,h,p,d,m=n.getFromId(t,e.xaxis||\"x\"),g=n.getFromId(t,e.yaxis||\"y\");\"h\"===e.orientation?(r=m.makeCalcdata(e,\"x\"),f=g.makeCalcdata(e,\"y\"),h=i(e,g,\"y\",f),p=!!e.yperiodalignment,d=\"y\"):(r=g.makeCalcdata(e,\"y\"),f=m.makeCalcdata(e,\"x\"),h=i(e,m,\"x\",f),p=!!e.xperiodalignment,d=\"x\"),u=h.vals;for(var v,y=Math.min(u.length,r.length),x=new Array(y),b=0,_=!1,w=0;w\")),u.color=function(t,e){var r=t[e.dir].marker,n=r.color,a=r.line.color,o=r.line.width;if(i(n))return n;if(i(a)&amp;&amp;o)return a}(h,g),[u]}function k(t){return n(m,t,h[d+\"hoverformat\"])}}},{\"../../components/color\":367,\"../../constants/delta.js\":485,\"../../plots/cartesian/axes\":566,\"../bar/hover\":664}],1122:[function(t,e,r){\"use strict\";e.exports={attributes:t(\"./attributes\"),layoutAttributes:t(\"./layout_attributes\"),supplyDefaults:t(\"./defaults\").supplyDefaults,crossTraceDefaults:t(\"./defaults\").crossTraceDefaults,supplyLayoutDefaults:t(\"./layout_defaults\"),calc:t(\"./calc\"),crossTraceCalc:t(\"./cross_trace_calc\"),plot:t(\"./plot\"),style:t(\"./style\").style,hoverPoints:t(\"./hover\"),eventData:t(\"./event_data\"),selectPoints:t(\"../bar/select\"),moduleType:\"trace\",name:\"waterfall\",basePlotModule:t(\"../../plots/cartesian\"),categories:[\"bar-like\",\"cartesian\",\"svg\",\"oriented\",\"showLegend\",\"zoomScale\"],meta:{}}},{\"../../plots/cartesian\":578,\"../bar/select\":669,\"./attributes\":1115,\"./calc\":1116,\"./cross_trace_calc\":1118,\"./defaults\":1119,\"./event_data\":1120,\"./hover\":1121,\"./layout_attributes\":1123,\"./layout_defaults\":1124,\"./plot\":1125,\"./style\":1126}],1123:[function(t,e,r){\"use strict\";e.exports={waterfallmode:{valType:\"enumerated\",values:[\"group\",\"overlay\"],dflt:\"group\",editType:\"calc\"},waterfallgap:{valType:\"number\",min:0,max:1,editType:\"calc\"},waterfallgroupgap:{valType:\"number\",min:0,max:1,dflt:0,editType:\"calc\"}}},{}],1124:[function(t,e,r){\"use strict\";var n=t(\"../../lib\"),i=t(\"./layout_attributes\");e.exports=function(t,e,r){var a=!1;function o(r,a){return n.coerce(t,e,i,r,a)}for(var s=0;s0&amp;&amp;(g+=h?\"M\"+f[0]+\",\"+d[1]+\"V\"+d[0]:\"M\"+f[1]+\",\"+d[0]+\"H\"+f[0]),\"between\"!==p&amp;&amp;(r.isSum||s path\").each((function(t){if(!t.isBlank){var e=s[t.dir].marker;n.select(this).call(a.fill,e.color).call(a.stroke,e.line.color).call(i.dashLine,e.line.dash,e.line.width).style(\"opacity\",s.selectedpoints&amp;&amp;!t.selected?o:1)}})),c(r,s,t),r.selectAll(\".lines\").each((function(){var t=s.connector.line;i.lineGroupStyle(n.select(this).selectAll(\"path\"),t.width,t.color,t.dash)}))}))}}},{\"../../components/color\":367,\"../../components/drawing\":389,\"../../constants/interactions\":490,\"../bar/style\":671,\"../bar/uniform_text\":673,\"@plotly/d3\":58}],1127:[function(t,e,r){\"use strict\";var n=t(\"../plots/cartesian/axes\"),i=t(\"../lib\"),a=t(\"../plot_api/plot_schema\"),o=t(\"./helpers\").pointsAccessorFunction,s=t(\"../constants/numerical\").BADNUM;r.moduleType=\"transform\",r.name=\"aggregate\";var l=r.attributes={enabled:{valType:\"boolean\",dflt:!0,editType:\"calc\"},groups:{valType:\"string\",strict:!0,noBlank:!0,arrayOk:!0,dflt:\"x\",editType:\"calc\"},aggregations:{_isLinkedToArray:\"aggregation\",target:{valType:\"string\",editType:\"calc\"},func:{valType:\"enumerated\",values:[\"count\",\"sum\",\"avg\",\"median\",\"mode\",\"rms\",\"stddev\",\"min\",\"max\",\"first\",\"last\",\"change\",\"range\"],dflt:\"first\",editType:\"calc\"},funcmode:{valType:\"enumerated\",values:[\"sample\",\"population\"],dflt:\"sample\",editType:\"calc\"},enabled:{valType:\"boolean\",dflt:!0,editType:\"calc\"},editType:\"calc\"},editType:\"calc\"},c=l.aggregations;function u(t,e,r,a){if(a.enabled){for(var o=a.target,l=i.nestedProperty(e,o),c=l.get(),u=function(t,e){var r=t.func,n=e.d2c,a=e.c2d;switch(r){case\"count\":return f;case\"first\":return h;case\"last\":return p;case\"sum\":return function(t,e){for(var r=0,i=0;ii&amp;&amp;(i=u,o=c)}}return i?a(o):s};case\"rms\":return function(t,e){for(var r=0,i=0,o=0;o\":return function(t){return h(t)&gt;s};case\"&gt;=\":return function(t){return h(t)&gt;=s};case\"[]\":return function(t){var e=h(t);return e&gt;=s[0]&amp;&amp;e&lt;=s[1]};case\"()\":return function(t){var e=h(t);return e&gt;s[0]&amp;&amp;e=s[0]&amp;&amp;es[0]&amp;&amp;e&lt;=s[1]};case\"][\":return function(t){var e=h(t);return e&lt;=s[0]||e&gt;=s[1]};case\")(\":return function(t){var e=h(t);return es[1]};case\"](\":return function(t){var e=h(t);return e&lt;=s[0]||e&gt;s[1]};case\")[\":return function(t){var e=h(t);return e=s[1]};case\"{}\":return function(t){return-1!==s.indexOf(h(t))};case\"}{\":return function(t){return-1===s.indexOf(h(t))}}}(r,a.getDataToCoordFunc(t,e,s,i),h),x={},b={},_=0;d?(g=function(t){x[t.astr]=n.extendDeep([],t.get()),t.set(new Array(f))},v=function(t,e){var r=x[t.astr][e];t.get()[e]=r}):(g=function(t){x[t.astr]=n.extendDeep([],t.get()),t.set([])},v=function(t,e){var r=x[t.astr][e];t.get().push(r)}),k(g);for(var w=o(e.transforms,r),T=0;T&lt;f;T++){y(i[T])?(k(v,T),b[_++]=w(T)):d&amp;&amp;_++}r._indexToPoints=b,e._length=_}}function k(t,r){for(var i=0;i&lt;p.length;i++){t(n.nestedProperty(e,p[i]),r)}}}},{\"../constants/filter_ops\":487,\"../lib\":515,\"../plots/cartesian/axes\":566,\"../registry\":647,\"./helpers\":1130}],1129:[function(t,e,r){\"use strict\";var n=t(\"../lib\"),i=t(\"../plot_api/plot_schema\"),a=t(\"../plots/plots\"),o=t(\"./helpers\").pointsAccessorFunction;function s(t,e){var r,s,l,c,u,f,h,p,d,m,g=e.transform,v=e.transformIndex,y=t.transforms[v].groups,x=o(t.transforms,g);if(!n.isArrayOrTypedArray(y)||0===y.length)return[t];var b=n.filterUnique(y),_=new Array(b.length),w=y.length,T=i.findArrayAttributes(t),k=g.styles||[],A={};for(r=0;r&lt;k.length;r++)A[k[r].target]=k[r].value;g.styles&amp;&amp;(m=n.keyedContainer(g,\"styles\",\"target\",\"value.name\"));var M={},S={};for(r=0;r&lt;b.length;r++){M[f=b[r]]=r,S[f]=0,(h=_[r]=n.extendDeepNoArrays({},t))._group=f,h.transforms[v]._indexToPoints={};var E=null;for(m&amp;&amp;(E=m.get(f)),h.name=E||\"\"===E?E:n.templateString(g.nameformat,{trace:t.name,group:f}),p=h.transforms,h.transforms=[],s=0;s&lt;p.length;s++)h.transforms[s]=n.extendDeepNoArrays({},p[s]);for(s=0;s&lt;T.length;s++)n.nestedProperty(h,T[s]).set([])}for(l=0;l&lt;T.length;l++){for(c=T[l],s=0,d=[];s&lt;b.length;s++)d[s]=n.nestedProperty(_[s],c).get();for(u=n.nestedProperty(t,c).get(),s=0;s&lt;w;s++)d[M[y[s]]].push(u[s])}for(s=0;s&lt;w;s++){(h=_[M[y[s]]]).transforms[v]._indexToPoints[S[y[s]]]=x(s),S[y[s]]++}for(r=0;r&lt;b.length;r++)f=b[r],h=_[r],a.clearExpandedTraceDefaultColors(h),h=n.extendDeepNoArrays(h,A[f]||{});return _}r.moduleType=\"transform\",r.name=\"groupby\",r.attributes={enabled:{valType:\"boolean\",dflt:!0,editType:\"calc\"},groups:{valType:\"data_array\",dflt:[],editType:\"calc\"},nameformat:{valType:\"string\",editType:\"calc\"},styles:{_isLinkedToArray:\"style\",target:{valType:\"string\",editType:\"calc\"},value:{valType:\"any\",dflt:{},editType:\"calc\",_compareAsJSON:!0},editType:\"calc\"},editType:\"calc\"},r.supplyDefaults=function(t,e,i){var a,o={};function s(e,i){return n.coerce(t,o,r.attributes,e,i)}if(!s(\"enabled\"))return o;s(\"groups\"),s(\"nameformat\",i._dataLength&gt;1?\"%{group} (%{trace})\":\"%{group}\");var l=t.styles,c=o.styles=[];if(l)for(a=0;a&lt;l.length;a++){var u=c[a]={};n.coerce(l[a],c[a],r.attributes.styles,\"target\");var f=n.coerce(l[a],c[a],r.attributes.styles,\"value\");n.isPlainObject(f)?u.value=n.extendDeep({},f):f&amp;&amp;delete u.value}return o},r.transform=function(t,e){var r,n,i,a=[];for(n=0;n&lt;t.length;n++)for(r=s(t[n],e),i=0;i&lt;r.length;i++)a.push(r[i]);return a}},{\"../lib\":515,\"../plot_api/plot_schema\":554,\"../plots/plots\":628,\"./helpers\":1130}],1130:[function(t,e,r){\"use strict\";r.pointsAccessorFunction=function(t,e){for(var r,n,i=0;i&lt;t.length&amp;&amp;(r=t[i])!==e;i++)r._indexToPoints&amp;&amp;!1!==r.enabled&amp;&amp;(n=r._indexToPoints);return n?function(t){return n[t]}:function(t){return[t]}}},{}],1131:[function(t,e,r){\"use strict\";var n=t(\"../lib\"),i=t(\"../plots/cartesian/axes\"),a=t(\"./helpers\").pointsAccessorFunction,o=t(\"../constants/numerical\").BADNUM;r.moduleType=\"transform\",r.name=\"sort\",r.attributes={enabled:{valType:\"boolean\",dflt:!0,editType:\"calc\"},target:{valType:\"string\",strict:!0,noBlank:!0,arrayOk:!0,dflt:\"x\",editType:\"calc\"},order:{valType:\"enumerated\",values:[\"ascending\",\"descending\"],dflt:\"ascending\",editType:\"calc\"},editType:\"calc\"},r.supplyDefaults=function(t){var e={};function i(i,a){return n.coerce(t,e,r.attributes,i,a)}return i(\"enabled\")&amp;&amp;(i(\"target\"),i(\"order\")),e},r.calcTransform=function(t,e,r){if(r.enabled){var s=n.getTargetArray(e,r);if(s){var l=r.target,c=s.length;e._length&amp;&amp;(c=Math.min(c,e._length));var u,f,h=e._arrayAttrs,p=function(t,e,r,n){var i,a=new Array(n),s=new Array(n);for(i=0;i&lt;n;i++)a[i]={v:e[i],i:i};for(a.sort(function(t,e){switch(t.order){case\"ascending\":return function(t,r){var n=e(t.v),i=e(r.v);return n===o?1:i===o?-1:n-i};case\"descending\":return function(t,r){var n=e(t.v),i=e(r.v);return n===o?1:i===o?-1:i-n}}}(t,r)),i=0;i&lt;n;i++)s[i]=a[i].i;return s}(r,s,i.getDataToCoordFunc(t,e,l,s),c),d=a(e.transforms,r),m={};for(u=0;u&lt;h.length;u++){var g=n.nestedProperty(e,h[u]),v=g.get(),y=new Array(c);for(f=0;f&lt;c;f++)y[f]=v[p[f]];g.set(y)}for(f=0;f&lt;c;f++)m[f]=d(p[f]);r._indexToPoints=m,e._length=c}}}},{\"../constants/numerical\":491,\"../lib\":515,\"../plots/cartesian/axes\":566,\"./helpers\":1130}],1132:[function(t,e,r){\"use strict\";r.version=\"2.16.1\"},{}],1133:[function(t,e,r){(function(n){(function(){!function(t){\"object\"==typeof r&amp;&amp;void 0!==e?e.exports=t():(\"undefined\"!=typeof window?window:void 0!==n?n:\"undefined\"!=typeof self?self:this).stackgl=t()}((function(){return function e(r,n,i){function a(s,l){if(!n[s]){if(!r[s]){var c=\"function\"==typeof t&amp;&amp;t;if(!l&amp;&amp;c)return c(s,!0);if(o)return o(s,!0);var u=new Error(\"Cannot find module '\"+s+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var f=n[s]={exports:{}};r[s][0].call(f.exports,(function(t){return a(r[s][1][t]||t)}),f,f.exports,e,r,n,i)}return n[s].exports}for(var o=\"function\"==typeof t&amp;&amp;t,s=0;s&lt;i.length;s++)a(i[s]);return a}({1:[function(t,e,r){\"use strict\";r.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},r.toByteArray=function(t){var e,r,n=c(t),o=n[0],s=n[1],l=new a(function(t,e,r){return 3*(e+r)/4-r}(0,o,s)),u=0,f=s&gt;0?o-4:o;for(r=0;r&gt;16&amp;255,l[u++]=e&gt;&gt;8&amp;255,l[u++]=255&amp;e;2===s&amp;&amp;(e=i[t.charCodeAt(r)]&lt;&lt;2|i[t.charCodeAt(r+1)]&gt;&gt;4,l[u++]=255&amp;e);1===s&amp;&amp;(e=i[t.charCodeAt(r)]&lt;&lt;10|i[t.charCodeAt(r+1)]&lt;&lt;4|i[t.charCodeAt(r+2)]&gt;&gt;2,l[u++]=e&gt;&gt;8&amp;255,l[u++]=255&amp;e);return l},r.fromByteArray=function(t){for(var e,r=t.length,i=r%3,a=[],o=0,s=r-i;os?s:o+16383));1===i?(e=t[r-1],a.push(n[e&gt;&gt;2]+n[e&lt;&lt;4&amp;63]+\"==\")):2===i&amp;&amp;(e=(t[r-2]&lt;&lt;8)+t[r-1],a.push(n[e&gt;&gt;10]+n[e&gt;&gt;4&amp;63]+n[e&lt;&lt;2&amp;63]+\"=\"));return a.join(\"\")};for(var n=[],i=[],a=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",s=0,l=o.length;s0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var r=t.indexOf(\"=\");return-1===r&amp;&amp;(r=e),[r,r===e?0:4-r%4]}function u(t,e,r){for(var i,a,o=[],s=e;s&gt;18&amp;63]+n[a&gt;&gt;12&amp;63]+n[a&gt;&gt;6&amp;63]+n[63&amp;a]);return o.join(\"\")}i[\"-\".charCodeAt(0)]=62,i[\"_\".charCodeAt(0)]=63},{}],2:[function(t,e,r){},{}],3:[function(t,e,r){(function(e){(function(){ /*!  * The buffer module from node.js, for the browser.  *  * @author   Feross Aboukhadijeh   * @license  MIT  */ \"use strict\";var e=t(\"base64-js\"),n=t(\"ieee754\");r.Buffer=a,r.SlowBuffer=function(t){+t!=t&amp;&amp;(t=0);return a.alloc(+t)},r.INSPECT_MAX_BYTES=50;function i(t){if(t&gt;2147483647)throw new RangeError('The value \"'+t+'\" is invalid for option \"size\"');var e=new Uint8Array(t);return e.__proto__=a.prototype,e}function a(t,e,r){if(\"number\"==typeof t){if(\"string\"==typeof e)throw new TypeError('The \"string\" argument must be of type string. Received type number');return l(t)}return o(t,e,r)}function o(t,e,r){if(\"string\"==typeof t)return function(t,e){\"string\"==typeof e&amp;&amp;\"\"!==e||(e=\"utf8\");if(!a.isEncoding(e))throw new TypeError(\"Unknown encoding: \"+e);var r=0|f(t,e),n=i(r),o=n.write(t,e);o!==r&amp;&amp;(n=n.slice(0,o));return n}(t,e);if(ArrayBuffer.isView(t))return c(t);if(null==t)throw TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof t);if(B(t,ArrayBuffer)||t&amp;&amp;B(t.buffer,ArrayBuffer))return function(t,e,r){if(e&lt;0||t.byteLength=2147483647)throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+2147483647..toString(16)+\" bytes\");return 0|t}function f(t,e){if(a.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||B(t,ArrayBuffer))return t.byteLength;if(\"string\"!=typeof t)throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length&gt;2&amp;&amp;!0===arguments[2];if(!n&amp;&amp;0===r)return 0;for(var i=!1;;)switch(e){case\"ascii\":case\"latin1\":case\"binary\":return r;case\"utf8\":case\"utf-8\":return D(t).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*r;case\"hex\":return r&gt;&gt;&gt;1;case\"base64\":return R(t).length;default:if(i)return n?-1:D(t).length;e=(\"\"+e).toLowerCase(),i=!0}}function h(t,e,r){var n=!1;if((void 0===e||e&lt;0)&amp;&amp;(e=0),e&gt;this.length)return\"\";if((void 0===r||r&gt;this.length)&amp;&amp;(r=this.length),r&lt;=0)return\"\";if((r&gt;&gt;&gt;=0)&lt;=(e&gt;&gt;&gt;=0))return\"\";for(t||(t=\"utf8\");;)switch(t){case\"hex\":return M(this,e,r);case\"utf8\":case\"utf-8\":return T(this,e,r);case\"ascii\":return k(this,e,r);case\"latin1\":case\"binary\":return A(this,e,r);case\"base64\":return w(this,e,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return S(this,e,r);default:if(n)throw new TypeError(\"Unknown encoding: \"+t);t=(t+\"\").toLowerCase(),n=!0}}function p(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function d(t,e,r,n,i){if(0===t.length)return-1;if(\"string\"==typeof r?(n=r,r=0):r&gt;2147483647?r=2147483647:r&lt;-2147483648&amp;&amp;(r=-2147483648),N(r=+r)&amp;&amp;(r=i?0:t.length-1),r&lt;0&amp;&amp;(r=t.length+r),r&gt;=t.length){if(i)return-1;r=t.length-1}else if(r&lt;0){if(!i)return-1;r=0}if(\"string\"==typeof e&amp;&amp;(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if(\"number\"==typeof e)return e&amp;=255,\"function\"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError(\"val must be string, number or Buffer\")}function m(t,e,r,n,i){var a,o=1,s=t.length,l=e.length;if(void 0!==n&amp;&amp;(\"ucs2\"===(n=String(n).toLowerCase())||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(t.length&lt;2||e.length&lt;2)return-1;o=2,s/=2,l/=2,r/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(i){var u=-1;for(a=r;as&amp;&amp;(r=s-l),a=r;a&gt;=0;a--){for(var f=!0,h=0;hi&amp;&amp;(n=i):n=i;var a=e.length;n&gt;a/2&amp;&amp;(n=a/2);for(var o=0;o&gt;8,i=r%256,a.push(i),a.push(n);return a}(e,t.length-r),t,r,n)}function w(t,r,n){return 0===r&amp;&amp;n===t.length?e.fromByteArray(t):e.fromByteArray(t.slice(r,n))}function T(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i239?4:c&gt;223?3:c&gt;191?2:1;if(i+f&lt;=r)switch(f){case 1:c&lt;128&amp;&amp;(u=c);break;case 2:128==(192&amp;(a=t[i+1]))&amp;&amp;(l=(31&amp;c)&lt;&lt;6|63&amp;a)&gt;127&amp;&amp;(u=l);break;case 3:a=t[i+1],o=t[i+2],128==(192&amp;a)&amp;&amp;128==(192&amp;o)&amp;&amp;(l=(15&amp;c)&lt;&lt;12|(63&amp;a)&lt;&lt;6|63&amp;o)&gt;2047&amp;&amp;(l&lt;55296||l&gt;57343)&amp;&amp;(u=l);break;case 4:a=t[i+1],o=t[i+2],s=t[i+3],128==(192&amp;a)&amp;&amp;128==(192&amp;o)&amp;&amp;128==(192&amp;s)&amp;&amp;(l=(15&amp;c)&lt;&lt;18|(63&amp;a)&lt;&lt;12|(63&amp;o)&lt;&lt;6|63&amp;s)&gt;65535&amp;&amp;l&lt;1114112&amp;&amp;(u=l)}null===u?(u=65533,f=1):u&gt;65535&amp;&amp;(u-=65536,n.push(u&gt;&gt;&gt;10&amp;1023|55296),u=56320|1023&amp;u),n.push(u),i+=f}return function(t){var e=t.length;if(e&lt;=4096)return String.fromCharCode.apply(String,t);var r=\"\",n=0;for(;n&lt;e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}r.kMaxLength=2147483647,a.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}(),a.TYPED_ARRAY_SUPPORT||\"undefined\"==typeof console||\"function\"!=typeof console.error||console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"),Object.defineProperty(a.prototype,\"parent\",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.buffer}}),Object.defineProperty(a.prototype,\"offset\",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.byteOffset}}),\"undefined\"!=typeof Symbol&amp;&amp;null!=Symbol.species&amp;&amp;a[Symbol.species]===a&amp;&amp;Object.defineProperty(a,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),a.poolSize=8192,a.from=function(t,e,r){return o(t,e,r)},a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,a.alloc=function(t,e,r){return function(t,e,r){return s(t),t&lt;=0?i(t):void 0!==e?\"string\"==typeof r?i(t).fill(e,r):i(t).fill(e):i(t)}(t,e,r)},a.allocUnsafe=function(t){return l(t)},a.allocUnsafeSlow=function(t){return l(t)},a.isBuffer=function(t){return null!=t&amp;&amp;!0===t._isBuffer&amp;&amp;t!==a.prototype},a.compare=function(t,e){if(B(t,Uint8Array)&amp;&amp;(t=a.from(t,t.offset,t.byteLength)),B(e,Uint8Array)&amp;&amp;(e=a.from(e,e.offset,e.byteLength)),!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i&lt;o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r&lt;n?-1:n&lt;r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},a.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r&lt;t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),i=0;for(r=0;r&lt;t.length;++r){var o=t[r];if(B(o,Uint8Array)&amp;&amp;(o=a.from(o)),!a.isBuffer(o))throw new TypeError('\"list\" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},a.byteLength=f,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(var e=0;e&lt;t;e+=2)p(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(var e=0;e&lt;t;e+=4)p(this,e,e+3),p(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(var e=0;e&lt;t;e+=8)p(this,e,e+7),p(this,e+1,e+6),p(this,e+2,e+5),p(this,e+3,e+4);return this},a.prototype.toString=function(){var t=this.length;return 0===t?\"\":0===arguments.length?T(this,0,t):h.apply(this,arguments)},a.prototype.toLocaleString=a.prototype.toString,a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t=\"\",e=r.INSPECT_MAX_BYTES;return t=this.toString(\"hex\",0,e).replace(/(.{2})/g,\"$1 \").trim(),this.length&gt;e&amp;&amp;(t+=\" ... \"),\"\"},a.prototype.compare=function(t,e,r,n,i){if(B(t,Uint8Array)&amp;&amp;(t=a.from(t,t.offset,t.byteLength)),!a.isBuffer(t))throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&amp;&amp;(e=0),void 0===r&amp;&amp;(r=t?t.length:0),void 0===n&amp;&amp;(n=0),void 0===i&amp;&amp;(i=this.length),e&lt;0||r&gt;t.length||n&lt;0||i&gt;this.length)throw new RangeError(\"out of range index\");if(n&gt;=i&amp;&amp;e&gt;=r)return 0;if(n&gt;=i)return-1;if(e&gt;=r)return 1;if(this===t)return 0;for(var o=(i&gt;&gt;&gt;=0)-(n&gt;&gt;&gt;=0),s=(r&gt;&gt;&gt;=0)-(e&gt;&gt;&gt;=0),l=Math.min(o,s),c=this.slice(n,i),u=t.slice(e,r),f=0;f&gt;&gt;=0,isFinite(r)?(r&gt;&gt;&gt;=0,void 0===n&amp;&amp;(n=\"utf8\")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r&gt;i)&amp;&amp;(r=i),t.length&gt;0&amp;&amp;(r&lt;0||e&lt;0)||e&gt;this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");for(var a=!1;;)switch(n){case\"hex\":return g(this,t,e,r);case\"utf8\":case\"utf-8\":return v(this,t,e,r);case\"ascii\":return y(this,t,e,r);case\"latin1\":case\"binary\":return x(this,t,e,r);case\"base64\":return b(this,t,e,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return _(this,t,e,r);default:if(a)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),a=!0}},a.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function k(t,e,r){var n=\"\";r=Math.min(t.length,r);for(var i=e;in)&amp;&amp;(r=n);for(var i=\"\",a=e;ar)throw new RangeError(\"Trying to access beyond buffer length\")}function L(t,e,r,n,i,o){if(!a.isBuffer(t))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(e&gt;i||et.length)throw new RangeError(\"Index out of range\")}function C(t,e,r,n,i,a){if(r+n&gt;t.length)throw new RangeError(\"Index out of range\");if(r&lt;0)throw new RangeError(\"Index out of range\")}function P(t,e,r,i,a){return e=+e,r&gt;&gt;&gt;=0,a||C(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function I(t,e,r,i,a){return e=+e,r&gt;&gt;&gt;=0,a||C(t,0,r,8),n.write(t,e,r,i,52,8),r+8}a.prototype.slice=function(t,e){var r=this.length;(t=~~t)&lt;0?(t+=r)&lt;0&amp;&amp;(t=0):t&gt;r&amp;&amp;(t=r),(e=void 0===e?r:~~e)&lt;0?(e+=r)&lt;0&amp;&amp;(e=0):e&gt;r&amp;&amp;(e=r),e&gt;&gt;=0,e&gt;&gt;&gt;=0,r||E(t,e,this.length);for(var n=this[t],i=1,a=0;++a&gt;&gt;=0,e&gt;&gt;&gt;=0,r||E(t,e,this.length);for(var n=this[t+--e],i=1;e&gt;0&amp;&amp;(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUInt8=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,2,this.length),this[t]|this[t+1]&lt;&lt;8},a.prototype.readUInt16BE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,2,this.length),this[t]&lt;&lt;8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),(this[t]|this[t+1]&lt;&lt;8|this[t+2]&lt;&lt;16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),16777216*this[t]+(this[t+1]&lt;&lt;16|this[t+2]&lt;&lt;8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t&gt;&gt;&gt;=0,e&gt;&gt;&gt;=0,r||E(t,e,this.length);for(var n=this[t],i=1,a=0;++a=(i*=128)&amp;&amp;(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t&gt;&gt;&gt;=0,e&gt;&gt;&gt;=0,r||E(t,e,this.length);for(var n=e,i=1,a=this[t+--n];n&gt;0&amp;&amp;(i*=256);)a+=this[t+--n]*i;return a&gt;=(i*=128)&amp;&amp;(a-=Math.pow(2,8*e)),a},a.prototype.readInt8=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,1,this.length),128&amp;this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){t&gt;&gt;&gt;=0,e||E(t,2,this.length);var r=this[t]|this[t+1]&lt;&lt;8;return 32768&amp;r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){t&gt;&gt;&gt;=0,e||E(t,2,this.length);var r=this[t+1]|this[t]&lt;&lt;8;return 32768&amp;r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),this[t]|this[t+1]&lt;&lt;8|this[t+2]&lt;&lt;16|this[t+3]&lt;&lt;24},a.prototype.readInt32BE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),this[t]&lt;&lt;24|this[t+1]&lt;&lt;16|this[t+2]&lt;&lt;8|this[t+3]},a.prototype.readFloatLE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),n.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,4,this.length),n.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,8,this.length),n.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return t&gt;&gt;&gt;=0,e||E(t,8,this.length),n.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e&gt;&gt;&gt;=0,r&gt;&gt;&gt;=0,n)||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[e]=255&amp;t;++a&gt;&gt;=0,r&gt;&gt;&gt;=0,n)||L(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[e+i]=255&amp;t;--i&gt;=0&amp;&amp;(a*=256);)this[e+i]=t/a&amp;255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,1,255,0),this[e]=255&amp;t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,2,65535,0),this[e]=255&amp;t,this[e+1]=t&gt;&gt;&gt;8,e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,2,65535,0),this[e]=t&gt;&gt;&gt;8,this[e+1]=255&amp;t,e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t&gt;&gt;&gt;24,this[e+2]=t&gt;&gt;&gt;16,this[e+1]=t&gt;&gt;&gt;8,this[e]=255&amp;t,e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,4,4294967295,0),this[e]=t&gt;&gt;&gt;24,this[e+1]=t&gt;&gt;&gt;16,this[e+2]=t&gt;&gt;&gt;8,this[e+3]=255&amp;t,e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e&gt;&gt;&gt;=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var a=0,o=1,s=0;for(this[e]=255&amp;t;++a&gt;0)-s&amp;255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e&gt;&gt;&gt;=0,!n){var i=Math.pow(2,8*r-1);L(this,t,e,r,i-1,-i)}var a=r-1,o=1,s=0;for(this[e+a]=255&amp;t;--a&gt;=0&amp;&amp;(o*=256);)t&lt;0&amp;&amp;0===s&amp;&amp;0!==this[e+a+1]&amp;&amp;(s=1),this[e+a]=(t/o&gt;&gt;0)-s&amp;255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,1,127,-128),t&lt;0&amp;&amp;(t=255+t+1),this[e]=255&amp;t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,2,32767,-32768),this[e]=255&amp;t,this[e+1]=t&gt;&gt;&gt;8,e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,2,32767,-32768),this[e]=t&gt;&gt;&gt;8,this[e+1]=255&amp;t,e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&amp;t,this[e+1]=t&gt;&gt;&gt;8,this[e+2]=t&gt;&gt;&gt;16,this[e+3]=t&gt;&gt;&gt;24,e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e&gt;&gt;&gt;=0,r||L(this,t,e,4,2147483647,-2147483648),t&lt;0&amp;&amp;(t=4294967295+t+1),this[e]=t&gt;&gt;&gt;24,this[e+1]=t&gt;&gt;&gt;16,this[e+2]=t&gt;&gt;&gt;8,this[e+3]=255&amp;t,e+4},a.prototype.writeFloatLE=function(t,e,r){return P(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return P(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return I(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return I(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(!a.isBuffer(t))throw new TypeError(\"argument should be a Buffer\");if(r||(r=0),n||0===n||(n=this.length),e&gt;=t.length&amp;&amp;(e=t.length),e||(e=0),n&gt;0&amp;&amp;n=this.length)throw new RangeError(\"Index out of range\");if(n&lt;0)throw new RangeError(\"sourceEnd out of bounds\");n&gt;this.length&amp;&amp;(n=this.length),t.length-e=0;--o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,n),e);return i},a.prototype.fill=function(t,e,r,n){if(\"string\"==typeof t){if(\"string\"==typeof e?(n=e,e=0,r=this.length):\"string\"==typeof r&amp;&amp;(n=r,r=this.length),void 0!==n&amp;&amp;\"string\"!=typeof n)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof n&amp;&amp;!a.isEncoding(n))throw new TypeError(\"Unknown encoding: \"+n);if(1===t.length){var i=t.charCodeAt(0);(\"utf8\"===n&amp;&amp;i&lt;128||\"latin1\"===n)&amp;&amp;(t=i)}}else\"number\"==typeof t&amp;&amp;(t&amp;=255);if(e&lt;0||this.length&gt;&gt;=0,r=void 0===r?this.length:r&gt;&gt;&gt;0,t||(t=0),\"number\"==typeof t)for(o=e;o55295&amp;&amp;r&lt;57344){if(!i){if(r&gt;56319){(e-=3)&gt;-1&amp;&amp;a.push(239,191,189);continue}if(o+1===n){(e-=3)&gt;-1&amp;&amp;a.push(239,191,189);continue}i=r;continue}if(r&lt;56320){(e-=3)&gt;-1&amp;&amp;a.push(239,191,189),i=r;continue}r=65536+(i-55296&lt;&lt;10|r-56320)}else i&amp;&amp;(e-=3)&gt;-1&amp;&amp;a.push(239,191,189);if(i=null,r&lt;128){if((e-=1)&lt;0)break;a.push(r)}else if(r&lt;2048){if((e-=2)&lt;0)break;a.push(r&gt;&gt;6|192,63&amp;r|128)}else if(r&lt;65536){if((e-=3)&lt;0)break;a.push(r&gt;&gt;12|224,r&gt;&gt;6&amp;63|128,63&amp;r|128)}else{if(!(r&lt;1114112))throw new Error(\"Invalid code point\");if((e-=4)&lt;0)break;a.push(r&gt;&gt;18|240,r&gt;&gt;12&amp;63|128,r&gt;&gt;6&amp;63|128,63&amp;r|128)}}return a}function R(t){return e.toByteArray(function(t){if((t=(t=t.split(\"=\")[0]).trim().replace(O,\"\")).length&lt;2)return\"\";for(;t.length%4!=0;)t+=\"=\";return t}(t))}function F(t,e,r,n){for(var i=0;i=e.length||i&gt;=t.length);++i)e[i+r]=t[i];return i}function B(t,e){return t instanceof e||null!=t&amp;&amp;null!=t.constructor&amp;&amp;null!=t.constructor.name&amp;&amp;t.constructor.name===e.name}function N(t){return t!=t}}).call(this)}).call(this,t(\"buffer\").Buffer)},{\"base64-js\":1,buffer:3,ieee754:4}],4:[function(t,e,r){r.read=function(t,e,r,n,i){var a,o,s=8*i-n-1,l=(1&lt;&gt;1,u=-7,f=r?i-1:0,h=r?-1:1,p=t[e+f];for(f+=h,a=p&amp;(1&lt;&lt;-u)-1,p&gt;&gt;=-u,u+=s;u&gt;0;a=256*a+t[e+f],f+=h,u-=8);for(o=a&amp;(1&lt;&lt;-u)-1,a&gt;&gt;=-u,u+=n;u&gt;0;o=256*o+t[e+f],f+=h,u-=8);if(0===a)a=1-c;else{if(a===l)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),a-=c}return(p?-1:1)*o*Math.pow(2,a-n)},r.write=function(t,e,r,n,i,a){var o,s,l,c=8*a-i-1,u=(1&lt;&gt;1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:a-1,d=n?1:-1,m=e&lt;0||0===e&amp;&amp;1/e&lt;0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-o))&lt;1&amp;&amp;(o--,l*=2),(e+=o+f&gt;=1?h/l:h*Math.pow(2,1-f))*l&gt;=2&amp;&amp;(o++,l/=2),o+f&gt;=u?(s=0,o=u):o+f&gt;=1?(s=(e*l-1)*Math.pow(2,i),o+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),o=0));i&gt;=8;t[r+p]=255&amp;s,p+=d,s/=256,i-=8);for(o=o&lt;0;t[r+p]=255&amp;o,p+=d,o/=256,c-=8);t[r+p-d]|=128*m}},{}],5:[function(t,e,r){var n,i,a=e.exports={};function o(){throw new Error(\"setTimeout has not been defined\")}function s(){throw new Error(\"clearTimeout has not been defined\")}function l(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&amp;&amp;setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n=\"function\"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{i=\"function\"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,u=[],f=!1,h=-1;function p(){f&amp;&amp;c&amp;&amp;(f=!1,c.length?u=c.concat(u):h=-1,u.length&amp;&amp;d())}function d(){if(!f){var t=l(p);f=!0;for(var e=u.length;e;){for(c=u,u=[];++h1)for(var r=1;r0?c=c.ushln(f):f&lt;0&amp;&amp;(u=u.ushln(-f));return s(c,u)}},{\"./div\":17,\"./is-rat\":19,\"./lib/is-bn\":23,\"./lib/num-to-bn\":24,\"./lib/rationalize\":25,\"./lib/str-to-bn\":26}],19:[function(t,e,r){\"use strict\";var n=t(\"./lib/is-bn\");e.exports=function(t){return Array.isArray(t)&amp;&amp;2===t.length&amp;&amp;n(t[0])&amp;&amp;n(t[1])}},{\"./lib/is-bn\":23}],20:[function(t,e,r){\"use strict\";var n=t(\"bn.js\");e.exports=function(t){return t.cmp(new n(0))}},{\"bn.js\":33}],21:[function(t,e,r){\"use strict\";var n=t(\"./bn-sign\");e.exports=function(t){var e=t.length,r=t.words,i=0;if(1===e)i=r[0];else if(2===e)i=r[0]+67108864*r[1];else for(var a=0;a20)return 52;return r+32}},{\"bit-twiddle\":32,\"double-bits\":64}],23:[function(t,e,r){\"use strict\";t(\"bn.js\");e.exports=function(t){return t&amp;&amp;\"object\"==typeof t&amp;&amp;Boolean(t.words)}},{\"bn.js\":33}],24:[function(t,e,r){\"use strict\";var n=t(\"bn.js\"),i=t(\"double-bits\");e.exports=function(t){var e=i.exponent(t);return e&lt;52?new n(t):new n(t*Math.pow(2,52-e)).ushln(e-52)}},{\"bn.js\":33,\"double-bits\":64}],25:[function(t,e,r){\"use strict\";var n=t(\"./num-to-bn\"),i=t(\"./bn-sign\");e.exports=function(t,e){var r=i(t),a=i(e);if(0===r)return[n(0),n(1)];if(0===a)return[n(0),n(0)];a&lt;0&amp;&amp;(t=t.neg(),e=e.neg());var o=t.gcd(e);if(o.cmpn(1))return[t.div(o),e.div(o)];return[t,e]}},{\"./bn-sign\":20,\"./num-to-bn\":24}],26:[function(t,e,r){\"use strict\";var n=t(\"bn.js\");e.exports=function(t){return new n(t)}},{\"bn.js\":33}],27:[function(t,e,r){\"use strict\";var n=t(\"./lib/rationalize\");e.exports=function(t,e){return n(t[0].mul(e[0]),t[1].mul(e[1]))}},{\"./lib/rationalize\":25}],28:[function(t,e,r){\"use strict\";var n=t(\"./lib/bn-sign\");e.exports=function(t){return n(t[0])*n(t[1])}},{\"./lib/bn-sign\":20}],29:[function(t,e,r){\"use strict\";var n=t(\"./lib/rationalize\");e.exports=function(t,e){return n(t[0].mul(e[1]).sub(t[1].mul(e[0])),t[1].mul(e[1]))}},{\"./lib/rationalize\":25}],30:[function(t,e,r){\"use strict\";var n=t(\"./lib/bn-to-num\"),i=t(\"./lib/ctz\");e.exports=function(t){var e=t[0],r=t[1];if(0===e.cmpn(0))return 0;var a=e.abs().divmod(r.abs()),o=a.div,s=n(o),l=a.mod,c=e.negative!==r.negative?-1:1;if(0===l.cmpn(0))return c*s;if(s){var u=i(s)+4,f=n(l.ushln(u).divRound(r));return c*(s+f*Math.pow(2,-u))}var h=r.bitLength()-l.bitLength()+53;f=n(l.ushln(h).divRound(r));return h&lt;1023?c*f*Math.pow(2,-h):(f*=Math.pow(2,-1023),c*f*Math.pow(2,1023-h))}},{\"./lib/bn-to-num\":21,\"./lib/ctz\":22}],31:[function(t,e,r){\"use strict\";function n(t,e,r,n,i){for(var a=i+1;n&lt;=i;){var o=n+i&gt;&gt;&gt;1,s=t[o];(void 0!==r?r(s,e):s-e)&gt;=0?(a=o,i=o-1):n=o+1}return a}function i(t,e,r,n,i){for(var a=i+1;n&lt;=i;){var o=n+i&gt;&gt;&gt;1,s=t[o];(void 0!==r?r(s,e):s-e)&gt;0?(a=o,i=o-1):n=o+1}return a}function a(t,e,r,n,i){for(var a=n-1;n&lt;=i;){var o=n+i&gt;&gt;&gt;1,s=t[o];(void 0!==r?r(s,e):s-e)&lt;0?(a=o,n=o+1):i=o-1}return a}function o(t,e,r,n,i){for(var a=n-1;n&lt;=i;){var o=n+i&gt;&gt;&gt;1,s=t[o];(void 0!==r?r(s,e):s-e)&lt;=0?(a=o,n=o+1):i=o-1}return a}function s(t,e,r,n,i){for(;n&lt;=i;){var a=n+i&gt;&gt;&gt;1,o=t[a],s=void 0!==r?r(o,e):o-e;if(0===s)return a;s&lt;=0?n=a+1:i=a-1}return-1}function l(t,e,r,n,i,a){return\"function\"==typeof r?a(t,e,r,void 0===n?0:0|n,void 0===i?t.length-1:0|i):a(t,e,void 0,void 0===r?0:0|r,void 0===n?t.length-1:0|n)}e.exports={ge:function(t,e,r,i,a){return l(t,e,r,i,a,n)},gt:function(t,e,r,n,a){return l(t,e,r,n,a,i)},lt:function(t,e,r,n,i){return l(t,e,r,n,i,a)},le:function(t,e,r,n,i){return l(t,e,r,n,i,o)},eq:function(t,e,r,n,i){return l(t,e,r,n,i,s)}}},{}],32:[function(t,e,r){\"use strict\";function n(t){var e=32;return(t&amp;=-t)&amp;&amp;e--,65535&amp;t&amp;&amp;(e-=16),16711935&amp;t&amp;&amp;(e-=8),252645135&amp;t&amp;&amp;(e-=4),858993459&amp;t&amp;&amp;(e-=2),1431655765&amp;t&amp;&amp;(e-=1),e}r.INT_BITS=32,r.INT_MAX=2147483647,r.INT_MIN=-1&lt;&lt;31,r.sign=function(t){return(t&gt;0)-(t&lt;0)},r.abs=function(t){var e=t&gt;&gt;31;return(t^e)-e},r.min=function(t,e){return e^(t^e)&amp;-(t65535)&lt;&lt;4,e|=r=((t&gt;&gt;&gt;=e)&gt;255)&lt;&lt;3,e|=r=((t&gt;&gt;&gt;=r)&gt;15)&lt;&lt;2,(e|=r=((t&gt;&gt;&gt;=r)&gt;3)&lt;&lt;1)|(t&gt;&gt;&gt;=r)&gt;&gt;1},r.log10=function(t){return t&gt;=1e9?9:t&gt;=1e8?8:t&gt;=1e7?7:t&gt;=1e6?6:t&gt;=1e5?5:t&gt;=1e4?4:t&gt;=1e3?3:t&gt;=100?2:t&gt;=10?1:0},r.popCount=function(t){return 16843009*((t=(858993459&amp;(t-=t&gt;&gt;&gt;1&amp;1431655765))+(t&gt;&gt;&gt;2&amp;858993459))+(t&gt;&gt;&gt;4)&amp;252645135)&gt;&gt;&gt;24},r.countTrailingZeros=n,r.nextPow2=function(t){return t+=0===t,--t,t|=t&gt;&gt;&gt;1,t|=t&gt;&gt;&gt;2,t|=t&gt;&gt;&gt;4,t|=t&gt;&gt;&gt;8,(t|=t&gt;&gt;&gt;16)+1},r.prevPow2=function(t){return t|=t&gt;&gt;&gt;1,t|=t&gt;&gt;&gt;2,t|=t&gt;&gt;&gt;4,t|=t&gt;&gt;&gt;8,(t|=t&gt;&gt;&gt;16)-(t&gt;&gt;&gt;1)},r.parity=function(t){return t^=t&gt;&gt;&gt;16,t^=t&gt;&gt;&gt;8,t^=t&gt;&gt;&gt;4,27030&gt;&gt;&gt;(t&amp;=15)&amp;1};var i=new Array(256);!function(t){for(var e=0;e&lt;256;++e){var r=e,n=e,i=7;for(r&gt;&gt;&gt;=1;r;r&gt;&gt;&gt;=1)n&lt;&lt;=1,n|=1&amp;r,--i;t[e]=n&lt;&gt;&gt;8&amp;255]&lt;&lt;16|i[t&gt;&gt;&gt;16&amp;255]&lt;&lt;8|i[t&gt;&gt;&gt;24&amp;255]},r.interleave2=function(t,e){return(t=1431655765&amp;((t=858993459&amp;((t=252645135&amp;((t=16711935&amp;((t&amp;=65535)|t&lt;&lt;8))|t&lt;&lt;4))|t&lt;&lt;2))|t&lt;&lt;1))|(e=1431655765&amp;((e=858993459&amp;((e=252645135&amp;((e=16711935&amp;((e&amp;=65535)|e&lt;&lt;8))|e&lt;&lt;4))|e&lt;&lt;2))|e&lt;&lt;1))&lt;&lt;1},r.deinterleave2=function(t,e){return(t=65535&amp;((t=16711935&amp;((t=252645135&amp;((t=858993459&amp;((t=t&gt;&gt;&gt;e&amp;1431655765)|t&gt;&gt;&gt;1))|t&gt;&gt;&gt;2))|t&gt;&gt;&gt;4))|t&gt;&gt;&gt;16))&lt;&lt;16&gt;&gt;16},r.interleave3=function(t,e,r){return t=1227133513&amp;((t=3272356035&amp;((t=251719695&amp;((t=4278190335&amp;((t&amp;=1023)|t&lt;&lt;16))|t&lt;&lt;8))|t&lt;&lt;4))|t&lt;&lt;2),(t|=(e=1227133513&amp;((e=3272356035&amp;((e=251719695&amp;((e=4278190335&amp;((e&amp;=1023)|e&lt;&lt;16))|e&lt;&lt;8))|e&lt;&lt;4))|e&lt;&lt;2))&lt;&lt;1)|(r=1227133513&amp;((r=3272356035&amp;((r=251719695&amp;((r=4278190335&amp;((r&amp;=1023)|r&lt;&lt;16))|r&lt;&lt;8))|r&lt;&lt;4))|r&lt;&lt;2))&lt;&lt;2},r.deinterleave3=function(t,e){return(t=1023&amp;((t=4278190335&amp;((t=251719695&amp;((t=3272356035&amp;((t=t&gt;&gt;&gt;e&amp;1227133513)|t&gt;&gt;&gt;2))|t&gt;&gt;&gt;4))|t&gt;&gt;&gt;8))|t&gt;&gt;&gt;16))&lt;&lt;22&gt;&gt;22},r.nextCombination=function(t){var e=t|t-1;return e+1|(~e&amp;-~e)-1&gt;&gt;&gt;n(t)+1}},{}],33:[function(t,e,r){!function(e,r){\"use strict\";function n(t,e){if(!t)throw new Error(e||\"Assertion failed\")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function a(t,e,r){if(a.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&amp;&amp;(\"le\"!==e&amp;&amp;\"be\"!==e||(r=e,e=10),this._init(t||0,e||10,r||\"be\"))}var o;\"object\"==typeof e?e.exports=a:r.BN=a,a.BN=a,a.wordSize=26;try{o=\"undefined\"!=typeof window&amp;&amp;void 0!==window.Buffer?window.Buffer:t(\"buffer\").Buffer}catch(t){}function s(t,e){var r=t.charCodeAt(e);return r&gt;=65&amp;&amp;r&lt;=70?r-55:r&gt;=97&amp;&amp;r&lt;=102?r-87:r-48&amp;15}function l(t,e,r){var n=s(t,r);return r-1&gt;=e&amp;&amp;(n|=s(t,r-1)&lt;&lt;4),n}function c(t,e,r,n){for(var i=0,a=Math.min(t.length,r),o=e;o=49?s-49+10:s&gt;=17?s-17+10:s}return i}a.isBN=function(t){return t instanceof a||null!==t&amp;&amp;\"object\"==typeof t&amp;&amp;t.constructor.wordSize===a.wordSize&amp;&amp;Array.isArray(t.words)},a.max=function(t,e){return t.cmp(e)&gt;0?t:e},a.min=function(t,e){return t.cmp(e)&lt;0?t:e},a.prototype._init=function(t,e,r){if(\"number\"==typeof t)return this._initNumber(t,e,r);if(\"object\"==typeof t)return this._initArray(t,e,r);\"hex\"===e&amp;&amp;(e=16),n(e===(0|e)&amp;&amp;e&gt;=2&amp;&amp;e&lt;=36);var i=0;\"-\"===(t=t.toString().replace(/\\s+/g,\"\"))[0]&amp;&amp;(i++,this.negative=1),i=0;i-=3)o=t[i]|t[i-1]&lt;&lt;8|t[i-2]&lt;&lt;16,this.words[a]|=o&lt;&gt;&gt;26-s&amp;67108863,(s+=24)&gt;=26&amp;&amp;(s-=26,a++);else if(\"le\"===r)for(i=0,a=0;i&gt;&gt;26-s&amp;67108863,(s+=24)&gt;=26&amp;&amp;(s-=26,a++);return this.strip()},a.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n=e;n-=2)i=l(t,e,n)&lt;=18?(a-=18,o+=1,this.words[o]|=i&gt;&gt;&gt;26):a+=8;else for(n=(t.length-e)%2==0?e+1:e;n=18?(a-=18,o+=1,this.words[o]|=i&gt;&gt;&gt;26):a+=8;this.strip()},a.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i&lt;=67108863;i*=e)n++;n--,i=i/e|0;for(var a=t.length-r,o=a%n,s=Math.min(a,a-o)+r,l=0,u=r;u1&amp;&amp;0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&amp;&amp;0===this.words[0]&amp;&amp;(this.negative=0),this},a.prototype.inspect=function(){return(this.red?\"\"};var u=[\"\",\"0\",\"00\",\"000\",\"0000\",\"00000\",\"000000\",\"0000000\",\"00000000\",\"000000000\",\"0000000000\",\"00000000000\",\"000000000000\",\"0000000000000\",\"00000000000000\",\"000000000000000\",\"0000000000000000\",\"00000000000000000\",\"000000000000000000\",\"0000000000000000000\",\"00000000000000000000\",\"000000000000000000000\",\"0000000000000000000000\",\"00000000000000000000000\",\"000000000000000000000000\",\"0000000000000000000000000\"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function p(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],a=0|e.words[0],o=i*a,s=67108863&amp;o,l=o/67108864|0;r.words[0]=s;for(var c=1;c&gt;&gt;26,f=67108863&amp;l,h=Math.min(c,e.length-1),p=Math.max(0,c-t.length+1);p&lt;=h;p++){var d=c-p|0;u+=(o=(i=0|t.words[d])*(a=0|e.words[p])+f)/67108864|0,f=67108863&amp;o}r.words[c]=0|f,l=0|u}return 0!==l?r.words[c]=0|l:r.length--,r.strip()}a.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||\"hex\"===t){r=\"\";for(var i=0,a=0,o=0;o&gt;&gt;24-i&amp;16777215)||o!==this.length-1?u[6-l.length]+l+r:l+r,(i+=2)&gt;=26&amp;&amp;(i-=26,o--)}for(0!==a&amp;&amp;(r=a.toString(16)+r);r.length%e!=0;)r=\"0\"+r;return 0!==this.negative&amp;&amp;(r=\"-\"+r),r}if(t===(0|t)&amp;&amp;t&gt;=2&amp;&amp;t&lt;=36){var c=f[t],p=h[t];r=\"\";var d=this.clone();for(d.negative=0;!d.isZero();){var m=d.modn(p).toString(t);r=(d=d.idivn(p)).isZero()?m+r:u[c-m.length]+m+r}for(this.isZero()&amp;&amp;(r=\"0\"+r);r.length%e!=0;)r=\"0\"+r;return 0!==this.negative&amp;&amp;(r=\"-\"+r),r}n(!1,\"Base should be between 2 and 36\")},a.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&amp;&amp;1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length&gt;2&amp;&amp;n(!1,\"Number can only safely store up to 53 bits\"),0!==this.negative?-t:t},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(t,e){return n(void 0!==o),this.toArrayLike(o,t,e)},a.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},a.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),a=r||Math.max(1,i);n(i&lt;=a,\"byte array longer than desired length\"),n(a&gt;0,\"Requested array length &lt;= 0\"),this.strip();var o,s,l=\"le\"===e,c=new t(a),u=this.clone();if(l){for(s=0;!u.isZero();s++)o=u.andln(255),u.iushrn(8),c[s]=o;for(;s=4096&amp;&amp;(r+=13,e&gt;&gt;&gt;=13),e&gt;=64&amp;&amp;(r+=7,e&gt;&gt;&gt;=7),e&gt;=8&amp;&amp;(r+=4,e&gt;&gt;&gt;=4),e&gt;=2&amp;&amp;(r+=2,e&gt;&gt;&gt;=2),r+e},a.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&amp;e)&amp;&amp;(r+=13,e&gt;&gt;&gt;=13),0==(127&amp;e)&amp;&amp;(r+=7,e&gt;&gt;&gt;=7),0==(15&amp;e)&amp;&amp;(r+=4,e&gt;&gt;&gt;=4),0==(3&amp;e)&amp;&amp;(r+=2,e&gt;&gt;&gt;=2),0==(1&amp;e)&amp;&amp;r++,r},a.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;et.length?this.clone().ior(t):t.clone().ior(this)},a.prototype.uor=function(t){return this.length&gt;t.length?this.clone().iuor(t):t.clone().iuor(this)},a.prototype.iuand=function(t){var e;e=this.length&gt;t.length?t:this;for(var r=0;rt.length?this.clone().iand(t):t.clone().iand(this)},a.prototype.uand=function(t){return this.length&gt;t.length?this.clone().iuand(t):t.clone().iuand(this)},a.prototype.iuxor=function(t){var e,r;this.length&gt;t.length?(e=this,r=t):(e=t,r=this);for(var n=0;nt.length?this.clone().ixor(t):t.clone().ixor(this)},a.prototype.uxor=function(t){return this.length&gt;t.length?this.clone().iuxor(t):t.clone().iuxor(this)},a.prototype.inotn=function(t){n(\"number\"==typeof t&amp;&amp;t&gt;=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r&gt;0&amp;&amp;e--;for(var i=0;i0&amp;&amp;(this.words[i]=~this.words[i]&amp;67108863&gt;&gt;26-r),this.strip()},a.prototype.notn=function(t){return this.clone().inotn(t)},a.prototype.setn=function(t,e){n(\"number\"==typeof t&amp;&amp;t&gt;=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1&lt;t.length?(r=this,n=t):(r=t,n=this);for(var i=0,a=0;a&gt;&gt;26;for(;0!==i&amp;&amp;a&gt;&gt;26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;at.length?this.clone().iadd(t):t.clone().iadd(this)},a.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i&gt;0?(r=this,n=t):(r=t,n=this);for(var a=0,o=0;o&gt;26,this.words[o]=67108863&amp;e;for(;0!==a&amp;&amp;o&gt;26,this.words[o]=67108863&amp;e;if(0===a&amp;&amp;o&gt;&gt;13,p=0|o[1],d=8191&amp;p,m=p&gt;&gt;&gt;13,g=0|o[2],v=8191&amp;g,y=g&gt;&gt;&gt;13,x=0|o[3],b=8191&amp;x,_=x&gt;&gt;&gt;13,w=0|o[4],T=8191&amp;w,k=w&gt;&gt;&gt;13,A=0|o[5],M=8191&amp;A,S=A&gt;&gt;&gt;13,E=0|o[6],L=8191&amp;E,C=E&gt;&gt;&gt;13,P=0|o[7],I=8191&amp;P,O=P&gt;&gt;&gt;13,z=0|o[8],D=8191&amp;z,R=z&gt;&gt;&gt;13,F=0|o[9],B=8191&amp;F,N=F&gt;&gt;&gt;13,j=0|s[0],U=8191&amp;j,V=j&gt;&gt;&gt;13,H=0|s[1],q=8191&amp;H,G=H&gt;&gt;&gt;13,Y=0|s[2],W=8191&amp;Y,Z=Y&gt;&gt;&gt;13,X=0|s[3],J=8191&amp;X,K=X&gt;&gt;&gt;13,Q=0|s[4],$=8191&amp;Q,tt=Q&gt;&gt;&gt;13,et=0|s[5],rt=8191&amp;et,nt=et&gt;&gt;&gt;13,it=0|s[6],at=8191&amp;it,ot=it&gt;&gt;&gt;13,st=0|s[7],lt=8191&amp;st,ct=st&gt;&gt;&gt;13,ut=0|s[8],ft=8191&amp;ut,ht=ut&gt;&gt;&gt;13,pt=0|s[9],dt=8191&amp;pt,mt=pt&gt;&gt;&gt;13;r.negative=t.negative^e.negative,r.length=19;var gt=(c+(n=Math.imul(f,U))|0)+((8191&amp;(i=(i=Math.imul(f,V))+Math.imul(h,U)|0))&lt;&lt;13)|0;c=((a=Math.imul(h,V))+(i&gt;&gt;&gt;13)|0)+(gt&gt;&gt;&gt;26)|0,gt&amp;=67108863,n=Math.imul(d,U),i=(i=Math.imul(d,V))+Math.imul(m,U)|0,a=Math.imul(m,V);var vt=(c+(n=n+Math.imul(f,q)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,G)|0)+Math.imul(h,q)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,G)|0)+(i&gt;&gt;&gt;13)|0)+(vt&gt;&gt;&gt;26)|0,vt&amp;=67108863,n=Math.imul(v,U),i=(i=Math.imul(v,V))+Math.imul(y,U)|0,a=Math.imul(y,V),n=n+Math.imul(d,q)|0,i=(i=i+Math.imul(d,G)|0)+Math.imul(m,q)|0,a=a+Math.imul(m,G)|0;var yt=(c+(n=n+Math.imul(f,W)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,Z)|0)+Math.imul(h,W)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,Z)|0)+(i&gt;&gt;&gt;13)|0)+(yt&gt;&gt;&gt;26)|0,yt&amp;=67108863,n=Math.imul(b,U),i=(i=Math.imul(b,V))+Math.imul(_,U)|0,a=Math.imul(_,V),n=n+Math.imul(v,q)|0,i=(i=i+Math.imul(v,G)|0)+Math.imul(y,q)|0,a=a+Math.imul(y,G)|0,n=n+Math.imul(d,W)|0,i=(i=i+Math.imul(d,Z)|0)+Math.imul(m,W)|0,a=a+Math.imul(m,Z)|0;var xt=(c+(n=n+Math.imul(f,J)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,K)|0)+Math.imul(h,J)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,K)|0)+(i&gt;&gt;&gt;13)|0)+(xt&gt;&gt;&gt;26)|0,xt&amp;=67108863,n=Math.imul(T,U),i=(i=Math.imul(T,V))+Math.imul(k,U)|0,a=Math.imul(k,V),n=n+Math.imul(b,q)|0,i=(i=i+Math.imul(b,G)|0)+Math.imul(_,q)|0,a=a+Math.imul(_,G)|0,n=n+Math.imul(v,W)|0,i=(i=i+Math.imul(v,Z)|0)+Math.imul(y,W)|0,a=a+Math.imul(y,Z)|0,n=n+Math.imul(d,J)|0,i=(i=i+Math.imul(d,K)|0)+Math.imul(m,J)|0,a=a+Math.imul(m,K)|0;var bt=(c+(n=n+Math.imul(f,$)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,tt)|0)+Math.imul(h,$)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,tt)|0)+(i&gt;&gt;&gt;13)|0)+(bt&gt;&gt;&gt;26)|0,bt&amp;=67108863,n=Math.imul(M,U),i=(i=Math.imul(M,V))+Math.imul(S,U)|0,a=Math.imul(S,V),n=n+Math.imul(T,q)|0,i=(i=i+Math.imul(T,G)|0)+Math.imul(k,q)|0,a=a+Math.imul(k,G)|0,n=n+Math.imul(b,W)|0,i=(i=i+Math.imul(b,Z)|0)+Math.imul(_,W)|0,a=a+Math.imul(_,Z)|0,n=n+Math.imul(v,J)|0,i=(i=i+Math.imul(v,K)|0)+Math.imul(y,J)|0,a=a+Math.imul(y,K)|0,n=n+Math.imul(d,$)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(m,$)|0,a=a+Math.imul(m,tt)|0;var _t=(c+(n=n+Math.imul(f,rt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,nt)|0)+Math.imul(h,rt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,nt)|0)+(i&gt;&gt;&gt;13)|0)+(_t&gt;&gt;&gt;26)|0,_t&amp;=67108863,n=Math.imul(L,U),i=(i=Math.imul(L,V))+Math.imul(C,U)|0,a=Math.imul(C,V),n=n+Math.imul(M,q)|0,i=(i=i+Math.imul(M,G)|0)+Math.imul(S,q)|0,a=a+Math.imul(S,G)|0,n=n+Math.imul(T,W)|0,i=(i=i+Math.imul(T,Z)|0)+Math.imul(k,W)|0,a=a+Math.imul(k,Z)|0,n=n+Math.imul(b,J)|0,i=(i=i+Math.imul(b,K)|0)+Math.imul(_,J)|0,a=a+Math.imul(_,K)|0,n=n+Math.imul(v,$)|0,i=(i=i+Math.imul(v,tt)|0)+Math.imul(y,$)|0,a=a+Math.imul(y,tt)|0,n=n+Math.imul(d,rt)|0,i=(i=i+Math.imul(d,nt)|0)+Math.imul(m,rt)|0,a=a+Math.imul(m,nt)|0;var wt=(c+(n=n+Math.imul(f,at)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,ot)|0)+Math.imul(h,at)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,ot)|0)+(i&gt;&gt;&gt;13)|0)+(wt&gt;&gt;&gt;26)|0,wt&amp;=67108863,n=Math.imul(I,U),i=(i=Math.imul(I,V))+Math.imul(O,U)|0,a=Math.imul(O,V),n=n+Math.imul(L,q)|0,i=(i=i+Math.imul(L,G)|0)+Math.imul(C,q)|0,a=a+Math.imul(C,G)|0,n=n+Math.imul(M,W)|0,i=(i=i+Math.imul(M,Z)|0)+Math.imul(S,W)|0,a=a+Math.imul(S,Z)|0,n=n+Math.imul(T,J)|0,i=(i=i+Math.imul(T,K)|0)+Math.imul(k,J)|0,a=a+Math.imul(k,K)|0,n=n+Math.imul(b,$)|0,i=(i=i+Math.imul(b,tt)|0)+Math.imul(_,$)|0,a=a+Math.imul(_,tt)|0,n=n+Math.imul(v,rt)|0,i=(i=i+Math.imul(v,nt)|0)+Math.imul(y,rt)|0,a=a+Math.imul(y,nt)|0,n=n+Math.imul(d,at)|0,i=(i=i+Math.imul(d,ot)|0)+Math.imul(m,at)|0,a=a+Math.imul(m,ot)|0;var Tt=(c+(n=n+Math.imul(f,lt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,ct)|0)+Math.imul(h,lt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,ct)|0)+(i&gt;&gt;&gt;13)|0)+(Tt&gt;&gt;&gt;26)|0,Tt&amp;=67108863,n=Math.imul(D,U),i=(i=Math.imul(D,V))+Math.imul(R,U)|0,a=Math.imul(R,V),n=n+Math.imul(I,q)|0,i=(i=i+Math.imul(I,G)|0)+Math.imul(O,q)|0,a=a+Math.imul(O,G)|0,n=n+Math.imul(L,W)|0,i=(i=i+Math.imul(L,Z)|0)+Math.imul(C,W)|0,a=a+Math.imul(C,Z)|0,n=n+Math.imul(M,J)|0,i=(i=i+Math.imul(M,K)|0)+Math.imul(S,J)|0,a=a+Math.imul(S,K)|0,n=n+Math.imul(T,$)|0,i=(i=i+Math.imul(T,tt)|0)+Math.imul(k,$)|0,a=a+Math.imul(k,tt)|0,n=n+Math.imul(b,rt)|0,i=(i=i+Math.imul(b,nt)|0)+Math.imul(_,rt)|0,a=a+Math.imul(_,nt)|0,n=n+Math.imul(v,at)|0,i=(i=i+Math.imul(v,ot)|0)+Math.imul(y,at)|0,a=a+Math.imul(y,ot)|0,n=n+Math.imul(d,lt)|0,i=(i=i+Math.imul(d,ct)|0)+Math.imul(m,lt)|0,a=a+Math.imul(m,ct)|0;var kt=(c+(n=n+Math.imul(f,ft)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,ht)|0)+Math.imul(h,ft)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,ht)|0)+(i&gt;&gt;&gt;13)|0)+(kt&gt;&gt;&gt;26)|0,kt&amp;=67108863,n=Math.imul(B,U),i=(i=Math.imul(B,V))+Math.imul(N,U)|0,a=Math.imul(N,V),n=n+Math.imul(D,q)|0,i=(i=i+Math.imul(D,G)|0)+Math.imul(R,q)|0,a=a+Math.imul(R,G)|0,n=n+Math.imul(I,W)|0,i=(i=i+Math.imul(I,Z)|0)+Math.imul(O,W)|0,a=a+Math.imul(O,Z)|0,n=n+Math.imul(L,J)|0,i=(i=i+Math.imul(L,K)|0)+Math.imul(C,J)|0,a=a+Math.imul(C,K)|0,n=n+Math.imul(M,$)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(S,$)|0,a=a+Math.imul(S,tt)|0,n=n+Math.imul(T,rt)|0,i=(i=i+Math.imul(T,nt)|0)+Math.imul(k,rt)|0,a=a+Math.imul(k,nt)|0,n=n+Math.imul(b,at)|0,i=(i=i+Math.imul(b,ot)|0)+Math.imul(_,at)|0,a=a+Math.imul(_,ot)|0,n=n+Math.imul(v,lt)|0,i=(i=i+Math.imul(v,ct)|0)+Math.imul(y,lt)|0,a=a+Math.imul(y,ct)|0,n=n+Math.imul(d,ft)|0,i=(i=i+Math.imul(d,ht)|0)+Math.imul(m,ft)|0,a=a+Math.imul(m,ht)|0;var At=(c+(n=n+Math.imul(f,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(f,mt)|0)+Math.imul(h,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(h,mt)|0)+(i&gt;&gt;&gt;13)|0)+(At&gt;&gt;&gt;26)|0,At&amp;=67108863,n=Math.imul(B,q),i=(i=Math.imul(B,G))+Math.imul(N,q)|0,a=Math.imul(N,G),n=n+Math.imul(D,W)|0,i=(i=i+Math.imul(D,Z)|0)+Math.imul(R,W)|0,a=a+Math.imul(R,Z)|0,n=n+Math.imul(I,J)|0,i=(i=i+Math.imul(I,K)|0)+Math.imul(O,J)|0,a=a+Math.imul(O,K)|0,n=n+Math.imul(L,$)|0,i=(i=i+Math.imul(L,tt)|0)+Math.imul(C,$)|0,a=a+Math.imul(C,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(S,rt)|0,a=a+Math.imul(S,nt)|0,n=n+Math.imul(T,at)|0,i=(i=i+Math.imul(T,ot)|0)+Math.imul(k,at)|0,a=a+Math.imul(k,ot)|0,n=n+Math.imul(b,lt)|0,i=(i=i+Math.imul(b,ct)|0)+Math.imul(_,lt)|0,a=a+Math.imul(_,ct)|0,n=n+Math.imul(v,ft)|0,i=(i=i+Math.imul(v,ht)|0)+Math.imul(y,ft)|0,a=a+Math.imul(y,ht)|0;var Mt=(c+(n=n+Math.imul(d,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(d,mt)|0)+Math.imul(m,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(m,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Mt&gt;&gt;&gt;26)|0,Mt&amp;=67108863,n=Math.imul(B,W),i=(i=Math.imul(B,Z))+Math.imul(N,W)|0,a=Math.imul(N,Z),n=n+Math.imul(D,J)|0,i=(i=i+Math.imul(D,K)|0)+Math.imul(R,J)|0,a=a+Math.imul(R,K)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(O,$)|0,a=a+Math.imul(O,tt)|0,n=n+Math.imul(L,rt)|0,i=(i=i+Math.imul(L,nt)|0)+Math.imul(C,rt)|0,a=a+Math.imul(C,nt)|0,n=n+Math.imul(M,at)|0,i=(i=i+Math.imul(M,ot)|0)+Math.imul(S,at)|0,a=a+Math.imul(S,ot)|0,n=n+Math.imul(T,lt)|0,i=(i=i+Math.imul(T,ct)|0)+Math.imul(k,lt)|0,a=a+Math.imul(k,ct)|0,n=n+Math.imul(b,ft)|0,i=(i=i+Math.imul(b,ht)|0)+Math.imul(_,ft)|0,a=a+Math.imul(_,ht)|0;var St=(c+(n=n+Math.imul(v,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(v,mt)|0)+Math.imul(y,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(y,mt)|0)+(i&gt;&gt;&gt;13)|0)+(St&gt;&gt;&gt;26)|0,St&amp;=67108863,n=Math.imul(B,J),i=(i=Math.imul(B,K))+Math.imul(N,J)|0,a=Math.imul(N,K),n=n+Math.imul(D,$)|0,i=(i=i+Math.imul(D,tt)|0)+Math.imul(R,$)|0,a=a+Math.imul(R,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(O,rt)|0,a=a+Math.imul(O,nt)|0,n=n+Math.imul(L,at)|0,i=(i=i+Math.imul(L,ot)|0)+Math.imul(C,at)|0,a=a+Math.imul(C,ot)|0,n=n+Math.imul(M,lt)|0,i=(i=i+Math.imul(M,ct)|0)+Math.imul(S,lt)|0,a=a+Math.imul(S,ct)|0,n=n+Math.imul(T,ft)|0,i=(i=i+Math.imul(T,ht)|0)+Math.imul(k,ft)|0,a=a+Math.imul(k,ht)|0;var Et=(c+(n=n+Math.imul(b,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(b,mt)|0)+Math.imul(_,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(_,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Et&gt;&gt;&gt;26)|0,Et&amp;=67108863,n=Math.imul(B,$),i=(i=Math.imul(B,tt))+Math.imul(N,$)|0,a=Math.imul(N,tt),n=n+Math.imul(D,rt)|0,i=(i=i+Math.imul(D,nt)|0)+Math.imul(R,rt)|0,a=a+Math.imul(R,nt)|0,n=n+Math.imul(I,at)|0,i=(i=i+Math.imul(I,ot)|0)+Math.imul(O,at)|0,a=a+Math.imul(O,ot)|0,n=n+Math.imul(L,lt)|0,i=(i=i+Math.imul(L,ct)|0)+Math.imul(C,lt)|0,a=a+Math.imul(C,ct)|0,n=n+Math.imul(M,ft)|0,i=(i=i+Math.imul(M,ht)|0)+Math.imul(S,ft)|0,a=a+Math.imul(S,ht)|0;var Lt=(c+(n=n+Math.imul(T,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(T,mt)|0)+Math.imul(k,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(k,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Lt&gt;&gt;&gt;26)|0,Lt&amp;=67108863,n=Math.imul(B,rt),i=(i=Math.imul(B,nt))+Math.imul(N,rt)|0,a=Math.imul(N,nt),n=n+Math.imul(D,at)|0,i=(i=i+Math.imul(D,ot)|0)+Math.imul(R,at)|0,a=a+Math.imul(R,ot)|0,n=n+Math.imul(I,lt)|0,i=(i=i+Math.imul(I,ct)|0)+Math.imul(O,lt)|0,a=a+Math.imul(O,ct)|0,n=n+Math.imul(L,ft)|0,i=(i=i+Math.imul(L,ht)|0)+Math.imul(C,ft)|0,a=a+Math.imul(C,ht)|0;var Ct=(c+(n=n+Math.imul(M,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(M,mt)|0)+Math.imul(S,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(S,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Ct&gt;&gt;&gt;26)|0,Ct&amp;=67108863,n=Math.imul(B,at),i=(i=Math.imul(B,ot))+Math.imul(N,at)|0,a=Math.imul(N,ot),n=n+Math.imul(D,lt)|0,i=(i=i+Math.imul(D,ct)|0)+Math.imul(R,lt)|0,a=a+Math.imul(R,ct)|0,n=n+Math.imul(I,ft)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(O,ft)|0,a=a+Math.imul(O,ht)|0;var Pt=(c+(n=n+Math.imul(L,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(L,mt)|0)+Math.imul(C,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(C,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Pt&gt;&gt;&gt;26)|0,Pt&amp;=67108863,n=Math.imul(B,lt),i=(i=Math.imul(B,ct))+Math.imul(N,lt)|0,a=Math.imul(N,ct),n=n+Math.imul(D,ft)|0,i=(i=i+Math.imul(D,ht)|0)+Math.imul(R,ft)|0,a=a+Math.imul(R,ht)|0;var It=(c+(n=n+Math.imul(I,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(I,mt)|0)+Math.imul(O,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(O,mt)|0)+(i&gt;&gt;&gt;13)|0)+(It&gt;&gt;&gt;26)|0,It&amp;=67108863,n=Math.imul(B,ft),i=(i=Math.imul(B,ht))+Math.imul(N,ft)|0,a=Math.imul(N,ht);var Ot=(c+(n=n+Math.imul(D,dt)|0)|0)+((8191&amp;(i=(i=i+Math.imul(D,mt)|0)+Math.imul(R,dt)|0))&lt;&lt;13)|0;c=((a=a+Math.imul(R,mt)|0)+(i&gt;&gt;&gt;13)|0)+(Ot&gt;&gt;&gt;26)|0,Ot&amp;=67108863;var zt=(c+(n=Math.imul(B,dt))|0)+((8191&amp;(i=(i=Math.imul(B,mt))+Math.imul(N,dt)|0))&lt;&lt;13)|0;return c=((a=Math.imul(N,mt))+(i&gt;&gt;&gt;13)|0)+(zt&gt;&gt;&gt;26)|0,zt&amp;=67108863,l[0]=gt,l[1]=vt,l[2]=yt,l[3]=xt,l[4]=bt,l[5]=_t,l[6]=wt,l[7]=Tt,l[8]=kt,l[9]=At,l[10]=Mt,l[11]=St,l[12]=Et,l[13]=Lt,l[14]=Ct,l[15]=Pt,l[16]=It,l[17]=Ot,l[18]=zt,0!==c&amp;&amp;(l[19]=c,r.length++),r};function m(t,e,r){return(new g).mulp(t,e,r)}function g(t,e){this.x=t,this.y=e}Math.imul||(d=p),a.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&amp;&amp;10===t.length?d(this,t,e):r&lt;63?p(this,t,e):r&lt;1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,a=0;a&gt;&gt;26)|0)&gt;&gt;&gt;26,o&amp;=67108863}r.words[a]=s,n=o,o=i}return 0!==n?r.words[a]=n:r.length--,r.strip()}(this,t,e):m(this,t,e)},g.prototype.makeRBT=function(t){for(var e=new Array(t),r=a.prototype._countBits(t)-1,n=0;n&gt;=1;return n},g.prototype.permute=function(t,e,r,n,i,a){for(var o=0;o&gt;&gt;=1)i++;return 1&lt;&gt;&gt;=13,r[2*o+1]=8191&amp;a,a&gt;&gt;&gt;=13;for(o=2*e;o&gt;=26,e+=i/67108864|0,e+=a&gt;&gt;&gt;26,this.words[r]=67108863&amp;a}return 0!==e&amp;&amp;(this.words[r]=e,this.length++),this},a.prototype.muln=function(t){return this.clone().imuln(t)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r&gt;&gt;i}return e}(t);if(0===e.length)return new a(1);for(var r=this,n=0;n=0);var e,r=t%26,i=(t-r)/26,a=67108863&gt;&gt;&gt;26-r&lt;&lt;26-r;if(0!==r){var o=0;for(e=0;e&gt;&gt;26-r}o&amp;&amp;(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e&gt;=0;e--)this.words[e+i]=this.words[e];for(e=0;e=0),i=e?(e-e%26)/26:0;var a=t%26,o=Math.min((t-a)/26,this.length),s=67108863^67108863&gt;&gt;&gt;a&lt;o)for(this.length-=o,c=0;c=0&amp;&amp;(0!==u||c&gt;=i);c--){var f=0|this.words[c];this.words[c]=u&lt;&lt;26-a|f&gt;&gt;&gt;a,u=f&amp;s}return l&amp;&amp;0!==u&amp;&amp;(l.words[l.length++]=u),0===this.length&amp;&amp;(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},a.prototype.shln=function(t){return this.clone().ishln(t)},a.prototype.ushln=function(t){return this.clone().iushln(t)},a.prototype.shrn=function(t){return this.clone().ishrn(t)},a.prototype.ushrn=function(t){return this.clone().iushrn(t)},a.prototype.testn=function(t){n(\"number\"==typeof t&amp;&amp;t&gt;=0);var e=t%26,r=(t-e)/26,i=1&lt;=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,\"imaskn works only with positive numbers\"),this.length&lt;=r)return this;if(0!==e&amp;&amp;r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863&gt;&gt;&gt;e&lt;=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},a.prototype.isubn=function(t){if(n(\"number\"==typeof t),n(t&lt;67108864),t&lt;0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&amp;&amp;this.words[0]&lt;0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e&gt;26)-(l/67108864|0),this.words[i+r]=67108863&amp;a}for(;i&gt;26,this.words[i+r]=67108863&amp;a;if(0===s)return this.strip();for(n(-1===s),s=0,i=0;i&gt;26,this.words[i]=67108863&amp;a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,o=0|i.words[i.length-1];0!==(r=26-this._countBits(o))&amp;&amp;(i=i.ushln(r),n.iushln(r),o=0|i.words[i.length-1]);var s,l=n.length-i.length;if(\"mod\"!==e){(s=new a(null)).length=l+1,s.words=new Array(s.length);for(var c=0;c=0;f--){var h=67108864*(0|n.words[i.length+f])+(0|n.words[i.length+f-1]);for(h=Math.min(h/o|0,67108863),n._ishlnsubmul(i,h,f);0!==n.negative;)h--,n.negative=0,n._ishlnsubmul(i,1,f),n.isZero()||(n.negative^=1);s&amp;&amp;(s.words[f]=h)}return s&amp;&amp;s.strip(),n.strip(),\"div\"!==e&amp;&amp;0!==r&amp;&amp;n.iushrn(r),{div:s||null,mod:n}},a.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&amp;&amp;0===t.negative?(s=this.neg().divmod(t,e),\"mod\"!==e&amp;&amp;(i=s.div.neg()),\"div\"!==e&amp;&amp;(o=s.mod.neg(),r&amp;&amp;0!==o.negative&amp;&amp;o.iadd(t)),{div:i,mod:o}):0===this.negative&amp;&amp;0!==t.negative?(s=this.divmod(t.neg(),e),\"mod\"!==e&amp;&amp;(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&amp;t.negative)?(s=this.neg().divmod(t.neg(),e),\"div\"!==e&amp;&amp;(o=s.mod.neg(),r&amp;&amp;0!==o.negative&amp;&amp;o.isub(t)),{div:s.div,mod:o}):t.length&gt;this.length||this.cmp(t)&lt;0?{div:new a(0),mod:this}:1===t.length?\"div\"===e?{div:this.divn(t.words[0]),mod:null}:\"mod\"===e?{div:null,mod:new a(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new a(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,o,s},a.prototype.div=function(t){return this.divmod(t,\"div\",!1).div},a.prototype.mod=function(t){return this.divmod(t,\"mod\",!1).mod},a.prototype.umod=function(t){return this.divmod(t,\"mod\",!0).mod},a.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),a=r.cmp(n);return a&lt;0||1===i&amp;&amp;0===a?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},a.prototype.modn=function(t){n(t&lt;=67108863);for(var e=(1&lt;&lt;26)%t,r=0,i=this.length-1;i&gt;=0;i--)r=(e*r+(0|this.words[i]))%t;return r},a.prototype.idivn=function(t){n(t&lt;=67108863);for(var e=0,r=this.length-1;r&gt;=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},a.prototype.divn=function(t){return this.clone().idivn(t)},a.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new a(1),o=new a(0),s=new a(0),l=new a(1),c=0;e.isEven()&amp;&amp;r.isEven();)e.iushrn(1),r.iushrn(1),++c;for(var u=r.clone(),f=e.clone();!e.isZero();){for(var h=0,p=1;0==(e.words[0]&amp;p)&amp;&amp;h&lt;26;++h,p&lt;&lt;=1);if(h&gt;0)for(e.iushrn(h);h-- &gt;0;)(i.isOdd()||o.isOdd())&amp;&amp;(i.iadd(u),o.isub(f)),i.iushrn(1),o.iushrn(1);for(var d=0,m=1;0==(r.words[0]&amp;m)&amp;&amp;d&lt;26;++d,m&lt;&lt;=1);if(d&gt;0)for(r.iushrn(d);d-- &gt;0;)(s.isOdd()||l.isOdd())&amp;&amp;(s.iadd(u),l.isub(f)),s.iushrn(1),l.iushrn(1);e.cmp(r)&gt;=0?(e.isub(r),i.isub(s),o.isub(l)):(r.isub(e),s.isub(i),l.isub(o))}return{a:s,b:l,gcd:r.iushln(c)}},a.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,o=new a(1),s=new a(0),l=r.clone();e.cmpn(1)&gt;0&amp;&amp;r.cmpn(1)&gt;0;){for(var c=0,u=1;0==(e.words[0]&amp;u)&amp;&amp;c&lt;26;++c,u&lt;&lt;=1);if(c&gt;0)for(e.iushrn(c);c-- &gt;0;)o.isOdd()&amp;&amp;o.iadd(l),o.iushrn(1);for(var f=0,h=1;0==(r.words[0]&amp;h)&amp;&amp;f&lt;26;++f,h&lt;&lt;=1);if(f&gt;0)for(r.iushrn(f);f-- &gt;0;)s.isOdd()&amp;&amp;s.iadd(l),s.iushrn(1);e.cmp(r)&gt;=0?(e.isub(r),o.isub(s)):(r.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)&lt;0&amp;&amp;i.iadd(t),i},a.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&amp;&amp;r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i&lt;0){var a=e;e=r,r=a}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},a.prototype.invm=function(t){return this.egcd(t).a.umod(t)},a.prototype.isEven=function(){return 0==(1&amp;this.words[0])},a.prototype.isOdd=function(){return 1==(1&amp;this.words[0])},a.prototype.andln=function(t){return this.words[0]&amp;t},a.prototype.bincn=function(t){n(\"number\"==typeof t);var e=t%26,r=(t-e)/26,i=1&lt;&gt;&gt;26,s&amp;=67108863,this.words[o]=s}return 0!==a&amp;&amp;(this.words[o]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&amp;&amp;0===this.words[0]},a.prototype.cmpn=function(t){var e,r=t&lt;0;if(0!==this.negative&amp;&amp;!r)return-1;if(0===this.negative&amp;&amp;r)return 1;if(this.strip(),this.length&gt;1)e=1;else{r&amp;&amp;(t=-t),n(t&lt;=67108863,\"Number is too big\");var i=0|this.words[0];e=i===t?0:it.length)return 1;if(this.length=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){ni&amp;&amp;(e=1);break}}return e},a.prototype.gtn=function(t){return 1===this.cmpn(t)},a.prototype.gt=function(t){return 1===this.cmp(t)},a.prototype.gten=function(t){return this.cmpn(t)&gt;=0},a.prototype.gte=function(t){return this.cmp(t)&gt;=0},a.prototype.ltn=function(t){return-1===this.cmpn(t)},a.prototype.lt=function(t){return-1===this.cmp(t)},a.prototype.lten=function(t){return this.cmpn(t)&lt;=0},a.prototype.lte=function(t){return this.cmp(t)&lt;=0},a.prototype.eqn=function(t){return 0===this.cmpn(t)},a.prototype.eq=function(t){return 0===this.cmp(t)},a.red=function(t){return new T(t)},a.prototype.toRed=function(t){return n(!this.red,\"Already a number in reduction context\"),n(0===this.negative,\"red works only with positives\"),t.convertTo(this)._forceRed(t)},a.prototype.fromRed=function(){return n(this.red,\"fromRed works only with numbers in reduction context\"),this.red.convertFrom(this)},a.prototype._forceRed=function(t){return this.red=t,this},a.prototype.forceRed=function(t){return n(!this.red,\"Already a number in reduction context\"),this._forceRed(t)},a.prototype.redAdd=function(t){return n(this.red,\"redAdd works only with red numbers\"),this.red.add(this,t)},a.prototype.redIAdd=function(t){return n(this.red,\"redIAdd works only with red numbers\"),this.red.iadd(this,t)},a.prototype.redSub=function(t){return n(this.red,\"redSub works only with red numbers\"),this.red.sub(this,t)},a.prototype.redISub=function(t){return n(this.red,\"redISub works only with red numbers\"),this.red.isub(this,t)},a.prototype.redShl=function(t){return n(this.red,\"redShl works only with red numbers\"),this.red.shl(this,t)},a.prototype.redMul=function(t){return n(this.red,\"redMul works only with red numbers\"),this.red._verify2(this,t),this.red.mul(this,t)},a.prototype.redIMul=function(t){return n(this.red,\"redMul works only with red numbers\"),this.red._verify2(this,t),this.red.imul(this,t)},a.prototype.redSqr=function(){return n(this.red,\"redSqr works only with red numbers\"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return n(this.red,\"redISqr works only with red numbers\"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return n(this.red,\"redSqrt works only with red numbers\"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return n(this.red,\"redInvm works only with red numbers\"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return n(this.red,\"redNeg works only with red numbers\"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(t){return n(this.red&amp;&amp;!t.red,\"redPow(normalNum)\"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new a(e,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function x(){y.call(this,\"k256\",\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\")}function b(){y.call(this,\"p224\",\"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\")}function _(){y.call(this,\"p192\",\"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\")}function w(){y.call(this,\"25519\",\"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\")}function T(t){if(\"string\"==typeof t){var e=a._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),\"modulus must be greater than 1\"),this.m=t,this.prime=null}function k(t){T.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&amp;&amp;(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new a(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e&gt;this.n);var n=e0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(x,y),x.prototype.split=function(t,e){for(var r=Math.min(t.length,9),n=0;n&gt;&gt;22,i=a}i&gt;&gt;&gt;=22,t.words[n-10]=i,0===i&amp;&amp;t.length&gt;10?t.length-=10:t.length-=9},x.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r&gt;&gt;=26,t.words[r]=i,e=n}return 0!==e&amp;&amp;(t.words[t.length++]=e),t},a._prime=function(t){if(v[t])return v[t];var e;if(\"k256\"===t)e=new x;else if(\"p224\"===t)e=new b;else if(\"p192\"===t)e=new _;else{if(\"p25519\"!==t)throw new Error(\"Unknown prime \"+t);e=new w}return v[t]=e,e},T.prototype._verify1=function(t){n(0===t.negative,\"red works only with positives\"),n(t.red,\"red works only with red numbers\")},T.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),\"red works only with positives\"),n(t.red&amp;&amp;t.red===e.red,\"red works only with red numbers\")},T.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},T.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},T.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)&gt;=0&amp;&amp;r.isub(this.m),r._forceRed(this)},T.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)&gt;=0&amp;&amp;r.isub(this.m),r},T.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)&lt;0&amp;&amp;r.iadd(this.m),r._forceRed(this)},T.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)&lt;0&amp;&amp;r.iadd(this.m),r},T.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},T.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},T.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},T.prototype.isqr=function(t){return this.imul(t,t.clone())},T.prototype.sqr=function(t){return this.mul(t,t)},T.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new a(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),o=0;!i.isZero()&amp;&amp;0===i.andln(1);)o++,i.iushrn(1);n(!i.isZero());var s=new a(1).toRed(this),l=s.redNeg(),c=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new a(2*u*u).toRed(this);0!==this.pow(u,c).cmp(l);)u.redIAdd(l);for(var f=this.pow(u,i),h=this.pow(t,i.addn(1).iushrn(1)),p=this.pow(t,i),d=o;0!==p.cmp(s);){for(var m=p,g=0;0!==m.cmp(s);g++)m=m.redSqr();n(g=0;n--){for(var c=e.words[n],u=l-1;u&gt;=0;u--){var f=c&gt;&gt;u&amp;1;i!==r[0]&amp;&amp;(i=this.sqr(i)),0!==f||0!==o?(o&lt;&lt;=1,o|=f,(4===++s||0===n&amp;&amp;0===u)&amp;&amp;(i=this.mul(i,r[o]),s=0,o=0)):s=0}l=26}return i},T.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},T.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},a.mont=function(t){return new k(t)},i(k,T),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)&gt;=0?a=i.isub(this.m):i.cmpn(0)&lt;0&amp;&amp;(a=i.iadd(this.m)),a._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new a(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)&gt;=0?o=i.isub(this.m):i.cmpn(0)&lt;0&amp;&amp;(o=i.iadd(this.m)),o._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(void 0===e||e,this)},{buffer:2}],34:[function(t,e,r){\"use strict\";e.exports=function(t){var e,r,n,i=t.length,a=0;for(e=0;e&gt;&gt;1;if(!(u&lt;=0)){var f,h=i.mallocDouble(2*u*s),p=i.mallocInt32(s);if((s=l(t,u,h,p))&gt;0){if(1===u&amp;&amp;n)a.init(s),f=a.sweepComplete(u,r,0,s,h,p,0,s,h,p);else{var d=i.mallocDouble(2*u*c),m=i.mallocInt32(c);(c=l(e,u,d,m))&gt;0&amp;&amp;(a.init(s+c),f=1===u?a.sweepBipartite(u,r,0,s,h,p,0,c,d,m):o(u,r,n,s,h,p,c,d,m),i.free(d),i.free(m))}i.free(h),i.free(p)}return f}}}function u(t,e){n.push([t,e])}function f(t){return n=[],c(t,t,u,!0),n}function h(t,e){return n=[],c(t,e,u,!1),n}},{\"./lib/intersect\":37,\"./lib/sweep\":41,\"typedarray-pool\":308}],36:[function(t,e,r){\"use strict\";function n(t){return t?function(t,e,r,n,i,a,o,s,l,c,u){return i-n&gt;l-s?function(t,e,r,n,i,a,o,s,l,c,u){for(var f=2*t,h=n,p=f*n;hc-l?n?function(t,e,r,n,i,a,o,s,l,c,u){for(var f=2*t,h=n,p=f*n;h0;){var L=6*(S-=1),C=v[L],P=v[L+1],I=v[L+2],O=v[L+3],z=v[L+4],D=v[L+5],R=2*S,F=y[R],B=y[R+1],N=1&amp;D,j=!!(16&amp;D),U=u,V=w,H=k,q=A;if(N&amp;&amp;(U=k,V=A,H=u,q=w),!(2&amp;D&amp;&amp;(I=p(t,C,P,I,U,V,B),P&gt;=I)||4&amp;D&amp;&amp;(P=d(t,C,P,I,U,V,F))&gt;=I)){var G=I-P,Y=z-O;if(j){if(t*G*(G+Y)&lt;1&lt;&lt;22){if(void 0!==(M=l.scanComplete(t,C,e,P,I,U,V,O,z,H,q)))return M;continue}}else{if(t*Math.min(G,Y)&lt;128){if(void 0!==(M=o(t,C,e,N,P,I,U,V,O,z,H,q)))return M;continue}if(t*G*Y&lt;1&lt;&lt;22){if(void 0!==(M=l.scanBipartite(t,C,e,N,P,I,U,V,O,z,H,q)))return M;continue}}var W=f(t,C,P,I,U,V,F,B);if(P=p0)&amp;&amp;!(p1&gt;=hi)\"),h=u(\"lo===p0\"),p=u(\"lo&gt;&gt;1,f=2*t,h=u,p=o[f*u+e];for(;l=y?(h=v,p=y):g&gt;=b?(h=m,p=g):(h=x,p=b):y&gt;=b?(h=v,p=y):b&gt;=g?(h=m,p=g):(h=x,p=b);for(var _=f*(c-1),w=f*h,T=0;Tr&amp;&amp;i[f+e]&gt;c;--u,f-=o){for(var h=f,p=f+o,d=0;dh;++h,l+=s){if(i[l+f]===o)if(u===h)u+=1,c+=s;else{for(var p=0;s&gt;p;++p){var d=i[l+p];i[l+p]=i[c],i[c++]=d}var m=a[h];a[h]=a[u],a[u++]=m}}return u},\"loh;++h,l+=s){if(i[l+f]p;++p){var d=i[l+p];i[l+p]=i[c],i[c++]=d}var m=a[h];a[h]=a[u],a[u++]=m}}return u},\"lo&lt;=p0\":function(t,e,r,n,i,a,o){for(var s=2*t,l=s*r,c=l,u=r,f=t+e,h=r;n&gt;h;++h,l+=s){if(i[l+f]&lt;=o)if(u===h)u+=1,c+=s;else{for(var p=0;s&gt;p;++p){var d=i[l+p];i[l+p]=i[c],i[c++]=d}var m=a[h];a[h]=a[u],a[u++]=m}}return u},\"hi&lt;=p0\":function(t,e,r,n,i,a,o){for(var s=2*t,l=s*r,c=l,u=r,f=t+e,h=r;n&gt;h;++h,l+=s){if(i[l+f]&lt;=o)if(u===h)u+=1,c+=s;else{for(var p=0;s&gt;p;++p){var d=i[l+p];i[l+p]=i[c],i[c++]=d}var m=a[h];a[h]=a[u],a[u++]=m}}return u},\"lop;++p,l+=s){var d=i[l+f],m=i[l+h];if(dg;++g){var v=i[l+g];i[l+g]=i[c],i[c++]=v}var y=a[p];a[p]=a[u],a[u++]=y}}return u},\"lo&lt;=p0&amp;&amp;p0&lt;=hi\":function(t,e,r,n,i,a,o){for(var s=2*t,l=s*r,c=l,u=r,f=e,h=t+e,p=r;n&gt;p;++p,l+=s){var d=i[l+f],m=i[l+h];if(d&lt;=o&amp;&amp;o&lt;=m)if(u===p)u+=1,c+=s;else{for(var g=0;s&gt;g;++g){var v=i[l+g];i[l+g]=i[c],i[c++]=v}var y=a[p];a[p]=a[u],a[u++]=y}}return u},\"!(lo&gt;=p0)&amp;&amp;!(p1&gt;=hi)\":function(t,e,r,n,i,a,o,s){for(var l=2*t,c=l*r,u=c,f=r,h=e,p=t+e,d=r;n&gt;d;++d,c+=l){var m=i[c+h],g=i[c+p];if(!(m&gt;=o||s&gt;=g))if(f===d)f+=1,u+=l;else{for(var v=0;l&gt;v;++v){var y=i[c+v];i[c+v]=i[u],i[u++]=y}var x=a[d];a[d]=a[f],a[f++]=x}}return f}}},{}],40:[function(t,e,r){\"use strict\";e.exports=function(t,e){e&lt;=128?n(0,e-1,t):function t(e,r,u){var f=(r-e+1)/6|0,h=e+f,p=r-f,d=e+r&gt;&gt;1,m=d-f,g=d+f,v=h,y=m,x=d,b=g,_=p,w=e+1,T=r-1,k=0;l(v,y,u)&amp;&amp;(k=v,v=y,y=k);l(b,_,u)&amp;&amp;(k=b,b=_,_=k);l(v,x,u)&amp;&amp;(k=v,v=x,x=k);l(y,x,u)&amp;&amp;(k=y,y=x,x=k);l(v,b,u)&amp;&amp;(k=v,v=b,b=k);l(x,b,u)&amp;&amp;(k=x,x=b,b=k);l(y,_,u)&amp;&amp;(k=y,y=_,_=k);l(y,x,u)&amp;&amp;(k=y,y=x,x=k);l(b,_,u)&amp;&amp;(k=b,b=_,_=k);for(var A=u[2*y],M=u[2*y+1],S=u[2*b],E=u[2*b+1],L=2*v,C=2*x,P=2*_,I=2*h,O=2*d,z=2*p,D=0;D&lt;2;++D){var R=u[L+D],F=u[C+D],B=u[P+D];u[I+D]=R,u[O+D]=F,u[z+D]=B}a(m,e,u),a(g,r,u);for(var N=w;N&lt;=T;++N)if(c(N,A,M,u))N!==w&amp;&amp;i(N,w,u),++w;else if(!c(N,S,E,u))for(;;){if(c(T,S,E,u)){c(T,A,M,u)?(o(N,w,T,u),++w,--T):(i(N,T,u),--T);break}if(--Tt;){var c=r[l-2],u=r[l-1];if(cr[e+1])}function c(t,e,r,n){var i=n[t*=2];return i&gt;&gt;1;a(h,M);var S=0,E=0;for(w=0;w=1&lt;&lt;28)p(l,c,E--,L=L-(1&lt;&lt;28)|0);else if(L&gt;=0)p(o,s,S--,L);else if(L&lt;=-(1&lt;&lt;28)){L=-L-(1&lt;&lt;28)|0;for(var C=0;C&gt;&gt;1;a(h,E);var L=0,C=0,P=0;for(k=0;k&gt;1==h[2*k+3]&gt;&gt;1&amp;&amp;(O=2,k+=1),I&lt;0){for(var z=-(I&gt;&gt;1)-1,D=0;D&gt;1)-1;0===O?p(o,s,L--,z):1===O?p(l,c,C--,z):2===O&amp;&amp;p(u,f,P--,z)}}},scanBipartite:function(t,e,r,n,i,l,c,u,f,m,g,v){var y=0,x=2*t,b=e,_=e+t,w=1,T=1;n?T=1&lt;&lt;28:w=1&lt;&lt;28;for(var k=i;k&gt;&gt;1;a(h,E);var L=0;for(k=0;k=1&lt;&lt;28?(P=!n,A-=1&lt;&lt;28):(P=!!n,A-=1),P)d(o,s,L++,A);else{var I=v[A],O=x*A,z=g[O+e+1],D=g[O+e+1+t];t:for(var R=0;R&gt;&gt;1;a(h,w);var T=0;for(y=0;y=1&lt;&lt;28)o[T++]=x-(1&lt;&lt;28);else{var A=p[x-=1],M=m*x,S=f[M+e+1],E=f[M+e+1+t];t:for(var L=0;L=0;--L)if(o[L]===x){for(O=L+1;O0;){for(var p=r.pop(),d=(s=r.pop(),u=-1,f=-1,l=o[s],1);d=0||(e.flip(s,p),i(t,e,r,u,s,f),i(t,e,r,s,f,u),i(t,e,r,f,p,u),i(t,e,r,p,u,f)))}}},{\"binary-search-bounds\":31,\"robust-in-sphere\":282}],44:[function(t,e,r){\"use strict\";var n,i=t(\"binary-search-bounds\");function a(t,e,r,n,i,a,o){this.cells=t,this.neighbor=e,this.flags=n,this.constraint=r,this.active=i,this.next=a,this.boundary=o}function o(t,e){return t[0]-e[0]||t[1]-e[1]||t[2]-e[2]}e.exports=function(t,e,r){var n=function(t,e){for(var r=t.cells(),n=r.length,i=0;i0||l.length&gt;0;){for(;s.length&gt;0;){var p=s.pop();if(c[p]!==-i){c[p]=i;u[p];for(var d=0;d&lt;3;++d){var m=h[3*p+d];m&gt;=0&amp;&amp;0===c[m]&amp;&amp;(f[3*p+d]?l.push(m):(s.push(m),c[m]=i))}}}var g=l;l=s,s=g,l.length=0,i=-i}var v=function(t,e,r){for(var n=0,i=0;i1&amp;&amp;i(r[h[p-2]],r[h[p-1]],a)&gt;0;)t.push([h[p-1],h[p-2],o]),p-=1;h.length=p,h.push(o);var d=f.upperIds;for(p=d.length;p&gt;1&amp;&amp;i(r[d[p-2]],r[d[p-1]],a)&lt;0;)t.push([d[p-2],d[p-1],o]),p-=1;d.length=p,d.push(o)}}function u(t,e){var r;return(r=t.a[0]d[0]&amp;&amp;i.push(new o(d,p,2,l),new o(p,d,1,l))}i.sort(s);for(var m=i[0].a[0]-(1+Math.abs(i[0].a[0]))*Math.pow(2,-52),g=[new a([m,1],[m,0],-1,[],[],[],[])],v=[],y=(l=0,i.length);l=0}}(),a.removeTriangle=function(t,e,r){var n=this.stars;o(n[t],e,r),o(n[e],r,t),o(n[r],t,e)},a.addTriangle=function(t,e,r){var n=this.stars;n[t].push(e,r),n[e].push(r,t),n[r].push(t,e)},a.opposite=function(t,e){for(var r=this.stars[e],n=1,i=r.length;ne[2]?1:0)}function v(t,e,r){if(0!==t.length){if(e)for(var n=0;n=0;--a){var x=e[u=(S=n[a])[0]],b=x[0],_=x[1],w=t[b],T=t[_];if((w[0]-T[0]||w[1]-T[1])&lt;0){var k=b;b=_,_=k}x[0]=b;var A,M=x[1]=S[1];for(i&amp;&amp;(A=x[2]);a&gt;0&amp;&amp;n[a-1][0]===u;){var S,E=(S=n[--a])[1];i?e.push([M,E,A]):e.push([M,E]),M=E}i?e.push([M,_,A]):e.push([M,_])}return h}(t,e,h,g,r));return v(e,y,r),!!y||(h.length&gt;0||g.length&gt;0)}},{\"./lib/rat-seg-intersect\":51,\"big-rat\":18,\"big-rat/cmp\":16,\"big-rat/to-float\":30,\"box-intersect\":35,nextafter:260,\"rat-vec\":273,\"robust-segment-intersect\":287,\"union-find\":309}],51:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n){var a=s(e,t),f=s(n,r),h=u(a,f);if(0===o(h))return null;var p=s(t,r),d=u(f,p),m=i(d,h),g=c(a,m);return l(t,g)};var n=t(\"big-rat/mul\"),i=t(\"big-rat/div\"),a=t(\"big-rat/sub\"),o=t(\"big-rat/sign\"),s=t(\"rat-vec/sub\"),l=t(\"rat-vec/add\"),c=t(\"rat-vec/muls\");function u(t,e){return a(n(t[0],e[1]),n(t[1],e[0]))}},{\"big-rat/div\":17,\"big-rat/mul\":27,\"big-rat/sign\":28,\"big-rat/sub\":29,\"rat-vec/add\":272,\"rat-vec/muls\":274,\"rat-vec/sub\":275}],52:[function(t,e,r){e.exports={jet:[{index:0,rgb:[0,0,131]},{index:.125,rgb:[0,60,170]},{index:.375,rgb:[5,255,255]},{index:.625,rgb:[255,255,0]},{index:.875,rgb:[250,0,0]},{index:1,rgb:[128,0,0]}],hsv:[{index:0,rgb:[255,0,0]},{index:.169,rgb:[253,255,2]},{index:.173,rgb:[247,255,2]},{index:.337,rgb:[0,252,4]},{index:.341,rgb:[0,252,10]},{index:.506,rgb:[1,249,255]},{index:.671,rgb:[2,0,253]},{index:.675,rgb:[8,0,253]},{index:.839,rgb:[255,0,251]},{index:.843,rgb:[255,0,245]},{index:1,rgb:[255,0,6]}],hot:[{index:0,rgb:[0,0,0]},{index:.3,rgb:[230,0,0]},{index:.6,rgb:[255,210,0]},{index:1,rgb:[255,255,255]}],spring:[{index:0,rgb:[255,0,255]},{index:1,rgb:[255,255,0]}],summer:[{index:0,rgb:[0,128,102]},{index:1,rgb:[255,255,102]}],autumn:[{index:0,rgb:[255,0,0]},{index:1,rgb:[255,255,0]}],winter:[{index:0,rgb:[0,0,255]},{index:1,rgb:[0,255,128]}],bone:[{index:0,rgb:[0,0,0]},{index:.376,rgb:[84,84,116]},{index:.753,rgb:[169,200,200]},{index:1,rgb:[255,255,255]}],copper:[{index:0,rgb:[0,0,0]},{index:.804,rgb:[255,160,102]},{index:1,rgb:[255,199,127]}],greys:[{index:0,rgb:[0,0,0]},{index:1,rgb:[255,255,255]}],yignbu:[{index:0,rgb:[8,29,88]},{index:.125,rgb:[37,52,148]},{index:.25,rgb:[34,94,168]},{index:.375,rgb:[29,145,192]},{index:.5,rgb:[65,182,196]},{index:.625,rgb:[127,205,187]},{index:.75,rgb:[199,233,180]},{index:.875,rgb:[237,248,217]},{index:1,rgb:[255,255,217]}],greens:[{index:0,rgb:[0,68,27]},{index:.125,rgb:[0,109,44]},{index:.25,rgb:[35,139,69]},{index:.375,rgb:[65,171,93]},{index:.5,rgb:[116,196,118]},{index:.625,rgb:[161,217,155]},{index:.75,rgb:[199,233,192]},{index:.875,rgb:[229,245,224]},{index:1,rgb:[247,252,245]}],yiorrd:[{index:0,rgb:[128,0,38]},{index:.125,rgb:[189,0,38]},{index:.25,rgb:[227,26,28]},{index:.375,rgb:[252,78,42]},{index:.5,rgb:[253,141,60]},{index:.625,rgb:[254,178,76]},{index:.75,rgb:[254,217,118]},{index:.875,rgb:[255,237,160]},{index:1,rgb:[255,255,204]}],bluered:[{index:0,rgb:[0,0,255]},{index:1,rgb:[255,0,0]}],rdbu:[{index:0,rgb:[5,10,172]},{index:.35,rgb:[106,137,247]},{index:.5,rgb:[190,190,190]},{index:.6,rgb:[220,170,132]},{index:.7,rgb:[230,145,90]},{index:1,rgb:[178,10,28]}],picnic:[{index:0,rgb:[0,0,255]},{index:.1,rgb:[51,153,255]},{index:.2,rgb:[102,204,255]},{index:.3,rgb:[153,204,255]},{index:.4,rgb:[204,204,255]},{index:.5,rgb:[255,255,255]},{index:.6,rgb:[255,204,255]},{index:.7,rgb:[255,153,255]},{index:.8,rgb:[255,102,204]},{index:.9,rgb:[255,102,102]},{index:1,rgb:[255,0,0]}],rainbow:[{index:0,rgb:[150,0,90]},{index:.125,rgb:[0,0,200]},{index:.25,rgb:[0,25,255]},{index:.375,rgb:[0,152,255]},{index:.5,rgb:[44,255,150]},{index:.625,rgb:[151,255,0]},{index:.75,rgb:[255,234,0]},{index:.875,rgb:[255,111,0]},{index:1,rgb:[255,0,0]}],portland:[{index:0,rgb:[12,51,131]},{index:.25,rgb:[10,136,186]},{index:.5,rgb:[242,211,56]},{index:.75,rgb:[242,143,56]},{index:1,rgb:[217,30,30]}],blackbody:[{index:0,rgb:[0,0,0]},{index:.2,rgb:[230,0,0]},{index:.4,rgb:[230,210,0]},{index:.7,rgb:[255,255,255]},{index:1,rgb:[160,200,255]}],earth:[{index:0,rgb:[0,0,130]},{index:.1,rgb:[0,180,180]},{index:.2,rgb:[40,210,40]},{index:.4,rgb:[230,230,50]},{index:.6,rgb:[120,70,20]},{index:1,rgb:[255,255,255]}],electric:[{index:0,rgb:[0,0,0]},{index:.15,rgb:[30,0,100]},{index:.4,rgb:[120,0,100]},{index:.6,rgb:[160,90,0]},{index:.8,rgb:[230,200,0]},{index:1,rgb:[255,250,220]}],alpha:[{index:0,rgb:[255,255,255,0]},{index:1,rgb:[255,255,255,1]}],viridis:[{index:0,rgb:[68,1,84]},{index:.13,rgb:[71,44,122]},{index:.25,rgb:[59,81,139]},{index:.38,rgb:[44,113,142]},{index:.5,rgb:[33,144,141]},{index:.63,rgb:[39,173,129]},{index:.75,rgb:[92,200,99]},{index:.88,rgb:[170,220,50]},{index:1,rgb:[253,231,37]}],inferno:[{index:0,rgb:[0,0,4]},{index:.13,rgb:[31,12,72]},{index:.25,rgb:[85,15,109]},{index:.38,rgb:[136,34,106]},{index:.5,rgb:[186,54,85]},{index:.63,rgb:[227,89,51]},{index:.75,rgb:[249,140,10]},{index:.88,rgb:[249,201,50]},{index:1,rgb:[252,255,164]}],magma:[{index:0,rgb:[0,0,4]},{index:.13,rgb:[28,16,68]},{index:.25,rgb:[79,18,123]},{index:.38,rgb:[129,37,129]},{index:.5,rgb:[181,54,122]},{index:.63,rgb:[229,80,100]},{index:.75,rgb:[251,135,97]},{index:.88,rgb:[254,194,135]},{index:1,rgb:[252,253,191]}],plasma:[{index:0,rgb:[13,8,135]},{index:.13,rgb:[75,3,161]},{index:.25,rgb:[125,3,168]},{index:.38,rgb:[168,34,150]},{index:.5,rgb:[203,70,121]},{index:.63,rgb:[229,107,93]},{index:.75,rgb:[248,148,65]},{index:.88,rgb:[253,195,40]},{index:1,rgb:[240,249,33]}],warm:[{index:0,rgb:[125,0,179]},{index:.13,rgb:[172,0,187]},{index:.25,rgb:[219,0,170]},{index:.38,rgb:[255,0,130]},{index:.5,rgb:[255,63,74]},{index:.63,rgb:[255,123,0]},{index:.75,rgb:[234,176,0]},{index:.88,rgb:[190,228,0]},{index:1,rgb:[147,255,0]}],cool:[{index:0,rgb:[125,0,179]},{index:.13,rgb:[116,0,218]},{index:.25,rgb:[98,74,237]},{index:.38,rgb:[68,146,231]},{index:.5,rgb:[0,204,197]},{index:.63,rgb:[0,247,146]},{index:.75,rgb:[0,255,88]},{index:.88,rgb:[40,255,8]},{index:1,rgb:[147,255,0]}],\"rainbow-soft\":[{index:0,rgb:[125,0,179]},{index:.1,rgb:[199,0,180]},{index:.2,rgb:[255,0,121]},{index:.3,rgb:[255,108,0]},{index:.4,rgb:[222,194,0]},{index:.5,rgb:[150,255,0]},{index:.6,rgb:[0,255,55]},{index:.7,rgb:[0,246,150]},{index:.8,rgb:[50,167,222]},{index:.9,rgb:[103,51,235]},{index:1,rgb:[124,0,186]}],bathymetry:[{index:0,rgb:[40,26,44]},{index:.13,rgb:[59,49,90]},{index:.25,rgb:[64,76,139]},{index:.38,rgb:[63,110,151]},{index:.5,rgb:[72,142,158]},{index:.63,rgb:[85,174,163]},{index:.75,rgb:[120,206,163]},{index:.88,rgb:[187,230,172]},{index:1,rgb:[253,254,204]}],cdom:[{index:0,rgb:[47,15,62]},{index:.13,rgb:[87,23,86]},{index:.25,rgb:[130,28,99]},{index:.38,rgb:[171,41,96]},{index:.5,rgb:[206,67,86]},{index:.63,rgb:[230,106,84]},{index:.75,rgb:[242,149,103]},{index:.88,rgb:[249,193,135]},{index:1,rgb:[254,237,176]}],chlorophyll:[{index:0,rgb:[18,36,20]},{index:.13,rgb:[25,63,41]},{index:.25,rgb:[24,91,59]},{index:.38,rgb:[13,119,72]},{index:.5,rgb:[18,148,80]},{index:.63,rgb:[80,173,89]},{index:.75,rgb:[132,196,122]},{index:.88,rgb:[175,221,162]},{index:1,rgb:[215,249,208]}],density:[{index:0,rgb:[54,14,36]},{index:.13,rgb:[89,23,80]},{index:.25,rgb:[110,45,132]},{index:.38,rgb:[120,77,178]},{index:.5,rgb:[120,113,213]},{index:.63,rgb:[115,151,228]},{index:.75,rgb:[134,185,227]},{index:.88,rgb:[177,214,227]},{index:1,rgb:[230,241,241]}],\"freesurface-blue\":[{index:0,rgb:[30,4,110]},{index:.13,rgb:[47,14,176]},{index:.25,rgb:[41,45,236]},{index:.38,rgb:[25,99,212]},{index:.5,rgb:[68,131,200]},{index:.63,rgb:[114,156,197]},{index:.75,rgb:[157,181,203]},{index:.88,rgb:[200,208,216]},{index:1,rgb:[241,237,236]}],\"freesurface-red\":[{index:0,rgb:[60,9,18]},{index:.13,rgb:[100,17,27]},{index:.25,rgb:[142,20,29]},{index:.38,rgb:[177,43,27]},{index:.5,rgb:[192,87,63]},{index:.63,rgb:[205,125,105]},{index:.75,rgb:[216,162,148]},{index:.88,rgb:[227,199,193]},{index:1,rgb:[241,237,236]}],oxygen:[{index:0,rgb:[64,5,5]},{index:.13,rgb:[106,6,15]},{index:.25,rgb:[144,26,7]},{index:.38,rgb:[168,64,3]},{index:.5,rgb:[188,100,4]},{index:.63,rgb:[206,136,11]},{index:.75,rgb:[220,174,25]},{index:.88,rgb:[231,215,44]},{index:1,rgb:[248,254,105]}],par:[{index:0,rgb:[51,20,24]},{index:.13,rgb:[90,32,35]},{index:.25,rgb:[129,44,34]},{index:.38,rgb:[159,68,25]},{index:.5,rgb:[182,99,19]},{index:.63,rgb:[199,134,22]},{index:.75,rgb:[212,171,35]},{index:.88,rgb:[221,210,54]},{index:1,rgb:[225,253,75]}],phase:[{index:0,rgb:[145,105,18]},{index:.13,rgb:[184,71,38]},{index:.25,rgb:[186,58,115]},{index:.38,rgb:[160,71,185]},{index:.5,rgb:[110,97,218]},{index:.63,rgb:[50,123,164]},{index:.75,rgb:[31,131,110]},{index:.88,rgb:[77,129,34]},{index:1,rgb:[145,105,18]}],salinity:[{index:0,rgb:[42,24,108]},{index:.13,rgb:[33,50,162]},{index:.25,rgb:[15,90,145]},{index:.38,rgb:[40,118,137]},{index:.5,rgb:[59,146,135]},{index:.63,rgb:[79,175,126]},{index:.75,rgb:[120,203,104]},{index:.88,rgb:[193,221,100]},{index:1,rgb:[253,239,154]}],temperature:[{index:0,rgb:[4,35,51]},{index:.13,rgb:[23,51,122]},{index:.25,rgb:[85,59,157]},{index:.38,rgb:[129,79,143]},{index:.5,rgb:[175,95,130]},{index:.63,rgb:[222,112,101]},{index:.75,rgb:[249,146,66]},{index:.88,rgb:[249,196,65]},{index:1,rgb:[232,250,91]}],turbidity:[{index:0,rgb:[34,31,27]},{index:.13,rgb:[65,50,41]},{index:.25,rgb:[98,69,52]},{index:.38,rgb:[131,89,57]},{index:.5,rgb:[161,112,59]},{index:.63,rgb:[185,140,66]},{index:.75,rgb:[202,174,88]},{index:.88,rgb:[216,209,126]},{index:1,rgb:[233,246,171]}],\"velocity-blue\":[{index:0,rgb:[17,32,64]},{index:.13,rgb:[35,52,116]},{index:.25,rgb:[29,81,156]},{index:.38,rgb:[31,113,162]},{index:.5,rgb:[50,144,169]},{index:.63,rgb:[87,173,176]},{index:.75,rgb:[149,196,189]},{index:.88,rgb:[203,221,211]},{index:1,rgb:[254,251,230]}],\"velocity-green\":[{index:0,rgb:[23,35,19]},{index:.13,rgb:[24,64,38]},{index:.25,rgb:[11,95,45]},{index:.38,rgb:[39,123,35]},{index:.5,rgb:[95,146,12]},{index:.63,rgb:[152,165,18]},{index:.75,rgb:[201,186,69]},{index:.88,rgb:[233,216,137]},{index:1,rgb:[255,253,205]}],cubehelix:[{index:0,rgb:[0,0,0]},{index:.07,rgb:[22,5,59]},{index:.13,rgb:[60,4,105]},{index:.2,rgb:[109,1,135]},{index:.27,rgb:[161,0,147]},{index:.33,rgb:[210,2,142]},{index:.4,rgb:[251,11,123]},{index:.47,rgb:[255,29,97]},{index:.53,rgb:[255,54,69]},{index:.6,rgb:[255,85,46]},{index:.67,rgb:[255,120,34]},{index:.73,rgb:[255,157,37]},{index:.8,rgb:[241,191,57]},{index:.87,rgb:[224,220,93]},{index:.93,rgb:[218,241,142]},{index:1,rgb:[227,253,198]}]}},{}],53:[function(t,e,r){\"use strict\";var n=t(\"./colorScale\"),i=t(\"lerp\");function a(t){return[t[0]/255,t[1]/255,t[2]/255,t[3]]}function o(t){for(var e,r=\"#\",n=0;n&lt;3;++n)r+=(\"00\"+(e=(e=t[n]).toString(16))).substr(e.length);return r}function s(t){return\"rgba(\"+t.join(\",\")+\")\"}e.exports=function(t){var e,r,l,c,u,f,h,p,d,m;t||(t={});p=(t.nshades||72)-1,h=t.format||\"hex\",(f=t.colormap)||(f=\"jet\");if(\"string\"==typeof f){if(f=f.toLowerCase(),!n[f])throw Error(f+\" not a supported colorscale\");u=n[f]}else{if(!Array.isArray(f))throw Error(\"unsupported colormap option\",f);u=f.slice()}if(u.length&gt;p+1)throw new Error(f+\" map requires nshades to be at least size \"+u.length);d=Array.isArray(t.alpha)?2!==t.alpha.length?[1,1]:t.alpha.slice():\"number\"==typeof t.alpha?[t.alpha,t.alpha]:[1,1];e=u.map((function(t){return Math.round(t.index*p)})),d[0]=Math.min(Math.max(d[0],0),1),d[1]=Math.min(Math.max(d[1],0),1);var g=u.map((function(t,e){var r=u[e].index,n=u[e].rgb.slice();return 4===n.length&amp;&amp;n[3]&gt;=0&amp;&amp;n[3]&lt;=1||(n[3]=d[0]+(d[1]-d[0])*r),n})),v=[];for(m=0;m0||l(t,e,a)?-1:1:0===s?c&gt;0||l(t,e,r)?1:-1:i(c-s)}var h=n(t,e,r);return h&gt;0?o&gt;0&amp;&amp;n(t,e,a)&gt;0?1:-1:h&lt;0?o&gt;0||n(t,e,a)&gt;0?1:-1:n(t,e,a)&gt;0||l(t,e,r)?1:-1};var n=t(\"robust-orientation\"),i=t(\"signum\"),a=t(\"two-sum\"),o=t(\"robust-product\"),s=t(\"robust-sum\");function l(t,e,r){var n=a(t[0],-e[0]),i=a(t[1],-e[1]),l=a(r[0],-e[0]),c=a(r[1],-e[1]),u=s(o(n,l),o(i,c));return u[u.length-1]&gt;=0}},{\"robust-orientation\":284,\"robust-product\":285,\"robust-sum\":289,signum:55,\"two-sum\":307}],55:[function(t,e,r){\"use strict\";e.exports=function(t){return t&lt;0?-1:t&gt;0?1:0}},{}],56:[function(t,e,r){e.exports=function(t,e){var r=t.length,a=t.length-e.length;if(a)return a;switch(r){case 0:return 0;case 1:return t[0]-e[0];case 2:return t[0]+t[1]-e[0]-e[1]||n(t[0],t[1])-n(e[0],e[1]);case 3:var o=t[0]+t[1],s=e[0]+e[1];if(a=o+t[2]-(s+e[2]))return a;var l=n(t[0],t[1]),c=n(e[0],e[1]);return n(l,t[2])-n(c,e[2])||n(l+t[2],o)-n(c+e[2],s);case 4:var u=t[0],f=t[1],h=t[2],p=t[3],d=e[0],m=e[1],g=e[2],v=e[3];return u+f+h+p-(d+m+g+v)||n(u,f,h,p)-n(d,m,g,v,d)||n(u+f,u+h,u+p,f+h,f+p,h+p)-n(d+m,d+g,d+v,m+g,m+v,g+v)||n(u+f+h,u+f+p,u+h+p,f+h+p)-n(d+m+g,d+m+v,d+g+v,m+g+v);default:for(var y=t.slice().sort(i),x=e.slice().sort(i),b=0;bt[r][0]&amp;&amp;(r=n);return er?[[r],[e]]:[[e]]}},{}],60:[function(t,e,r){\"use strict\";e.exports=function(t){var e=n(t),r=e.length;if(r&lt;=2)return[];for(var i=new Array(r),a=e[r-1],o=0;o=e[l]&amp;&amp;(s+=1);a[o]=s}}return t}(n(a,!0),r)}};var n=t(\"incremental-convex-hull\"),i=t(\"affine-hull\")},{\"affine-hull\":10,\"incremental-convex-hull\":233}],62:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n,i,a){var o=i-1,s=i*i,l=o*o,c=(1+2*i)*l,u=i*l,f=s*(3-2*i),h=s*o;if(t.length){a||(a=new Array(t.length));for(var p=t.length-1;p&gt;=0;--p)a[p]=c*t[p]+u*e[p]+f*r[p]+h*n[p];return a}return c*t+u*e+f*r+h*n},e.exports.derivative=function(t,e,r,n,i,a){var o=6*i*i-6*i,s=3*i*i-4*i+1,l=-6*i*i+6*i,c=3*i*i-2*i;if(t.length){a||(a=new Array(t.length));for(var u=t.length-1;u&gt;=0;--u)a[u]=o*t[u]+s*e[u]+l*r[u]+c*n[u];return a}return o*t+s*e+l*r[u]+c*n}},{}],63:[function(t,e,r){\"use strict\";var n=t(\"incremental-convex-hull\"),i=t(\"uniq\");function a(t,e){this.point=t,this.index=e}function o(t,e){for(var r=t.point,n=e.point,i=r.length,a=0;a=2)return!1;t[r]=n}return!0})):_.filter((function(t){for(var e=0;e&lt;=s;++e){var r=v[t[e]];if(r&lt;0)return!1;t[e]=r}return!0}));if(1&amp;s)for(u=0;u&lt;_.length;++u){h=(b=_[u])[0];b[0]=b[1],b[1]=h}return _}},{\"incremental-convex-hull\":233,uniq:310}],64:[function(t,e,r){(function(t){(function(){var r=!1;if(\"undefined\"!=typeof Float64Array){var n=new Float64Array(1),i=new Uint32Array(n.buffer);if(n[0]=1,r=!0,1072693248===i[1]){e.exports=function(t){return n[0]=t,[i[0],i[1]]},e.exports.pack=function(t,e){return i[0]=t,i[1]=e,n[0]},e.exports.lo=function(t){return n[0]=t,i[0]},e.exports.hi=function(t){return n[0]=t,i[1]}}else if(1072693248===i[0]){e.exports=function(t){return n[0]=t,[i[1],i[0]]},e.exports.pack=function(t,e){return i[1]=t,i[0]=e,n[0]},e.exports.lo=function(t){return n[0]=t,i[1]},e.exports.hi=function(t){return n[0]=t,i[0]}}else r=!1}if(!r){var a=new t(8);e.exports=function(t){return a.writeDoubleLE(t,0,!0),[a.readUInt32LE(0,!0),a.readUInt32LE(4,!0)]},e.exports.pack=function(t,e){return a.writeUInt32LE(t,0,!0),a.writeUInt32LE(e,4,!0),a.readDoubleLE(0,!0)},e.exports.lo=function(t){return a.writeDoubleLE(t,0,!0),a.readUInt32LE(0,!0)},e.exports.hi=function(t){return a.writeDoubleLE(t,0,!0),a.readUInt32LE(4,!0)}}e.exports.sign=function(t){return e.exports.hi(t)&gt;&gt;&gt;31},e.exports.exponent=function(t){return(e.exports.hi(t)&lt;&lt;1&gt;&gt;&gt;21)-1023},e.exports.fraction=function(t){var r=e.exports.lo(t),n=e.exports.hi(t),i=1048575&amp;n;return 2146435072&amp;n&amp;&amp;(i+=1&lt;&lt;20),[r,i]},e.exports.denormalized=function(t){return!(2146435072&amp;e.exports.hi(t))}}).call(this)}).call(this,t(\"buffer\").Buffer)},{buffer:3}],65:[function(t,e,r){\"use strict\";e.exports=function(t,e){switch(void 0===e&amp;&amp;(e=0),typeof t){case\"number\":if(t&gt;0)return function(t,e){var r,n;for(r=new Array(t),n=0;n=r-1){h=l.length-1;var d=t-e[r-1];for(p=0;p=r-1)for(var u=s.length-1,f=(e[r-1],0);f=0;--r)if(t[--e])return!1;return!0},s.jump=function(t){var e=this.lastT(),r=this.dimension;if(!(t0;--f)n.push(a(l[f-1],c[f-1],arguments[f])),i.push(0)}},s.push=function(t){var e=this.lastT(),r=this.dimension;if(!(t1e-6?1/s:0;this._time.push(t);for(var h=r;h&gt;0;--h){var p=a(c[h-1],u[h-1],arguments[h]);n.push(p),i.push((p-n[o++])*f)}}},s.set=function(t){var e=this.dimension;if(!(t0;--l)r.push(a(o[l-1],s[l-1],arguments[l])),n.push(0)}},s.move=function(t){var e=this.lastT(),r=this.dimension;if(!(t&lt;=e||arguments.length!==r+1)){var n=this._state,i=this._velocity,o=n.length-this.dimension,s=this.bounds,l=s[0],c=s[1],u=t-e,f=u&gt;1e-6?1/u:0;this._time.push(t);for(var h=r;h&gt;0;--h){var p=arguments[h];n.push(a(l[h-1],c[h-1],n[o++]+p)),i.push(p*f)}}},s.idle=function(t){var e=this.lastT();if(!(t=0;--f)n.push(a(l[f],c[f],n[o]+u*i[o])),i.push(0),o+=1}}},{\"binary-search-bounds\":31,\"cubic-hermite\":62}],69:[function(t,e,r){\"use strict\";e.exports=function(t){return new s(t||m,null)};function n(t,e,r,n,i,a){this._color=t,this.key=e,this.value=r,this.left=n,this.right=i,this._count=a}function i(t){return new n(t._color,t.key,t.value,t.left,t.right,t._count)}function a(t,e){return new n(t,e.key,e.value,e.left,e.right,e._count)}function o(t){t._count=1+(t.left?t.left._count:0)+(t.right?t.right._count:0)}function s(t,e){this._compare=t,this.root=e}var l=s.prototype;function c(t,e){var r;if(e.left&amp;&amp;(r=c(t,e.left)))return r;return(r=t(e.key,e.value))||(e.right?c(t,e.right):void 0)}function u(t,e,r,n){if(e(t,n.key)&lt;=0){var i;if(n.left)if(i=u(t,e,r,n.left))return i;if(i=r(n.key,n.value))return i}if(n.right)return u(t,e,r,n.right)}function f(t,e,r,n,i){var a,o=r(t,i.key),s=r(e,i.key);if(o&lt;=0){if(i.left&amp;&amp;(a=f(t,e,r,n,i.left)))return a;if(s&gt;0&amp;&amp;(a=n(i.key,i.value)))return a}if(s&gt;0&amp;&amp;i.right)return f(t,e,r,n,i.right)}function h(t,e){this.tree=t,this._stack=e}Object.defineProperty(l,\"keys\",{get:function(){var t=[];return this.forEach((function(e,r){t.push(e)})),t}}),Object.defineProperty(l,\"values\",{get:function(){var t=[];return this.forEach((function(e,r){t.push(r)})),t}}),Object.defineProperty(l,\"length\",{get:function(){return this.root?this.root._count:0}}),l.insert=function(t,e){for(var r=this._compare,i=this.root,l=[],c=[];i;){var u=r(t,i.key);l.push(i),c.push(u),i=u&lt;=0?i.left:i.right}l.push(new n(0,t,e,null,null,1));for(var f=l.length-2;f&gt;=0;--f){i=l[f];c[f]&lt;=0?l[f]=new n(i._color,i.key,i.value,l[f+1],i.right,i._count+1):l[f]=new n(i._color,i.key,i.value,i.left,l[f+1],i._count+1)}for(f=l.length-1;f&gt;1;--f){var h=l[f-1];i=l[f];if(1===h._color||1===i._color)break;var p=l[f-2];if(p.left===h)if(h.left===i){if(!(d=p.right)||0!==d._color){if(p._color=0,p.left=h.right,h._color=1,h.right=p,l[f-2]=h,l[f-1]=i,o(p),o(h),f&gt;=3)(m=l[f-3]).left===p?m.left=h:m.right=h;break}h._color=1,p.right=a(1,d),p._color=0,f-=1}else{if(!(d=p.right)||0!==d._color){if(h.right=i.left,p._color=0,p.left=i.right,i._color=1,i.left=h,i.right=p,l[f-2]=i,l[f-1]=h,o(p),o(h),o(i),f&gt;=3)(m=l[f-3]).left===p?m.left=i:m.right=i;break}h._color=1,p.right=a(1,d),p._color=0,f-=1}else if(h.right===i){if(!(d=p.left)||0!==d._color){if(p._color=0,p.right=h.left,h._color=1,h.left=p,l[f-2]=h,l[f-1]=i,o(p),o(h),f&gt;=3)(m=l[f-3]).right===p?m.right=h:m.left=h;break}h._color=1,p.left=a(1,d),p._color=0,f-=1}else{var d;if(!(d=p.left)||0!==d._color){var m;if(h.left=i.right,p._color=0,p.right=i.left,i._color=1,i.right=h,i.left=p,l[f-2]=i,l[f-1]=h,o(p),o(h),o(i),f&gt;=3)(m=l[f-3]).right===p?m.right=i:m.left=i;break}h._color=1,p.left=a(1,d),p._color=0,f-=1}}return l[0]._color=1,new s(r,l[0])},l.forEach=function(t,e,r){if(this.root)switch(arguments.length){case 1:return c(t,this.root);case 2:return u(e,this._compare,t,this.root);case 3:if(this._compare(e,r)&gt;=0)return;return f(e,r,this._compare,t,this.root)}},Object.defineProperty(l,\"begin\",{get:function(){for(var t=[],e=this.root;e;)t.push(e),e=e.left;return new h(this,t)}}),Object.defineProperty(l,\"end\",{get:function(){for(var t=[],e=this.root;e;)t.push(e),e=e.right;return new h(this,t)}}),l.at=function(t){if(t&lt;0)return new h(this,[]);for(var e=this.root,r=[];;){if(r.push(e),e.left){if(t=e.right._count)break;e=e.right}return new h(this,[])},l.ge=function(t){for(var e=this._compare,r=this.root,n=[],i=0;r;){var a=e(t,r.key);n.push(r),a&lt;=0&amp;&amp;(i=n.length),r=a&lt;=0?r.left:r.right}return n.length=i,new h(this,n)},l.gt=function(t){for(var e=this._compare,r=this.root,n=[],i=0;r;){var a=e(t,r.key);n.push(r),a&lt;0&amp;&amp;(i=n.length),r=a&lt;0?r.left:r.right}return n.length=i,new h(this,n)},l.lt=function(t){for(var e=this._compare,r=this.root,n=[],i=0;r;){var a=e(t,r.key);n.push(r),a&gt;0&amp;&amp;(i=n.length),r=a&lt;=0?r.left:r.right}return n.length=i,new h(this,n)},l.le=function(t){for(var e=this._compare,r=this.root,n=[],i=0;r;){var a=e(t,r.key);n.push(r),a&gt;=0&amp;&amp;(i=n.length),r=a&lt;0?r.left:r.right}return n.length=i,new h(this,n)},l.find=function(t){for(var e=this._compare,r=this.root,n=[];r;){var i=e(t,r.key);if(n.push(r),0===i)return new h(this,n);r=i&lt;=0?r.left:r.right}return new h(this,[])},l.remove=function(t){var e=this.find(t);return e?e.remove():this},l.get=function(t){for(var e=this._compare,r=this.root;r;){var n=e(t,r.key);if(0===n)return r.value;r=n&lt;=0?r.left:r.right}};var p=h.prototype;function d(t,e){t.key=e.key,t.value=e.value,t.left=e.left,t.right=e.right,t._color=e._color,t._count=e._count}function m(t,e){return te?1:0}Object.defineProperty(p,\"valid\",{get:function(){return this._stack.length&gt;0}}),Object.defineProperty(p,\"node\",{get:function(){return this._stack.length&gt;0?this._stack[this._stack.length-1]:null},enumerable:!0}),p.clone=function(){return new h(this.tree,this._stack.slice())},p.remove=function(){var t=this._stack;if(0===t.length)return this.tree;var e=new Array(t.length),r=t[t.length-1];e[e.length-1]=new n(r._color,r.key,r.value,r.left,r.right,r._count);for(var l=t.length-2;l&gt;=0;--l){(r=t[l]).left===t[l+1]?e[l]=new n(r._color,r.key,r.value,e[l+1],r.right,r._count):e[l]=new n(r._color,r.key,r.value,r.left,e[l+1],r._count)}if((r=e[e.length-1]).left&amp;&amp;r.right){var c=e.length;for(r=r.left;r.right;)e.push(r),r=r.right;var u=e[c-1];e.push(new n(r._color,u.key,u.value,r.left,r.right,r._count)),e[c-1].key=r.key,e[c-1].value=r.value;for(l=e.length-2;l&gt;=c;--l)r=e[l],e[l]=new n(r._color,r.key,r.value,r.left,e[l+1],r._count);e[c-1].left=e[c]}if(0===(r=e[e.length-1])._color){var f=e[e.length-2];f.left===r?f.left=null:f.right===r&amp;&amp;(f.right=null),e.pop();for(l=0;l=0;--l){if(e=t[l],0===l)return void(e._color=1);if((r=t[l-1]).left===e){if((n=r.right).right&amp;&amp;0===n.right._color){if(s=(n=r.right=i(n)).right=i(n.right),r.right=n.left,n.left=r,n.right=s,n._color=r._color,e._color=1,r._color=1,s._color=1,o(r),o(n),l&gt;1)(c=t[l-2]).left===r?c.left=n:c.right=n;return void(t[l-1]=n)}if(n.left&amp;&amp;0===n.left._color){if(s=(n=r.right=i(n)).left=i(n.left),r.right=s.left,n.left=s.right,s.left=r,s.right=n,s._color=r._color,r._color=1,n._color=1,e._color=1,o(r),o(n),o(s),l&gt;1)(c=t[l-2]).left===r?c.left=s:c.right=s;return void(t[l-1]=s)}if(1===n._color){if(0===r._color)return r._color=1,void(r.right=a(0,n));r.right=a(0,n);continue}n=i(n),r.right=n.left,n.left=r,n._color=r._color,r._color=0,o(r),o(n),l&gt;1&amp;&amp;((c=t[l-2]).left===r?c.left=n:c.right=n),t[l-1]=n,t[l]=r,l+11)(c=t[l-2]).right===r?c.right=n:c.left=n;return void(t[l-1]=n)}if(n.right&amp;&amp;0===n.right._color){if(s=(n=r.left=i(n)).right=i(n.right),r.left=s.right,n.right=s.left,s.right=r,s.left=n,s._color=r._color,r._color=1,n._color=1,e._color=1,o(r),o(n),o(s),l&gt;1)(c=t[l-2]).right===r?c.right=s:c.left=s;return void(t[l-1]=s)}if(1===n._color){if(0===r._color)return r._color=1,void(r.left=a(0,n));r.left=a(0,n);continue}var c;n=i(n),r.left=n.right,n.right=r,n._color=r._color,r._color=0,o(r),o(n),l&gt;1&amp;&amp;((c=t[l-2]).right===r?c.right=n:c.left=n),t[l-1]=n,t[l]=r,l+10)return this._stack[this._stack.length-1].key},enumerable:!0}),Object.defineProperty(p,\"value\",{get:function(){if(this._stack.length&gt;0)return this._stack[this._stack.length-1].value},enumerable:!0}),Object.defineProperty(p,\"index\",{get:function(){var t=0,e=this._stack;if(0===e.length){var r=this.tree.root;return r?r._count:0}e[e.length-1].left&amp;&amp;(t=e[e.length-1].left._count);for(var n=e.length-2;n&gt;=0;--n)e[n+1]===e[n].right&amp;&amp;(++t,e[n].left&amp;&amp;(t+=e[n].left._count));return t},enumerable:!0}),p.next=function(){var t=this._stack;if(0!==t.length){var e=t[t.length-1];if(e.right)for(e=e.right;e;)t.push(e),e=e.left;else for(t.pop();t.length&gt;0&amp;&amp;t[t.length-1].right===e;)e=t[t.length-1],t.pop()}},Object.defineProperty(p,\"hasNext\",{get:function(){var t=this._stack;if(0===t.length)return!1;if(t[t.length-1].right)return!0;for(var e=t.length-1;e&gt;0;--e)if(t[e-1].left===t[e])return!0;return!1}}),p.update=function(t){var e=this._stack;if(0===e.length)throw new Error(\"Can't update empty node!\");var r=new Array(e.length),i=e[e.length-1];r[r.length-1]=new n(i._color,i.key,t,i.left,i.right,i._count);for(var a=e.length-2;a&gt;=0;--a)(i=e[a]).left===e[a+1]?r[a]=new n(i._color,i.key,i.value,r[a+1],i.right,i._count):r[a]=new n(i._color,i.key,i.value,i.left,r[a+1],i._count);return new s(this.tree._compare,r[0])},p.prev=function(){var t=this._stack;if(0!==t.length){var e=t[t.length-1];if(e.left)for(e=e.left;e;)t.push(e),e=e.right;else for(t.pop();t.length&gt;0&amp;&amp;t[t.length-1].left===e;)e=t[t.length-1],t.pop()}},Object.defineProperty(p,\"hasPrev\",{get:function(){var t=this._stack;if(0===t.length)return!1;if(t[t.length-1].left)return!0;for(var e=t.length-1;e&gt;0;--e)if(t[e-1].right===t[e])return!0;return!1}})},{}],70:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r=new u(t);return r.update(e),r};var n=t(\"./lib/text.js\"),i=t(\"./lib/lines.js\"),a=t(\"./lib/background.js\"),o=t(\"./lib/cube.js\"),s=t(\"./lib/ticks.js\"),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);function c(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function u(t){this.gl=t,this.pixelRatio=1,this.bounds=[[-10,-10,-10],[10,10,10]],this.ticks=[[],[],[]],this.autoTicks=!0,this.tickSpacing=[1,1,1],this.tickEnable=[!0,!0,!0],this.tickFont=[\"sans-serif\",\"sans-serif\",\"sans-serif\"],this.tickSize=[12,12,12],this.tickAngle=[0,0,0],this.tickAlign=[\"auto\",\"auto\",\"auto\"],this.tickColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.tickPad=[10,10,10],this.lastCubeProps={cubeEdges:[0,0,0],axis:[0,0,0]},this.labels=[\"x\",\"y\",\"z\"],this.labelEnable=[!0,!0,!0],this.labelFont=\"sans-serif\",this.labelSize=[20,20,20],this.labelAngle=[0,0,0],this.labelAlign=[\"auto\",\"auto\",\"auto\"],this.labelColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.labelPad=[10,10,10],this.lineEnable=[!0,!0,!0],this.lineMirror=[!1,!1,!1],this.lineWidth=[1,1,1],this.lineColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.lineTickEnable=[!0,!0,!0],this.lineTickMirror=[!1,!1,!1],this.lineTickLength=[0,0,0],this.lineTickWidth=[1,1,1],this.lineTickColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.gridEnable=[!0,!0,!0],this.gridWidth=[1,1,1],this.gridColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.zeroEnable=[!0,!0,!0],this.zeroLineColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.zeroLineWidth=[2,2,2],this.backgroundEnable=[!1,!1,!1],this.backgroundColor=[[.8,.8,.8,.5],[.8,.8,.8,.5],[.8,.8,.8,.5]],this._firstInit=!0,this._text=null,this._lines=null,this._background=a(t)}var f=u.prototype;function h(){this.primalOffset=[0,0,0],this.primalMinor=[0,0,0],this.mirrorOffset=[0,0,0],this.mirrorMinor=[0,0,0]}f.update=function(t){function e(e,r,n){if(n in t){var i,a=t[n],o=this[n];(e?Array.isArray(a)&amp;&amp;Array.isArray(a[0]):Array.isArray(a))?this[n]=i=[r(a[0]),r(a[1]),r(a[2])]:this[n]=i=[r(a),r(a),r(a)];for(var s=0;s&lt;3;++s)if(i[s]!==o[s])return!0}return!1}t=t||{};var r,a=e.bind(this,!1,Number),o=e.bind(this,!1,Boolean),l=e.bind(this,!1,String),c=e.bind(this,!0,(function(t){if(Array.isArray(t)){if(3===t.length)return[+t[0],+t[1],+t[2],1];if(4===t.length)return[+t[0],+t[1],+t[2],+t[3]]}return[0,0,0,1]})),u=!1,f=!1;if(\"bounds\"in t)for(var h=t.bounds,p=0;p&lt;2;++p)for(var d=0;d&lt;3;++d)h[p][d]!==this.bounds[p][d]&amp;&amp;(f=!0),this.bounds[p][d]=h[p][d];if(\"ticks\"in t){r=t.ticks,u=!0,this.autoTicks=!1;for(p=0;p&lt;3;++p)this.tickSpacing[p]=0}else a(\"tickSpacing\")&amp;&amp;(this.autoTicks=!0,f=!0);if(this._firstInit&amp;&amp;(\"ticks\"in t||\"tickSpacing\"in t||(this.autoTicks=!0),f=!0,u=!0,this._firstInit=!1),f&amp;&amp;this.autoTicks&amp;&amp;(r=s.create(this.bounds,this.tickSpacing),u=!0),u){for(p=0;p&lt;3;++p)r[p].sort((function(t,e){return t.x-e.x}));s.equal(r,this.ticks)?u=!1:this.ticks=r}o(\"tickEnable\"),l(\"tickFont\")&amp;&amp;(u=!0),a(\"tickSize\"),a(\"tickAngle\"),a(\"tickPad\"),c(\"tickColor\");var m=l(\"labels\");l(\"labelFont\")&amp;&amp;(m=!0),o(\"labelEnable\"),a(\"labelSize\"),a(\"labelPad\"),c(\"labelColor\"),o(\"lineEnable\"),o(\"lineMirror\"),a(\"lineWidth\"),c(\"lineColor\"),o(\"lineTickEnable\"),o(\"lineTickMirror\"),a(\"lineTickLength\"),a(\"lineTickWidth\"),c(\"lineTickColor\"),o(\"gridEnable\"),a(\"gridWidth\"),c(\"gridColor\"),o(\"zeroEnable\"),c(\"zeroLineColor\"),a(\"zeroLineWidth\"),o(\"backgroundEnable\"),c(\"backgroundColor\"),this._text?this._text&amp;&amp;(m||u)&amp;&amp;this._text.update(this.bounds,this.labels,this.labelFont,this.ticks,this.tickFont):this._text=n(this.gl,this.bounds,this.labels,this.labelFont,this.ticks,this.tickFont),this._lines&amp;&amp;u&amp;&amp;(this._lines.dispose(),this._lines=null),this._lines||(this._lines=i(this.gl,this.bounds,this.ticks))};var p=[new h,new h,new h];function d(t,e,r,n,i){for(var a=t.primalOffset,o=t.primalMinor,s=t.mirrorOffset,l=t.mirrorMinor,c=n[e],u=0;u&lt;3;++u)if(e!==u){var f=a,h=s,p=o,d=l;c&amp;1&lt;0?(p[u]=-1,d[u]=0):(p[u]=0,d[u]=1)}}var m=[0,0,0],g={model:l,view:l,projection:l,_ortho:!1};f.isOpaque=function(){return!0},f.isTransparent=function(){return!1},f.drawTransparent=function(t){};var v=[0,0,0],y=[0,0,0],x=[0,0,0];f.draw=function(t){t=t||g;for(var e=this.gl,r=t.model||l,n=t.view||l,i=t.projection||l,a=this.bounds,s=t._ortho||!1,u=o(r,n,i,a,s),f=u.cubeEdges,h=u.axis,b=n[12],_=n[13],w=n[14],T=n[15],k=(s?2:1)*this.pixelRatio*(i[3]*b+i[7]*_+i[11]*w+i[15]*T)/e.drawingBufferHeight,A=0;A&lt;3;++A)this.lastCubeProps.cubeEdges[A]=f[A],this.lastCubeProps.axis[A]=h[A];var M=p;for(A=0;A&lt;3;++A)d(p[A],A,this.bounds,f,h);e=this.gl;var S,E=m;for(A=0;A&lt;3;++A)this.backgroundEnable[A]?E[A]=h[A]:E[A]=0;this._background.draw(r,n,i,a,E,this.backgroundColor),this._lines.bind(r,n,i,this);for(A=0;A&lt;3;++A){var L=[0,0,0];h[A]&gt;0?L[A]=a[1][A]:L[A]=a[0][A];for(var C=0;C&lt;2;++C){var P=(A+1+C)%3,I=(A+1+(1^C))%3;this.gridEnable[P]&amp;&amp;this._lines.drawGrid(P,I,this.bounds,L,this.gridColor[P],this.gridWidth[P]*this.pixelRatio)}for(C=0;C&lt;2;++C){P=(A+1+C)%3,I=(A+1+(1^C))%3;this.zeroEnable[I]&amp;&amp;Math.min(a[0][I],a[1][I])&lt;=0&amp;&amp;Math.max(a[0][I],a[1][I])&gt;=0&amp;&amp;this._lines.drawZero(P,I,this.bounds,L,this.zeroLineColor[I],this.zeroLineWidth[I]*this.pixelRatio)}}for(A=0;A&lt;3;++A){this.lineEnable[A]&amp;&amp;this._lines.drawAxisLine(A,this.bounds,M[A].primalOffset,this.lineColor[A],this.lineWidth[A]*this.pixelRatio),this.lineMirror[A]&amp;&amp;this._lines.drawAxisLine(A,this.bounds,M[A].mirrorOffset,this.lineColor[A],this.lineWidth[A]*this.pixelRatio);var O=c(v,M[A].primalMinor),z=c(y,M[A].mirrorMinor),D=this.lineTickLength;for(C=0;C&lt;3;++C){var R=k/r[5*C];O[C]*=D[C]*R,z[C]*=D[C]*R}this.lineTickEnable[A]&amp;&amp;this._lines.drawAxisTicks(A,M[A].primalOffset,O,this.lineTickColor[A],this.lineTickWidth[A]*this.pixelRatio),this.lineTickMirror[A]&amp;&amp;this._lines.drawAxisTicks(A,M[A].mirrorOffset,z,this.lineTickColor[A],this.lineTickWidth[A]*this.pixelRatio)}this._lines.unbind(),this._text.bind(r,n,i,this.pixelRatio);var F,B;function N(t){(B=[0,0,0])[t]=1}function j(t,e,r){var n=(t+1)%3,i=(t+2)%3,a=e[n],o=e[i],s=r[n],l=r[i];a&gt;0&amp;&amp;l&gt;0||a&gt;0&amp;&amp;l&lt;0||a&lt;0&amp;&amp;l&gt;0||a&lt;0&amp;&amp;l&lt;0?N(n):(o&gt;0&amp;&amp;s&gt;0||o&gt;0&amp;&amp;s&lt;0||o&lt;0&amp;&amp;s&gt;0||o&lt;0&amp;&amp;s&lt;0)&amp;&amp;N(i)}for(A=0;A&lt;3;++A){var U=M[A].primalMinor,V=M[A].mirrorMinor,H=c(x,M[A].primalOffset);for(C=0;C&lt;3;++C)this.lineTickEnable[A]&amp;&amp;(H[C]+=k*U[C]*Math.max(this.lineTickLength[C],0)/r[5*C]);var q=[0,0,0];if(q[A]=1,this.tickEnable[A]){-3600===this.tickAngle[A]?(this.tickAngle[A]=0,this.tickAlign[A]=\"auto\"):this.tickAlign[A]=-1,F=1,\"auto\"===(S=[this.tickAlign[A],.5,F])[0]?S[0]=0:S[0]=parseInt(\"\"+S[0]),B=[0,0,0],j(A,U,V);for(C=0;C&lt;3;++C)H[C]+=k*U[C]*this.tickPad[C]/r[5*C];this._text.drawTicks(A,this.tickSize[A],this.tickAngle[A],H,this.tickColor[A],q,B,S)}if(this.labelEnable[A]){F=0,B=[0,0,0],this.labels[A].length&gt;4&amp;&amp;(N(A),F=1),\"auto\"===(S=[this.labelAlign[A],.5,F])[0]?S[0]=0:S[0]=parseInt(\"\"+S[0]);for(C=0;C&lt;3;++C)H[C]+=k*U[C]*this.labelPad[C]/r[5*C];H[A]+=.5*(a[0][A]+a[1][A]),this._text.drawLabel(A,this.labelSize[A],this.labelAngle[A],H,this.labelColor[A],[0,0,0],B,S)}}this._text.unbind()},f.dispose=function(){this._text.dispose(),this._lines.dispose(),this._background.dispose(),this._lines=null,this._text=null,this._background=null,this.gl=null}},{\"./lib/background.js\":71,\"./lib/cube.js\":72,\"./lib/lines.js\":73,\"./lib/text.js\":75,\"./lib/ticks.js\":76}],71:[function(t,e,r){\"use strict\";e.exports=function(t){for(var e=[],r=[],s=0,l=0;l&lt;3;++l)for(var c=(l+1)%3,u=(l+2)%3,f=[0,0,0],h=[0,0,0],p=-1;p&lt;=1;p+=2){r.push(s,s+2,s+1,s+1,s+2,s+3),f[l]=p,h[l]=p;for(var d=-1;d&lt;=1;d+=2){f[c]=d;for(var m=-1;m&lt;=1;m+=2)f[u]=m,e.push(f[0],f[1],f[2],h[0],h[1],h[2]),s+=1}var g=c;c=u,u=g}var v=n(t,new Float32Array(e)),y=n(t,new Uint16Array(r),t.ELEMENT_ARRAY_BUFFER),x=i(t,[{buffer:v,type:t.FLOAT,size:3,offset:0,stride:24},{buffer:v,type:t.FLOAT,size:3,offset:12,stride:24}],y),b=a(t);return b.attributes.position.location=0,b.attributes.normal.location=1,new o(t,v,x,b)};var n=t(\"gl-buffer\"),i=t(\"gl-vao\"),a=t(\"./shaders\").bg;function o(t,e,r,n){this.gl=t,this.buffer=e,this.vao=r,this.shader=n}var s=o.prototype;s.draw=function(t,e,r,n,i,a){for(var o=!1,s=0;s&lt;3;++s)o=o||i[s];if(o){var l=this.gl;l.enable(l.POLYGON_OFFSET_FILL),l.polygonOffset(1,2),this.shader.bind(),this.shader.uniforms={model:t,view:e,projection:r,bounds:n,enable:i,colors:a},this.vao.bind(),this.vao.draw(this.gl.TRIANGLES,36),this.vao.unbind(),l.disable(l.POLYGON_OFFSET_FILL)}},s.dispose=function(){this.vao.dispose(),this.buffer.dispose(),this.shader.dispose()}},{\"./shaders\":74,\"gl-buffer\":78,\"gl-vao\":150}],72:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,a,p){i(s,e,t),i(s,r,s);for(var y=0,x=0;x&lt;2;++x){u[2]=a[x][2];for(var b=0;b&lt;2;++b){u[1]=a[b][1];for(var _=0;_&lt;2;++_)u[0]=a[_][0],h(l[y],u,s),y+=1}}var w=-1;for(x=0;x&lt;8;++x){for(var T=l[x][3],k=0;k&lt;3;++k)c[x][k]=l[x][k]/T;p&amp;&amp;(c[x][2]*=-1),T&lt;0&amp;&amp;(w&lt;0||c[x][2]E&amp;&amp;(w|=1&lt;E&amp;&amp;(w|=1&lt;c[x][1])&amp;&amp;(R=x);var F=-1;for(x=0;x&lt;3;++x){if((N=R^1&lt;c[B][0]&amp;&amp;(B=N)}var j=m;j[0]=j[1]=j[2]=0,j[n.log2(F^R)]=R&amp;F,j[n.log2(R^B)]=R&amp;B;var U=7^B;U===w||U===D?(U=7^F,j[n.log2(B^U)]=U&amp;B):j[n.log2(F^U)]=U&amp;F;var V=g,H=w;for(A=0;A&lt;3;++A)V[A]=H&amp;1&lt; HALF_PI) &amp;&amp; (b &lt;= ONE_AND_HALF_PI)) ?\\n    b - PI :\\n    b;\\n}\\n\\nfloat look_horizontal_or_vertical(float a, float ratio) {\\n  // ratio controls the ratio between being horizontal to (vertical + horizontal)\\n  // if ratio is set to 0.5 then it is 50%, 50%.\\n  // when using a higher ratio e.g. 0.75 the result would\\n  // likely be more horizontal than vertical.\\n\\n  float b = positive_angle(a);\\n\\n  return\\n    (b &lt; (      ratio) * HALF_PI) ? 0.0 :\\n    (b &lt; (2.0 - ratio) * HALF_PI) ? -HALF_PI :\\n    (b &lt; (2.0 + ratio) * HALF_PI) ? 0.0 :\\n    (b &lt; (4.0 - ratio) * HALF_PI) ? HALF_PI :\\n                                    0.0;\\n}\\n\\nfloat roundTo(float a, float b) {\\n  return float(b * floor((a + 0.5 * b) / b));\\n}\\n\\nfloat look_round_n_directions(float a, int n) {\\n  float b = positive_angle(a);\\n  float div = TWO_PI / float(n);\\n  float c = roundTo(b, div);\\n  return look_upwards(c);\\n}\\n\\nfloat applyAlignOption(float rawAngle, float delta) {\\n  return\\n    (option &gt;  2) ? look_round_n_directions(rawAngle + delta, option) :       // option 3-n: round to n directions\\n    (option == 2) ? look_horizontal_or_vertical(rawAngle + delta, hv_ratio) : // horizontal or vertical\\n    (option == 1) ? rawAngle + delta :       // use free angle, and flip to align with one direction of the axis\\n    (option == 0) ? look_upwards(rawAngle) : // use free angle, and stay upwards\\n    (option ==-1) ? 0.0 :                    // useful for backward compatibility, all texts remains horizontal\\n                    rawAngle;                // otherwise return back raw input angle\\n}\\n\\nbool isAxisTitle = (axis.x == 0.0) &amp;&amp;\\n                   (axis.y == 0.0) &amp;&amp;\\n                   (axis.z == 0.0);\\n\\nvoid main() {\\n  //Compute world offset\\n  float axisDistance = position.z;\\n  vec3 dataPosition = axisDistance * axis + offset;\\n\\n  float beta = angle; // i.e. user defined attributes for each tick\\n\\n  float axisAngle;\\n  float clipAngle;\\n  float flip;\\n\\n  if (enableAlign) {\\n    axisAngle = (isAxisTitle) ? HALF_PI :\\n                      computeViewAngle(dataPosition, dataPosition + axis);\\n    clipAngle = computeViewAngle(dataPosition, dataPosition + alignDir);\\n\\n    axisAngle += (sin(axisAngle) &lt; 0.0) ? PI : 0.0;\\n    clipAngle += (sin(clipAngle) &lt; 0.0) ? PI : 0.0;\\n\\n    flip = (dot(vec2(cos(axisAngle), sin(axisAngle)),\\n                vec2(sin(clipAngle),-cos(clipAngle))) &gt; 0.0) ? 1.0 : 0.0;\\n\\n    beta += applyAlignOption(clipAngle, flip * PI);\\n  }\\n\\n  //Compute plane offset\\n  vec2 planeCoord = position.xy * pixelScale;\\n\\n  mat2 planeXform = scale * mat2(\\n     cos(beta), sin(beta),\\n    -sin(beta), cos(beta)\\n  );\\n\\n  vec2 viewOffset = 2.0 * planeXform * planeCoord / resolution;\\n\\n  //Compute clip position\\n  vec3 clipPosition = project(dataPosition);\\n\\n  //Apply text offset in clip coordinates\\n  clipPosition += vec3(viewOffset, 0.0);\\n\\n  //Done\\n  gl_Position = vec4(clipPosition, 1.0);\\n}\"]),l=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec4 color;\\nvoid main() {\\n  gl_FragColor = color;\\n}\"]);r.text=function(t){return i(t,s,l,null,[{name:\"position\",type:\"vec3\"}])};var c=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\n\\nuniform mat4 model, view, projection;\\nuniform vec3 enable;\\nuniform vec3 bounds[2];\\n\\nvarying vec3 colorChannel;\\n\\nvoid main() {\\n\\n  vec3 signAxis = sign(bounds[1] - bounds[0]);\\n\\n  vec3 realNormal = signAxis * normal;\\n\\n  if(dot(realNormal, enable) &gt; 0.0) {\\n    vec3 minRange = min(bounds[0], bounds[1]);\\n    vec3 maxRange = max(bounds[0], bounds[1]);\\n    vec3 nPosition = mix(minRange, maxRange, 0.5 * (position + 1.0));\\n    gl_Position = projection * view * model * vec4(nPosition, 1.0);\\n  } else {\\n    gl_Position = vec4(0,0,0,0);\\n  }\\n\\n  colorChannel = abs(realNormal);\\n}\"]),u=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec4 colors[3];\\n\\nvarying vec3 colorChannel;\\n\\nvoid main() {\\n  gl_FragColor = colorChannel.x * colors[0] +\\n                 colorChannel.y * colors[1] +\\n                 colorChannel.z * colors[2];\\n}\"]);r.bg=function(t){return i(t,c,u,null,[{name:\"position\",type:\"vec3\"},{name:\"normal\",type:\"vec3\"}])}},{\"gl-shader\":132,glslify:231}],75:[function(t,e,r){(function(r){(function(){\"use strict\";e.exports=function(t,e,r,a,s,l){var u=n(t),f=i(t,[{buffer:u,size:3}]),h=o(t);h.attributes.position.location=0;var p=new c(t,h,u,f);return p.update(e,r,a,s,l),p};var n=t(\"gl-buffer\"),i=t(\"gl-vao\"),a=t(\"vectorize-text\"),o=t(\"./shaders\").text,s=window||r.global||{},l=s.__TEXT_CACHE||{};s.__TEXT_CACHE={};function c(t,e,r,n){this.gl=t,this.shader=e,this.buffer=r,this.vao=n,this.tickOffset=this.tickCount=this.labelOffset=this.labelCount=null}var u=c.prototype,f=[0,0];u.bind=function(t,e,r,n){this.vao.bind(),this.shader.bind();var i=this.shader.uniforms;i.model=t,i.view=e,i.projection=r,i.pixelScale=n,f[0]=this.gl.drawingBufferWidth,f[1]=this.gl.drawingBufferHeight,this.shader.uniforms.resolution=f},u.unbind=function(){this.vao.unbind()},u.update=function(t,e,r,n,i){var o=[];function s(t,e,r,n,i,s){var c=l[r];c||(c=l[r]={});var u=c[e];u||(u=c[e]=function(t,e){try{return a(t,e)}catch(e){return console.warn('error vectorizing text:\"'+t+'\" error:',e),{cells:[],positions:[]}}}(e,{triangles:!0,font:r,textAlign:\"center\",textBaseline:\"middle\",lineSpacing:i,styletags:s}));for(var f=(n||12)/12,h=u.positions,p=u.cells,d=0,m=p.length;d=0;--v){var y=h[g[v]];o.push(f*y[0],-f*y[1],t)}}for(var c=[0,0,0],u=[0,0,0],f=[0,0,0],h=[0,0,0],p={breaklines:!0,bolds:!0,italics:!0,subscripts:!0,superscripts:!0},d=0;d&lt;3;++d){f[d]=o.length/3|0,s(.5*(t[0][d]+t[1][d]),e[d],r[d],12,1.25,p),h[d]=(o.length/3|0)-f[d],c[d]=o.length/3|0;for(var m=0;m=0&amp;&amp;(i=r.length-n-1);var a=Math.pow(10,i),o=Math.round(t*e*a),s=o+\"\";if(s.indexOf(\"e\")&gt;=0)return s;var l=o/a,c=o%a;o&lt;0?(l=0|-Math.ceil(l),c=0|-c):(l=0|Math.floor(l),c|=0);var u=\"\"+l;if(o&lt;0&amp;&amp;(u=\"-\"+u),i){for(var f=\"\"+c;f.length=t[0][i];--o)a.push({x:o*e[i],text:n(e[i],o)});r.push(a)}return r},r.equal=function(t,e){for(var r=0;r&lt;3;++r){if(t[r].length!==e[r].length)return!1;for(var n=0;nr)throw new Error(\"gl-buffer: If resizing buffer, must not specify offset\");return t.bufferSubData(e,a,i),r}function u(t,e){for(var r=n.malloc(t.length,e),i=t.length,a=0;a=0;--n){if(e[n]!==r)return!1;r*=t[n]}return!0}(t.shape,t.stride))0===t.offset&amp;&amp;t.data.length===t.shape[0]?this.length=c(this.gl,this.type,this.length,this.usage,t.data,e):this.length=c(this.gl,this.type,this.length,this.usage,t.data.subarray(t.offset,t.shape[0]),e);else{var s=n.malloc(t.size,r),l=a(s,t.shape);i.assign(l,t),this.length=c(this.gl,this.type,this.length,this.usage,e&lt;0?s:s.subarray(0,t.size),e),n.free(s)}}else if(Array.isArray(t)){var f;f=this.type===this.gl.ELEMENT_ARRAY_BUFFER?u(t,\"uint16\"):u(t,\"float32\"),this.length=c(this.gl,this.type,this.length,this.usage,e&lt;0?f:f.subarray(0,t.length),e),n.free(f)}else if(\"object\"==typeof t&amp;&amp;\"number\"==typeof t.length)this.length=c(this.gl,this.type,this.length,this.usage,t,e);else{if(\"number\"!=typeof t&amp;&amp;void 0!==t)throw new Error(\"gl-buffer: Invalid data type\");if(e&gt;=0)throw new Error(\"gl-buffer: Cannot specify offset when resizing buffer\");(t|=0)&lt;=0&amp;&amp;(t=1),this.gl.bufferData(this.type,0|t,this.usage),this.length=t}},e.exports=function(t,e,r,n){if(r=r||t.ARRAY_BUFFER,n=n||t.DYNAMIC_DRAW,r!==t.ARRAY_BUFFER&amp;&amp;r!==t.ELEMENT_ARRAY_BUFFER)throw new Error(\"gl-buffer: Invalid type for webgl buffer, must be either gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER\");if(n!==t.DYNAMIC_DRAW&amp;&amp;n!==t.STATIC_DRAW&amp;&amp;n!==t.STREAM_DRAW)throw new Error(\"gl-buffer: Invalid usage for buffer, must be either gl.DYNAMIC_DRAW, gl.STATIC_DRAW or gl.STREAM_DRAW\");var i=t.createBuffer(),a=new s(t,r,i,0,n);return a.update(e),a}},{ndarray:259,\"ndarray-ops\":254,\"typedarray-pool\":308}],79:[function(t,e,r){\"use strict\";var n=t(\"gl-vec3\");e.exports=function(t,e){var r=t.positions,i=t.vectors,a={positions:[],vertexIntensity:[],vertexIntensityBounds:t.vertexIntensityBounds,vectors:[],cells:[],coneOffset:t.coneOffset,colormap:t.colormap};if(0===t.positions.length)return e&amp;&amp;(e[0]=[0,0,0],e[1]=[0,0,0]),a;for(var o=0,s=1/0,l=-1/0,c=1/0,u=-1/0,f=1/0,h=-1/0,p=null,d=null,m=[],g=1/0,v=!1,y=0;yo&amp;&amp;(o=n.length(b)),y){var _=2*n.distance(p,x)/(n.length(d)+n.length(b));_?(g=Math.min(g,_),v=!1):v=!0}v||(p=x,d=b),m.push(b)}var w=[s,c,f],T=[l,u,h];e&amp;&amp;(e[0]=w,e[1]=T),0===o&amp;&amp;(o=1);var k=1/o;isFinite(g)||(g=1),a.vectorScale=g;var A=t.coneSize||.5;t.absoluteConeSize&amp;&amp;(A=t.absoluteConeSize*k),a.coneScale=A;y=0;for(var M=0;y=1},p.isTransparent=function(){return this.opacity&lt;1},p.pickSlots=1,p.setPickBase=function(t){this.pickId=t},p.update=function(t){t=t||{};var e=this.gl;this.dirty=!0,\"lightPosition\"in t&amp;&amp;(this.lightPosition=t.lightPosition),\"opacity\"in t&amp;&amp;(this.opacity=t.opacity),\"ambient\"in t&amp;&amp;(this.ambientLight=t.ambient),\"diffuse\"in t&amp;&amp;(this.diffuseLight=t.diffuse),\"specular\"in t&amp;&amp;(this.specularLight=t.specular),\"roughness\"in t&amp;&amp;(this.roughness=t.roughness),\"fresnel\"in t&amp;&amp;(this.fresnel=t.fresnel),void 0!==t.tubeScale&amp;&amp;(this.tubeScale=t.tubeScale),void 0!==t.vectorScale&amp;&amp;(this.vectorScale=t.vectorScale),void 0!==t.coneScale&amp;&amp;(this.coneScale=t.coneScale),void 0!==t.coneOffset&amp;&amp;(this.coneOffset=t.coneOffset),t.colormap&amp;&amp;(this.texture.shape=[256,256],this.texture.minFilter=e.LINEAR_MIPMAP_LINEAR,this.texture.magFilter=e.LINEAR,this.texture.setPixels(function(t){for(var e=u({colormap:t,nshades:256,format:\"rgba\"}),r=new Uint8Array(1024),n=0;n&lt;256;++n){for(var i=e[n],a=0;a&lt;3;++a)r[4*n+a]=i[a];r[4*n+3]=255*i[3]}return c(r,[256,256,4],[4,0,1])}(t.colormap)),this.texture.generateMipmap());var r=t.cells,n=t.positions,i=t.vectors;if(n&amp;&amp;r&amp;&amp;i){var a=[],o=[],s=[],l=[],f=[];this.cells=r,this.positions=n,this.vectors=i;var h=t.meshColor||[1,1,1,1],p=t.vertexIntensity,d=1/0,m=-1/0;if(p)if(t.vertexIntensityBounds)d=+t.vertexIntensityBounds[0],m=+t.vertexIntensityBounds[1];else for(var g=0;g0){var m=this.triShader;m.bind(),m.uniforms=c,this.triangleVAO.bind(),e.drawArrays(e.TRIANGLES,0,3*this.triangleCount),this.triangleVAO.unbind()}},p.drawPick=function(t){t=t||{};for(var e=this.gl,r=t.model||f,n=t.view||f,i=t.projection||f,a=[[-1e6,-1e6,-1e6],[1e6,1e6,1e6]],o=0;o&lt;3;++o)a[0][o]=Math.max(a[0][o],this.clipBounds[0][o]),a[1][o]=Math.min(a[1][o],this.clipBounds[1][o]);this._model=[].slice.call(r),this._view=[].slice.call(n),this._projection=[].slice.call(i),this._resolution=[e.drawingBufferWidth,e.drawingBufferHeight];var s={model:r,view:n,projection:i,clipBounds:a,tubeScale:this.tubeScale,vectorScale:this.vectorScale,coneScale:this.coneScale,coneOffset:this.coneOffset,pickId:this.pickId/255},l=this.pickShader;l.bind(),l.uniforms=s,this.triangleCount&gt;0&amp;&amp;(this.triangleVAO.bind(),e.drawArrays(e.TRIANGLES,0,3*this.triangleCount),this.triangleVAO.unbind())},p.pick=function(t){if(!t)return null;if(t.id!==this.pickId)return null;var e=t.value[0]+256*t.value[1]+65536*t.value[2],r=this.cells[e],n=this.positions[r[1]].slice(0,3),i={position:n,dataCoordinate:n,index:Math.floor(r[1]/48)};return\"cone\"===this.traceType?i.index=Math.floor(r[1]/48):\"streamtube\"===this.traceType&amp;&amp;(i.intensity=this.intensity[r[1]],i.velocity=this.vectors[r[1]].slice(0,3),i.divergence=this.vectors[r[1]][3],i.index=e),i},p.dispose=function(){this.texture.dispose(),this.triShader.dispose(),this.pickShader.dispose(),this.triangleVAO.dispose(),this.trianglePositions.dispose(),this.triangleVectors.dispose(),this.triangleColors.dispose(),this.triangleUVs.dispose(),this.triangleIds.dispose()},e.exports=function(t,e,r){var n=r.shaders;1===arguments.length&amp;&amp;(t=(e=t).gl);var s=d(t,n),l=m(t,n),u=o(t,c(new Uint8Array([255,255,255,255]),[1,1,4]));u.generateMipmap(),u.minFilter=t.LINEAR_MIPMAP_LINEAR,u.magFilter=t.LINEAR;var f=i(t),p=i(t),g=i(t),v=i(t),y=i(t),x=a(t,[{buffer:f,type:t.FLOAT,size:4},{buffer:y,type:t.UNSIGNED_BYTE,size:4,normalized:!0},{buffer:g,type:t.FLOAT,size:4},{buffer:v,type:t.FLOAT,size:2},{buffer:p,type:t.FLOAT,size:4}]),b=new h(t,u,s,l,f,p,y,g,v,x,r.traceType||\"cone\");return b.update(e),b}},{colormap:53,\"gl-buffer\":78,\"gl-mat4/invert\":98,\"gl-mat4/multiply\":100,\"gl-shader\":132,\"gl-texture2d\":146,\"gl-vao\":150,ndarray:259}],81:[function(t,e,r){var n=t(\"glslify\"),i=n([\"precision highp float;\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvec3 getOrthogonalVector(vec3 v) {\\n  // Return up-vector for only-z vector.\\n  // Return ax + by + cz = 0, a point that lies on the plane that has v as a normal and that isn't (0,0,0).\\n  // From the above if-statement we have ||a|| &gt; 0  U  ||b|| &gt; 0.\\n  // Assign z = 0, x = -b, y = a:\\n  // a*-b + b*a + c*0 = -ba + ba + 0 = 0\\n  if (v.x*v.x &gt; v.z*v.z || v.y*v.y &gt; v.z*v.z) {\\n    return normalize(vec3(-v.y, v.x, 0.0));\\n  } else {\\n    return normalize(vec3(0.0, v.z, -v.y));\\n  }\\n}\\n\\n// Calculate the cone vertex and normal at the given index.\\n//\\n// The returned vertex is for a cone with its top at origin and height of 1.0,\\n// pointing in the direction of the vector attribute.\\n//\\n// Each cone is made up of a top vertex, a center base vertex and base perimeter vertices.\\n// These vertices are used to make up the triangles of the cone by the following:\\n//   segment + 0 top vertex\\n//   segment + 1 perimeter vertex a+1\\n//   segment + 2 perimeter vertex a\\n//   segment + 3 center base vertex\\n//   segment + 4 perimeter vertex a\\n//   segment + 5 perimeter vertex a+1\\n// Where segment is the number of the radial segment * 6 and a is the angle at that radial segment.\\n// To go from index to segment, floor(index / 6)\\n// To go from segment to angle, 2*pi * (segment/segmentCount)\\n// To go from index to segment index, index - (segment*6)\\n//\\nvec3 getConePosition(vec3 d, float rawIndex, float coneOffset, out vec3 normal) {\\n\\n  const float segmentCount = 8.0;\\n\\n  float index = rawIndex - floor(rawIndex /\\n    (segmentCount * 6.0)) *\\n    (segmentCount * 6.0);\\n\\n  float segment = floor(0.001 + index/6.0);\\n  float segmentIndex = index - (segment*6.0);\\n\\n  normal = -normalize(d);\\n\\n  if (segmentIndex &gt; 2.99 &amp;&amp; segmentIndex &lt; 3.01) {\\n    return mix(vec3(0.0), -d, coneOffset);\\n  }\\n\\n  float nextAngle = (\\n    (segmentIndex &gt; 0.99 &amp;&amp;  segmentIndex &lt; 1.01) ||\\n    (segmentIndex &gt; 4.99 &amp;&amp;  segmentIndex &lt; 5.01)\\n  ) ? 1.0 : 0.0;\\n  float angle = 2.0 * 3.14159 * ((segment + nextAngle) / segmentCount);\\n\\n  vec3 v1 = mix(d, vec3(0.0), coneOffset);\\n  vec3 v2 = v1 - d;\\n\\n  vec3 u = getOrthogonalVector(d);\\n  vec3 v = normalize(cross(u, d));\\n\\n  vec3 x = u * cos(angle) * length(d)*0.25;\\n  vec3 y = v * sin(angle) * length(d)*0.25;\\n  vec3 v3 = v2 + x + y;\\n  if (segmentIndex &lt; 3.0) {\\n    vec3 tx = u * sin(angle);\\n    vec3 ty = v * -cos(angle);\\n    vec3 tangent = tx + ty;\\n    normal = normalize(cross(v3 - v1, tangent));\\n  }\\n\\n  if (segmentIndex == 0.0) {\\n    return mix(d, vec3(0.0), coneOffset);\\n  }\\n  return v3;\\n}\\n\\nattribute vec3 vector;\\nattribute vec4 color, position;\\nattribute vec2 uv;\\n\\nuniform float vectorScale, coneScale, coneOffset;\\nuniform mat4 model, view, projection, inverseModel;\\nuniform vec3 eyePosition, lightPosition;\\n\\nvarying vec3 f_normal, f_lightDirection, f_eyeDirection, f_data, f_position;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  // Scale the vector magnitude to stay constant with\\n  // model &amp; view changes.\\n  vec3 normal;\\n  vec3 XYZ = getConePosition(mat3(model) * ((vectorScale * coneScale) * vector), position.w, coneOffset, normal);\\n  vec4 conePosition = model * vec4(position.xyz, 1.0) + vec4(XYZ, 0.0);\\n\\n  //Lighting geometry parameters\\n  vec4 cameraCoordinate = view * conePosition;\\n  cameraCoordinate.xyz /= cameraCoordinate.w;\\n  f_lightDirection = lightPosition - cameraCoordinate.xyz;\\n  f_eyeDirection   = eyePosition - cameraCoordinate.xyz;\\n  f_normal = normalize((vec4(normal, 0.0) * inverseModel).xyz);\\n\\n  // vec4 m_position  = model * vec4(conePosition, 1.0);\\n  vec4 t_position  = view * conePosition;\\n  gl_Position      = projection * t_position;\\n\\n  f_color          = color;\\n  f_data           = conePosition.xyz;\\n  f_position       = position.xyz;\\n  f_uv             = uv;\\n}\\n\"]),a=n([\"#extension GL_OES_standard_derivatives : enable\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nfloat beckmannDistribution(float x, float roughness) {\\n  float NdotH = max(x, 0.0001);\\n  float cos2Alpha = NdotH * NdotH;\\n  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;\\n  float roughness2 = roughness * roughness;\\n  float denom = 3.141592653589793 * roughness2 * cos2Alpha * cos2Alpha;\\n  return exp(tan2Alpha / roughness2) / denom;\\n}\\n\\nfloat cookTorranceSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float roughness,\\n  float fresnel) {\\n\\n  float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);\\n  float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);\\n\\n  //Half angle vector\\n  vec3 H = normalize(lightDirection + viewDirection);\\n\\n  //Geometric term\\n  float NdotH = max(dot(surfaceNormal, H), 0.0);\\n  float VdotH = max(dot(viewDirection, H), 0.000001);\\n  float LdotH = max(dot(lightDirection, H), 0.000001);\\n  float G1 = (2.0 * NdotH * VdotN) / VdotH;\\n  float G2 = (2.0 * NdotH * LdotN) / LdotH;\\n  float G = min(1.0, min(G1, G2));\\n  \\n  //Distribution term\\n  float D = beckmannDistribution(NdotH, roughness);\\n\\n  //Fresnel term\\n  float F = pow(1.0 - VdotN, fresnel);\\n\\n  //Multiply terms and done\\n  return  G * F * D / max(3.14159265 * VdotN, 0.000001);\\n}\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 clipBounds[2];\\nuniform float roughness, fresnel, kambient, kdiffuse, kspecular, opacity;\\nuniform sampler2D texture;\\n\\nvarying vec3 f_normal, f_lightDirection, f_eyeDirection, f_data, f_position;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_position)) discard;\\n  vec3 N = normalize(f_normal);\\n  vec3 L = normalize(f_lightDirection);\\n  vec3 V = normalize(f_eyeDirection);\\n\\n  if(gl_FrontFacing) {\\n    N = -N;\\n  }\\n\\n  float specular = min(1.0, max(0.0, cookTorranceSpecular(L, V, N, roughness, fresnel)));\\n  float diffuse  = min(kambient + kdiffuse * max(dot(N, L), 0.0), 1.0);\\n\\n  vec4 surfaceColor = f_color * texture2D(texture, f_uv);\\n  vec4 litColor = surfaceColor.a * vec4(diffuse * surfaceColor.rgb + kspecular * vec3(1,1,1) * specular,  1.0);\\n\\n  gl_FragColor = litColor * opacity;\\n}\\n\"]),o=n([\"precision highp float;\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvec3 getOrthogonalVector(vec3 v) {\\n  // Return up-vector for only-z vector.\\n  // Return ax + by + cz = 0, a point that lies on the plane that has v as a normal and that isn't (0,0,0).\\n  // From the above if-statement we have ||a|| &gt; 0  U  ||b|| &gt; 0.\\n  // Assign z = 0, x = -b, y = a:\\n  // a*-b + b*a + c*0 = -ba + ba + 0 = 0\\n  if (v.x*v.x &gt; v.z*v.z || v.y*v.y &gt; v.z*v.z) {\\n    return normalize(vec3(-v.y, v.x, 0.0));\\n  } else {\\n    return normalize(vec3(0.0, v.z, -v.y));\\n  }\\n}\\n\\n// Calculate the cone vertex and normal at the given index.\\n//\\n// The returned vertex is for a cone with its top at origin and height of 1.0,\\n// pointing in the direction of the vector attribute.\\n//\\n// Each cone is made up of a top vertex, a center base vertex and base perimeter vertices.\\n// These vertices are used to make up the triangles of the cone by the following:\\n//   segment + 0 top vertex\\n//   segment + 1 perimeter vertex a+1\\n//   segment + 2 perimeter vertex a\\n//   segment + 3 center base vertex\\n//   segment + 4 perimeter vertex a\\n//   segment + 5 perimeter vertex a+1\\n// Where segment is the number of the radial segment * 6 and a is the angle at that radial segment.\\n// To go from index to segment, floor(index / 6)\\n// To go from segment to angle, 2*pi * (segment/segmentCount)\\n// To go from index to segment index, index - (segment*6)\\n//\\nvec3 getConePosition(vec3 d, float rawIndex, float coneOffset, out vec3 normal) {\\n\\n  const float segmentCount = 8.0;\\n\\n  float index = rawIndex - floor(rawIndex /\\n    (segmentCount * 6.0)) *\\n    (segmentCount * 6.0);\\n\\n  float segment = floor(0.001 + index/6.0);\\n  float segmentIndex = index - (segment*6.0);\\n\\n  normal = -normalize(d);\\n\\n  if (segmentIndex &gt; 2.99 &amp;&amp; segmentIndex &lt; 3.01) {\\n    return mix(vec3(0.0), -d, coneOffset);\\n  }\\n\\n  float nextAngle = (\\n    (segmentIndex &gt; 0.99 &amp;&amp;  segmentIndex &lt; 1.01) ||\\n    (segmentIndex &gt; 4.99 &amp;&amp;  segmentIndex &lt; 5.01)\\n  ) ? 1.0 : 0.0;\\n  float angle = 2.0 * 3.14159 * ((segment + nextAngle) / segmentCount);\\n\\n  vec3 v1 = mix(d, vec3(0.0), coneOffset);\\n  vec3 v2 = v1 - d;\\n\\n  vec3 u = getOrthogonalVector(d);\\n  vec3 v = normalize(cross(u, d));\\n\\n  vec3 x = u * cos(angle) * length(d)*0.25;\\n  vec3 y = v * sin(angle) * length(d)*0.25;\\n  vec3 v3 = v2 + x + y;\\n  if (segmentIndex &lt; 3.0) {\\n    vec3 tx = u * sin(angle);\\n    vec3 ty = v * -cos(angle);\\n    vec3 tangent = tx + ty;\\n    normal = normalize(cross(v3 - v1, tangent));\\n  }\\n\\n  if (segmentIndex == 0.0) {\\n    return mix(d, vec3(0.0), coneOffset);\\n  }\\n  return v3;\\n}\\n\\nattribute vec4 vector;\\nattribute vec4 position;\\nattribute vec4 id;\\n\\nuniform mat4 model, view, projection;\\nuniform float vectorScale, coneScale, coneOffset;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  vec3 normal;\\n  vec3 XYZ = getConePosition(mat3(model) * ((vectorScale * coneScale) * vector.xyz), position.w, coneOffset, normal);\\n  vec4 conePosition = model * vec4(position.xyz, 1.0) + vec4(XYZ, 0.0);\\n  gl_Position = projection * view * conePosition;\\n  f_id        = id;\\n  f_position  = position.xyz;\\n}\\n\"]),s=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3  clipBounds[2];\\nuniform float pickId;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_position)) discard;\\n\\n  gl_FragColor = vec4(pickId, f_id.xyz);\\n}\"]);r.meshShader={vertex:i,fragment:a,attributes:[{name:\"position\",type:\"vec4\"},{name:\"color\",type:\"vec4\"},{name:\"uv\",type:\"vec2\"},{name:\"vector\",type:\"vec3\"}]},r.pickShader={vertex:o,fragment:s,attributes:[{name:\"position\",type:\"vec4\"},{name:\"id\",type:\"vec4\"},{name:\"vector\",type:\"vec3\"}]}},{glslify:231}],82:[function(t,e,r){e.exports={0:\"NONE\",1:\"ONE\",2:\"LINE_LOOP\",3:\"LINE_STRIP\",4:\"TRIANGLES\",5:\"TRIANGLE_STRIP\",6:\"TRIANGLE_FAN\",256:\"DEPTH_BUFFER_BIT\",512:\"NEVER\",513:\"LESS\",514:\"EQUAL\",515:\"LEQUAL\",516:\"GREATER\",517:\"NOTEQUAL\",518:\"GEQUAL\",519:\"ALWAYS\",768:\"SRC_COLOR\",769:\"ONE_MINUS_SRC_COLOR\",770:\"SRC_ALPHA\",771:\"ONE_MINUS_SRC_ALPHA\",772:\"DST_ALPHA\",773:\"ONE_MINUS_DST_ALPHA\",774:\"DST_COLOR\",775:\"ONE_MINUS_DST_COLOR\",776:\"SRC_ALPHA_SATURATE\",1024:\"STENCIL_BUFFER_BIT\",1028:\"FRONT\",1029:\"BACK\",1032:\"FRONT_AND_BACK\",1280:\"INVALID_ENUM\",1281:\"INVALID_VALUE\",1282:\"INVALID_OPERATION\",1285:\"OUT_OF_MEMORY\",1286:\"INVALID_FRAMEBUFFER_OPERATION\",2304:\"CW\",2305:\"CCW\",2849:\"LINE_WIDTH\",2884:\"CULL_FACE\",2885:\"CULL_FACE_MODE\",2886:\"FRONT_FACE\",2928:\"DEPTH_RANGE\",2929:\"DEPTH_TEST\",2930:\"DEPTH_WRITEMASK\",2931:\"DEPTH_CLEAR_VALUE\",2932:\"DEPTH_FUNC\",2960:\"STENCIL_TEST\",2961:\"STENCIL_CLEAR_VALUE\",2962:\"STENCIL_FUNC\",2963:\"STENCIL_VALUE_MASK\",2964:\"STENCIL_FAIL\",2965:\"STENCIL_PASS_DEPTH_FAIL\",2966:\"STENCIL_PASS_DEPTH_PASS\",2967:\"STENCIL_REF\",2968:\"STENCIL_WRITEMASK\",2978:\"VIEWPORT\",3024:\"DITHER\",3042:\"BLEND\",3088:\"SCISSOR_BOX\",3089:\"SCISSOR_TEST\",3106:\"COLOR_CLEAR_VALUE\",3107:\"COLOR_WRITEMASK\",3317:\"UNPACK_ALIGNMENT\",3333:\"PACK_ALIGNMENT\",3379:\"MAX_TEXTURE_SIZE\",3386:\"MAX_VIEWPORT_DIMS\",3408:\"SUBPIXEL_BITS\",3410:\"RED_BITS\",3411:\"GREEN_BITS\",3412:\"BLUE_BITS\",3413:\"ALPHA_BITS\",3414:\"DEPTH_BITS\",3415:\"STENCIL_BITS\",3553:\"TEXTURE_2D\",4352:\"DONT_CARE\",4353:\"FASTEST\",4354:\"NICEST\",5120:\"BYTE\",5121:\"UNSIGNED_BYTE\",5122:\"SHORT\",5123:\"UNSIGNED_SHORT\",5124:\"INT\",5125:\"UNSIGNED_INT\",5126:\"FLOAT\",5386:\"INVERT\",5890:\"TEXTURE\",6401:\"STENCIL_INDEX\",6402:\"DEPTH_COMPONENT\",6406:\"ALPHA\",6407:\"RGB\",6408:\"RGBA\",6409:\"LUMINANCE\",6410:\"LUMINANCE_ALPHA\",7680:\"KEEP\",7681:\"REPLACE\",7682:\"INCR\",7683:\"DECR\",7936:\"VENDOR\",7937:\"RENDERER\",7938:\"VERSION\",9728:\"NEAREST\",9729:\"LINEAR\",9984:\"NEAREST_MIPMAP_NEAREST\",9985:\"LINEAR_MIPMAP_NEAREST\",9986:\"NEAREST_MIPMAP_LINEAR\",9987:\"LINEAR_MIPMAP_LINEAR\",10240:\"TEXTURE_MAG_FILTER\",10241:\"TEXTURE_MIN_FILTER\",10242:\"TEXTURE_WRAP_S\",10243:\"TEXTURE_WRAP_T\",10497:\"REPEAT\",10752:\"POLYGON_OFFSET_UNITS\",16384:\"COLOR_BUFFER_BIT\",32769:\"CONSTANT_COLOR\",32770:\"ONE_MINUS_CONSTANT_COLOR\",32771:\"CONSTANT_ALPHA\",32772:\"ONE_MINUS_CONSTANT_ALPHA\",32773:\"BLEND_COLOR\",32774:\"FUNC_ADD\",32777:\"BLEND_EQUATION_RGB\",32778:\"FUNC_SUBTRACT\",32779:\"FUNC_REVERSE_SUBTRACT\",32819:\"UNSIGNED_SHORT_4_4_4_4\",32820:\"UNSIGNED_SHORT_5_5_5_1\",32823:\"POLYGON_OFFSET_FILL\",32824:\"POLYGON_OFFSET_FACTOR\",32854:\"RGBA4\",32855:\"RGB5_A1\",32873:\"TEXTURE_BINDING_2D\",32926:\"SAMPLE_ALPHA_TO_COVERAGE\",32928:\"SAMPLE_COVERAGE\",32936:\"SAMPLE_BUFFERS\",32937:\"SAMPLES\",32938:\"SAMPLE_COVERAGE_VALUE\",32939:\"SAMPLE_COVERAGE_INVERT\",32968:\"BLEND_DST_RGB\",32969:\"BLEND_SRC_RGB\",32970:\"BLEND_DST_ALPHA\",32971:\"BLEND_SRC_ALPHA\",33071:\"CLAMP_TO_EDGE\",33170:\"GENERATE_MIPMAP_HINT\",33189:\"DEPTH_COMPONENT16\",33306:\"DEPTH_STENCIL_ATTACHMENT\",33635:\"UNSIGNED_SHORT_5_6_5\",33648:\"MIRRORED_REPEAT\",33901:\"ALIASED_POINT_SIZE_RANGE\",33902:\"ALIASED_LINE_WIDTH_RANGE\",33984:\"TEXTURE0\",33985:\"TEXTURE1\",33986:\"TEXTURE2\",33987:\"TEXTURE3\",33988:\"TEXTURE4\",33989:\"TEXTURE5\",33990:\"TEXTURE6\",33991:\"TEXTURE7\",33992:\"TEXTURE8\",33993:\"TEXTURE9\",33994:\"TEXTURE10\",33995:\"TEXTURE11\",33996:\"TEXTURE12\",33997:\"TEXTURE13\",33998:\"TEXTURE14\",33999:\"TEXTURE15\",34e3:\"TEXTURE16\",34001:\"TEXTURE17\",34002:\"TEXTURE18\",34003:\"TEXTURE19\",34004:\"TEXTURE20\",34005:\"TEXTURE21\",34006:\"TEXTURE22\",34007:\"TEXTURE23\",34008:\"TEXTURE24\",34009:\"TEXTURE25\",34010:\"TEXTURE26\",34011:\"TEXTURE27\",34012:\"TEXTURE28\",34013:\"TEXTURE29\",34014:\"TEXTURE30\",34015:\"TEXTURE31\",34016:\"ACTIVE_TEXTURE\",34024:\"MAX_RENDERBUFFER_SIZE\",34041:\"DEPTH_STENCIL\",34055:\"INCR_WRAP\",34056:\"DECR_WRAP\",34067:\"TEXTURE_CUBE_MAP\",34068:\"TEXTURE_BINDING_CUBE_MAP\",34069:\"TEXTURE_CUBE_MAP_POSITIVE_X\",34070:\"TEXTURE_CUBE_MAP_NEGATIVE_X\",34071:\"TEXTURE_CUBE_MAP_POSITIVE_Y\",34072:\"TEXTURE_CUBE_MAP_NEGATIVE_Y\",34073:\"TEXTURE_CUBE_MAP_POSITIVE_Z\",34074:\"TEXTURE_CUBE_MAP_NEGATIVE_Z\",34076:\"MAX_CUBE_MAP_TEXTURE_SIZE\",34338:\"VERTEX_ATTRIB_ARRAY_ENABLED\",34339:\"VERTEX_ATTRIB_ARRAY_SIZE\",34340:\"VERTEX_ATTRIB_ARRAY_STRIDE\",34341:\"VERTEX_ATTRIB_ARRAY_TYPE\",34342:\"CURRENT_VERTEX_ATTRIB\",34373:\"VERTEX_ATTRIB_ARRAY_POINTER\",34466:\"NUM_COMPRESSED_TEXTURE_FORMATS\",34467:\"COMPRESSED_TEXTURE_FORMATS\",34660:\"BUFFER_SIZE\",34661:\"BUFFER_USAGE\",34816:\"STENCIL_BACK_FUNC\",34817:\"STENCIL_BACK_FAIL\",34818:\"STENCIL_BACK_PASS_DEPTH_FAIL\",34819:\"STENCIL_BACK_PASS_DEPTH_PASS\",34877:\"BLEND_EQUATION_ALPHA\",34921:\"MAX_VERTEX_ATTRIBS\",34922:\"VERTEX_ATTRIB_ARRAY_NORMALIZED\",34930:\"MAX_TEXTURE_IMAGE_UNITS\",34962:\"ARRAY_BUFFER\",34963:\"ELEMENT_ARRAY_BUFFER\",34964:\"ARRAY_BUFFER_BINDING\",34965:\"ELEMENT_ARRAY_BUFFER_BINDING\",34975:\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",35040:\"STREAM_DRAW\",35044:\"STATIC_DRAW\",35048:\"DYNAMIC_DRAW\",35632:\"FRAGMENT_SHADER\",35633:\"VERTEX_SHADER\",35660:\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",35661:\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",35663:\"SHADER_TYPE\",35664:\"FLOAT_VEC2\",35665:\"FLOAT_VEC3\",35666:\"FLOAT_VEC4\",35667:\"INT_VEC2\",35668:\"INT_VEC3\",35669:\"INT_VEC4\",35670:\"BOOL\",35671:\"BOOL_VEC2\",35672:\"BOOL_VEC3\",35673:\"BOOL_VEC4\",35674:\"FLOAT_MAT2\",35675:\"FLOAT_MAT3\",35676:\"FLOAT_MAT4\",35678:\"SAMPLER_2D\",35680:\"SAMPLER_CUBE\",35712:\"DELETE_STATUS\",35713:\"COMPILE_STATUS\",35714:\"LINK_STATUS\",35715:\"VALIDATE_STATUS\",35716:\"INFO_LOG_LENGTH\",35717:\"ATTACHED_SHADERS\",35718:\"ACTIVE_UNIFORMS\",35719:\"ACTIVE_UNIFORM_MAX_LENGTH\",35720:\"SHADER_SOURCE_LENGTH\",35721:\"ACTIVE_ATTRIBUTES\",35722:\"ACTIVE_ATTRIBUTE_MAX_LENGTH\",35724:\"SHADING_LANGUAGE_VERSION\",35725:\"CURRENT_PROGRAM\",36003:\"STENCIL_BACK_REF\",36004:\"STENCIL_BACK_VALUE_MASK\",36005:\"STENCIL_BACK_WRITEMASK\",36006:\"FRAMEBUFFER_BINDING\",36007:\"RENDERBUFFER_BINDING\",36048:\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",36049:\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",36050:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",36051:\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",36053:\"FRAMEBUFFER_COMPLETE\",36054:\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",36055:\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",36057:\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",36061:\"FRAMEBUFFER_UNSUPPORTED\",36064:\"COLOR_ATTACHMENT0\",36096:\"DEPTH_ATTACHMENT\",36128:\"STENCIL_ATTACHMENT\",36160:\"FRAMEBUFFER\",36161:\"RENDERBUFFER\",36162:\"RENDERBUFFER_WIDTH\",36163:\"RENDERBUFFER_HEIGHT\",36164:\"RENDERBUFFER_INTERNAL_FORMAT\",36168:\"STENCIL_INDEX8\",36176:\"RENDERBUFFER_RED_SIZE\",36177:\"RENDERBUFFER_GREEN_SIZE\",36178:\"RENDERBUFFER_BLUE_SIZE\",36179:\"RENDERBUFFER_ALPHA_SIZE\",36180:\"RENDERBUFFER_DEPTH_SIZE\",36181:\"RENDERBUFFER_STENCIL_SIZE\",36194:\"RGB565\",36336:\"LOW_FLOAT\",36337:\"MEDIUM_FLOAT\",36338:\"HIGH_FLOAT\",36339:\"LOW_INT\",36340:\"MEDIUM_INT\",36341:\"HIGH_INT\",36346:\"SHADER_COMPILER\",36347:\"MAX_VERTEX_UNIFORM_VECTORS\",36348:\"MAX_VARYING_VECTORS\",36349:\"MAX_FRAGMENT_UNIFORM_VECTORS\",37440:\"UNPACK_FLIP_Y_WEBGL\",37441:\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",37442:\"CONTEXT_LOST_WEBGL\",37443:\"UNPACK_COLORSPACE_CONVERSION_WEBGL\",37444:\"BROWSER_DEFAULT_WEBGL\"}},{}],83:[function(t,e,r){var n=t(\"./1.0/numbers\");e.exports=function(t){return n[t]}},{\"./1.0/numbers\":82}],84:[function(t,e,r){\"use strict\";e.exports=function(t){var e=t.gl,r=n(e),o=i(e,[{buffer:r,type:e.FLOAT,size:3,offset:0,stride:40},{buffer:r,type:e.FLOAT,size:4,offset:12,stride:40},{buffer:r,type:e.FLOAT,size:3,offset:28,stride:40}]),l=a(e);l.attributes.position.location=0,l.attributes.color.location=1,l.attributes.offset.location=2;var c=new s(e,r,o,l);return c.update(t),c};var n=t(\"gl-buffer\"),i=t(\"gl-vao\"),a=t(\"./shaders/index\"),o=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];function s(t,e,r,n){this.gl=t,this.shader=n,this.buffer=e,this.vao=r,this.pixelRatio=1,this.bounds=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],this.clipBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.lineWidth=[1,1,1],this.capSize=[10,10,10],this.lineCount=[0,0,0],this.lineOffset=[0,0,0],this.opacity=1,this.hasAlpha=!1}var l=s.prototype;function c(t,e){for(var r=0;r&lt;3;++r)t[0][r]=Math.min(t[0][r],e[r]),t[1][r]=Math.max(t[1][r],e[r])}l.isOpaque=function(){return!this.hasAlpha},l.isTransparent=function(){return this.hasAlpha},l.drawTransparent=l.draw=function(t){var e=this.gl,r=this.shader.uniforms;this.shader.bind();var n=r.view=t.view||o,i=r.projection=t.projection||o;r.model=t.model||o,r.clipBounds=this.clipBounds,r.opacity=this.opacity;var a=n[12],s=n[13],l=n[14],c=n[15],u=(t._ortho||!1?2:1)*this.pixelRatio*(i[3]*a+i[7]*s+i[11]*l+i[15]*c)/e.drawingBufferHeight;this.vao.bind();for(var f=0;f&lt;3;++f)e.lineWidth(this.lineWidth[f]*this.pixelRatio),r.capSize=this.capSize[f]*u,this.lineCount[f]&amp;&amp;e.drawArrays(e.LINES,this.lineOffset[f],this.lineCount[f]);this.vao.unbind()};var u=function(){for(var t=new Array(3),e=0;e&lt;3;++e){for(var r=[],n=1;n&lt;=2;++n)for(var i=-1;i&lt;=1;i+=2){var a=[0,0,0];a[(n+e)%3]=i,r.push(a)}t[e]=r}return t}();function f(t,e,r,n){for(var i=u[n],a=0;a0)(m=u.slice())[s]+=p[1][s],i.push(u[0],u[1],u[2],d[0],d[1],d[2],d[3],0,0,0,m[0],m[1],m[2],d[0],d[1],d[2],d[3],0,0,0),c(this.bounds,m),o+=2+f(i,m,d,s)}}this.lineCount[s]=o-this.lineOffset[s]}this.buffer.update(i)}},l.dispose=function(){this.shader.dispose(),this.buffer.dispose(),this.vao.dispose()}},{\"./shaders/index\":85,\"gl-buffer\":78,\"gl-vao\":150}],85:[function(t,e,r){\"use strict\";var n=t(\"glslify\"),i=t(\"gl-shader\"),a=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position, offset;\\nattribute vec4 color;\\nuniform mat4 model, view, projection;\\nuniform float capSize;\\nvarying vec4 fragColor;\\nvarying vec3 fragPosition;\\n\\nvoid main() {\\n  vec4 worldPosition  = model * vec4(position, 1.0);\\n  worldPosition       = (worldPosition / worldPosition.w) + vec4(capSize * offset, 0.0);\\n  gl_Position         = projection * view * worldPosition;\\n  fragColor           = color;\\n  fragPosition        = position;\\n}\"]),o=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 clipBounds[2];\\nuniform float opacity;\\nvarying vec3 fragPosition;\\nvarying vec4 fragColor;\\n\\nvoid main() {\\n  if (\\n    outOfRange(clipBounds[0], clipBounds[1], fragPosition) ||\\n    fragColor.a * opacity == 0.\\n  ) discard;\\n\\n  gl_FragColor = opacity * fragColor;\\n}\"]);e.exports=function(t){return i(t,a,o,null,[{name:\"position\",type:\"vec3\"},{name:\"color\",type:\"vec4\"},{name:\"offset\",type:\"vec3\"}])}},{\"gl-shader\":132,glslify:231}],86:[function(t,e,r){\"use strict\";var n=t(\"gl-texture2d\");e.exports=function(t,e,r,n){i||(i=t.FRAMEBUFFER_UNSUPPORTED,a=t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT,o=t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS,s=t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);var c=t.getExtension(\"WEBGL_draw_buffers\");!l&amp;&amp;c&amp;&amp;function(t,e){var r=t.getParameter(e.MAX_COLOR_ATTACHMENTS_WEBGL);l=new Array(r+1);for(var n=0;n&lt;=r;++n){for(var i=new Array(r),a=0;au||r&lt;0||r&gt;u)throw new Error(\"gl-fbo: Parameters are too large for FBO\");var f=1;if(\"color\"in(n=n||{})){if((f=Math.max(0|n.color,0))&lt;0)throw new Error(\"gl-fbo: Must specify a nonnegative number of colors\");if(f&gt;1){if(!c)throw new Error(\"gl-fbo: Multiple draw buffer extension not supported\");if(f&gt;t.getParameter(c.MAX_COLOR_ATTACHMENTS_WEBGL))throw new Error(\"gl-fbo: Context does not support \"+f+\" draw buffers\")}}var h=t.UNSIGNED_BYTE,p=t.getExtension(\"OES_texture_float\");if(n.float&amp;&amp;f&gt;0){if(!p)throw new Error(\"gl-fbo: Context does not support floating point textures\");h=t.FLOAT}else n.preferFloat&amp;&amp;f&gt;0&amp;&amp;p&amp;&amp;(h=t.FLOAT);var m=!0;\"depth\"in n&amp;&amp;(m=!!n.depth);var g=!1;\"stencil\"in n&amp;&amp;(g=!!n.stencil);return new d(t,e,r,h,f,m,g,c)};var i,a,o,s,l=null;function c(t){return[t.getParameter(t.FRAMEBUFFER_BINDING),t.getParameter(t.RENDERBUFFER_BINDING),t.getParameter(t.TEXTURE_BINDING_2D)]}function u(t,e){t.bindFramebuffer(t.FRAMEBUFFER,e[0]),t.bindRenderbuffer(t.RENDERBUFFER,e[1]),t.bindTexture(t.TEXTURE_2D,e[2])}function f(t){switch(t){case i:throw new Error(\"gl-fbo: Framebuffer unsupported\");case a:throw new Error(\"gl-fbo: Framebuffer incomplete attachment\");case o:throw new Error(\"gl-fbo: Framebuffer incomplete dimensions\");case s:throw new Error(\"gl-fbo: Framebuffer incomplete missing attachment\");default:throw new Error(\"gl-fbo: Framebuffer failed for unspecified reason\")}}function h(t,e,r,i,a,o){if(!i)return null;var s=n(t,e,r,a,i);return s.magFilter=t.NEAREST,s.minFilter=t.NEAREST,s.mipSamples=1,s.bind(),t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,s.handle,0),s}function p(t,e,r,n,i){var a=t.createRenderbuffer();return t.bindRenderbuffer(t.RENDERBUFFER,a),t.renderbufferStorage(t.RENDERBUFFER,n,e,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,i,t.RENDERBUFFER,a),a}function d(t,e,r,n,i,a,o,s){this.gl=t,this._shape=[0|e,0|r],this._destroyed=!1,this._ext=s,this.color=new Array(i);for(var d=0;d1&amp;&amp;s.drawBuffersWEBGL(l[o]);var y=r.getExtension(\"WEBGL_depth_texture\");y?d?t.depth=h(r,i,a,y.UNSIGNED_INT_24_8_WEBGL,r.DEPTH_STENCIL,r.DEPTH_STENCIL_ATTACHMENT):m&amp;&amp;(t.depth=h(r,i,a,r.UNSIGNED_SHORT,r.DEPTH_COMPONENT,r.DEPTH_ATTACHMENT)):m&amp;&amp;d?t._depth_rb=p(r,i,a,r.DEPTH_STENCIL,r.DEPTH_STENCIL_ATTACHMENT):m?t._depth_rb=p(r,i,a,r.DEPTH_COMPONENT16,r.DEPTH_ATTACHMENT):d&amp;&amp;(t._depth_rb=p(r,i,a,r.STENCIL_INDEX,r.STENCIL_ATTACHMENT));var x=r.checkFramebufferStatus(r.FRAMEBUFFER);if(x!==r.FRAMEBUFFER_COMPLETE){t._destroyed=!0,r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteFramebuffer(t.handle),t.handle=null,t.depth&amp;&amp;(t.depth.dispose(),t.depth=null),t._depth_rb&amp;&amp;(r.deleteRenderbuffer(t._depth_rb),t._depth_rb=null);for(v=0;vi||r&lt;0||r&gt;i)throw new Error(\"gl-fbo: Can't resize FBO, invalid dimensions\");t._shape[0]=e,t._shape[1]=r;for(var a=c(n),o=0;o&gt;8*p&amp;255;this.pickOffset=r,i.bind();var d=i.uniforms;d.viewTransform=t,d.pickOffset=e,d.shape=this.shape;var m=i.attributes;return this.positionBuffer.bind(),m.position.pointer(),this.weightBuffer.bind(),m.weight.pointer(s.UNSIGNED_BYTE,!1),this.idBuffer.bind(),m.pickId.pointer(s.UNSIGNED_BYTE,!1),s.drawArrays(s.TRIANGLES,0,o),r+this.shape[0]*this.shape[1]}}}(),f.pick=function(t,e,r){var n=this.pickOffset,i=this.shape[0]*this.shape[1];if(r=n+i)return null;var a=r-n,o=this.xData,s=this.yData;return{object:this,pointId:a,dataCoord:[o[a%this.shape[0]],s[a/this.shape[0]|0]]}},f.update=function(t){var e=(t=t||{}).shape||[0,0],r=t.x||i(e[0]),o=t.y||i(e[1]),s=t.z||new Float32Array(e[0]*e[1]),l=!1!==t.zsmooth;this.xData=r,this.yData=o;var c,u,f,p,d=t.colorLevels||[0],m=t.colorValues||[0,0,0,1],g=d.length,v=this.bounds;l?(c=v[0]=r[0],u=v[1]=o[0],f=v[2]=r[r.length-1],p=v[3]=o[o.length-1]):(c=v[0]=r[0]+(r[1]-r[0])/2,u=v[1]=o[0]+(o[1]-o[0])/2,f=v[2]=r[r.length-1]+(r[r.length-1]-r[r.length-2])/2,p=v[3]=o[o.length-1]+(o[o.length-1]-o[o.length-2])/2);var y=1/(f-c),x=1/(p-u),b=e[0],_=e[1];this.shape=[b,_];var w=(l?(b-1)*(_-1):b*_)*(h.length&gt;&gt;&gt;1);this.numVertices=w;for(var T=a.mallocUint8(4*w),k=a.mallocFloat32(2*w),A=a.mallocUint8(2*w),M=a.mallocUint32(w),S=0,E=l?b-1:b,L=l?_-1:_,C=0;C max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3      clipBounds[2];\\nuniform sampler2D dashTexture;\\nuniform float     dashScale;\\nuniform float     opacity;\\n\\nvarying vec3    worldPosition;\\nvarying float   pixelArcLength;\\nvarying vec4    fragColor;\\n\\nvoid main() {\\n  if (\\n    outOfRange(clipBounds[0], clipBounds[1], worldPosition) ||\\n    fragColor.a * opacity == 0.\\n  ) discard;\\n\\n  float dashWeight = texture2D(dashTexture, vec2(dashScale * pixelArcLength, 0)).r;\\n  if(dashWeight &lt; 0.5) {\\n    discard;\\n  }\\n  gl_FragColor = fragColor * opacity;\\n}\\n\"]),s=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\n#define FLOAT_MAX  1.70141184e38\\n#define FLOAT_MIN  1.17549435e-38\\n\\n// https://github.com/mikolalysenko/glsl-read-float/blob/master/index.glsl\\nvec4 packFloat(float v) {\\n  float av = abs(v);\\n\\n  //Handle special cases\\n  if(av &lt; FLOAT_MIN) {\\n    return vec4(0.0, 0.0, 0.0, 0.0);\\n  } else if(v &gt; FLOAT_MAX) {\\n    return vec4(127.0, 128.0, 0.0, 0.0) / 255.0;\\n  } else if(v &lt; -FLOAT_MAX) {\\n    return vec4(255.0, 128.0, 0.0, 0.0) / 255.0;\\n  }\\n\\n  vec4 c = vec4(0,0,0,0);\\n\\n  //Compute exponent and mantissa\\n  float e = floor(log2(av));\\n  float m = av * pow(2.0, -e) - 1.0;\\n\\n  //Unpack mantissa\\n  c[1] = floor(128.0 * m);\\n  m -= c[1] / 128.0;\\n  c[2] = floor(32768.0 * m);\\n  m -= c[2] / 32768.0;\\n  c[3] = floor(8388608.0 * m);\\n\\n  //Unpack exponent\\n  float ebias = e + 127.0;\\n  c[0] = floor(ebias / 2.0);\\n  ebias -= c[0] * 2.0;\\n  c[1] += floor(ebias) * 128.0;\\n\\n  //Unpack sign bit\\n  c[0] += 128.0 * step(0.0, -v);\\n\\n  //Scale back to range\\n  return c / 255.0;\\n}\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform float pickId;\\nuniform vec3 clipBounds[2];\\n\\nvarying vec3 worldPosition;\\nvarying float pixelArcLength;\\nvarying vec4 fragColor;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], worldPosition)) discard;\\n\\n  gl_FragColor = vec4(pickId/255.0, packFloat(pixelArcLength).xyz);\\n}\"]),l=[{name:\"position\",type:\"vec3\"},{name:\"nextPosition\",type:\"vec3\"},{name:\"arcLength\",type:\"float\"},{name:\"lineWidth\",type:\"float\"},{name:\"color\",type:\"vec4\"}];r.createShader=function(t){return i(t,a,o,null,l)},r.createPickShader=function(t){return i(t,a,s,null,l)}},{\"gl-shader\":132,glslify:231}],91:[function(t,e,r){\"use strict\";e.exports=function(t){var e=t.gl||t.scene&amp;&amp;t.scene.gl,r=f(e);r.attributes.position.location=0,r.attributes.nextPosition.location=1,r.attributes.arcLength.location=2,r.attributes.lineWidth.location=3,r.attributes.color.location=4;var o=h(e);o.attributes.position.location=0,o.attributes.nextPosition.location=1,o.attributes.arcLength.location=2,o.attributes.lineWidth.location=3,o.attributes.color.location=4;for(var s=n(e),l=i(e,[{buffer:s,size:3,offset:0,stride:48},{buffer:s,size:3,offset:12,stride:48},{buffer:s,size:1,offset:24,stride:48},{buffer:s,size:1,offset:28,stride:48},{buffer:s,size:4,offset:32,stride:48}]),u=c(new Array(1024),[256,1,4]),p=0;p&lt;1024;++p)u.data[p]=255;var d=a(e,u);d.wrap=e.REPEAT;var m=new v(e,r,o,s,l,d);return m.update(t),m};var n=t(\"gl-buffer\"),i=t(\"gl-vao\"),a=t(\"gl-texture2d\"),o=new Uint8Array(4),s=new Float32Array(o.buffer);var l=t(\"binary-search-bounds\"),c=t(\"ndarray\"),u=t(\"./lib/shaders\"),f=u.createShader,h=u.createPickShader,p=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];function d(t,e){for(var r=0,n=0;n&lt;3;++n){var i=t[n]-e[n];r+=i*i}return Math.sqrt(r)}function m(t){for(var e=[[-1e6,-1e6,-1e6],[1e6,1e6,1e6]],r=0;r&lt;3;++r)e[0][r]=Math.max(t[0][r],e[0][r]),e[1][r]=Math.min(t[1][r],e[1][r]);return e}function g(t,e,r,n){this.arcLength=t,this.position=e,this.index=r,this.dataCoordinate=n}function v(t,e,r,n,i,a){this.gl=t,this.shader=e,this.pickShader=r,this.buffer=n,this.vao=i,this.clipBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.points=[],this.arcLength=[],this.vertexCount=0,this.bounds=[[0,0,0],[0,0,0]],this.pickId=0,this.lineWidth=1,this.texture=a,this.dashScale=1,this.opacity=1,this.hasAlpha=!1,this.dirty=!0,this.pixelRatio=1}var y=v.prototype;y.isTransparent=function(){return this.hasAlpha},y.isOpaque=function(){return!this.hasAlpha},y.pickSlots=1,y.setPickBase=function(t){this.pickId=t},y.drawTransparent=y.draw=function(t){if(this.vertexCount){var e=this.gl,r=this.shader,n=this.vao;r.bind(),r.uniforms={model:t.model||p,view:t.view||p,projection:t.projection||p,clipBounds:m(this.clipBounds),dashTexture:this.texture.bind(),dashScale:this.dashScale/this.arcLength[this.arcLength.length-1],opacity:this.opacity,screenShape:[e.drawingBufferWidth,e.drawingBufferHeight],pixelRatio:this.pixelRatio},n.bind(),n.draw(e.TRIANGLE_STRIP,this.vertexCount),n.unbind()}},y.drawPick=function(t){if(this.vertexCount){var e=this.gl,r=this.pickShader,n=this.vao;r.bind(),r.uniforms={model:t.model||p,view:t.view||p,projection:t.projection||p,pickId:this.pickId,clipBounds:m(this.clipBounds),screenShape:[e.drawingBufferWidth,e.drawingBufferHeight],pixelRatio:this.pixelRatio},n.bind(),n.draw(e.TRIANGLE_STRIP,this.vertexCount),n.unbind()}},y.update=function(t){var e,r;this.dirty=!0;var n=!!t.connectGaps;\"dashScale\"in t&amp;&amp;(this.dashScale=t.dashScale),this.hasAlpha=!1,\"opacity\"in t&amp;&amp;(this.opacity=+t.opacity,this.opacity&lt;1&amp;&amp;(this.hasAlpha=!0));var i=[],a=[],o=[],s=0,u=0,f=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],h=t.position||t.positions;if(h){var p=t.color||t.colors||[0,0,0,1],m=t.lineWidth||1,g=!1;t:for(e=1;e0){for(var w=0;w&lt;24;++w)i.push(i[i.length-12]);u+=2,g=!0}continue t}f[0][r]=Math.min(f[0][r],b[r],_[r]),f[1][r]=Math.max(f[1][r],b[r],_[r])}Array.isArray(p[0])?(v=p.length&gt;e-1?p[e-1]:p.length&gt;0?p[p.length-1]:[0,0,0,1],y=p.length&gt;e?p[e]:p.length&gt;0?p[p.length-1]:[0,0,0,1]):v=y=p,3===v.length&amp;&amp;(v=[v[0],v[1],v[2],1]),3===y.length&amp;&amp;(y=[y[0],y[1],y[2],1]),!this.hasAlpha&amp;&amp;v[3]&lt;1&amp;&amp;(this.hasAlpha=!0),x=Array.isArray(m)?m.length&gt;e-1?m[e-1]:m.length&gt;0?m[m.length-1]:[0,0,0,1]:m;var T=s;if(s+=d(b,_),g){for(r=0;r&lt;2;++r)i.push(b[0],b[1],b[2],_[0],_[1],_[2],T,x,v[0],v[1],v[2],v[3]);u+=2,g=!1}i.push(b[0],b[1],b[2],_[0],_[1],_[2],T,x,v[0],v[1],v[2],v[3],b[0],b[1],b[2],_[0],_[1],_[2],T,-x,v[0],v[1],v[2],v[3],_[0],_[1],_[2],b[0],b[1],b[2],s,-x,y[0],y[1],y[2],y[3],_[0],_[1],_[2],b[0],b[1],b[2],s,x,y[0],y[1],y[2],y[3]),u+=4}}if(this.buffer.update(i),a.push(s),o.push(h[h.length-1].slice()),this.bounds=f,this.vertexCount=u,this.points=o,this.arcLength=a,\"dashes\"in t){var k=t.dashes.slice();for(k.unshift(0),e=1;e1.0001)return null;v+=g[f]}if(Math.abs(v-1)&gt;.001)return null;return[h,s(t,g),g]}},{barycentric:14,\"polytope-closest-point/lib/closest_point_2d.js\":270}],111:[function(t,e,r){var n=t(\"glslify\"),i=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position, normal;\\nattribute vec4 color;\\nattribute vec2 uv;\\n\\nuniform mat4 model\\n           , view\\n           , projection\\n           , inverseModel;\\nuniform vec3 eyePosition\\n           , lightPosition;\\n\\nvarying vec3 f_normal\\n           , f_lightDirection\\n           , f_eyeDirection\\n           , f_data;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvec4 project(vec3 p) {\\n  return projection * view * model * vec4(p, 1.0);\\n}\\n\\nvoid main() {\\n  gl_Position      = project(position);\\n\\n  //Lighting geometry parameters\\n  vec4 cameraCoordinate = view * vec4(position , 1.0);\\n  cameraCoordinate.xyz /= cameraCoordinate.w;\\n  f_lightDirection = lightPosition - cameraCoordinate.xyz;\\n  f_eyeDirection   = eyePosition - cameraCoordinate.xyz;\\n  f_normal  = normalize((vec4(normal, 0.0) * inverseModel).xyz);\\n\\n  f_color          = color;\\n  f_data           = position;\\n  f_uv             = uv;\\n}\\n\"]),a=n([\"#extension GL_OES_standard_derivatives : enable\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nfloat beckmannDistribution(float x, float roughness) {\\n  float NdotH = max(x, 0.0001);\\n  float cos2Alpha = NdotH * NdotH;\\n  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;\\n  float roughness2 = roughness * roughness;\\n  float denom = 3.141592653589793 * roughness2 * cos2Alpha * cos2Alpha;\\n  return exp(tan2Alpha / roughness2) / denom;\\n}\\n\\nfloat cookTorranceSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float roughness,\\n  float fresnel) {\\n\\n  float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);\\n  float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);\\n\\n  //Half angle vector\\n  vec3 H = normalize(lightDirection + viewDirection);\\n\\n  //Geometric term\\n  float NdotH = max(dot(surfaceNormal, H), 0.0);\\n  float VdotH = max(dot(viewDirection, H), 0.000001);\\n  float LdotH = max(dot(lightDirection, H), 0.000001);\\n  float G1 = (2.0 * NdotH * VdotN) / VdotH;\\n  float G2 = (2.0 * NdotH * LdotN) / LdotH;\\n  float G = min(1.0, min(G1, G2));\\n  \\n  //Distribution term\\n  float D = beckmannDistribution(NdotH, roughness);\\n\\n  //Fresnel term\\n  float F = pow(1.0 - VdotN, fresnel);\\n\\n  //Multiply terms and done\\n  return  G * F * D / max(3.14159265 * VdotN, 0.000001);\\n}\\n\\n//#pragma glslify: beckmann = require(glsl-specular-beckmann) // used in gl-surface3d\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 clipBounds[2];\\nuniform float roughness\\n            , fresnel\\n            , kambient\\n            , kdiffuse\\n            , kspecular;\\nuniform sampler2D texture;\\n\\nvarying vec3 f_normal\\n           , f_lightDirection\\n           , f_eyeDirection\\n           , f_data;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  if (f_color.a == 0.0 ||\\n    outOfRange(clipBounds[0], clipBounds[1], f_data)\\n  ) discard;\\n\\n  vec3 N = normalize(f_normal);\\n  vec3 L = normalize(f_lightDirection);\\n  vec3 V = normalize(f_eyeDirection);\\n\\n  if(gl_FrontFacing) {\\n    N = -N;\\n  }\\n\\n  float specular = min(1.0, max(0.0, cookTorranceSpecular(L, V, N, roughness, fresnel)));\\n  //float specular = max(0.0, beckmann(L, V, N, roughness)); // used in gl-surface3d\\n\\n  float diffuse  = min(kambient + kdiffuse * max(dot(N, L), 0.0), 1.0);\\n\\n  vec4 surfaceColor = vec4(f_color.rgb, 1.0) * texture2D(texture, f_uv);\\n  vec4 litColor = surfaceColor.a * vec4(diffuse * surfaceColor.rgb + kspecular * vec3(1,1,1) * specular,  1.0);\\n\\n  gl_FragColor = litColor * f_color.a;\\n}\\n\"]),o=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute vec2 uv;\\n\\nuniform mat4 model, view, projection;\\n\\nvarying vec4 f_color;\\nvarying vec3 f_data;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  gl_Position = projection * view * model * vec4(position, 1.0);\\n  f_color = color;\\n  f_data  = position;\\n  f_uv    = uv;\\n}\"]),s=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 clipBounds[2];\\nuniform sampler2D texture;\\nuniform float opacity;\\n\\nvarying vec4 f_color;\\nvarying vec3 f_data;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_data)) discard;\\n\\n  gl_FragColor = f_color * texture2D(texture, f_uv) * opacity;\\n}\"]),l=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute vec2 uv;\\nattribute float pointSize;\\n\\nuniform mat4 model, view, projection;\\nuniform vec3 clipBounds[2];\\n\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], position)) {\\n\\n    gl_Position = vec4(0.0, 0.0 ,0.0 ,0.0);\\n  } else {\\n    gl_Position = projection * view * model * vec4(position, 1.0);\\n  }\\n  gl_PointSize = pointSize;\\n  f_color = color;\\n  f_uv = uv;\\n}\"]),c=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D texture;\\nuniform float opacity;\\n\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  vec2 pointR = gl_PointCoord.xy - vec2(0.5, 0.5);\\n  if(dot(pointR, pointR) &gt; 0.25) {\\n    discard;\\n  }\\n  gl_FragColor = f_color * texture2D(texture, f_uv) * opacity;\\n}\"]),u=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\nattribute vec4 id;\\n\\nuniform mat4 model, view, projection;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  gl_Position = projection * view * model * vec4(position, 1.0);\\n  f_id        = id;\\n  f_position  = position;\\n}\"]),f=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3  clipBounds[2];\\nuniform float pickId;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_position)) discard;\\n\\n  gl_FragColor = vec4(pickId, f_id.xyz);\\n}\"]),h=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nattribute vec3  position;\\nattribute float pointSize;\\nattribute vec4  id;\\n\\nuniform mat4 model, view, projection;\\nuniform vec3 clipBounds[2];\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], position)) {\\n\\n    gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\\n  } else {\\n    gl_Position  = projection * view * model * vec4(position, 1.0);\\n    gl_PointSize = pointSize;\\n  }\\n  f_id         = id;\\n  f_position   = position;\\n}\"]),p=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec3 position;\\n\\nuniform mat4 model, view, projection;\\n\\nvoid main() {\\n  gl_Position = projection * view * model * vec4(position, 1.0);\\n}\"]),d=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform vec3 contourColor;\\n\\nvoid main() {\\n  gl_FragColor = vec4(contourColor, 1.0);\\n}\\n\"]);r.meshShader={vertex:i,fragment:a,attributes:[{name:\"position\",type:\"vec3\"},{name:\"normal\",type:\"vec3\"},{name:\"color\",type:\"vec4\"},{name:\"uv\",type:\"vec2\"}]},r.wireShader={vertex:o,fragment:s,attributes:[{name:\"position\",type:\"vec3\"},{name:\"color\",type:\"vec4\"},{name:\"uv\",type:\"vec2\"}]},r.pointShader={vertex:l,fragment:c,attributes:[{name:\"position\",type:\"vec3\"},{name:\"color\",type:\"vec4\"},{name:\"uv\",type:\"vec2\"},{name:\"pointSize\",type:\"float\"}]},r.pickShader={vertex:u,fragment:f,attributes:[{name:\"position\",type:\"vec3\"},{name:\"id\",type:\"vec4\"}]},r.pointPickShader={vertex:h,fragment:f,attributes:[{name:\"position\",type:\"vec3\"},{name:\"pointSize\",type:\"float\"},{name:\"id\",type:\"vec4\"}]},r.contourShader={vertex:p,fragment:d,attributes:[{name:\"position\",type:\"vec3\"}]}},{glslify:231}],112:[function(t,e,r){\"use strict\";var n=t(\"gl-shader\"),i=t(\"gl-buffer\"),a=t(\"gl-vao\"),o=t(\"gl-texture2d\"),s=t(\"normals\"),l=t(\"gl-mat4/multiply\"),c=t(\"gl-mat4/invert\"),u=t(\"ndarray\"),f=t(\"colormap\"),h=t(\"simplicial-complex-contour\"),p=t(\"typedarray-pool\"),d=t(\"./lib/shaders\"),m=t(\"./lib/closest-point\"),g=d.meshShader,v=d.wireShader,y=d.pointShader,x=d.pickShader,b=d.pointPickShader,_=d.contourShader,w=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];function T(t,e,r,n,i,a,o,s,l,c,u,f,h,p,d,m,g,v,y,x,b,_,T,k,A,M,S){this.gl=t,this.pixelRatio=1,this.cells=[],this.positions=[],this.intensity=[],this.texture=e,this.dirty=!0,this.triShader=r,this.lineShader=n,this.pointShader=i,this.pickShader=a,this.pointPickShader=o,this.contourShader=s,this.trianglePositions=l,this.triangleColors=u,this.triangleNormals=h,this.triangleUVs=f,this.triangleIds=c,this.triangleVAO=p,this.triangleCount=0,this.lineWidth=1,this.edgePositions=d,this.edgeColors=g,this.edgeUVs=v,this.edgeIds=m,this.edgeVAO=y,this.edgeCount=0,this.pointPositions=x,this.pointColors=_,this.pointUVs=T,this.pointSizes=k,this.pointIds=b,this.pointVAO=A,this.pointCount=0,this.contourLineWidth=1,this.contourPositions=M,this.contourVAO=S,this.contourCount=0,this.contourColor=[0,0,0],this.contourEnable=!0,this.pickVertex=!0,this.pickId=1,this.bounds=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],this.clipBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.lightPosition=[1e5,1e5,0],this.ambientLight=.8,this.diffuseLight=.8,this.specularLight=2,this.roughness=.5,this.fresnel=1.5,this.opacity=1,this.hasAlpha=!1,this.opacityscale=!1,this._model=w,this._view=w,this._projection=w,this._resolution=[1,1]}var k=T.prototype;function A(t,e){if(!e)return 1;if(!e.length)return 1;for(var r=0;rt&amp;&amp;r&gt;0){var n=(e[r][0]-t)/(e[r][0]-e[r-1][0]);return e[r][1]*(1-n)+n*e[r-1][1]}}return 1}function M(t){var e=n(t,g.vertex,g.fragment);return e.attributes.position.location=0,e.attributes.color.location=2,e.attributes.uv.location=3,e.attributes.normal.location=4,e}function S(t){var e=n(t,v.vertex,v.fragment);return e.attributes.position.location=0,e.attributes.color.location=2,e.attributes.uv.location=3,e}function E(t){var e=n(t,y.vertex,y.fragment);return e.attributes.position.location=0,e.attributes.color.location=2,e.attributes.uv.location=3,e.attributes.pointSize.location=4,e}function L(t){var e=n(t,x.vertex,x.fragment);return e.attributes.position.location=0,e.attributes.id.location=1,e}function C(t){var e=n(t,b.vertex,b.fragment);return e.attributes.position.location=0,e.attributes.id.location=1,e.attributes.pointSize.location=4,e}function P(t){var e=n(t,_.vertex,_.fragment);return e.attributes.position.location=0,e}k.isOpaque=function(){return!this.hasAlpha},k.isTransparent=function(){return this.hasAlpha},k.pickSlots=1,k.setPickBase=function(t){this.pickId=t},k.highlight=function(t){if(t&amp;&amp;this.contourEnable){for(var e=h(this.cells,this.intensity,t.intensity),r=e.cells,n=e.vertexIds,i=e.vertexWeights,a=r.length,o=p.mallocFloat32(6*a),s=0,l=0;l0&amp;&amp;((f=this.triShader).bind(),f.uniforms=s,this.triangleVAO.bind(),e.drawArrays(e.TRIANGLES,0,3*this.triangleCount),this.triangleVAO.unbind());this.edgeCount&gt;0&amp;&amp;this.lineWidth&gt;0&amp;&amp;((f=this.lineShader).bind(),f.uniforms=s,this.edgeVAO.bind(),e.lineWidth(this.lineWidth*this.pixelRatio),e.drawArrays(e.LINES,0,2*this.edgeCount),this.edgeVAO.unbind());this.pointCount&gt;0&amp;&amp;((f=this.pointShader).bind(),f.uniforms=s,this.pointVAO.bind(),e.drawArrays(e.POINTS,0,this.pointCount),this.pointVAO.unbind());this.contourEnable&amp;&amp;this.contourCount&gt;0&amp;&amp;this.contourLineWidth&gt;0&amp;&amp;((f=this.contourShader).bind(),f.uniforms=s,this.contourVAO.bind(),e.drawArrays(e.LINES,0,this.contourCount),this.contourVAO.unbind())},k.drawPick=function(t){t=t||{};for(var e=this.gl,r=t.model||w,n=t.view||w,i=t.projection||w,a=[[-1e6,-1e6,-1e6],[1e6,1e6,1e6]],o=0;o&lt;3;++o)a[0][o]=Math.max(a[0][o],this.clipBounds[0][o]),a[1][o]=Math.min(a[1][o],this.clipBounds[1][o]);this._model=[].slice.call(r),this._view=[].slice.call(n),this._projection=[].slice.call(i),this._resolution=[e.drawingBufferWidth,e.drawingBufferHeight];var s,l={model:r,view:n,projection:i,clipBounds:a,pickId:this.pickId/255};((s=this.pickShader).bind(),s.uniforms=l,this.triangleCount&gt;0&amp;&amp;(this.triangleVAO.bind(),e.drawArrays(e.TRIANGLES,0,3*this.triangleCount),this.triangleVAO.unbind()),this.edgeCount&gt;0&amp;&amp;(this.edgeVAO.bind(),e.lineWidth(this.lineWidth*this.pixelRatio),e.drawArrays(e.LINES,0,2*this.edgeCount),this.edgeVAO.unbind()),this.pointCount&gt;0)&amp;&amp;((s=this.pointPickShader).bind(),s.uniforms=l,this.pointVAO.bind(),e.drawArrays(e.POINTS,0,this.pointCount),this.pointVAO.unbind())},k.pick=function(t){if(!t)return null;if(t.id!==this.pickId)return null;for(var e=t.value[0]+256*t.value[1]+65536*t.value[2],r=this.cells[e],n=this.positions,i=new Array(r.length),a=0;ai[k]&amp;&amp;(r.uniforms.dataAxis=c,r.uniforms.screenOffset=u,r.uniforms.color=g[t],r.uniforms.angle=v[t],a.drawArrays(a.TRIANGLES,i[k],i[A]-i[k]))),y[t]&amp;&amp;T&amp;&amp;(u[1^t]-=M*p*x[t],r.uniforms.dataAxis=f,r.uniforms.screenOffset=u,r.uniforms.color=b[t],r.uniforms.angle=_[t],a.drawArrays(a.TRIANGLES,w,T)),u[1^t]=M*s[2+(1^t)]-1,d[t+2]&amp;&amp;(u[1^t]+=M*p*m[t+2],ki[k]&amp;&amp;(r.uniforms.dataAxis=c,r.uniforms.screenOffset=u,r.uniforms.color=g[t+2],r.uniforms.angle=v[t+2],a.drawArrays(a.TRIANGLES,i[k],i[A]-i[k]))),y[t+2]&amp;&amp;T&amp;&amp;(u[1^t]+=M*p*x[t+2],r.uniforms.dataAxis=f,r.uniforms.screenOffset=u,r.uniforms.color=b[t+2],r.uniforms.angle=_[t+2],a.drawArrays(a.TRIANGLES,w,T))}),m.drawTitle=function(){var t=[0,0],e=[0,0];return function(){var r=this.plot,n=this.shader,i=r.gl,a=r.screenBox,o=r.titleCenter,s=r.titleAngle,l=r.titleColor,c=r.pixelRatio;if(this.titleCount){for(var u=0;u&lt;2;++u)e[u]=2*(o[u]*c-a[u])/(a[2+u]-a[u])-1;n.bind(),n.uniforms.dataAxis=t,n.uniforms.screenOffset=e,n.uniforms.angle=s,n.uniforms.color=l,i.drawArrays(i.TRIANGLES,this.titleOffset,this.titleCount)}}}(),m.bind=(h=[0,0],p=[0,0],d=[0,0],function(){var t=this.plot,e=this.shader,r=t._tickBounds,n=t.dataBox,i=t.screenBox,a=t.viewBox;e.bind();for(var o=0;o&lt;2;++o){var s=r[o],l=r[o+2]-s,c=.5*(n[o+2]+n[o]),u=n[o+2]-n[o],f=a[o],m=a[o+2]-f,g=i[o],v=i[o+2]-g;p[o]=2*l/u*m/v,h[o]=2*(s-c)/u*m/v}d[1]=2*t.pixelRatio/(i[3]-i[1]),d[0]=d[1]*(i[3]-i[1])/(i[2]-i[0]),e.uniforms.dataScale=p,e.uniforms.dataShift=h,e.uniforms.textScale=d,this.vbo.bind(),e.attributes.textCoordinate.pointer()}),m.update=function(t){var e,r,n,i,o,s=[],l=t.ticks,c=t.bounds;for(o=0;o&lt;2;++o){var u=[Math.floor(s.length/3)],f=[-1/0],h=l[o];for(e=0;e=0){var m=e[d]-n[d]*(e[d+2]-e[d])/(n[d+2]-n[d]);0===d?o.drawLine(m,e[1],m,e[3],p[d],h[d]):o.drawLine(e[0],m,e[2],m,p[d],h[d])}}for(d=0;d=0;--t)this.objects[t].dispose();this.objects.length=0;for(t=this.overlays.length-1;t&gt;=0;--t)this.overlays[t].dispose();this.overlays.length=0,this.gl=null},c.addObject=function(t){this.objects.indexOf(t)&lt;0&amp;&amp;(this.objects.push(t),this.setDirty())},c.removeObject=function(t){for(var e=this.objects,r=0;rMath.abs(e))c.rotate(a,0,0,-t*r*Math.PI*d.rotateSpeed/window.innerWidth);else if(!d._ortho){var o=-d.zoomSpeed*i*e/window.innerHeight*(a-c.lastT())/20;c.pan(a,0,0,f*(Math.exp(o)-1))}}}),!0)},d.enableMouseListeners(),d};var n=t(\"right-now\"),i=t(\"3d-view\"),a=t(\"mouse-change\"),o=t(\"mouse-wheel\"),s=t(\"mouse-event-offset\"),l=t(\"has-passive-events\")},{\"3d-view\":7,\"has-passive-events\":232,\"mouse-change\":247,\"mouse-event-offset\":248,\"mouse-wheel\":250,\"right-now\":278}],120:[function(t,e,r){var n=t(\"glslify\"),i=t(\"gl-shader\"),a=n([\"precision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"]),o=n([\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D accumBuffer;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec4 accum = texture2D(accumBuffer, 0.5 * (uv + 1.0));\\n  gl_FragColor = min(vec4(1,1,1,1), accum);\\n}\"]);e.exports=function(t){return i(t,a,o,null,[{name:\"position\",type:\"vec2\"}])}},{\"gl-shader\":132,glslify:231}],121:[function(t,e,r){\"use strict\";var n=t(\"./camera.js\"),i=t(\"gl-axes3d\"),a=t(\"gl-axes3d/properties\"),o=t(\"gl-spikes3d\"),s=t(\"gl-select-static\"),l=t(\"gl-fbo\"),c=t(\"a-big-triangle\"),u=t(\"mouse-change\"),f=t(\"gl-mat4/perspective\"),h=t(\"gl-mat4/ortho\"),p=t(\"./lib/shader\"),d=t(\"is-mobile\")({tablet:!0,featureDetect:!0});function m(){this.mouse=[-1,-1],this.screen=null,this.distance=1/0,this.index=null,this.dataCoordinate=null,this.dataPosition=null,this.object=null,this.data=null}function g(t){var e=Math.round(Math.log(Math.abs(t))/Math.log(10));if(e&lt;0){var r=Math.round(Math.pow(10,-e));return Math.ceil(t*r)/r}if(e&gt;0){r=Math.round(Math.pow(10,e));return Math.ceil(t/r)*r}return Math.ceil(t)}function v(t){return\"boolean\"!=typeof t||t}e.exports={createScene:function(t){(t=t||{}).camera=t.camera||{};var e=t.canvas;if(!e){if(e=document.createElement(\"canvas\"),t.container)t.container.appendChild(e);else document.body.appendChild(e)}var r=t.gl;r||(t.glOptions&amp;&amp;(d=!!t.glOptions.preserveDrawingBuffer),r=function(t,e){var r=null;try{(r=t.getContext(\"webgl\",e))||(r=t.getContext(\"experimental-webgl\",e))}catch(t){return null}return r}(e,t.glOptions||{premultipliedAlpha:!0,antialias:!0,preserveDrawingBuffer:d}));if(!r)throw new Error(\"webgl not supported\");var y=t.bounds||[[-10,-10,-10],[10,10,10]],x=new m,b=l(r,r.drawingBufferWidth,r.drawingBufferHeight,{preferFloat:!d}),_=p(r),w=t.cameraObject&amp;&amp;!0===t.cameraObject._ortho||t.camera.projection&amp;&amp;\"orthographic\"===t.camera.projection.type||!1,T={eye:t.camera.eye||[2,0,0],center:t.camera.center||[0,0,0],up:t.camera.up||[0,1,0],zoomMin:t.camera.zoomMax||.1,zoomMax:t.camera.zoomMin||100,mode:t.camera.mode||\"turntable\",_ortho:w},k=t.axes||{},A=i(r,k);A.enable=!k.disable;var M=t.spikes||{},S=o(r,M),E=[],L=[],C=[],P=[],I=!0,O=!0,z=new Array(16),D=new Array(16),R={view:null,projection:z,model:D,_ortho:!1},F=(O=!0,[r.drawingBufferWidth,r.drawingBufferHeight]),B=t.cameraObject||n(e,T),N={gl:r,contextLost:!1,pixelRatio:t.pixelRatio||1,canvas:e,selection:x,camera:B,axes:A,axesPixels:null,spikes:S,bounds:y,objects:E,shape:F,aspect:t.aspectRatio||[1,1,1],pickRadius:t.pickRadius||10,zNear:t.zNear||.01,zFar:t.zFar||1e3,fovy:t.fovy||Math.PI/4,clearColor:t.clearColor||[0,0,0,0],autoResize:v(t.autoResize),autoBounds:v(t.autoBounds),autoScale:!!t.autoScale,autoCenter:v(t.autoCenter),clipToBounds:v(t.clipToBounds),snapToData:!!t.snapToData,onselect:t.onselect||null,onrender:t.onrender||null,onclick:t.onclick||null,cameraParams:R,oncontextloss:null,mouseListener:null,_stopped:!1,getAspectratio:function(){return{x:this.aspect[0],y:this.aspect[1],z:this.aspect[2]}},setAspectratio:function(t){this.aspect[0]=t.x,this.aspect[1]=t.y,this.aspect[2]=t.z,O=!0},setBounds:function(t,e){this.bounds[0][t]=e.min,this.bounds[1][t]=e.max},setClearColor:function(t){this.clearColor=t},clearRGBA:function(){this.gl.clearColor(this.clearColor[0],this.clearColor[1],this.clearColor[2],this.clearColor[3]),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)}},j=[r.drawingBufferWidth/N.pixelRatio|0,r.drawingBufferHeight/N.pixelRatio|0];function U(){if(!N._stopped&amp;&amp;N.autoResize){var t=e.parentNode,r=1,n=1;t&amp;&amp;t!==document.body?(r=t.clientWidth,n=t.clientHeight):(r=window.innerWidth,n=window.innerHeight);var i=0|Math.ceil(r*N.pixelRatio),a=0|Math.ceil(n*N.pixelRatio);if(i!==e.width||a!==e.height){e.width=i,e.height=a;var o=e.style;o.position=o.position||\"absolute\",o.left=\"0px\",o.top=\"0px\",o.width=r+\"px\",o.height=n+\"px\",I=!0}}}N.autoResize&amp;&amp;U();function V(){for(var t=E.length,e=P.length,n=0;n0&amp;&amp;0===C[e-1];)C.pop(),P.pop().dispose()}function H(){if(N.contextLost)return!0;r.isContextLost()&amp;&amp;(N.contextLost=!0,N.mouseListener.enabled=!1,N.selection.object=null,N.oncontextloss&amp;&amp;N.oncontextloss())}window.addEventListener(\"resize\",U),N.update=function(t){N._stopped||(t=t||{},I=!0,O=!0)},N.add=function(t){N._stopped||(t.axes=A,E.push(t),L.push(-1),I=!0,O=!0,V())},N.remove=function(t){if(!N._stopped){var e=E.indexOf(t);e&lt;0||(E.splice(e,1),L.pop(),I=!0,O=!0,V())}},N.dispose=function(){if(!N._stopped&amp;&amp;(N._stopped=!0,window.removeEventListener(\"resize\",U),e.removeEventListener(\"webglcontextlost\",H),N.mouseListener.enabled=!1,!N.contextLost)){A.dispose(),S.dispose();for(var t=0;tx.distance)continue;for(var c=0;c 1.0) {\\n      discard;\\n    }\\n    baseColor = mix(borderColor, color, step(radius, centerFraction));\\n    gl_FragColor = vec4(baseColor.rgb * baseColor.a, baseColor.a);\\n  }\\n}\\n\"]),r.pickVertex=n([\"precision mediump float;\\n#define GLSLIFY 1\\n\\nattribute vec2 position;\\nattribute vec4 pickId;\\n\\nuniform mat3 matrix;\\nuniform float pointSize;\\nuniform vec4 pickOffset;\\n\\nvarying vec4 fragId;\\n\\nvoid main() {\\n  vec3 hgPosition = matrix * vec3(position, 1);\\n  gl_Position  = vec4(hgPosition.xy, 0, hgPosition.z);\\n  gl_PointSize = pointSize;\\n\\n  vec4 id = pickId + pickOffset;\\n  id.y += floor(id.x / 256.0);\\n  id.x -= floor(id.x / 256.0) * 256.0;\\n\\n  id.z += floor(id.y / 256.0);\\n  id.y -= floor(id.y / 256.0) * 256.0;\\n\\n  id.w += floor(id.z / 256.0);\\n  id.z -= floor(id.z / 256.0) * 256.0;\\n\\n  fragId = id;\\n}\\n\"]),r.pickFragment=n([\"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec4 fragId;\\n\\nvoid main() {\\n  float radius = length(2.0 * gl_PointCoord.xy - 1.0);\\n  if(radius &gt; 1.0) {\\n    discard;\\n  }\\n  gl_FragColor = fragId / 255.0;\\n}\\n\"])},{glslify:231}],123:[function(t,e,r){\"use strict\";var n=t(\"gl-shader\"),i=t(\"gl-buffer\"),a=t(\"typedarray-pool\"),o=t(\"./lib/shader\");function s(t,e,r,n,i){this.plot=t,this.offsetBuffer=e,this.pickBuffer=r,this.shader=n,this.pickShader=i,this.sizeMin=.5,this.sizeMinCap=2,this.sizeMax=20,this.areaRatio=1,this.pointCount=0,this.color=[1,0,0,1],this.borderColor=[0,0,0,1],this.blend=!1,this.pickOffset=0,this.points=null}e.exports=function(t,e){var r=t.gl,a=i(r),l=i(r),c=n(r,o.pointVertex,o.pointFragment),u=n(r,o.pickVertex,o.pickFragment),f=new s(t,a,l,c,u);return f.update(e),t.addObject(f),f};var l,c,u=s.prototype;u.dispose=function(){this.shader.dispose(),this.pickShader.dispose(),this.offsetBuffer.dispose(),this.pickBuffer.dispose(),this.plot.removeObject(this)},u.update=function(t){var e;function r(e,r){return e in t?t[e]:r}t=t||{},this.sizeMin=r(\"sizeMin\",.5),this.sizeMax=r(\"sizeMax\",20),this.color=r(\"color\",[1,0,0,1]).slice(),this.areaRatio=r(\"areaRatio\",1),this.borderColor=r(\"borderColor\",[0,0,0,1]).slice(),this.blend=r(\"blend\",!1);var n=t.positions.length&gt;&gt;&gt;1,i=t.positions instanceof Float32Array,o=t.idToIndex instanceof Int32Array&amp;&amp;t.idToIndex.length&gt;=n,s=t.positions,l=i?s:a.mallocFloat32(s.length),c=o?t.idToIndex:a.mallocInt32(n);if(i||l.set(s),!o)for(l.set(s),e=0;e&gt;&gt;1;for(r=0;r=e[0]&amp;&amp;a&lt;=e[2]&amp;&amp;o&gt;=e[1]&amp;&amp;o&lt;=e[3]&amp;&amp;n++}return n}(this.points,i),u=this.plot.pickPixelRatio*Math.max(Math.min(this.sizeMinCap,this.sizeMin),Math.min(this.sizeMax,this.sizeMax/Math.pow(s,.33333)));l[0]=2/a,l[4]=2/o,l[6]=-2*i[0]/a-1,l[7]=-2*i[1]/o-1,this.offsetBuffer.bind(),r.bind(),r.attributes.position.pointer(),r.uniforms.matrix=l,r.uniforms.color=this.color,r.uniforms.borderColor=this.borderColor,r.uniforms.pointCloud=u&lt;5,r.uniforms.pointSize=u,r.uniforms.centerFraction=Math.min(1,Math.max(0,Math.sqrt(1-this.areaRatio))),e&amp;&amp;(c[0]=255&amp;t,c[1]=t&gt;&gt;8&amp;255,c[2]=t&gt;&gt;16&amp;255,c[3]=t&gt;&gt;24&amp;255,this.pickBuffer.bind(),r.attributes.pickId.pointer(n.UNSIGNED_BYTE),r.uniforms.pickOffset=c,this.pickOffset=t);var f=n.getParameter(n.BLEND),h=n.getParameter(n.DITHER);return f&amp;&amp;!this.blend&amp;&amp;n.disable(n.BLEND),h&amp;&amp;n.disable(n.DITHER),n.drawArrays(n.POINTS,0,this.pointCount),f&amp;&amp;!this.blend&amp;&amp;n.enable(n.BLEND),h&amp;&amp;n.enable(n.DITHER),t+this.pointCount}),u.draw=u.unifiedDraw,u.drawPick=u.unifiedDraw,u.pick=function(t,e,r){var n=this.pickOffset,i=this.pointCount;if(r=n+i)return null;var a=r-n,o=this.points;return{object:this,pointId:a,dataCoord:[o[2*a],o[2*a+1]]}}},{\"./lib/shader\":122,\"gl-buffer\":78,\"gl-shader\":132,\"typedarray-pool\":308}],124:[function(t,e,r){e.exports=function(t,e,r,n){var i,a,o,s,l,c=e[0],u=e[1],f=e[2],h=e[3],p=r[0],d=r[1],m=r[2],g=r[3];(a=c*p+u*d+f*m+h*g)&lt;0&amp;&amp;(a=-a,p=-p,d=-d,m=-m,g=-g);1-a&gt;1e-6?(i=Math.acos(a),o=Math.sin(i),s=Math.sin((1-n)*i)/o,l=Math.sin(n*i)/o):(s=1-n,l=n);return t[0]=s*c+l*p,t[1]=s*u+l*d,t[2]=s*f+l*m,t[3]=s*h+l*g,t}},{}],125:[function(t,e,r){\"use strict\";e.exports=function(t){return t||0===t?t.toString():\"\"}},{}],126:[function(t,e,r){\"use strict\";var n=t(\"vectorize-text\");e.exports=function(t,e,r){var a=i[e];a||(a=i[e]={});if(t in a)return a[t];var o={textAlign:\"center\",textBaseline:\"middle\",lineHeight:1,font:e,lineSpacing:1.25,styletags:{breaklines:!0,bolds:!0,italics:!0,subscripts:!0,superscripts:!0},triangles:!0},s=n(t,o);o.triangles=!1;var l,c,u=n(t,o);if(r&amp;&amp;1!==r){for(l=0;l max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute vec2 glyph;\\nattribute vec4 id;\\n\\nuniform vec4 highlightId;\\nuniform float highlightScale;\\nuniform mat4 model, view, projection;\\nuniform vec3 clipBounds[2];\\n\\nvarying vec4 interpColor;\\nvarying vec4 pickId;\\nvarying vec3 dataCoordinate;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], position)) {\\n\\n    gl_Position = vec4(0,0,0,0);\\n  } else {\\n    float scale = 1.0;\\n    if(distance(highlightId, id) &lt; 0.0001) {\\n      scale = highlightScale;\\n    }\\n\\n    vec4 worldPosition = model * vec4(position, 1);\\n    vec4 viewPosition = view * worldPosition;\\n    viewPosition = viewPosition / viewPosition.w;\\n    vec4 clipPosition = projection * (viewPosition + scale * vec4(glyph.x, -glyph.y, 0, 0));\\n\\n    gl_Position = clipPosition;\\n    interpColor = color;\\n    pickId = id;\\n    dataCoordinate = position;\\n  }\\n}\"]),o=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute vec2 glyph;\\nattribute vec4 id;\\n\\nuniform mat4 model, view, projection;\\nuniform vec2 screenSize;\\nuniform vec3 clipBounds[2];\\nuniform float highlightScale, pixelRatio;\\nuniform vec4 highlightId;\\n\\nvarying vec4 interpColor;\\nvarying vec4 pickId;\\nvarying vec3 dataCoordinate;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], position)) {\\n\\n    gl_Position = vec4(0,0,0,0);\\n  } else {\\n    float scale = pixelRatio;\\n    if(distance(highlightId.bgr, id.bgr) &lt; 0.001) {\\n      scale *= highlightScale;\\n    }\\n\\n    vec4 worldPosition = model * vec4(position, 1.0);\\n    vec4 viewPosition = view * worldPosition;\\n    vec4 clipPosition = projection * viewPosition;\\n    clipPosition /= clipPosition.w;\\n\\n    gl_Position = clipPosition + vec4(screenSize * scale * vec2(glyph.x, -glyph.y), 0.0, 0.0);\\n    interpColor = color;\\n    pickId = id;\\n    dataCoordinate = position;\\n  }\\n}\"]),s=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute vec2 glyph;\\nattribute vec4 id;\\n\\nuniform float highlightScale;\\nuniform vec4 highlightId;\\nuniform vec3 axes[2];\\nuniform mat4 model, view, projection;\\nuniform vec2 screenSize;\\nuniform vec3 clipBounds[2];\\nuniform float scale, pixelRatio;\\n\\nvarying vec4 interpColor;\\nvarying vec4 pickId;\\nvarying vec3 dataCoordinate;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], position)) {\\n\\n    gl_Position = vec4(0,0,0,0);\\n  } else {\\n    float lscale = pixelRatio * scale;\\n    if(distance(highlightId, id) &lt; 0.0001) {\\n      lscale *= highlightScale;\\n    }\\n\\n    vec4 clipCenter   = projection * view * model * vec4(position, 1);\\n    vec3 dataPosition = position + 0.5*lscale*(axes[0] * glyph.x + axes[1] * glyph.y) * clipCenter.w * screenSize.y;\\n    vec4 clipPosition = projection * view * model * vec4(dataPosition, 1);\\n\\n    gl_Position = clipPosition;\\n    interpColor = color;\\n    pickId = id;\\n    dataCoordinate = dataPosition;\\n  }\\n}\\n\"]),l=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 fragClipBounds[2];\\nuniform float opacity;\\n\\nvarying vec4 interpColor;\\nvarying vec3 dataCoordinate;\\n\\nvoid main() {\\n  if (\\n    outOfRange(fragClipBounds[0], fragClipBounds[1], dataCoordinate) ||\\n    interpColor.a * opacity == 0.\\n  ) discard;\\n  gl_FragColor = interpColor * opacity;\\n}\\n\"]),c=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 fragClipBounds[2];\\nuniform float pickGroup;\\n\\nvarying vec4 pickId;\\nvarying vec3 dataCoordinate;\\n\\nvoid main() {\\n  if (outOfRange(fragClipBounds[0], fragClipBounds[1], dataCoordinate)) discard;\\n\\n  gl_FragColor = vec4(pickGroup, pickId.bgr);\\n}\"]),u=[{name:\"position\",type:\"vec3\"},{name:\"color\",type:\"vec4\"},{name:\"glyph\",type:\"vec2\"},{name:\"id\",type:\"vec4\"}],f={vertex:a,fragment:l,attributes:u},h={vertex:o,fragment:l,attributes:u},p={vertex:s,fragment:l,attributes:u},d={vertex:a,fragment:c,attributes:u},m={vertex:o,fragment:c,attributes:u},g={vertex:s,fragment:c,attributes:u};function v(t,e){var r=n(t,e),i=r.attributes;return i.position.location=0,i.color.location=1,i.glyph.location=2,i.id.location=3,r}r.createPerspective=function(t){return v(t,f)},r.createOrtho=function(t){return v(t,h)},r.createProject=function(t){return v(t,p)},r.createPickPerspective=function(t){return v(t,d)},r.createPickOrtho=function(t){return v(t,m)},r.createPickProject=function(t){return v(t,g)}},{\"gl-shader\":132,glslify:231}],128:[function(t,e,r){\"use strict\";var n=t(\"is-string-blank\"),i=t(\"gl-buffer\"),a=t(\"gl-vao\"),o=t(\"typedarray-pool\"),s=t(\"gl-mat4/multiply\"),l=t(\"./lib/shaders\"),c=t(\"./lib/glyphs\"),u=t(\"./lib/get-simple-string\"),f=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];function h(t,e){var r=t[0],n=t[1],i=t[2],a=t[3];return t[0]=e[0]*r+e[4]*n+e[8]*i+e[12]*a,t[1]=e[1]*r+e[5]*n+e[9]*i+e[13]*a,t[2]=e[2]*r+e[6]*n+e[10]*i+e[14]*a,t[3]=e[3]*r+e[7]*n+e[11]*i+e[15]*a,t}function p(t,e,r,n){return h(n,n),h(n,n),h(n,n)}function d(t,e){this.index=t,this.dataCoordinate=this.position=e}function m(t){return!0===t||t&gt;1?1:t}function g(t,e,r,n,i,a,o,s,l,c,u,f){this.gl=t,this.pixelRatio=1,this.shader=e,this.orthoShader=r,this.projectShader=n,this.pointBuffer=i,this.colorBuffer=a,this.glyphBuffer=o,this.idBuffer=s,this.vao=l,this.vertexCount=0,this.lineVertexCount=0,this.opacity=1,this.hasAlpha=!1,this.lineWidth=0,this.projectScale=[2/3,2/3,2/3],this.projectOpacity=[1,1,1],this.projectHasAlpha=!1,this.pickId=0,this.pickPerspectiveShader=c,this.pickOrthoShader=u,this.pickProjectShader=f,this.points=[],this._selectResult=new d(0,[0,0,0]),this.useOrtho=!0,this.bounds=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],this.axesProject=[!0,!0,!0],this.axesBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.highlightId=[1,1,1,1],this.highlightScale=2,this.clipBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.dirty=!0}e.exports=function(t){var e=t.gl,r=l.createPerspective(e),n=l.createOrtho(e),o=l.createProject(e),s=l.createPickPerspective(e),c=l.createPickOrtho(e),u=l.createPickProject(e),f=i(e),h=i(e),p=i(e),d=i(e),m=a(e,[{buffer:f,size:3,type:e.FLOAT},{buffer:h,size:4,type:e.FLOAT},{buffer:p,size:2,type:e.FLOAT},{buffer:d,size:4,type:e.UNSIGNED_BYTE,normalized:!0}]),v=new g(e,r,n,o,f,h,p,d,m,s,c,u);return v.update(t),v};var v=g.prototype;v.pickSlots=1,v.setPickBase=function(t){this.pickId=t},v.isTransparent=function(){if(this.hasAlpha)return!0;for(var t=0;t&lt;3;++t)if(this.axesProject[t]&amp;&amp;this.projectHasAlpha)return!0;return!1},v.isOpaque=function(){if(!this.hasAlpha)return!0;for(var t=0;t&lt;3;++t)if(this.axesProject[t]&amp;&amp;!this.projectHasAlpha)return!0;return!1};var y=[0,0],x=[0,0,0],b=[0,0,0],_=[0,0,0,1],w=[0,0,0,1],T=f.slice(),k=[0,0,0],A=[[0,0,0],[0,0,0]];function M(t){return t[0]=t[1]=t[2]=0,t}function S(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=1,t}function E(t,e,r,n){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[r]=n,t}function L(t,e,r,n){var i,a=e.axesProject,o=e.gl,l=t.uniforms,c=r.model||f,u=r.view||f,h=r.projection||f,d=e.axesBounds,m=function(t){for(var e=A,r=0;r&lt;2;++r)for(var n=0;n&lt;3;++n)e[r][n]=Math.max(Math.min(t[r][n],1e8),-1e8);return e}(e.clipBounds);i=e.axes&amp;&amp;e.axes.lastCubeProps?e.axes.lastCubeProps.axis:[1,1,1],y[0]=2/o.drawingBufferWidth,y[1]=2/o.drawingBufferHeight,t.bind(),l.view=u,l.projection=h,l.screenSize=y,l.highlightId=e.highlightId,l.highlightScale=e.highlightScale,l.clipBounds=m,l.pickGroup=e.pickId/255,l.pixelRatio=n;for(var g=0;g&lt;3;++g)if(a[g]){l.scale=e.projectScale[g],l.opacity=e.projectOpacity[g];for(var v=T,L=0;L&lt;16;++L)v[L]=0;for(L=0;L&lt;4;++L)v[5*L]=1;v[5*g]=0,i[g]&lt;0?v[12+g]=d[0][g]:v[12+g]=d[1][g],s(v,c,v),l.model=v;var C=(g+1)%3,P=(g+2)%3,I=M(x),O=M(b);I[C]=1,O[P]=1;var z=p(0,0,0,S(_,I)),D=p(0,0,0,S(w,O));if(Math.abs(z[1])&gt;Math.abs(D[1])){var R=z;z=D,D=R,R=I,I=O,O=R;var F=C;C=P,P=F}z[0]&lt;0&amp;&amp;(I[C]=-1),D[1]&gt;0&amp;&amp;(O[P]=-1);var B=0,N=0;for(L=0;L&lt;4;++L)B+=Math.pow(c[4*C+L],2),N+=Math.pow(c[4*P+L],2);I[C]/=Math.sqrt(B),O[P]/=Math.sqrt(N),l.axes[0]=I,l.axes[1]=O,l.fragClipBounds[0]=E(k,m[0],g,-1e8),l.fragClipBounds[1]=E(k,m[1],g,1e8),e.vao.bind(),e.vao.draw(o.TRIANGLES,e.vertexCount),e.lineWidth&gt;0&amp;&amp;(o.lineWidth(e.lineWidth*n),e.vao.draw(o.LINES,e.lineVertexCount,e.vertexCount)),e.vao.unbind()}}var C=[[-1e8,-1e8,-1e8],[1e8,1e8,1e8]];function P(t,e,r,n,i,a,o){var s=r.gl;if((a===r.projectHasAlpha||o)&amp;&amp;L(e,r,n,i),a===r.hasAlpha||o){t.bind();var l=t.uniforms;l.model=n.model||f,l.view=n.view||f,l.projection=n.projection||f,y[0]=2/s.drawingBufferWidth,y[1]=2/s.drawingBufferHeight,l.screenSize=y,l.highlightId=r.highlightId,l.highlightScale=r.highlightScale,l.fragClipBounds=C,l.clipBounds=r.axes.bounds,l.opacity=r.opacity,l.pickGroup=r.pickId/255,l.pixelRatio=i,r.vao.bind(),r.vao.draw(s.TRIANGLES,r.vertexCount),r.lineWidth&gt;0&amp;&amp;(s.lineWidth(r.lineWidth*i),r.vao.draw(s.LINES,r.lineVertexCount,r.vertexCount)),r.vao.unbind()}}function I(t,e,r,i){var a;a=Array.isArray(t)?e=this.pointCount||e&lt;0)return null;var r=this.points[e],n=this._selectResult;n.index=e;for(var i=0;i&lt;3;++i)n.position[i]=n.dataCoordinate[i]=r[i];return n},v.highlight=function(t){if(t){var e=t.index,r=255&amp;e,n=e&gt;&gt;8&amp;255,i=e&gt;&gt;16&amp;255;this.highlightId=[r/255,n/255,i/255,0]}else this.highlightId=[1,1,1,1]},v.update=function(t){if(\"perspective\"in(t=t||{})&amp;&amp;(this.useOrtho=!t.perspective),\"orthographic\"in t&amp;&amp;(this.useOrtho=!!t.orthographic),\"lineWidth\"in t&amp;&amp;(this.lineWidth=t.lineWidth),\"project\"in t)if(Array.isArray(t.project))this.axesProject=t.project;else{var e=!!t.project;this.axesProject=[e,e,e]}if(\"projectScale\"in t)if(Array.isArray(t.projectScale))this.projectScale=t.projectScale.slice();else{var r=+t.projectScale;this.projectScale=[r,r,r]}if(this.projectHasAlpha=!1,\"projectOpacity\"in t){if(Array.isArray(t.projectOpacity))this.projectOpacity=t.projectOpacity.slice();else{r=+t.projectOpacity;this.projectOpacity=[r,r,r]}for(var n=0;n&lt;3;++n)this.projectOpacity[n]=m(this.projectOpacity[n]),this.projectOpacity[n]&lt;1&amp;&amp;(this.projectHasAlpha=!0)}this.hasAlpha=!1,\"opacity\"in t&amp;&amp;(this.opacity=m(t.opacity),this.opacity&lt;1&amp;&amp;(this.hasAlpha=!0)),this.dirty=!0;var i,a,s=t.position,l=t.font||\"normal\",c=t.alignment||[0,0];if(2===c.length)i=c[0],a=c[1];else{i=[],a=[];for(n=0;n0){var O=0,z=x,D=[0,0,0,1],R=[0,0,0,1],F=Array.isArray(p)&amp;&amp;Array.isArray(p[0]),B=Array.isArray(v)&amp;&amp;Array.isArray(v[0]);t:for(n=0;n&lt;_;++n){y+=1;for(w=s[n],T=0;T&lt;3;++T){if(isNaN(w[T])||!isFinite(w[T]))continue t;f[T]=Math.max(f[T],w[T]),u[T]=Math.min(u[T],w[T])}k=(N=I(h,n,l,this.pixelRatio)).mesh,A=N.lines,M=N.bounds;var N,j=N.visible;if(j)if(Array.isArray(p)){if(3===(U=F?n0?1-M[0][0]:Y&lt;0?1+M[1][0]:1,W*=W&gt;0?1-M[0][1]:W&lt;0?1+M[1][1]:1],X=k.cells||[],J=k.positions||[];for(T=0;T0){var v=r*u;o.drawBox(f-v,h-v,p+v,h+v,a),o.drawBox(f-v,d-v,p+v,d+v,a),o.drawBox(f-v,h-v,f+v,d+v,a),o.drawBox(p-v,h-v,p+v,d+v,a)}}}},s.update=function(t){t=t||{},this.innerFill=!!t.innerFill,this.outerFill=!!t.outerFill,this.innerColor=(t.innerColor||[0,0,0,.5]).slice(),this.outerColor=(t.outerColor||[0,0,0,.5]).slice(),this.borderColor=(t.borderColor||[0,0,0,1]).slice(),this.borderWidth=t.borderWidth||0,this.selectBox=(t.selectBox||this.selectBox).slice()},s.dispose=function(){this.boxBuffer.dispose(),this.boxShader.dispose(),this.plot.removeOverlay(this)}},{\"./lib/shaders\":129,\"gl-buffer\":78,\"gl-shader\":132}],131:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r=e[0],a=e[1],o=n(t,r,a,{}),s=i.mallocUint8(r*a*4);return new l(t,o,s)};var n=t(\"gl-fbo\"),i=t(\"typedarray-pool\"),a=t(\"ndarray\"),o=t(\"bit-twiddle\").nextPow2;function s(t,e,r,n,i){this.coord=[t,e],this.id=r,this.value=n,this.distance=i}function l(t,e,r){this.gl=t,this.fbo=e,this.buffer=r,this._readTimeout=null;var n=this;this._readCallback=function(){n.gl&amp;&amp;(e.bind(),t.readPixels(0,0,e.shape[0],e.shape[1],t.RGBA,t.UNSIGNED_BYTE,n.buffer),n._readTimeout=null)}}var c=l.prototype;Object.defineProperty(c,\"shape\",{get:function(){return this.gl?this.fbo.shape.slice():[0,0]},set:function(t){if(this.gl){this.fbo.shape=t;var e=this.fbo.shape[0],r=this.fbo.shape[1];if(r*e*4&gt;this.buffer.length){i.free(this.buffer);for(var n=this.buffer=i.mallocUint8(o(r*e*4)),a=0;ar)for(t=r;te)for(t=e;t=0){for(var T=0|w.type.charAt(w.type.length-1),k=new Array(T),A=0;A=0;)M+=1;_[y]=M}var S=new Array(r.length);function E(){h.program=o.program(p,h._vref,h._fref,b,_);for(var t=0;t&lt;r.length;++t)S[t]=p.getUniformLocation(h.program,r[t].name)}E(),h._relink=E,h.types={uniforms:a(r),attributes:a(c)},h.attributes=i(p,h,x,_),Object.defineProperty(h,\"uniforms\",n(p,h,r,S))},e.exports=function(t,e,r,n,i){var a=new c(t);return a.update(e,r,n,i),a}},{\"./lib/GLError\":133,\"./lib/create-attributes\":134,\"./lib/create-uniforms\":135,\"./lib/reflect\":136,\"./lib/runtime-reflect\":137,\"./lib/shader-cache\":138}],133:[function(t,e,r){function n(t,e,r){this.shortMessage=e||\"\",this.longMessage=r||\"\",this.rawError=t||\"\",this.message=\"gl-shader: \"+(e||t||\"\")+(r?\"\\n\"+r:\"\"),this.stack=(new Error).stack}n.prototype=new Error,n.prototype.name=\"GLError\",n.prototype.constructor=n,e.exports=n},{}],134:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,i){for(var a={},o=0,c=r.length;o&lt;c;++o){var u=r[o],f=u.name,h=u.type,p=u.locations;switch(h){case\"bool\":case\"int\":case\"float\":s(t,e,p[0],i,1,a,f);break;default:if(h.indexOf(\"vec\")&gt;=0){if((d=h.charCodeAt(h.length-1)-48)&lt;2||d&gt;4)throw new n(\"\",\"Invalid data type for attribute \"+f+\": \"+h);s(t,e,p[0],i,d,a,f)}else{if(!(h.indexOf(\"mat\")&gt;=0))throw new n(\"\",\"Unknown data type for attribute \"+f+\": \"+h);var d;if((d=h.charCodeAt(h.length-1)-48)&lt;2||d&gt;4)throw new n(\"\",\"Invalid data type for attribute \"+f+\": \"+h);l(t,e,p,i,d,a,f)}}}return a};var n=t(\"./GLError\");function i(t,e,r,n,i,a){this._gl=t,this._wrapper=e,this._index=r,this._locations=n,this._dimension=i,this._constFunc=a}var a=i.prototype;a.pointer=function(t,e,r,n){var i=this._gl,a=this._locations[this._index];i.vertexAttribPointer(a,this._dimension,t||i.FLOAT,!!e,r||0,n||0),i.enableVertexAttribArray(a)},a.set=function(t,e,r,n){return this._constFunc(this._locations[this._index],t,e,r,n)},Object.defineProperty(a,\"location\",{get:function(){return this._locations[this._index]},set:function(t){return t!==this._locations[this._index]&amp;&amp;(this._locations[this._index]=0|t,this._wrapper.program=null),0|t}});var o=[function(t,e,r){return void 0===r.length?t.vertexAttrib1f(e,r):t.vertexAttrib1fv(e,r)},function(t,e,r,n){return void 0===r.length?t.vertexAttrib2f(e,r,n):t.vertexAttrib2fv(e,r)},function(t,e,r,n,i){return void 0===r.length?t.vertexAttrib3f(e,r,n,i):t.vertexAttrib3fv(e,r)},function(t,e,r,n,i,a){return void 0===r.length?t.vertexAttrib4f(e,r,n,i,a):t.vertexAttrib4fv(e,r)}];function s(t,e,r,n,a,s,l){var c=o[a],u=new i(t,e,r,n,a,c);Object.defineProperty(s,l,{set:function(e){return t.disableVertexAttribArray(n[r]),c(t,n[r],e),e},get:function(){return u},enumerable:!0})}function l(t,e,r,n,i,a,o){for(var l=new Array(i),c=new Array(i),u=0;u4)throw new i(\"\",\"Invalid uniform dimension type for matrix \"+name+\": \"+v);t[\"uniformMatrix\"+g+\"fv\"](s[u],!1,f);break}throw new i(\"\",\"Unknown uniform data type for \"+name+\": \"+v)}if((g=v.charCodeAt(v.length-1)-48)&lt;2||g&gt;4)throw new i(\"\",\"Invalid data type\");switch(v.charAt(0)){case\"b\":case\"i\":t[\"uniform\"+g+\"iv\"](s[u],f);break;case\"v\":t[\"uniform\"+g+\"fv\"](s[u],f);break;default:throw new i(\"\",\"Unrecognized data type for vector \"+name+\": \"+v)}}}}}}function c(t,e,n){if(\"object\"==typeof n){var c=u(n);Object.defineProperty(t,e,{get:a(c),set:l(n),enumerable:!0,configurable:!1})}else s[n]?Object.defineProperty(t,e,{get:(f=n,function(t,e,r){return t.getUniform(e.program,r[f])}),set:l(n),enumerable:!0,configurable:!1}):t[e]=function(t){switch(t){case\"bool\":return!1;case\"int\":case\"sampler2D\":case\"samplerCube\":case\"float\":return 0;default:var e=t.indexOf(\"vec\");if(0&lt;=e&amp;&amp;e&lt;=1&amp;&amp;t.length===4+e){if((r=t.charCodeAt(t.length-1)-48)&lt;2||r&gt;4)throw new i(\"\",\"Invalid data type\");return\"b\"===t.charAt(0)?o(r,!1):o(r,0)}if(0===t.indexOf(\"mat\")&amp;&amp;4===t.length){var r;if((r=t.charCodeAt(t.length-1)-48)&lt;2||r&gt;4)throw new i(\"\",\"Invalid uniform dimension type for matrix \"+name+\": \"+t);return o(r*r,0)}throw new i(\"\",\"Unknown uniform data type for \"+name+\": \"+t)}}(r[n].type);var f}function u(t){var e;if(Array.isArray(t)){e=new Array(t.length);for(var r=0;r1){s[0]in a||(a[s[0]]=[]),a=a[s[0]];for(var l=1;l1)for(var l=0;l 0  U  ||b|| &gt; 0.\\n  // Assign z = 0, x = -b, y = a:\\n  // a*-b + b*a + c*0 = -ba + ba + 0 = 0\\n  if (v.x*v.x &gt; v.z*v.z || v.y*v.y &gt; v.z*v.z) {\\n    return normalize(vec3(-v.y, v.x, 0.0));\\n  } else {\\n    return normalize(vec3(0.0, v.z, -v.y));\\n  }\\n}\\n\\n// Calculate the tube vertex and normal at the given index.\\n//\\n// The returned vertex is for a tube ring with its center at origin, radius of length(d), pointing in the direction of d.\\n//\\n// Each tube segment is made up of a ring of vertices.\\n// These vertices are used to make up the triangles of the tube by connecting them together in the vertex array.\\n// The indexes of tube segments run from 0 to 8.\\n//\\nvec3 getTubePosition(vec3 d, float index, out vec3 normal) {\\n  float segmentCount = 8.0;\\n\\n  float angle = 2.0 * 3.14159 * (index / segmentCount);\\n\\n  vec3 u = getOrthogonalVector(d);\\n  vec3 v = normalize(cross(u, d));\\n\\n  vec3 x = u * cos(angle) * length(d);\\n  vec3 y = v * sin(angle) * length(d);\\n  vec3 v3 = x + y;\\n\\n  normal = normalize(v3);\\n\\n  return v3;\\n}\\n\\nattribute vec4 vector;\\nattribute vec4 color, position;\\nattribute vec2 uv;\\n\\nuniform float vectorScale, tubeScale;\\nuniform mat4 model, view, projection, inverseModel;\\nuniform vec3 eyePosition, lightPosition;\\n\\nvarying vec3 f_normal, f_lightDirection, f_eyeDirection, f_data, f_position;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  // Scale the vector magnitude to stay constant with\\n  // model &amp; view changes.\\n  vec3 normal;\\n  vec3 XYZ = getTubePosition(mat3(model) * (tubeScale * vector.w * normalize(vector.xyz)), position.w, normal);\\n  vec4 tubePosition = model * vec4(position.xyz, 1.0) + vec4(XYZ, 0.0);\\n\\n  //Lighting geometry parameters\\n  vec4 cameraCoordinate = view * tubePosition;\\n  cameraCoordinate.xyz /= cameraCoordinate.w;\\n  f_lightDirection = lightPosition - cameraCoordinate.xyz;\\n  f_eyeDirection   = eyePosition - cameraCoordinate.xyz;\\n  f_normal = normalize((vec4(normal, 0.0) * inverseModel).xyz);\\n\\n  // vec4 m_position  = model * vec4(tubePosition, 1.0);\\n  vec4 t_position  = view * tubePosition;\\n  gl_Position      = projection * t_position;\\n\\n  f_color          = color;\\n  f_data           = tubePosition.xyz;\\n  f_position       = position.xyz;\\n  f_uv             = uv;\\n}\\n\"]),a=n([\"#extension GL_OES_standard_derivatives : enable\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nfloat beckmannDistribution(float x, float roughness) {\\n  float NdotH = max(x, 0.0001);\\n  float cos2Alpha = NdotH * NdotH;\\n  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;\\n  float roughness2 = roughness * roughness;\\n  float denom = 3.141592653589793 * roughness2 * cos2Alpha * cos2Alpha;\\n  return exp(tan2Alpha / roughness2) / denom;\\n}\\n\\nfloat cookTorranceSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float roughness,\\n  float fresnel) {\\n\\n  float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);\\n  float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);\\n\\n  //Half angle vector\\n  vec3 H = normalize(lightDirection + viewDirection);\\n\\n  //Geometric term\\n  float NdotH = max(dot(surfaceNormal, H), 0.0);\\n  float VdotH = max(dot(viewDirection, H), 0.000001);\\n  float LdotH = max(dot(lightDirection, H), 0.000001);\\n  float G1 = (2.0 * NdotH * VdotN) / VdotH;\\n  float G2 = (2.0 * NdotH * LdotN) / LdotH;\\n  float G = min(1.0, min(G1, G2));\\n  \\n  //Distribution term\\n  float D = beckmannDistribution(NdotH, roughness);\\n\\n  //Fresnel term\\n  float F = pow(1.0 - VdotN, fresnel);\\n\\n  //Multiply terms and done\\n  return  G * F * D / max(3.14159265 * VdotN, 0.000001);\\n}\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 clipBounds[2];\\nuniform float roughness, fresnel, kambient, kdiffuse, kspecular, opacity;\\nuniform sampler2D texture;\\n\\nvarying vec3 f_normal, f_lightDirection, f_eyeDirection, f_data, f_position;\\nvarying vec4 f_color;\\nvarying vec2 f_uv;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_position)) discard;\\n  vec3 N = normalize(f_normal);\\n  vec3 L = normalize(f_lightDirection);\\n  vec3 V = normalize(f_eyeDirection);\\n\\n  if(gl_FrontFacing) {\\n    N = -N;\\n  }\\n\\n  float specular = min(1.0, max(0.0, cookTorranceSpecular(L, V, N, roughness, fresnel)));\\n  float diffuse  = min(kambient + kdiffuse * max(dot(N, L), 0.0), 1.0);\\n\\n  vec4 surfaceColor = f_color * texture2D(texture, f_uv);\\n  vec4 litColor = surfaceColor.a * vec4(diffuse * surfaceColor.rgb + kspecular * vec3(1,1,1) * specular,  1.0);\\n\\n  gl_FragColor = litColor * opacity;\\n}\\n\"]),o=n([\"precision highp float;\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nvec3 getOrthogonalVector(vec3 v) {\\n  // Return up-vector for only-z vector.\\n  // Return ax + by + cz = 0, a point that lies on the plane that has v as a normal and that isn't (0,0,0).\\n  // From the above if-statement we have ||a|| &gt; 0  U  ||b|| &gt; 0.\\n  // Assign z = 0, x = -b, y = a:\\n  // a*-b + b*a + c*0 = -ba + ba + 0 = 0\\n  if (v.x*v.x &gt; v.z*v.z || v.y*v.y &gt; v.z*v.z) {\\n    return normalize(vec3(-v.y, v.x, 0.0));\\n  } else {\\n    return normalize(vec3(0.0, v.z, -v.y));\\n  }\\n}\\n\\n// Calculate the tube vertex and normal at the given index.\\n//\\n// The returned vertex is for a tube ring with its center at origin, radius of length(d), pointing in the direction of d.\\n//\\n// Each tube segment is made up of a ring of vertices.\\n// These vertices are used to make up the triangles of the tube by connecting them together in the vertex array.\\n// The indexes of tube segments run from 0 to 8.\\n//\\nvec3 getTubePosition(vec3 d, float index, out vec3 normal) {\\n  float segmentCount = 8.0;\\n\\n  float angle = 2.0 * 3.14159 * (index / segmentCount);\\n\\n  vec3 u = getOrthogonalVector(d);\\n  vec3 v = normalize(cross(u, d));\\n\\n  vec3 x = u * cos(angle) * length(d);\\n  vec3 y = v * sin(angle) * length(d);\\n  vec3 v3 = x + y;\\n\\n  normal = normalize(v3);\\n\\n  return v3;\\n}\\n\\nattribute vec4 vector;\\nattribute vec4 position;\\nattribute vec4 id;\\n\\nuniform mat4 model, view, projection;\\nuniform float tubeScale;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  vec3 normal;\\n  vec3 XYZ = getTubePosition(mat3(model) * (tubeScale * vector.w * normalize(vector.xyz)), position.w, normal);\\n  vec4 tubePosition = model * vec4(position.xyz, 1.0) + vec4(XYZ, 0.0);\\n\\n  gl_Position = projection * view * tubePosition;\\n  f_id        = id;\\n  f_position  = position.xyz;\\n}\\n\"]),s=n([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3  clipBounds[2];\\nuniform float pickId;\\n\\nvarying vec3 f_position;\\nvarying vec4 f_id;\\n\\nvoid main() {\\n  if (outOfRange(clipBounds[0], clipBounds[1], f_position)) discard;\\n\\n  gl_FragColor = vec4(pickId, f_id.xyz);\\n}\"]);r.meshShader={vertex:i,fragment:a,attributes:[{name:\"position\",type:\"vec4\"},{name:\"color\",type:\"vec4\"},{name:\"uv\",type:\"vec2\"},{name:\"vector\",type:\"vec4\"}]},r.pickShader={vertex:o,fragment:s,attributes:[{name:\"position\",type:\"vec4\"},{name:\"id\",type:\"vec4\"},{name:\"vector\",type:\"vec4\"}]}},{glslify:231}],143:[function(t,e,r){\"use strict\";var n=t(\"gl-vec3\"),i=t(\"gl-vec4\"),a=[\"xyz\",\"xzy\",\"yxz\",\"yzx\",\"zxy\",\"zyx\"],o=function(t,e,r,a){for(var o=0,s=0;s0)for(T=0;T&lt;8;T++){var k=(T+1)%8;c.push(h[T],p[T],p[k],p[k],h[k],h[T]),f.push(y,v,v,v,y,y),d.push(m,g,g,g,m,m);var A=c.length;u.push([A-6,A-5,A-4],[A-3,A-2,A-1])}var M=h;h=p,p=M;var S=y;y=v,v=S;var E=m;m=g,g=E}return{positions:c,cells:u,vectors:f,vertexIntensity:d}}(t,r,a,o)})),f=[],h=[],p=[],d=[];for(s=0;se)return r-1}return r},l=function(t,e,r){return tr?r:t},c=function(t){var e=1/0;t.sort((function(t,e){return t-e}));for(var r=t.length,n=1;nf-1||y&gt;h-1||x&gt;p-1)return n.create();var b,_,w,T,k,A,M=a[0][d],S=a[0][v],E=a[1][m],L=a[1][y],C=a[2][g],P=(o-M)/(S-M),I=(c-E)/(L-E),O=(u-C)/(a[2][x]-C);switch(isFinite(P)||(P=.5),isFinite(I)||(I=.5),isFinite(O)||(O=.5),r.reversedX&amp;&amp;(d=f-1-d,v=f-1-v),r.reversedY&amp;&amp;(m=h-1-m,y=h-1-y),r.reversedZ&amp;&amp;(g=p-1-g,x=p-1-x),r.filled){case 5:k=g,A=x,w=m*p,T=y*p,b=d*p*h,_=v*p*h;break;case 4:k=g,A=x,b=d*p,_=v*p,w=m*p*f,T=y*p*f;break;case 3:w=m,T=y,k=g*h,A=x*h,b=d*h*p,_=v*h*p;break;case 2:w=m,T=y,b=d*h,_=v*h,k=g*h*f,A=x*h*f;break;case 1:b=d,_=v,k=g*f,A=x*f,w=m*f*p,T=y*f*p;break;default:b=d,_=v,w=m*f,T=y*f,k=g*f*h,A=x*f*h}var z=i[b+w+k],D=i[b+w+A],R=i[b+T+k],F=i[b+T+A],B=i[_+w+k],N=i[_+w+A],j=i[_+T+k],U=i[_+T+A],V=n.create(),H=n.create(),q=n.create(),G=n.create();n.lerp(V,z,B,P),n.lerp(H,D,N,P),n.lerp(q,R,j,P),n.lerp(G,F,U,P);var Y=n.create(),W=n.create();n.lerp(Y,V,q,I),n.lerp(W,H,G,I);var Z=n.create();return n.lerp(Z,Y,W,O),Z}(e,t,p)},m=t.getDivergence||function(t,e){var r=n.create(),i=1e-4;n.add(r,t,[i,0,0]);var a=d(r);n.subtract(a,a,e),n.scale(a,a,1/i),n.add(r,t,[0,i,0]);var o=d(r);n.subtract(o,o,e),n.scale(o,o,1/i),n.add(r,t,[0,0,i]);var s=d(r);return n.subtract(s,s,e),n.scale(s,s,1/i),n.add(r,a,o),n.add(r,r,s),r},g=[],v=e[0][0],y=e[0][1],x=e[0][2],b=e[1][0],_=e[1][1],w=e[1][2],T=function(t){var e=t[0],r=t[1],n=t[2];return!(eb||r_||nw)},k=10*n.distance(e[0],e[1])/i,A=k*k,M=1,S=0,E=r.length;E&gt;1&amp;&amp;(M=function(t){for(var e=[],r=[],n=[],i={},a={},o={},s=t.length,l=0;lS&amp;&amp;(S=F),D.push(F),g.push({points:P,velocities:I,divergences:D});for(var B=0;B&lt;100*i&amp;&amp;P.lengthA&amp;&amp;n.scale(N,N,k/Math.sqrt(j)),n.add(N,N,C),O=d(N),n.squaredDistance(z,N)-A&gt;-1e-4*A){P.push(N),z=N,I.push(O);R=m(N,O),F=n.length(R);isFinite(F)&amp;&amp;F&gt;S&amp;&amp;(S=F),D.push(F)}C=N}}var U=o(g,t.colormap,S,M);return f?U.tubeScale=f:(0===S&amp;&amp;(S=1),U.tubeScale=.5*u*M/S),U};var u=t(\"./lib/shaders\"),f=t(\"gl-cone3d\").createMesh;e.exports.createTubeMesh=function(t,e){return f(t,e,{shaders:u,traceType:\"streamtube\"})}},{\"./lib/shaders\":142,\"gl-cone3d\":79,\"gl-vec3\":169,\"gl-vec4\":205}],144:[function(t,e,r){var n=t(\"gl-shader\"),i=t(\"glslify\"),a=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec4 uv;\\nattribute vec3 f;\\nattribute vec3 normal;\\n\\nuniform vec3 objectOffset;\\nuniform mat4 model, view, projection, inverseModel;\\nuniform vec3 lightPosition, eyePosition;\\nuniform sampler2D colormap;\\n\\nvarying float value, kill;\\nvarying vec3 worldCoordinate;\\nvarying vec2 planeCoordinate;\\nvarying vec3 lightDirection, eyeDirection, surfaceNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 localCoordinate = vec3(uv.zw, f.x);\\n  worldCoordinate = objectOffset + localCoordinate;\\n  vec4 worldPosition = model * vec4(worldCoordinate, 1.0);\\n  vec4 clipPosition = projection * view * worldPosition;\\n  gl_Position = clipPosition;\\n  kill = f.y;\\n  value = f.z;\\n  planeCoordinate = uv.xy;\\n\\n  vColor = texture2D(colormap, vec2(value, value));\\n\\n  //Lighting geometry parameters\\n  vec4 cameraCoordinate = view * worldPosition;\\n  cameraCoordinate.xyz /= cameraCoordinate.w;\\n  lightDirection = lightPosition - cameraCoordinate.xyz;\\n  eyeDirection   = eyePosition - cameraCoordinate.xyz;\\n  surfaceNormal  = normalize((vec4(normal,0) * inverseModel).xyz);\\n}\\n\"]),o=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nfloat beckmannDistribution(float x, float roughness) {\\n  float NdotH = max(x, 0.0001);\\n  float cos2Alpha = NdotH * NdotH;\\n  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;\\n  float roughness2 = roughness * roughness;\\n  float denom = 3.141592653589793 * roughness2 * cos2Alpha * cos2Alpha;\\n  return exp(tan2Alpha / roughness2) / denom;\\n}\\n\\nfloat beckmannSpecular(\\n  vec3 lightDirection,\\n  vec3 viewDirection,\\n  vec3 surfaceNormal,\\n  float roughness) {\\n  return beckmannDistribution(dot(surfaceNormal, normalize(lightDirection + viewDirection)), roughness);\\n}\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec3 lowerBound, upperBound;\\nuniform float contourTint;\\nuniform vec4 contourColor;\\nuniform sampler2D colormap;\\nuniform vec3 clipBounds[2];\\nuniform float roughness, fresnel, kambient, kdiffuse, kspecular, opacity;\\nuniform float vertexColor;\\n\\nvarying float value, kill;\\nvarying vec3 worldCoordinate;\\nvarying vec3 lightDirection, eyeDirection, surfaceNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  if (\\n    kill &gt; 0.0 ||\\n    vColor.a == 0.0 ||\\n    outOfRange(clipBounds[0], clipBounds[1], worldCoordinate)\\n  ) discard;\\n\\n  vec3 N = normalize(surfaceNormal);\\n  vec3 V = normalize(eyeDirection);\\n  vec3 L = normalize(lightDirection);\\n\\n  if(gl_FrontFacing) {\\n    N = -N;\\n  }\\n\\n  float specular = max(beckmannSpecular(L, V, N, roughness), 0.);\\n  float diffuse  = min(kambient + kdiffuse * max(dot(N, L), 0.0), 1.0);\\n\\n  //decide how to interpolate color \\u2014 in vertex or in fragment\\n  vec4 surfaceColor =\\n    step(vertexColor, .5) * texture2D(colormap, vec2(value, value)) +\\n    step(.5, vertexColor) * vColor;\\n\\n  vec4 litColor = surfaceColor.a * vec4(diffuse * surfaceColor.rgb + kspecular * vec3(1,1,1) * specular,  1.0);\\n\\n  gl_FragColor = mix(litColor, contourColor, contourTint) * opacity;\\n}\\n\"]),s=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec4 uv;\\nattribute float f;\\n\\nuniform vec3 objectOffset;\\nuniform mat3 permutation;\\nuniform mat4 model, view, projection;\\nuniform float height, zOffset;\\nuniform sampler2D colormap;\\n\\nvarying float value, kill;\\nvarying vec3 worldCoordinate;\\nvarying vec2 planeCoordinate;\\nvarying vec3 lightDirection, eyeDirection, surfaceNormal;\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec3 dataCoordinate = permutation * vec3(uv.xy, height);\\n  worldCoordinate = objectOffset + dataCoordinate;\\n  vec4 worldPosition = model * vec4(worldCoordinate, 1.0);\\n\\n  vec4 clipPosition = projection * view * worldPosition;\\n  clipPosition.z += zOffset;\\n\\n  gl_Position = clipPosition;\\n  value = f + objectOffset.z;\\n  kill = -1.0;\\n  planeCoordinate = uv.zw;\\n\\n  vColor = texture2D(colormap, vec2(value, value));\\n\\n  //Don't do lighting for contours\\n  surfaceNormal   = vec3(1,0,0);\\n  eyeDirection    = vec3(0,1,0);\\n  lightDirection  = vec3(0,0,1);\\n}\\n\"]),l=i([\"precision highp float;\\n#define GLSLIFY 1\\n\\nbool outOfRange(float a, float b, float p) {\\n  return ((p &gt; max(a, b)) || \\n          (p &lt; min(a, b)));\\n}\\n\\nbool outOfRange(vec2 a, vec2 b, vec2 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y));\\n}\\n\\nbool outOfRange(vec3 a, vec3 b, vec3 p) {\\n  return (outOfRange(a.x, b.x, p.x) ||\\n          outOfRange(a.y, b.y, p.y) ||\\n          outOfRange(a.z, b.z, p.z));\\n}\\n\\nbool outOfRange(vec4 a, vec4 b, vec4 p) {\\n  return outOfRange(a.xyz, b.xyz, p.xyz);\\n}\\n\\nuniform vec2 shape;\\nuniform vec3 clipBounds[2];\\nuniform float pickId;\\n\\nvarying float value, kill;\\nvarying vec3 worldCoordinate;\\nvarying vec2 planeCoordinate;\\nvarying vec3 surfaceNormal;\\n\\nvec2 splitFloat(float v) {\\n  float vh = 255.0 * v;\\n  float upper = floor(vh);\\n  float lower = fract(vh);\\n  return vec2(upper / 255.0, floor(lower * 16.0) / 16.0);\\n}\\n\\nvoid main() {\\n  if ((kill &gt; 0.0) ||\\n      (outOfRange(clipBounds[0], clipBounds[1], worldCoordinate))) discard;\\n\\n  vec2 ux = splitFloat(planeCoordinate.x / shape.x);\\n  vec2 uy = splitFloat(planeCoordinate.y / shape.y);\\n  gl_FragColor = vec4(pickId, ux.x, uy.x, ux.y + (uy.y/16.0));\\n}\\n\"]);r.createShader=function(t){var e=n(t,a,o,null,[{name:\"uv\",type:\"vec4\"},{name:\"f\",type:\"vec3\"},{name:\"normal\",type:\"vec3\"}]);return e.attributes.uv.location=0,e.attributes.f.location=1,e.attributes.normal.location=2,e},r.createPickShader=function(t){var e=n(t,a,l,null,[{name:\"uv\",type:\"vec4\"},{name:\"f\",type:\"vec3\"},{name:\"normal\",type:\"vec3\"}]);return e.attributes.uv.location=0,e.attributes.f.location=1,e.attributes.normal.location=2,e},r.createContourShader=function(t){var e=n(t,s,o,null,[{name:\"uv\",type:\"vec4\"},{name:\"f\",type:\"float\"}]);return e.attributes.uv.location=0,e.attributes.f.location=1,e},r.createPickContourShader=function(t){var e=n(t,s,l,null,[{name:\"uv\",type:\"vec4\"},{name:\"f\",type:\"float\"}]);return e.attributes.uv.location=0,e.attributes.f.location=1,e}},{\"gl-shader\":132,glslify:231}],145:[function(t,e,r){\"use strict\";e.exports=function(t){var e=t.gl,r=y(e),n=b(e),s=x(e),l=_(e),c=i(e),u=a(e,[{buffer:c,size:4,stride:40,offset:0},{buffer:c,size:3,stride:40,offset:16},{buffer:c,size:3,stride:40,offset:28}]),f=i(e),h=a(e,[{buffer:f,size:4,stride:20,offset:0},{buffer:f,size:1,stride:20,offset:16}]),p=i(e),d=a(e,[{buffer:p,size:2,type:e.FLOAT}]),m=o(e,1,256,e.RGBA,e.UNSIGNED_BYTE);m.minFilter=e.LINEAR,m.magFilter=e.LINEAR;var g=new M(e,[0,0],[[0,0,0],[0,0,0]],r,n,c,u,m,s,l,f,h,p,d,[0,0,0]),v={levels:[[],[],[]]};for(var w in t)v[w]=t[w];return v.colormap=v.colormap||\"jet\",g.update(v),g};var n=t(\"bit-twiddle\"),i=t(\"gl-buffer\"),a=t(\"gl-vao\"),o=t(\"gl-texture2d\"),s=t(\"typedarray-pool\"),l=t(\"colormap\"),c=t(\"ndarray-ops\"),u=t(\"ndarray-pack\"),f=t(\"ndarray\"),h=t(\"surface-nets\"),p=t(\"gl-mat4/multiply\"),d=t(\"gl-mat4/invert\"),m=t(\"binary-search-bounds\"),g=t(\"ndarray-gradient\"),v=t(\"./lib/shaders\"),y=v.createShader,x=v.createContourShader,b=v.createPickShader,_=v.createPickContourShader,w=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],T=[[0,0],[0,1],[1,0],[1,1],[1,0],[0,1]],k=[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]];function A(t,e,r,n,i){this.position=t,this.index=e,this.uv=r,this.level=n,this.dataCoordinate=i}!function(){for(var t=0;t&lt;3;++t){var e=k[t],r=(t+2)%3;e[(t+1)%3+0]=1,e[r+3]=1,e[t+6]=1}}();function M(t,e,r,n,i,a,o,l,c,u,h,p,d,m,g){this.gl=t,this.shape=e,this.bounds=r,this.objectOffset=g,this.intensityBounds=[],this._shader=n,this._pickShader=i,this._coordinateBuffer=a,this._vao=o,this._colorMap=l,this._contourShader=c,this._contourPickShader=u,this._contourBuffer=h,this._contourVAO=p,this._contourOffsets=[[],[],[]],this._contourCounts=[[],[],[]],this._vertexCount=0,this._pickResult=new A([0,0,0],[0,0],[0,0],[0,0,0],[0,0,0]),this._dynamicBuffer=d,this._dynamicVAO=m,this._dynamicOffsets=[0,0,0],this._dynamicCounts=[0,0,0],this.contourWidth=[1,1,1],this.contourLevels=[[1],[1],[1]],this.contourTint=[0,0,0],this.contourColor=[[.5,.5,.5,1],[.5,.5,.5,1],[.5,.5,.5,1]],this.showContour=!0,this.showSurface=!0,this.enableHighlight=[!0,!0,!0],this.highlightColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.highlightTint=[1,1,1],this.highlightLevel=[-1,-1,-1],this.enableDynamic=[!0,!0,!0],this.dynamicLevel=[NaN,NaN,NaN],this.dynamicColor=[[0,0,0,1],[0,0,0,1],[0,0,0,1]],this.dynamicTint=[1,1,1],this.dynamicWidth=[1,1,1],this.axesBounds=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],this.surfaceProject=[!1,!1,!1],this.contourProject=[[!1,!1,!1],[!1,!1,!1],[!1,!1,!1]],this.colorBounds=[!1,!1],this._field=[f(s.mallocFloat(1024),[0,0]),f(s.mallocFloat(1024),[0,0]),f(s.mallocFloat(1024),[0,0])],this.pickId=1,this.clipBounds=[[-1/0,-1/0,-1/0],[1/0,1/0,1/0]],this.snapToData=!1,this.pixelRatio=1,this.opacity=1,this.lightPosition=[10,1e4,0],this.ambientLight=.8,this.diffuseLight=.8,this.specularLight=2,this.roughness=.5,this.fresnel=1.5,this.vertexColor=0,this.dirty=!0}var S=M.prototype;S.genColormap=function(t,e){var r=!1,n=u([l({colormap:t,nshades:256,format:\"rgba\"}).map((function(t,n){var i=e?function(t,e){if(!e)return 1;if(!e.length)return 1;for(var r=0;rt&amp;&amp;r&gt;0){var n=(e[r][0]-t)/(e[r][0]-e[r-1][0]);return e[r][1]*(1-n)+n*e[r-1][1]}}return 1}(n/255,e):t[3];return i&lt;1&amp;&amp;(r=!0),[t[0],t[1],t[2],255*i]}))]);return c.divseq(n,255),this.hasAlphaScale=r,n},S.isTransparent=function(){return this.opacity&lt;1||this.hasAlphaScale},S.isOpaque=function(){return!this.isTransparent()},S.pickSlots=1,S.setPickBase=function(t){this.pickId=t};var E=[0,0,0],L={showSurface:!1,showContour:!1,projections:[w.slice(),w.slice(),w.slice()],clipBounds:[[[0,0,0],[0,0,0]],[[0,0,0],[0,0,0]],[[0,0,0],[0,0,0]]]};function C(t,e){var r,n,i,a=e.axes&amp;&amp;e.axes.lastCubeProps.axis||E,o=e.showSurface,s=e.showContour;for(r=0;r&lt;3;++r)for(o=o||e.surfaceProject[r],n=0;n&lt;3;++n)s=s||e.contourProject[r][n];for(r=0;r&lt;3;++r){var l=L.projections[r];for(n=0;n&lt;16;++n)l[n]=0;for(n=0;n&lt;4;++n)l[5*n]=1;l[5*r]=0,l[12+r]=e.axesBounds[+(a[r]&gt;0)][r],p(l,t.model,l);var c=L.clipBounds[r];for(i=0;i&lt;2;++i)for(n=0;n&lt;3;++n)c[i][n]=t.clipBounds[i][n];c[0][r]=-1e8,c[1][r]=1e8}return L.showSurface=o,L.showContour=s,L}var P={model:w,view:w,projection:w,inverseModel:w.slice(),lowerBound:[0,0,0],upperBound:[0,0,0],colorMap:0,clipBounds:[[0,0,0],[0,0,0]],height:0,contourTint:0,contourColor:[0,0,0,1],permutation:[1,0,0,0,1,0,0,0,1],zOffset:-1e-4,objectOffset:[0,0,0],kambient:1,kdiffuse:1,kspecular:1,lightPosition:[1e3,1e3,1e3],eyePosition:[0,0,0],roughness:1,fresnel:1,opacity:1,vertexColor:0},I=w.slice(),O=[1,0,0,0,1,0,0,0,1];function z(t,e){t=t||{};var r=this.gl;r.disable(r.CULL_FACE),this._colorMap.bind(0);var n=P;n.model=t.model||w,n.view=t.view||w,n.projection=t.projection||w,n.lowerBound=[this.bounds[0][0],this.bounds[0][1],this.colorBounds[0]||this.bounds[0][2]],n.upperBound=[this.bounds[1][0],this.bounds[1][1],this.colorBounds[1]||this.bounds[1][2]],n.objectOffset=this.objectOffset,n.contourColor=this.contourColor[0],n.inverseModel=d(n.inverseModel,n.model);for(var i=0;i&lt;2;++i)for(var a=n.clipBounds[i],o=0;o&lt;3;++o)a[o]=Math.min(Math.max(this.clipBounds[i][o],-1e8),1e8);n.kambient=this.ambientLight,n.kdiffuse=this.diffuseLight,n.kspecular=this.specularLight,n.roughness=this.roughness,n.fresnel=this.fresnel,n.opacity=this.opacity,n.height=0,n.permutation=O,n.vertexColor=this.vertexColor;var s=I;for(p(s,n.view,n.model),p(s,n.projection,s),d(s,s),i=0;i&lt;3;++i)n.eyePosition[i]=s[12+i]/s[15];var l=s[15];for(i=0;i&lt;3;++i)l+=this.lightPosition[i]*s[4*i+3];for(i=0;i&lt;3;++i){var c=s[12+i];for(o=0;o&lt;3;++o)c+=s[4*o+i]*this.lightPosition[o];n.lightPosition[i]=c/l}var u=C(n,this);if(u.showSurface){for(this._shader.bind(),this._shader.uniforms=n,this._vao.bind(),this.showSurface&amp;&amp;this._vertexCount&amp;&amp;this._vao.draw(r.TRIANGLES,this._vertexCount),i=0;i&lt;3;++i)this.surfaceProject[i]&amp;&amp;this.vertexCount&amp;&amp;(this._shader.uniforms.model=u.projections[i],this._shader.uniforms.clipBounds=u.clipBounds[i],this._vao.draw(r.TRIANGLES,this._vertexCount));this._vao.unbind()}if(u.showContour){var f=this._contourShader;n.kambient=1,n.kdiffuse=0,n.kspecular=0,n.opacity=1,f.bind(),f.uniforms=n;var h=this._contourVAO;for(h.bind(),i=0;i&lt;3;++i)for(f.uniforms.permutation=k[i],r.lineWidth(this.contourWidth[i]*this.pixelRatio),o=0;o&gt;4)/16)/255,i=Math.floor(n),a=n-i,o=e[1]*(t.value[1]+(15&amp;t.value[2])/16)/255,s=Math.floor(o),l=o-s;i+=1,s+=1;var c=r.position;c[0]=c[1]=c[2]=0;for(var u=0;u&lt;2;++u)for(var f=u?a:1-a,h=0;h&lt;2;++h)for(var p=i+u,d=s+h,g=f*(h?l:1-l),v=0;v&lt;3;++v)c[v]+=this._field[v].get(p,d)*g;for(var y=this._pickResult.level,x=0;x&lt;3;++x)if(y[x]=m.le(this.contourLevels[x],c[x]),y[x]&lt;0)this.contourLevels[x].length&gt;0&amp;&amp;(y[x]=0);else if(y[x]Math.abs(_-c[x])&amp;&amp;(y[x]+=1)}for(r.index[0]=a&lt;.5?i:i+1,r.index[1]=l&lt;.5?s:s+1,r.uv[0]=n/e[0],r.uv[1]=o/e[1],v=0;v&lt;3;++v)r.dataCoordinate[v]=this._field[v].get(r.index[0],r.index[1]);return r},S.padField=function(t,e){var r=e.shape.slice(),n=t.shape.slice();c.assign(t.lo(1,1).hi(r[0],r[1]),e),c.assign(t.lo(1).hi(r[0],1),e.hi(r[0],1)),c.assign(t.lo(1,n[1]-1).hi(r[0],1),e.lo(0,r[1]-1).hi(r[0],1)),c.assign(t.lo(0,1).hi(1,r[1]),e.hi(1)),c.assign(t.lo(n[0]-1,1).hi(1,r[1]),e.lo(r[0]-1)),t.set(0,0,e.get(0,0)),t.set(0,n[1]-1,e.get(0,r[1]-1)),t.set(n[0]-1,0,e.get(r[0]-1,0)),t.set(n[0]-1,n[1]-1,e.get(r[0]-1,r[1]-1))},S.update=function(t){t=t||{},this.objectOffset=t.objectOffset||this.objectOffset,this.dirty=!0,\"contourWidth\"in t&amp;&amp;(this.contourWidth=R(t.contourWidth,Number)),\"showContour\"in t&amp;&amp;(this.showContour=R(t.showContour,Boolean)),\"showSurface\"in t&amp;&amp;(this.showSurface=!!t.showSurface),\"contourTint\"in t&amp;&amp;(this.contourTint=R(t.contourTint,Boolean)),\"contourColor\"in t&amp;&amp;(this.contourColor=B(t.contourColor)),\"contourProject\"in t&amp;&amp;(this.contourProject=R(t.contourProject,(function(t){return R(t,Boolean)}))),\"surfaceProject\"in t&amp;&amp;(this.surfaceProject=t.surfaceProject),\"dynamicColor\"in t&amp;&amp;(this.dynamicColor=B(t.dynamicColor)),\"dynamicTint\"in t&amp;&amp;(this.dynamicTint=R(t.dynamicTint,Number)),\"dynamicWidth\"in t&amp;&amp;(this.dynamicWidth=R(t.dynamicWidth,Number)),\"opacity\"in t&amp;&amp;(this.opacity=t.opacity),\"opacityscale\"in t&amp;&amp;(this.opacityscale=t.opacityscale),\"colorBounds\"in t&amp;&amp;(this.colorBounds=t.colorBounds),\"vertexColor\"in t&amp;&amp;(this.vertexColor=t.vertexColor?1:0),\"colormap\"in t&amp;&amp;this._colorMap.setPixels(this.genColormap(t.colormap,this.opacityscale));var e=t.field||t.coords&amp;&amp;t.coords[2]||null,r=!1;if(e||(e=this._field[2].shape[0]||this._field[2].shape[2]?this._field[2].lo(1,1).hi(this._field[2].shape[0]-2,this._field[2].shape[1]-2):this._field[2].hi(0,0)),\"field\"in t||\"coords\"in t){var i=(e.shape[0]+2)*(e.shape[1]+2);i&gt;this._field[2].data.length&amp;&amp;(s.freeFloat(this._field[2].data),this._field[2].data=s.mallocFloat(n.nextPow2(i))),this._field[2]=f(this._field[2].data,[e.shape[0]+2,e.shape[1]+2]),this.padField(this._field[2],e),this.shape=e.shape.slice();for(var a=this.shape,o=0;o&lt;2;++o)this._field[2].size&gt;this._field[o].data.length&amp;&amp;(s.freeFloat(this._field[o].data),this._field[o].data=s.mallocFloat(this._field[2].size)),this._field[o]=f(this._field[o].data,[a[0]+2,a[1]+2]);if(t.coords){var l=t.coords;if(!Array.isArray(l)||3!==l.length)throw new Error(\"gl-surface: invalid coordinates for x/y\");for(o=0;o&lt;2;++o){var c=l[o];for(v=0;v&lt;2;++v)if(c.shape[v]!==a[v])throw new Error(\"gl-surface: coords have incorrect shape\");this.padField(this._field[o],c)}}else if(t.ticks){var u=t.ticks;if(!Array.isArray(u)||2!==u.length)throw new Error(\"gl-surface: invalid ticks\");for(o=0;o&lt;2;++o){var p=u[o];if((Array.isArray(p)||p.length)&amp;&amp;(p=f(p)),p.shape[0]!==a[o])throw new Error(\"gl-surface: invalid tick length\");var d=f(p.data,a);d.stride[o]=p.stride[0],d.stride[1^o]=0,this.padField(this._field[o],d)}}else{for(o=0;o&lt;2;++o){var m=[0,0];m[o]=1,this._field[o]=f(this._field[o].data,[a[0]+2,a[1]+2],m,0)}this._field[0].set(0,0,0);for(var v=0;v0){for(var xt=0;xt&lt;5;++xt)Q.pop();U-=1}continue t}Q.push(nt[0],nt[1],ot[0],ot[1],nt[2]),U+=1}}rt.push(U)}this._contourOffsets[$]=et,this._contourCounts[$]=rt}var bt=s.mallocFloat(Q.length);for(o=0;oi||r&lt;0||r&gt;i)throw new Error(\"gl-texture2d: Invalid texture size\");return t._shape=[e,r],t.bind(),n.texImage2D(n.TEXTURE_2D,0,t.format,e,r,0,t.format,t.type,null),t._mipLevels=[0],t}function p(t,e,r,n,i,a){this.gl=t,this.handle=e,this.format=i,this.type=a,this._shape=[r,n],this._mipLevels=[0],this._magFilter=t.NEAREST,this._minFilter=t.NEAREST,this._wrapS=t.CLAMP_TO_EDGE,this._wrapT=t.CLAMP_TO_EDGE,this._anisoSamples=1;var o=this,s=[this._wrapS,this._wrapT];Object.defineProperties(s,[{get:function(){return o._wrapS},set:function(t){return o.wrapS=t}},{get:function(){return o._wrapT},set:function(t){return o.wrapT=t}}]),this._wrapVector=s;var l=[this._shape[0],this._shape[1]];Object.defineProperties(l,[{get:function(){return o._shape[0]},set:function(t){return o.width=t}},{get:function(){return o._shape[1]},set:function(t){return o.height=t}}]),this._shapeVector=l}var d=p.prototype;function m(t,e){return 3===t.length?1===e[2]&amp;&amp;e[1]===t[0]*t[2]&amp;&amp;e[0]===t[2]:1===e[0]&amp;&amp;e[1]===t[0]}function g(t){var e=t.createTexture();return t.bindTexture(t.TEXTURE_2D,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),e}function v(t,e,r,n,i){var a=t.getParameter(t.MAX_TEXTURE_SIZE);if(e&lt;0||e&gt;a||r&lt;0||r&gt;a)throw new Error(\"gl-texture2d: Invalid texture shape\");if(i===t.FLOAT&amp;&amp;!t.getExtension(\"OES_texture_float\"))throw new Error(\"gl-texture2d: Floating point textures not supported on this platform\");var o=g(t);return t.texImage2D(t.TEXTURE_2D,0,n,e,r,0,n,i,null),new p(t,o,e,r,n,i)}function y(t,e,r,n,i,a){var o=g(t);return t.texImage2D(t.TEXTURE_2D,0,i,i,a,e),new p(t,o,r,n,i,a)}function x(t,e){var r=e.dtype,o=e.shape.slice(),s=t.getParameter(t.MAX_TEXTURE_SIZE);if(o[0]&lt;0||o[0]&gt;s||o[1]&lt;0||o[1]&gt;s)throw new Error(\"gl-texture2d: Invalid texture size\");var l=m(o,e.stride.slice()),c=0;\"float32\"===r?c=t.FLOAT:\"float64\"===r?(c=t.FLOAT,l=!1,r=\"float32\"):\"uint8\"===r?c=t.UNSIGNED_BYTE:(c=t.UNSIGNED_BYTE,l=!1,r=\"uint8\");var u,h,d=0;if(2===o.length)d=t.LUMINANCE,o=[o[0],o[1],1],e=n(e.data,o,[e.stride[0],e.stride[1],1],e.offset);else{if(3!==o.length)throw new Error(\"gl-texture2d: Invalid shape for texture\");if(1===o[2])d=t.ALPHA;else if(2===o[2])d=t.LUMINANCE_ALPHA;else if(3===o[2])d=t.RGB;else{if(4!==o[2])throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");d=t.RGBA}}c!==t.FLOAT||t.getExtension(\"OES_texture_float\")||(c=t.UNSIGNED_BYTE,l=!1);var v=e.size;if(l)u=0===e.offset&amp;&amp;e.data.length===v?e.data:e.data.subarray(e.offset,e.offset+v);else{var y=[o[2],o[2]*o[0],1];h=a.malloc(v,r);var x=n(h,o,y,0);\"float32\"!==r&amp;&amp;\"float64\"!==r||c!==t.UNSIGNED_BYTE?i.assign(x,e):f(x,e),u=h.subarray(0,v)}var b=g(t);return t.texImage2D(t.TEXTURE_2D,0,d,o[0],o[1],0,d,c,u),l||a.free(h),new p(t,b,o[0],o[1],d,c)}Object.defineProperties(d,{minFilter:{get:function(){return this._minFilter},set:function(t){this.bind();var e=this.gl;if(this.type===e.FLOAT&amp;&amp;o.indexOf(t)&gt;=0&amp;&amp;(e.getExtension(\"OES_texture_float_linear\")||(t=e.NEAREST)),s.indexOf(t)&lt;0)throw new Error(\"gl-texture2d: Unknown filter mode \"+t);return e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,t),this._minFilter=t}},magFilter:{get:function(){return this._magFilter},set:function(t){this.bind();var e=this.gl;if(this.type===e.FLOAT&amp;&amp;o.indexOf(t)&gt;=0&amp;&amp;(e.getExtension(\"OES_texture_float_linear\")||(t=e.NEAREST)),s.indexOf(t)&lt;0)throw new Error(\"gl-texture2d: Unknown filter mode \"+t);return e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,t),this._magFilter=t}},mipSamples:{get:function(){return this._anisoSamples},set:function(t){var e=this._anisoSamples;if(this._anisoSamples=0|Math.max(t,1),e!==this._anisoSamples){var r=this.gl.getExtension(\"EXT_texture_filter_anisotropic\");r&amp;&amp;this.gl.texParameterf(this.gl.TEXTURE_2D,r.TEXTURE_MAX_ANISOTROPY_EXT,this._anisoSamples)}return this._anisoSamples}},wrapS:{get:function(){return this._wrapS},set:function(t){if(this.bind(),l.indexOf(t)&lt;0)throw new Error(\"gl-texture2d: Unknown wrap mode \"+t);return this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,t),this._wrapS=t}},wrapT:{get:function(){return this._wrapT},set:function(t){if(this.bind(),l.indexOf(t)&lt;0)throw new Error(\"gl-texture2d: Unknown wrap mode \"+t);return this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,t),this._wrapT=t}},wrap:{get:function(){return this._wrapVector},set:function(t){if(Array.isArray(t)||(t=[t,t]),2!==t.length)throw new Error(\"gl-texture2d: Must specify wrap mode for rows and columns\");for(var e=0;e&lt;2;++e)if(l.indexOf(t[e])&lt;0)throw new Error(\"gl-texture2d: Unknown wrap mode \"+t);this._wrapS=t[0],this._wrapT=t[1];var r=this.gl;return this.bind(),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,this._wrapS),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,this._wrapT),t}},shape:{get:function(){return this._shapeVector},set:function(t){if(Array.isArray(t)){if(2!==t.length)throw new Error(\"gl-texture2d: Invalid texture shape\")}else t=[0|t,0|t];return h(this,0|t[0],0|t[1]),[0|t[0],0|t[1]]}},width:{get:function(){return this._shape[0]},set:function(t){return h(this,t|=0,this._shape[1]),t}},height:{get:function(){return this._shape[1]},set:function(t){return t|=0,h(this,this._shape[0],t),t}}}),d.bind=function(t){var e=this.gl;return void 0!==t&amp;&amp;e.activeTexture(e.TEXTURE0+(0|t)),e.bindTexture(e.TEXTURE_2D,this.handle),void 0!==t?0|t:e.getParameter(e.ACTIVE_TEXTURE)-e.TEXTURE0},d.dispose=function(){this.gl.deleteTexture(this.handle)},d.generateMipmap=function(){this.bind(),this.gl.generateMipmap(this.gl.TEXTURE_2D);for(var t=Math.min(this._shape[0],this._shape[1]),e=0;t&gt;0;++e,t&gt;&gt;&gt;=1)this._mipLevels.indexOf(e)&lt;0&amp;&amp;this._mipLevels.push(e)},d.setPixels=function(t,e,r,o){var s=this.gl;this.bind(),Array.isArray(e)?(o=r,r=0|e[1],e=0|e[0]):(e=e||0,r=r||0),o=o||0;var l=u(t)?t:t.raw;if(l){this._mipLevels.indexOf(o)&lt;0?(s.texImage2D(s.TEXTURE_2D,0,this.format,this.format,this.type,l),this._mipLevels.push(o)):s.texSubImage2D(s.TEXTURE_2D,o,e,r,this.format,this.type,l)}else{if(!(t.shape&amp;&amp;t.stride&amp;&amp;t.data))throw new Error(\"gl-texture2d: Unsupported data type\");if(t.shape.length&lt;2||e+t.shape[1]&gt;this._shape[1]&gt;&gt;&gt;o||r+t.shape[0]&gt;this._shape[0]&gt;&gt;&gt;o||e&lt;0||r&lt;0)throw new Error(\"gl-texture2d: Texture dimensions are out of bounds\");!function(t,e,r,o,s,l,c,u){var h=u.dtype,p=u.shape.slice();if(p.length&lt;2||p.length&gt;3)throw new Error(\"gl-texture2d: Invalid ndarray, must be 2d or 3d\");var d=0,g=0,v=m(p,u.stride.slice());\"float32\"===h?d=t.FLOAT:\"float64\"===h?(d=t.FLOAT,v=!1,h=\"float32\"):\"uint8\"===h?d=t.UNSIGNED_BYTE:(d=t.UNSIGNED_BYTE,v=!1,h=\"uint8\");if(2===p.length)g=t.LUMINANCE,p=[p[0],p[1],1],u=n(u.data,p,[u.stride[0],u.stride[1],1],u.offset);else{if(3!==p.length)throw new Error(\"gl-texture2d: Invalid shape for texture\");if(1===p[2])g=t.ALPHA;else if(2===p[2])g=t.LUMINANCE_ALPHA;else if(3===p[2])g=t.RGB;else{if(4!==p[2])throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");g=t.RGBA}p[2]}g!==t.LUMINANCE&amp;&amp;g!==t.ALPHA||s!==t.LUMINANCE&amp;&amp;s!==t.ALPHA||(g=s);if(g!==s)throw new Error(\"gl-texture2d: Incompatible texture format for setPixels\");var y=u.size,x=c.indexOf(o)&lt;0;x&amp;&amp;c.push(o);if(d===l&amp;&amp;v)0===u.offset&amp;&amp;u.data.length===y?x?t.texImage2D(t.TEXTURE_2D,o,s,p[0],p[1],0,s,l,u.data):t.texSubImage2D(t.TEXTURE_2D,o,e,r,p[0],p[1],s,l,u.data):x?t.texImage2D(t.TEXTURE_2D,o,s,p[0],p[1],0,s,l,u.data.subarray(u.offset,u.offset+y)):t.texSubImage2D(t.TEXTURE_2D,o,e,r,p[0],p[1],s,l,u.data.subarray(u.offset,u.offset+y));else{var b;b=l===t.FLOAT?a.mallocFloat32(y):a.mallocUint8(y);var _=n(b,p,[p[2],p[2]*p[0],1]);d===t.FLOAT&amp;&amp;l===t.UNSIGNED_BYTE?f(_,u):i.assign(_,u),x?t.texImage2D(t.TEXTURE_2D,o,s,p[0],p[1],0,s,l,b.subarray(0,y)):t.texSubImage2D(t.TEXTURE_2D,o,e,r,p[0],p[1],s,l,b.subarray(0,y)),l===t.FLOAT?a.freeFloat32(b):a.freeUint8(b)}}(s,e,r,o,this.format,this.type,this._mipLevels,t)}}},{ndarray:259,\"ndarray-ops\":254,\"typedarray-pool\":308}],147:[function(t,e,r){\"use strict\";e.exports=function(t,e,r){e?e.bind():t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null);var n=0|t.getParameter(t.MAX_VERTEX_ATTRIBS);if(r){if(r.length&gt;n)throw new Error(\"gl-vao: Too many vertex attributes\");for(var i=0;i1?0:Math.acos(s)};var n=t(\"./fromValues\"),i=t(\"./normalize\"),a=t(\"./dot\")},{\"./dot\":162,\"./fromValues\":168,\"./normalize\":179}],153:[function(t,e,r){e.exports=function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}},{}],154:[function(t,e,r){e.exports=function(t){var e=new Float32Array(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}},{}],155:[function(t,e,r){e.exports=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}},{}],156:[function(t,e,r){e.exports=function(){var t=new Float32Array(3);return t[0]=0,t[1]=0,t[2]=0,t}},{}],157:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2],o=r[0],s=r[1],l=r[2];return t[0]=i*l-a*s,t[1]=a*o-n*l,t[2]=n*s-i*o,t}},{}],158:[function(t,e,r){e.exports=t(\"./distance\")},{\"./distance\":159}],159:[function(t,e,r){e.exports=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}},{}],160:[function(t,e,r){e.exports=t(\"./divide\")},{\"./divide\":161}],161:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}},{}],162:[function(t,e,r){e.exports=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}},{}],163:[function(t,e,r){e.exports=1e-6},{}],164:[function(t,e,r){e.exports=function(t,e){var r=t[0],i=t[1],a=t[2],o=e[0],s=e[1],l=e[2];return Math.abs(r-o)&lt;=n*Math.max(1,Math.abs(r),Math.abs(o))&amp;&amp;Math.abs(i-s)&lt;=n*Math.max(1,Math.abs(i),Math.abs(s))&amp;&amp;Math.abs(a-l)&lt;=n*Math.max(1,Math.abs(a),Math.abs(l))};var n=t(\"./epsilon\")},{\"./epsilon\":163}],165:[function(t,e,r){e.exports=function(t,e){return t[0]===e[0]&amp;&amp;t[1]===e[1]&amp;&amp;t[2]===e[2]}},{}],166:[function(t,e,r){e.exports=function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}},{}],167:[function(t,e,r){e.exports=function(t,e,r,i,a,o){var s,l;e||(e=3);r||(r=0);l=i?Math.min(i*e+r,t.length):t.length;for(s=r;s0&amp;&amp;(a=1/Math.sqrt(a),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a);return t}},{}],180:[function(t,e,r){e.exports=function(t,e){e=e||1;var r=2*Math.random()*Math.PI,n=2*Math.random()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t}},{}],181:[function(t,e,r){e.exports=function(t,e,r,n){var i=r[1],a=r[2],o=e[1]-i,s=e[2]-a,l=Math.sin(n),c=Math.cos(n);return t[0]=e[0],t[1]=i+o*c-s*l,t[2]=a+o*l+s*c,t}},{}],182:[function(t,e,r){e.exports=function(t,e,r,n){var i=r[0],a=r[2],o=e[0]-i,s=e[2]-a,l=Math.sin(n),c=Math.cos(n);return t[0]=i+s*l+o*c,t[1]=e[1],t[2]=a+s*c-o*l,t}},{}],183:[function(t,e,r){e.exports=function(t,e,r,n){var i=r[0],a=r[1],o=e[0]-i,s=e[1]-a,l=Math.sin(n),c=Math.cos(n);return t[0]=i+o*c-s*l,t[1]=a+o*l+s*c,t[2]=e[2],t}},{}],184:[function(t,e,r){e.exports=function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}},{}],185:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}},{}],186:[function(t,e,r){e.exports=function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t}},{}],187:[function(t,e,r){e.exports=function(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t}},{}],188:[function(t,e,r){e.exports=t(\"./squaredDistance\")},{\"./squaredDistance\":190}],189:[function(t,e,r){e.exports=t(\"./squaredLength\")},{\"./squaredLength\":191}],190:[function(t,e,r){e.exports=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}},{}],191:[function(t,e,r){e.exports=function(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}},{}],192:[function(t,e,r){e.exports=t(\"./subtract\")},{\"./subtract\":193}],193:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}},{}],194:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2];return t[0]=n*r[0]+i*r[3]+a*r[6],t[1]=n*r[1]+i*r[4]+a*r[7],t[2]=n*r[2]+i*r[5]+a*r[8],t}},{}],195:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2],o=r[3]*n+r[7]*i+r[11]*a+r[15];return o=o||1,t[0]=(r[0]*n+r[4]*i+r[8]*a+r[12])/o,t[1]=(r[1]*n+r[5]*i+r[9]*a+r[13])/o,t[2]=(r[2]*n+r[6]*i+r[10]*a+r[14])/o,t}},{}],196:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2],o=r[0],s=r[1],l=r[2],c=r[3],u=c*n+s*a-l*i,f=c*i+l*n-o*a,h=c*a+o*i-s*n,p=-o*n-s*i-l*a;return t[0]=u*c+p*-o+f*-l-h*-s,t[1]=f*c+p*-s+h*-o-u*-l,t[2]=h*c+p*-l+u*-s-f*-o,t}},{}],197:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}},{}],198:[function(t,e,r){e.exports=function(t){var e=new Float32Array(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}},{}],199:[function(t,e,r){e.exports=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}},{}],200:[function(t,e,r){e.exports=function(){var t=new Float32Array(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}},{}],201:[function(t,e,r){e.exports=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return Math.sqrt(r*r+n*n+i*i+a*a)}},{}],202:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t[3]=e[3]/r[3],t}},{}],203:[function(t,e,r){e.exports=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}},{}],204:[function(t,e,r){e.exports=function(t,e,r,n){var i=new Float32Array(4);return i[0]=t,i[1]=e,i[2]=r,i[3]=n,i}},{}],205:[function(t,e,r){e.exports={create:t(\"./create\"),clone:t(\"./clone\"),fromValues:t(\"./fromValues\"),copy:t(\"./copy\"),set:t(\"./set\"),add:t(\"./add\"),subtract:t(\"./subtract\"),multiply:t(\"./multiply\"),divide:t(\"./divide\"),min:t(\"./min\"),max:t(\"./max\"),scale:t(\"./scale\"),scaleAndAdd:t(\"./scaleAndAdd\"),distance:t(\"./distance\"),squaredDistance:t(\"./squaredDistance\"),length:t(\"./length\"),squaredLength:t(\"./squaredLength\"),negate:t(\"./negate\"),inverse:t(\"./inverse\"),normalize:t(\"./normalize\"),dot:t(\"./dot\"),lerp:t(\"./lerp\"),random:t(\"./random\"),transformMat4:t(\"./transformMat4\"),transformQuat:t(\"./transformQuat\")}},{\"./add\":197,\"./clone\":198,\"./copy\":199,\"./create\":200,\"./distance\":201,\"./divide\":202,\"./dot\":203,\"./fromValues\":204,\"./inverse\":206,\"./length\":207,\"./lerp\":208,\"./max\":209,\"./min\":210,\"./multiply\":211,\"./negate\":212,\"./normalize\":213,\"./random\":214,\"./scale\":215,\"./scaleAndAdd\":216,\"./set\":217,\"./squaredDistance\":218,\"./squaredLength\":219,\"./subtract\":220,\"./transformMat4\":221,\"./transformQuat\":222}],206:[function(t,e,r){e.exports=function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}},{}],207:[function(t,e,r){e.exports=function(t){var e=t[0],r=t[1],n=t[2],i=t[3];return Math.sqrt(e*e+r*r+n*n+i*i)}},{}],208:[function(t,e,r){e.exports=function(t,e,r,n){var i=e[0],a=e[1],o=e[2],s=e[3];return t[0]=i+n*(r[0]-i),t[1]=a+n*(r[1]-a),t[2]=o+n*(r[2]-o),t[3]=s+n*(r[3]-s),t}},{}],209:[function(t,e,r){e.exports=function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t[3]=Math.max(e[3],r[3]),t}},{}],210:[function(t,e,r){e.exports=function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t[3]=Math.min(e[3],r[3]),t}},{}],211:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t[3]=e[3]*r[3],t}},{}],212:[function(t,e,r){e.exports=function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t}},{}],213:[function(t,e,r){e.exports=function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=r*r+n*n+i*i+a*a;o&gt;0&amp;&amp;(o=1/Math.sqrt(o),t[0]=r*o,t[1]=n*o,t[2]=i*o,t[3]=a*o);return t}},{}],214:[function(t,e,r){var n=t(\"./normalize\"),i=t(\"./scale\");e.exports=function(t,e){return e=e||1,t[0]=Math.random(),t[1]=Math.random(),t[2]=Math.random(),t[3]=Math.random(),n(t,t),i(t,t,e),t}},{\"./normalize\":213,\"./scale\":215}],215:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}},{}],216:[function(t,e,r){e.exports=function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t}},{}],217:[function(t,e,r){e.exports=function(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t}},{}],218:[function(t,e,r){e.exports=function(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return r*r+n*n+i*i+a*a}},{}],219:[function(t,e,r){e.exports=function(t){var e=t[0],r=t[1],n=t[2],i=t[3];return e*e+r*r+n*n+i*i}},{}],220:[function(t,e,r){e.exports=function(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}},{}],221:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2],o=e[3];return t[0]=r[0]*n+r[4]*i+r[8]*a+r[12]*o,t[1]=r[1]*n+r[5]*i+r[9]*a+r[13]*o,t[2]=r[2]*n+r[6]*i+r[10]*a+r[14]*o,t[3]=r[3]*n+r[7]*i+r[11]*a+r[15]*o,t}},{}],222:[function(t,e,r){e.exports=function(t,e,r){var n=e[0],i=e[1],a=e[2],o=r[0],s=r[1],l=r[2],c=r[3],u=c*n+s*a-l*i,f=c*i+l*n-o*a,h=c*a+o*i-s*n,p=-o*n-s*i-l*a;return t[0]=u*c+p*-o+f*-l-h*-s,t[1]=f*c+p*-s+h*-o-u*-l,t[2]=h*c+p*-l+u*-s-f*-o,t[3]=e[3],t}},{}],223:[function(t,e,r){var n=t(\"glsl-tokenizer\"),i=t(\"atob-lite\");e.exports=function(t){for(var e=Array.isArray(t)?t:n(t),r=0;r0)continue;r=t.slice(0,1).join(\"\")}return A(r),v+=r.length,(p=p.slice(r.length)).length}}function I(){return/[^a-fA-F0-9]/.test(e)?(A(p.join(\"\")),h=999,u):(p.push(e),r=e,u+1)}function O(){return\".\"===e||/[eE]/.test(e)?(p.push(e),h=5,r=e,u+1):\"x\"===e&amp;&amp;1===p.length&amp;&amp;\"0\"===p[0]?(h=11,p.push(e),r=e,u+1):/[^\\d]/.test(e)?(A(p.join(\"\")),h=999,u):(p.push(e),r=e,u+1)}function z(){return\"f\"===e&amp;&amp;(p.push(e),r=e,u+=1),/[eE]/.test(e)?(p.push(e),r=e,u+1):(\"-\"!==e&amp;&amp;\"+\"!==e||!/[eE]/.test(r))&amp;&amp;/[^\\d]/.test(e)?(A(p.join(\"\")),h=999,u):(p.push(e),r=e,u+1)}function D(){if(/[^\\d\\w_]/.test(e)){var t=p.join(\"\");return h=k[t]?8:T[t]?7:6,A(p.join(\"\")),h=999,u}return p.push(e),r=e,u+1}};var n=t(\"./lib/literals\"),i=t(\"./lib/operators\"),a=t(\"./lib/builtins\"),o=t(\"./lib/literals-300es\"),s=t(\"./lib/builtins-300es\"),l=[\"block-comment\",\"line-comment\",\"preprocessor\",\"operator\",\"integer\",\"float\",\"ident\",\"builtin\",\"keyword\",\"whitespace\",\"eof\",\"integer\"]},{\"./lib/builtins\":226,\"./lib/builtins-300es\":225,\"./lib/literals\":228,\"./lib/literals-300es\":227,\"./lib/operators\":229}],225:[function(t,e,r){var n=t(\"./builtins\");n=n.slice().filter((function(t){return!/^(gl\\_|texture)/.test(t)})),e.exports=n.concat([\"gl_VertexID\",\"gl_InstanceID\",\"gl_Position\",\"gl_PointSize\",\"gl_FragCoord\",\"gl_FrontFacing\",\"gl_FragDepth\",\"gl_PointCoord\",\"gl_MaxVertexAttribs\",\"gl_MaxVertexUniformVectors\",\"gl_MaxVertexOutputVectors\",\"gl_MaxFragmentInputVectors\",\"gl_MaxVertexTextureImageUnits\",\"gl_MaxCombinedTextureImageUnits\",\"gl_MaxTextureImageUnits\",\"gl_MaxFragmentUniformVectors\",\"gl_MaxDrawBuffers\",\"gl_MinProgramTexelOffset\",\"gl_MaxProgramTexelOffset\",\"gl_DepthRangeParameters\",\"gl_DepthRange\",\"trunc\",\"round\",\"roundEven\",\"isnan\",\"isinf\",\"floatBitsToInt\",\"floatBitsToUint\",\"intBitsToFloat\",\"uintBitsToFloat\",\"packSnorm2x16\",\"unpackSnorm2x16\",\"packUnorm2x16\",\"unpackUnorm2x16\",\"packHalf2x16\",\"unpackHalf2x16\",\"outerProduct\",\"transpose\",\"determinant\",\"inverse\",\"texture\",\"textureSize\",\"textureProj\",\"textureLod\",\"textureOffset\",\"texelFetch\",\"texelFetchOffset\",\"textureProjOffset\",\"textureLodOffset\",\"textureProjLod\",\"textureProjLodOffset\",\"textureGrad\",\"textureGradOffset\",\"textureProjGrad\",\"textureProjGradOffset\"])},{\"./builtins\":226}],226:[function(t,e,r){e.exports=[\"abs\",\"acos\",\"all\",\"any\",\"asin\",\"atan\",\"ceil\",\"clamp\",\"cos\",\"cross\",\"dFdx\",\"dFdy\",\"degrees\",\"distance\",\"dot\",\"equal\",\"exp\",\"exp2\",\"faceforward\",\"floor\",\"fract\",\"gl_BackColor\",\"gl_BackLightModelProduct\",\"gl_BackLightProduct\",\"gl_BackMaterial\",\"gl_BackSecondaryColor\",\"gl_ClipPlane\",\"gl_ClipVertex\",\"gl_Color\",\"gl_DepthRange\",\"gl_DepthRangeParameters\",\"gl_EyePlaneQ\",\"gl_EyePlaneR\",\"gl_EyePlaneS\",\"gl_EyePlaneT\",\"gl_Fog\",\"gl_FogCoord\",\"gl_FogFragCoord\",\"gl_FogParameters\",\"gl_FragColor\",\"gl_FragCoord\",\"gl_FragData\",\"gl_FragDepth\",\"gl_FragDepthEXT\",\"gl_FrontColor\",\"gl_FrontFacing\",\"gl_FrontLightModelProduct\",\"gl_FrontLightProduct\",\"gl_FrontMaterial\",\"gl_FrontSecondaryColor\",\"gl_LightModel\",\"gl_LightModelParameters\",\"gl_LightModelProducts\",\"gl_LightProducts\",\"gl_LightSource\",\"gl_LightSourceParameters\",\"gl_MaterialParameters\",\"gl_MaxClipPlanes\",\"gl_MaxCombinedTextureImageUnits\",\"gl_MaxDrawBuffers\",\"gl_MaxFragmentUniformComponents\",\"gl_MaxLights\",\"gl_MaxTextureCoords\",\"gl_MaxTextureImageUnits\",\"gl_MaxTextureUnits\",\"gl_MaxVaryingFloats\",\"gl_MaxVertexAttribs\",\"gl_MaxVertexTextureImageUnits\",\"gl_MaxVertexUniformComponents\",\"gl_ModelViewMatrix\",\"gl_ModelViewMatrixInverse\",\"gl_ModelViewMatrixInverseTranspose\",\"gl_ModelViewMatrixTranspose\",\"gl_ModelViewProjectionMatrix\",\"gl_ModelViewProjectionMatrixInverse\",\"gl_ModelViewProjectionMatrixInverseTranspose\",\"gl_ModelViewProjectionMatrixTranspose\",\"gl_MultiTexCoord0\",\"gl_MultiTexCoord1\",\"gl_MultiTexCoord2\",\"gl_MultiTexCoord3\",\"gl_MultiTexCoord4\",\"gl_MultiTexCoord5\",\"gl_MultiTexCoord6\",\"gl_MultiTexCoord7\",\"gl_Normal\",\"gl_NormalMatrix\",\"gl_NormalScale\",\"gl_ObjectPlaneQ\",\"gl_ObjectPlaneR\",\"gl_ObjectPlaneS\",\"gl_ObjectPlaneT\",\"gl_Point\",\"gl_PointCoord\",\"gl_PointParameters\",\"gl_PointSize\",\"gl_Position\",\"gl_ProjectionMatrix\",\"gl_ProjectionMatrixInverse\",\"gl_ProjectionMatrixInverseTranspose\",\"gl_ProjectionMatrixTranspose\",\"gl_SecondaryColor\",\"gl_TexCoord\",\"gl_TextureEnvColor\",\"gl_TextureMatrix\",\"gl_TextureMatrixInverse\",\"gl_TextureMatrixInverseTranspose\",\"gl_TextureMatrixTranspose\",\"gl_Vertex\",\"greaterThan\",\"greaterThanEqual\",\"inversesqrt\",\"length\",\"lessThan\",\"lessThanEqual\",\"log\",\"log2\",\"matrixCompMult\",\"max\",\"min\",\"mix\",\"mod\",\"normalize\",\"not\",\"notEqual\",\"pow\",\"radians\",\"reflect\",\"refract\",\"sign\",\"sin\",\"smoothstep\",\"sqrt\",\"step\",\"tan\",\"texture2D\",\"texture2DLod\",\"texture2DProj\",\"texture2DProjLod\",\"textureCube\",\"textureCubeLod\",\"texture2DLodEXT\",\"texture2DProjLodEXT\",\"textureCubeLodEXT\",\"texture2DGradEXT\",\"texture2DProjGradEXT\",\"textureCubeGradEXT\"]},{}],227:[function(t,e,r){var n=t(\"./literals\");e.exports=n.slice().concat([\"layout\",\"centroid\",\"smooth\",\"case\",\"mat2x2\",\"mat2x3\",\"mat2x4\",\"mat3x2\",\"mat3x3\",\"mat3x4\",\"mat4x2\",\"mat4x3\",\"mat4x4\",\"uvec2\",\"uvec3\",\"uvec4\",\"samplerCubeShadow\",\"sampler2DArray\",\"sampler2DArrayShadow\",\"isampler2D\",\"isampler3D\",\"isamplerCube\",\"isampler2DArray\",\"usampler2D\",\"usampler3D\",\"usamplerCube\",\"usampler2DArray\",\"coherent\",\"restrict\",\"readonly\",\"writeonly\",\"resource\",\"atomic_uint\",\"noperspective\",\"patch\",\"sample\",\"subroutine\",\"common\",\"partition\",\"active\",\"filter\",\"image1D\",\"image2D\",\"image3D\",\"imageCube\",\"iimage1D\",\"iimage2D\",\"iimage3D\",\"iimageCube\",\"uimage1D\",\"uimage2D\",\"uimage3D\",\"uimageCube\",\"image1DArray\",\"image2DArray\",\"iimage1DArray\",\"iimage2DArray\",\"uimage1DArray\",\"uimage2DArray\",\"image1DShadow\",\"image2DShadow\",\"image1DArrayShadow\",\"image2DArrayShadow\",\"imageBuffer\",\"iimageBuffer\",\"uimageBuffer\",\"sampler1DArray\",\"sampler1DArrayShadow\",\"isampler1D\",\"isampler1DArray\",\"usampler1D\",\"usampler1DArray\",\"isampler2DRect\",\"usampler2DRect\",\"samplerBuffer\",\"isamplerBuffer\",\"usamplerBuffer\",\"sampler2DMS\",\"isampler2DMS\",\"usampler2DMS\",\"sampler2DMSArray\",\"isampler2DMSArray\",\"usampler2DMSArray\"])},{\"./literals\":228}],228:[function(t,e,r){e.exports=[\"precision\",\"highp\",\"mediump\",\"lowp\",\"attribute\",\"const\",\"uniform\",\"varying\",\"break\",\"continue\",\"do\",\"for\",\"while\",\"if\",\"else\",\"in\",\"out\",\"inout\",\"float\",\"int\",\"uint\",\"void\",\"bool\",\"true\",\"false\",\"discard\",\"return\",\"mat2\",\"mat3\",\"mat4\",\"vec2\",\"vec3\",\"vec4\",\"ivec2\",\"ivec3\",\"ivec4\",\"bvec2\",\"bvec3\",\"bvec4\",\"sampler1D\",\"sampler2D\",\"sampler3D\",\"samplerCube\",\"sampler1DShadow\",\"sampler2DShadow\",\"struct\",\"asm\",\"class\",\"union\",\"enum\",\"typedef\",\"template\",\"this\",\"packed\",\"goto\",\"switch\",\"default\",\"inline\",\"noinline\",\"volatile\",\"public\",\"static\",\"extern\",\"external\",\"interface\",\"long\",\"short\",\"double\",\"half\",\"fixed\",\"unsigned\",\"input\",\"output\",\"hvec2\",\"hvec3\",\"hvec4\",\"dvec2\",\"dvec3\",\"dvec4\",\"fvec2\",\"fvec3\",\"fvec4\",\"sampler2DRect\",\"sampler3DRect\",\"sampler2DRectShadow\",\"sizeof\",\"cast\",\"namespace\",\"using\"]},{}],229:[function(t,e,r){e.exports=[\"&lt;&lt;=\",\"&gt;&gt;=\",\"++\",\"--\",\"&lt;&lt;\",\"&gt;&gt;\",\"&lt;=\",\"&gt;=\",\"==\",\"!=\",\"&amp;&amp;\",\"||\",\"+=\",\"-=\",\"*=\",\"/=\",\"%=\",\"&amp;=\",\"^^\",\"^=\",\"|=\",\"(\",\")\",\"[\",\"]\",\".\",\"!\",\"~\",\"*\",\"/\",\"%\",\"+\",\"-\",\"&lt;\",\"&gt;\",\"&amp;\",\"^\",\"|\",\"?\",\":\",\"=\",\",\",\";\",\"{\",\"}\"]},{}],230:[function(t,e,r){var n=t(\"./index\");e.exports=function(t,e){var r=n(e),i=[];return i=(i=i.concat(r(t))).concat(r(null))}},{\"./index\":224}],231:[function(t,e,r){e.exports=function(t){\"string\"==typeof t&amp;&amp;(t=[t]);for(var e=[].slice.call(arguments,1),r=[],n=0;n0;)for(var s=(t=o.pop()).adjacent,l=0;l&lt;=r;++l){var c=s[l];if(c.boundary&amp;&amp;!(c.lastVisited&lt;=-n)){for(var u=c.vertices,f=0;f&lt;=r;++f){var h=u[f];i[f]=h&lt;0?e:a[h]}var p=this.orient();if(p&gt;0)return c;c.lastVisited=-n,0===p&amp;&amp;o.push(c)}}return null},u.walk=function(t,e){var r=this.vertices.length-1,n=this.dimension,i=this.vertices,a=this.tuple,o=e?this.interior.length*Math.random()|0:this.interior.length-1,s=this.interior[o];t:for(;!s.boundary;){for(var l=s.vertices,c=s.adjacent,u=0;u&lt;=n;++u)a[u]=i[l[u]];s.lastVisited=r;for(u=0;u&lt;=n;++u){var f=c[u];if(!(f.lastVisited&gt;=r)){var h=a[u];a[u]=t;var p=this.orient();if(a[u]=h,p&lt;0){s=f;continue t}f.boundary?f.lastVisited=-r:f.lastVisited=r}}return}return s},u.addPeaks=function(t,e){var r=this.vertices.length-1,n=this.dimension,i=this.vertices,l=this.tuple,c=this.interior,u=this.simplices,f=[e];e.lastVisited=r,e.vertices[e.vertices.indexOf(-1)]=r,e.boundary=!1,c.push(e);for(var h=[];f.length&gt;0;){var p=(e=f.pop()).vertices,d=e.adjacent,m=p.indexOf(r);if(!(m&lt;0))for(var g=0;g&lt;=n;++g)if(g!==m){var v=d[g];if(v.boundary&amp;&amp;!(v.lastVisited&gt;=r)){var y=v.vertices;if(v.lastVisited!==-r){for(var x=0,b=0;b&lt;=n;++b)y[b]&lt;0?(x=b,l[b]=t):l[b]=i[y[b]];if(this.orient()&gt;0){y[x]=r,v.boundary=!1,c.push(v),f.push(v),v.lastVisited=r;continue}v.lastVisited=-r}var _=v.adjacent,w=p.slice(),T=d.slice(),k=new a(w,T,!0);u.push(k);var A=_.indexOf(e);if(!(A&lt;0)){_[A]=k,T[m]=v,w[g]=-1,T[g]=e,d[g]=k,k.flip();for(b=0;b&lt;=n;++b){var M=w[b];if(!(M&lt;0||M===r)){for(var S=new Array(n-1),E=0,L=0;L&lt;=n;++L){var C=w[L];C&lt;0||L===b||(S[E++]=C)}h.push(new o(S,k,b))}}}}}}h.sort(s);for(g=0;g+1=0?o[l++]=s[u]:c=1&amp;u;if(c===(1&amp;t)){var f=o[0];o[0]=o[1],o[1]=f}e.push(o)}}return e}},{\"robust-orientation\":284,\"simplicial-complex\":293}],234:[function(t,e,r){\"use strict\";var n=t(\"binary-search-bounds\");function i(t,e,r,n,i){this.mid=t,this.left=e,this.right=r,this.leftPoints=n,this.rightPoints=i,this.count=(e?e.count:0)+(r?r.count:0)+n.length}e.exports=function(t){if(!t||0===t.length)return new v(null);return new v(g(t))};var a=i.prototype;function o(t,e){t.mid=e.mid,t.left=e.left,t.right=e.right,t.leftPoints=e.leftPoints,t.rightPoints=e.rightPoints,t.count=e.count}function s(t,e){var r=g(e);t.mid=r.mid,t.left=r.left,t.right=r.right,t.leftPoints=r.leftPoints,t.rightPoints=r.rightPoints,t.count=r.count}function l(t,e){var r=t.intervals([]);r.push(e),s(t,r)}function c(t,e){var r=t.intervals([]),n=r.indexOf(e);return n&lt;0?0:(r.splice(n,1),s(t,r),1)}function u(t,e,r){for(var n=0;n=0&amp;&amp;t[n][1]&gt;=e;--n){var i=r(t[n]);if(i)return i}}function h(t,e){for(var r=0;r&gt;1],a=[],o=[],s=[];for(r=0;r3*(e+1)?l(this,t):this.left.insert(t):this.left=g([t]);else if(t[0]&gt;this.mid)this.right?4*(this.right.count+1)&gt;3*(e+1)?l(this,t):this.right.insert(t):this.right=g([t]);else{var r=n.ge(this.leftPoints,t,d),i=n.ge(this.rightPoints,t,m);this.leftPoints.splice(r,0,t),this.rightPoints.splice(i,0,t)}},a.remove=function(t){var e=this.count-this.leftPoints;if(t[1]3*(e-1)?c(this,t):2===(s=this.left.remove(t))?(this.left=null,this.count-=1,1):(1===s&amp;&amp;(this.count-=1),s):0;if(t[0]&gt;this.mid)return this.right?4*(this.left?this.left.count:0)&gt;3*(e-1)?c(this,t):2===(s=this.right.remove(t))?(this.right=null,this.count-=1,1):(1===s&amp;&amp;(this.count-=1),s):0;if(1===this.count)return this.leftPoints[0]===t?2:0;if(1===this.leftPoints.length&amp;&amp;this.leftPoints[0]===t){if(this.left&amp;&amp;this.right){for(var r=this,i=this.left;i.right;)r=i,i=i.right;if(r===this)i.right=this.right;else{var a=this.left,s=this.right;r.count-=i.count,r.right=i.left,i.left=a,i.right=s}o(this,i),this.count=(this.left?this.left.count:0)+(this.right?this.right.count:0)+this.leftPoints.length}else this.left?o(this,this.left):o(this,this.right);return 1}for(a=n.ge(this.leftPoints,t,d);athis.mid){var r;if(this.right)if(r=this.right.queryPoint(t,e))return r;return f(this.rightPoints,t,e)}return h(this.leftPoints,e)},a.queryInterval=function(t,e,r){var n;if(tthis.mid&amp;&amp;this.right&amp;&amp;(n=this.right.queryInterval(t,e,r)))return n;return ethis.mid?f(this.rightPoints,t,r):h(this.leftPoints,r)};var y=v.prototype;y.insert=function(t){this.root?this.root.insert(t):this.root=new i(t[0],null,null,[t],[t])},y.remove=function(t){if(this.root){var e=this.root.remove(t);return 2===e&amp;&amp;(this.root=null),0!==e}return!1},y.queryPoint=function(t,e){if(this.root)return this.root.queryPoint(t,e)},y.queryInterval=function(t,e,r){if(t&lt;=e&amp;&amp;this.root)return this.root.queryInterval(t,e,r)},Object.defineProperty(y,\"count\",{get:function(){return this.root?this.root.count:0}}),Object.defineProperty(y,\"intervals\",{get:function(){return this.root?this.root.intervals([]):[]}})},{\"binary-search-bounds\":31}],235:[function(t,e,r){\"use strict\";e.exports=function(t){for(var e=new Array(t),r=0;r  * @license  MIT  */ e.exports=function(t){return null!=t&amp;&amp;(n(t)||function(t){return\"function\"==typeof t.readFloatLE&amp;&amp;\"function\"==typeof t.slice&amp;&amp;n(t.slice(0,0))}(t)||!!t._isBuffer)}},{}],238:[function(t,e,r){\"use strict\";e.exports=a,e.exports.isMobile=a,e.exports.default=a;var n=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i,i=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series[46]0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;function a(t){t||(t={});var e=t.ua;if(e||\"undefined\"==typeof navigator||(e=navigator.userAgent),e&amp;&amp;e.headers&amp;&amp;\"string\"==typeof e.headers[\"user-agent\"]&amp;&amp;(e=e.headers[\"user-agent\"]),\"string\"!=typeof e)return!1;var r=t.tablet?i.test(e):n.test(e);return!r&amp;&amp;t.tablet&amp;&amp;t.featureDetect&amp;&amp;navigator&amp;&amp;navigator.maxTouchPoints&gt;1&amp;&amp;-1!==e.indexOf(\"Macintosh\")&amp;&amp;-1!==e.indexOf(\"Safari\")&amp;&amp;(r=!0),r}},{}],239:[function(t,e,r){\"use strict\";e.exports=function(t){for(var e,r=t.length,n=0;n13)&amp;&amp;32!==e&amp;&amp;133!==e&amp;&amp;160!==e&amp;&amp;5760!==e&amp;&amp;6158!==e&amp;&amp;(e&lt;8192||e&gt;8205)&amp;&amp;8232!==e&amp;&amp;8233!==e&amp;&amp;8239!==e&amp;&amp;8287!==e&amp;&amp;8288!==e&amp;&amp;12288!==e&amp;&amp;65279!==e)return!1;return!0}},{}],240:[function(t,e,r){e.exports=function(t,e,r){return t*(1-r)+e*r}},{}],241:[function(t,e,r){var n=t(\"./normalize\"),i=t(\"gl-mat4/create\"),a=t(\"gl-mat4/clone\"),o=t(\"gl-mat4/determinant\"),s=t(\"gl-mat4/invert\"),l=t(\"gl-mat4/transpose\"),c={length:t(\"gl-vec3/length\"),normalize:t(\"gl-vec3/normalize\"),dot:t(\"gl-vec3/dot\"),cross:t(\"gl-vec3/cross\")},u=i(),f=i(),h=[0,0,0,0],p=[[0,0,0],[0,0,0],[0,0,0]],d=[0,0,0];function m(t,e,r,n,i){t[0]=e[0]*n+r[0]*i,t[1]=e[1]*n+r[1]*i,t[2]=e[2]*n+r[2]*i}e.exports=function(t,e,r,i,g,v){if(e||(e=[0,0,0]),r||(r=[0,0,0]),i||(i=[0,0,0]),g||(g=[0,0,0,1]),v||(v=[0,0,0,1]),!n(u,t))return!1;if(a(f,u),f[3]=0,f[7]=0,f[11]=0,f[15]=1,Math.abs(o(f)&lt;1e-8))return!1;var y,x,b,_,w,T,k,A=u[3],M=u[7],S=u[11],E=u[12],L=u[13],C=u[14],P=u[15];if(0!==A||0!==M||0!==S){if(h[0]=A,h[1]=M,h[2]=S,h[3]=P,!s(f,f))return!1;l(f,f),y=g,b=f,_=(x=h)[0],w=x[1],T=x[2],k=x[3],y[0]=b[0]*_+b[4]*w+b[8]*T+b[12]*k,y[1]=b[1]*_+b[5]*w+b[9]*T+b[13]*k,y[2]=b[2]*_+b[6]*w+b[10]*T+b[14]*k,y[3]=b[3]*_+b[7]*w+b[11]*T+b[15]*k}else g[0]=g[1]=g[2]=0,g[3]=1;if(e[0]=E,e[1]=L,e[2]=C,function(t,e){t[0][0]=e[0],t[0][1]=e[1],t[0][2]=e[2],t[1][0]=e[4],t[1][1]=e[5],t[1][2]=e[6],t[2][0]=e[8],t[2][1]=e[9],t[2][2]=e[10]}(p,u),r[0]=c.length(p[0]),c.normalize(p[0],p[0]),i[0]=c.dot(p[0],p[1]),m(p[1],p[1],p[0],1,-i[0]),r[1]=c.length(p[1]),c.normalize(p[1],p[1]),i[0]/=r[1],i[1]=c.dot(p[0],p[2]),m(p[2],p[2],p[0],1,-i[1]),i[2]=c.dot(p[1],p[2]),m(p[2],p[2],p[1],1,-i[2]),r[2]=c.length(p[2]),c.normalize(p[2],p[2]),i[1]/=r[2],i[2]/=r[2],c.cross(d,p[1],p[2]),c.dot(p[0],d)&lt;0)for(var I=0;I&lt;3;I++)r[I]*=-1,p[I][0]*=-1,p[I][1]*=-1,p[I][2]*=-1;return v[0]=.5*Math.sqrt(Math.max(1+p[0][0]-p[1][1]-p[2][2],0)),v[1]=.5*Math.sqrt(Math.max(1-p[0][0]+p[1][1]-p[2][2],0)),v[2]=.5*Math.sqrt(Math.max(1-p[0][0]-p[1][1]+p[2][2],0)),v[3]=.5*Math.sqrt(Math.max(1+p[0][0]+p[1][1]+p[2][2],0)),p[2][1]&gt;p[1][2]&amp;&amp;(v[0]=-v[0]),p[0][2]&gt;p[2][0]&amp;&amp;(v[1]=-v[1]),p[1][0]&gt;p[0][1]&amp;&amp;(v[2]=-v[2]),!0}},{\"./normalize\":242,\"gl-mat4/clone\":92,\"gl-mat4/create\":93,\"gl-mat4/determinant\":94,\"gl-mat4/invert\":98,\"gl-mat4/transpose\":109,\"gl-vec3/cross\":157,\"gl-vec3/dot\":162,\"gl-vec3/length\":172,\"gl-vec3/normalize\":179}],242:[function(t,e,r){e.exports=function(t,e){var r=e[15];if(0===r)return!1;for(var n=1/r,i=0;i&lt;16;i++)t[i]=e[i]*n;return!0}},{}],243:[function(t,e,r){var n=t(\"gl-vec3/lerp\"),i=t(\"mat4-recompose\"),a=t(\"mat4-decompose\"),o=t(\"gl-mat4/determinant\"),s=t(\"quat-slerp\"),l=f(),c=f(),u=f();function f(){return{translate:h(),scale:h(1),skew:h(),perspective:[0,0,0,1],quaternion:[0,0,0,1]}}function h(t){return[t||0,t||0,t||0]}e.exports=function(t,e,r,f){if(0===o(e)||0===o(r))return!1;var h=a(e,l.translate,l.scale,l.skew,l.perspective,l.quaternion),p=a(r,c.translate,c.scale,c.skew,c.perspective,c.quaternion);return!(!h||!p)&amp;&amp;(n(u.translate,l.translate,c.translate,f),n(u.skew,l.skew,c.skew,f),n(u.scale,l.scale,c.scale,f),n(u.perspective,l.perspective,c.perspective,f),s(u.quaternion,l.quaternion,c.quaternion,f),i(t,u.translate,u.scale,u.skew,u.perspective,u.quaternion),!0)}},{\"gl-mat4/determinant\":94,\"gl-vec3/lerp\":173,\"mat4-decompose\":241,\"mat4-recompose\":244,\"quat-slerp\":271}],244:[function(t,e,r){var n={identity:t(\"gl-mat4/identity\"),translate:t(\"gl-mat4/translate\"),multiply:t(\"gl-mat4/multiply\"),create:t(\"gl-mat4/create\"),scale:t(\"gl-mat4/scale\"),fromRotationTranslation:t(\"gl-mat4/fromRotationTranslation\")},i=(n.create(),n.create());e.exports=function(t,e,r,a,o,s){return n.identity(t),n.fromRotationTranslation(t,s,e),t[3]=o[0],t[7]=o[1],t[11]=o[2],t[15]=o[3],n.identity(i),0!==a[2]&amp;&amp;(i[9]=a[2],n.multiply(t,t,i)),0!==a[1]&amp;&amp;(i[9]=0,i[8]=a[1],n.multiply(t,t,i)),0!==a[0]&amp;&amp;(i[8]=0,i[4]=a[0],n.multiply(t,t,i)),n.scale(t,t,r),t}},{\"gl-mat4/create\":93,\"gl-mat4/fromRotationTranslation\":96,\"gl-mat4/identity\":97,\"gl-mat4/multiply\":100,\"gl-mat4/scale\":107,\"gl-mat4/translate\":108}],245:[function(t,e,r){\"use strict\";var n=t(\"binary-search-bounds\"),i=t(\"mat4-interpolate\"),a=t(\"gl-mat4/invert\"),o=t(\"gl-mat4/rotateX\"),s=t(\"gl-mat4/rotateY\"),l=t(\"gl-mat4/rotateZ\"),c=t(\"gl-mat4/lookAt\"),u=t(\"gl-mat4/translate\"),f=(t(\"gl-mat4/scale\"),t(\"gl-vec3/normalize\")),h=[0,0,0];function p(t){this._components=t.slice(),this._time=[0],this.prevMatrix=t.slice(),this.nextMatrix=t.slice(),this.computedMatrix=t.slice(),this.computedInverse=t.slice(),this.computedEye=[0,0,0],this.computedUp=[0,0,0],this.computedCenter=[0,0,0],this.computedRadius=[0],this._limits=[-1/0,1/0]}e.exports=function(t){return new p((t=t||{}).matrix||[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])};var d=p.prototype;d.recalcMatrix=function(t){var e=this._time,r=n.le(e,t),o=this.computedMatrix;if(!(r&lt;0)){var s=this._components;if(r===e.length-1)for(var l=16*r,c=0;c&lt;16;++c)o[c]=s[l++];else{var u=e[r+1]-e[r],h=(l=16*r,this.prevMatrix),p=!0;for(c=0;c&lt;16;++c)h[c]=s[l++];var d=this.nextMatrix;for(c=0;c&lt;16;++c)d[c]=s[l++],p=p&amp;&amp;h[c]===d[c];if(u&lt;1e-6||p)for(c=0;c&lt;16;++c)o[c]=h[c];else i(o,h,d,(t-e[r])/u)}var m=this.computedUp;m[0]=o[1],m[1]=o[5],m[2]=o[9],f(m,m);var g=this.computedInverse;a(g,o);var v=this.computedEye,y=g[15];v[0]=g[12]/y,v[1]=g[13]/y,v[2]=g[14]/y;var x=this.computedCenter,b=Math.exp(this.computedRadius[0]);for(c=0;c&lt;3;++c)x[c]=v[c]-o[2+4*c]*b}},d.idle=function(t){if(!(t1&amp;&amp;n(t[o[u-2]],t[o[u-1]],c)&lt;=0;)u-=1,o.pop();for(o.push(l),u=s.length;u&gt;1&amp;&amp;n(t[s[u-2]],t[s[u-1]],c)&gt;=0;)u-=1,s.pop();s.push(l)}r=new Array(s.length+o.length-2);for(var f=0,h=(i=0,o.length);i0;--p)r[f++]=s[p];return r};var n=t(\"robust-orientation\")[3]},{\"robust-orientation\":284}],247:[function(t,e,r){\"use strict\";e.exports=function(t,e){e||(e=t,t=window);var r=0,i=0,a=0,o={shift:!1,alt:!1,control:!1,meta:!1},s=!1;function l(t){var e=!1;return\"altKey\"in t&amp;&amp;(e=e||t.altKey!==o.alt,o.alt=!!t.altKey),\"shiftKey\"in t&amp;&amp;(e=e||t.shiftKey!==o.shift,o.shift=!!t.shiftKey),\"ctrlKey\"in t&amp;&amp;(e=e||t.ctrlKey!==o.control,o.control=!!t.ctrlKey),\"metaKey\"in t&amp;&amp;(e=e||t.metaKey!==o.meta,o.meta=!!t.metaKey),e}function c(t,s){var c=n.x(s),u=n.y(s);\"buttons\"in s&amp;&amp;(t=0|s.buttons),(t!==r||c!==i||u!==a||l(s))&amp;&amp;(r=0|t,i=c||0,a=u||0,e&amp;&amp;e(r,i,a,o))}function u(t){c(0,t)}function f(){(r||i||a||o.shift||o.alt||o.meta||o.control)&amp;&amp;(i=a=0,r=0,o.shift=o.alt=o.control=o.meta=!1,e&amp;&amp;e(0,0,0,o))}function h(t){l(t)&amp;&amp;e&amp;&amp;e(r,i,a,o)}function p(t){0===n.buttons(t)?c(0,t):c(r,t)}function d(t){c(r|n.buttons(t),t)}function m(t){c(r&amp;~n.buttons(t),t)}function g(){s||(s=!0,t.addEventListener(\"mousemove\",p),t.addEventListener(\"mousedown\",d),t.addEventListener(\"mouseup\",m),t.addEventListener(\"mouseleave\",u),t.addEventListener(\"mouseenter\",u),t.addEventListener(\"mouseout\",u),t.addEventListener(\"mouseover\",u),t.addEventListener(\"blur\",f),t.addEventListener(\"keyup\",h),t.addEventListener(\"keydown\",h),t.addEventListener(\"keypress\",h),t!==window&amp;&amp;(window.addEventListener(\"blur\",f),window.addEventListener(\"keyup\",h),window.addEventListener(\"keydown\",h),window.addEventListener(\"keypress\",h)))}g();var v={element:t};return Object.defineProperties(v,{enabled:{get:function(){return s},set:function(e){e?g():function(){if(!s)return;s=!1,t.removeEventListener(\"mousemove\",p),t.removeEventListener(\"mousedown\",d),t.removeEventListener(\"mouseup\",m),t.removeEventListener(\"mouseleave\",u),t.removeEventListener(\"mouseenter\",u),t.removeEventListener(\"mouseout\",u),t.removeEventListener(\"mouseover\",u),t.removeEventListener(\"blur\",f),t.removeEventListener(\"keyup\",h),t.removeEventListener(\"keydown\",h),t.removeEventListener(\"keypress\",h),t!==window&amp;&amp;(window.removeEventListener(\"blur\",f),window.removeEventListener(\"keyup\",h),window.removeEventListener(\"keydown\",h),window.removeEventListener(\"keypress\",h))}()},enumerable:!0},buttons:{get:function(){return r},enumerable:!0},x:{get:function(){return i},enumerable:!0},y:{get:function(){return a},enumerable:!0},mods:{get:function(){return o},enumerable:!0}}),v};var n=t(\"mouse-event\")},{\"mouse-event\":249}],248:[function(t,e,r){var n={left:0,top:0};e.exports=function(t,e,r){e=e||t.currentTarget||t.srcElement,Array.isArray(r)||(r=[0,0]);var i=t.clientX||0,a=t.clientY||0,o=(s=e,s===window||s===document||s===document.body?n:s.getBoundingClientRect());var s;return r[0]=i-o.left,r[1]=a-o.top,r}},{}],249:[function(t,e,r){\"use strict\";function n(t){return t.target||t.srcElement||window}r.buttons=function(t){if(\"object\"==typeof t){if(\"buttons\"in t)return t.buttons;if(\"which\"in t){if(2===(e=t.which))return 4;if(3===e)return 2;if(e&gt;0)return 1&lt;=0)return 1&lt; 0\");\"function\"!=typeof t.vertex&amp;&amp;e(\"Must specify vertex creation function\");\"function\"!=typeof t.cell&amp;&amp;e(\"Must specify cell creation function\");\"function\"!=typeof t.phase&amp;&amp;e(\"Must specify phase function\");for(var s=t.getters||[],l=new Array(a),c=0;c=0?l[c]=!0:l[c]=!1;return function(t,e,r,a,o,s){var l=[s,o].join(\",\");return(0,i[l])(t,e,r,n.mallocUint32,n.freeUint32)}(t.vertex,t.cell,t.phase,0,r,l)};var i={\"false,0,1\":function(t,e,r,n,i){return function(a,o,s,l){var c,u=0|a.shape[0],f=0|a.shape[1],h=a.data,p=0|a.offset,d=0|a.stride[0],m=0|a.stride[1],g=p,v=0|-d,y=0,x=0|-m,b=0,_=-d-m|0,w=0,T=0|d,k=m-d*u|0,A=0,M=0,S=0,E=2*u|0,L=n(E),C=n(E),P=0,I=0,O=-1,z=-1,D=0,R=0|-u,F=0|u,B=0,N=-u-1|0,j=u-1|0,U=0,V=0,H=0;for(A=0;A0){if(M=1,L[P++]=r(h[g],o,s,l),g+=T,u&gt;0)for(A=1,c=h[g],I=L[P]=r(c,o,s,l),D=L[P+O],B=L[P+R],U=L[P+N],I===D&amp;&amp;I===B&amp;&amp;I===U||(y=h[g+v],b=h[g+x],w=h[g+_],t(A,M,c,y,b,w,I,D,B,U,o,s,l),V=C[P]=S++),P+=1,g+=T,A=2;A0)for(A=1,c=h[g],I=L[P]=r(c,o,s,l),D=L[P+O],B=L[P+R],U=L[P+N],I===D&amp;&amp;I===B&amp;&amp;I===U||(y=h[g+v],b=h[g+x],w=h[g+_],t(A,M,c,y,b,w,I,D,B,U,o,s,l),V=C[P]=S++,U!==B&amp;&amp;e(C[P+R],V,b,w,B,U,o,s,l)),P+=1,g+=T,A=2;A0){if(A=1,L[P++]=r(h[g],o,s,l),g+=T,f&gt;0)for(M=1,c=h[g],I=L[P]=r(c,o,s,l),B=L[P+R],D=L[P+O],U=L[P+N],I===B&amp;&amp;I===D&amp;&amp;I===U||(y=h[g+v],b=h[g+x],w=h[g+_],t(A,M,c,y,b,w,I,B,D,U,o,s,l),V=C[P]=S++),P+=1,g+=T,M=2;M0)for(M=1,c=h[g],I=L[P]=r(c,o,s,l),B=L[P+R],D=L[P+O],U=L[P+N],I===B&amp;&amp;I===D&amp;&amp;I===U||(y=h[g+v],b=h[g+x],w=h[g+_],t(A,M,c,y,b,w,I,B,D,U,o,s,l),V=C[P]=S++,U!==B&amp;&amp;e(C[P+R],V,w,y,U,B,o,s,l)),P+=1,g+=T,M=2;M2&amp;&amp;a[1]&gt;2&amp;&amp;n(i.pick(-1,-1).lo(1,1).hi(a[0]-2,a[1]-2),t.pick(-1,-1,0).lo(1,1).hi(a[0]-2,a[1]-2),t.pick(-1,-1,1).lo(1,1).hi(a[0]-2,a[1]-2)),a[1]&gt;2&amp;&amp;(r(i.pick(0,-1).lo(1).hi(a[1]-2),t.pick(0,-1,1).lo(1).hi(a[1]-2)),e(t.pick(0,-1,0).lo(1).hi(a[1]-2))),a[1]&gt;2&amp;&amp;(r(i.pick(a[0]-1,-1).lo(1).hi(a[1]-2),t.pick(a[0]-1,-1,1).lo(1).hi(a[1]-2)),e(t.pick(a[0]-1,-1,0).lo(1).hi(a[1]-2))),a[0]&gt;2&amp;&amp;(r(i.pick(-1,0).lo(1).hi(a[0]-2),t.pick(-1,0,0).lo(1).hi(a[0]-2)),e(t.pick(-1,0,1).lo(1).hi(a[0]-2))),a[0]&gt;2&amp;&amp;(r(i.pick(-1,a[1]-1).lo(1).hi(a[0]-2),t.pick(-1,a[1]-1,0).lo(1).hi(a[0]-2)),e(t.pick(-1,a[1]-1,1).lo(1).hi(a[0]-2))),t.set(0,0,0,0),t.set(0,0,1,0),t.set(a[0]-1,0,0,0),t.set(a[0]-1,0,1,0),t.set(0,a[1]-1,0,0),t.set(0,a[1]-1,1,0),t.set(a[0]-1,a[1]-1,0,0),t.set(a[0]-1,a[1]-1,1,0),t}}e.exports=function(t,e,r){return Array.isArray(r)||(r=n(e.dimension,\"string\"==typeof r?r:\"clamp\")),0===e.size?t:0===e.dimension?(t.set(0),t):function(t){var e=t.join();if(a=u[e])return a;for(var r=t.length,n=[f,h],i=1;i&lt;=r;++i)n.push(p(i));var a=d.apply(void 0,n);return u[e]=a,a}(r)(t,e)}},{dup:65}],253:[function(t,e,r){\"use strict\";function n(t,e){var r=Math.floor(e),n=e-r,i=0&lt;=r&amp;&amp;r0;){x&lt;64?(l=x,x=0):(l=64,x-=64);for(var b=0|t[1];b&gt;0;){b&lt;64?(c=b,b=0):(c=64,b-=64),n=v+x*f+b*h,o=y+x*d+b*m;var _=0,w=0,T=0,k=p,A=f-u*p,M=h-l*f,S=g,E=d-u*g,L=m-l*d;for(T=0;T0;){m&lt;64?(l=m,m=0):(l=64,m-=64);for(var g=0|t[0];g&gt;0;){g&lt;64?(s=g,g=0):(s=64,g-=64),n=p+m*u+g*c,o=d+m*h+g*f;var v=0,y=0,x=u,b=c-l*u,_=h,w=f-l*h;for(y=0;y0;){y&lt;64?(c=y,y=0):(c=64,y-=64);for(var x=0|t[0];x&gt;0;){x&lt;64?(s=x,x=0):(s=64,x-=64);for(var b=0|t[1];b&gt;0;){b&lt;64?(l=b,b=0):(l=64,b-=64),n=g+y*h+x*u+b*f,o=v+y*m+x*p+b*d;var _=0,w=0,T=0,k=h,A=u-c*h,M=f-s*u,S=m,E=p-c*m,L=d-s*p;for(T=0;Tr;){v=0,y=m-o;e:for(g=0;gb)break e;y+=f,v+=h}for(v=m,y=m-o,g=0;g&gt;1,q=H-j,G=H+j,Y=U,W=q,Z=H,X=G,J=V,K=i+1,Q=a-1,$=!0,tt=0,et=0,rt=0,nt=f,it=e(nt),at=e(nt);A=l*Y,M=l*W,N=s;t:for(k=0;k0){g=Y,Y=W,W=g;break t}if(rt&lt;0)break t;N+=p}A=l*X,M=l*J,N=s;t:for(k=0;k0){g=X,X=J,J=g;break t}if(rt&lt;0)break t;N+=p}A=l*Y,M=l*Z,N=s;t:for(k=0;k0){g=Y,Y=Z,Z=g;break t}if(rt&lt;0)break t;N+=p}A=l*W,M=l*Z,N=s;t:for(k=0;k0){g=W,W=Z,Z=g;break t}if(rt&lt;0)break t;N+=p}A=l*Y,M=l*X,N=s;t:for(k=0;k0){g=Y,Y=X,X=g;break t}if(rt&lt;0)break t;N+=p}A=l*Z,M=l*X,N=s;t:for(k=0;k0){g=Z,Z=X,X=g;break t}if(rt&lt;0)break t;N+=p}A=l*W,M=l*J,N=s;t:for(k=0;k0){g=W,W=J,J=g;break t}if(rt&lt;0)break t;N+=p}A=l*W,M=l*Z,N=s;t:for(k=0;k0){g=W,W=Z,Z=g;break t}if(rt&lt;0)break t;N+=p}A=l*X,M=l*J,N=s;t:for(k=0;k0){g=X,X=J,J=g;break t}if(rt&lt;0)break t;N+=p}for(A=l*Y,M=l*W,S=l*Z,E=l*X,L=l*J,C=l*U,P=l*H,I=l*V,B=0,N=s,k=0;k0)){if(rt&lt;0){for(A=l*b,M=l*K,S=l*Q,N=s,k=0;k0)for(;;){_=s+Q*l,B=0;t:for(k=0;k0)){_=s+Q*l,B=0;t:for(k=0;kV){t:for(;;){for(_=s+K*l,B=0,N=s,k=0;k1&amp;&amp;n?s(r,n[0],n[1]):s(r)}(t,e,l);return n(l,c)}},{\"typedarray-pool\":308}],258:[function(t,e,r){\"use strict\";var n=t(\"./lib/compile_sort.js\"),i={};e.exports=function(t){var e=t.order,r=t.dtype,a=[e,r].join(\":\"),o=i[a];return o||(i[a]=o=n(e,r)),o(t),t}},{\"./lib/compile_sort.js\":257}],259:[function(t,e,r){var n=t(\"is-buffer\"),i=\"undefined\"!=typeof Float64Array;function a(t,e){return t[0]-e[0]}function o(){var t,e=this.stride,r=new Array(e.length);for(t=0;t=0&amp;&amp;(e+=a*(r=0|t),i-=r),new n(this.data,i,a,e)},i.step=function(t){var e=this.shape[0],r=this.stride[0],i=this.offset,a=0,o=Math.ceil;return\"number\"==typeof t&amp;&amp;((a=0|t)&lt;0?(i+=r*(e-1),e=o(-e/a)):e=o(e/a),r*=a),new n(this.data,e,r,i)},i.transpose=function(t){t=void 0===t?0:0|t;var e=this.shape,r=this.stride;return new n(this.data,e[t],r[t],this.offset)},i.pick=function(t){var r=[],n=[],i=this.offset;return\"number\"==typeof t&amp;&amp;t&gt;=0?i=i+this.stride[0]*t|0:(r.push(this.shape[0]),n.push(this.stride[0])),(0,e[r.length+1])(this.data,r,n,i)},function(t,e,r,i){return new n(t,e[0],r[0],i)}},2:function(t,e,r){function n(t,e,r,n,i,a){this.data=t,this.shape=[e,r],this.stride=[n,i],this.offset=0|a}var i=n.prototype;return i.dtype=t,i.dimension=2,Object.defineProperty(i,\"size\",{get:function(){return this.shape[0]*this.shape[1]}}),Object.defineProperty(i,\"order\",{get:function(){return Math.abs(this.stride[0])&gt;Math.abs(this.stride[1])?[1,0]:[0,1]}}),i.set=function(e,r,n){return\"generic\"===t?this.data.set(this.offset+this.stride[0]*e+this.stride[1]*r,n):this.data[this.offset+this.stride[0]*e+this.stride[1]*r]=n},i.get=function(e,r){return\"generic\"===t?this.data.get(this.offset+this.stride[0]*e+this.stride[1]*r):this.data[this.offset+this.stride[0]*e+this.stride[1]*r]},i.index=function(t,e){return this.offset+this.stride[0]*t+this.stride[1]*e},i.hi=function(t,e){return new n(this.data,\"number\"!=typeof t||t&lt;0?this.shape[0]:0|t,\"number\"!=typeof e||e&lt;0?this.shape[1]:0|e,this.stride[0],this.stride[1],this.offset)},i.lo=function(t,e){var r=this.offset,i=0,a=this.shape[0],o=this.shape[1],s=this.stride[0],l=this.stride[1];return\"number\"==typeof t&amp;&amp;t&gt;=0&amp;&amp;(r+=s*(i=0|t),a-=i),\"number\"==typeof e&amp;&amp;e&gt;=0&amp;&amp;(r+=l*(i=0|e),o-=i),new n(this.data,a,o,s,l,r)},i.step=function(t,e){var r=this.shape[0],i=this.shape[1],a=this.stride[0],o=this.stride[1],s=this.offset,l=0,c=Math.ceil;return\"number\"==typeof t&amp;&amp;((l=0|t)&lt;0?(s+=a*(r-1),r=c(-r/l)):r=c(r/l),a*=l),\"number\"==typeof e&amp;&amp;((l=0|e)&lt;0?(s+=o*(i-1),i=c(-i/l)):i=c(i/l),o*=l),new n(this.data,r,i,a,o,s)},i.transpose=function(t,e){t=void 0===t?0:0|t,e=void 0===e?1:0|e;var r=this.shape,i=this.stride;return new n(this.data,r[t],r[e],i[t],i[e],this.offset)},i.pick=function(t,r){var n=[],i=[],a=this.offset;return\"number\"==typeof t&amp;&amp;t&gt;=0?a=a+this.stride[0]*t|0:(n.push(this.shape[0]),i.push(this.stride[0])),\"number\"==typeof r&amp;&amp;r&gt;=0?a=a+this.stride[1]*r|0:(n.push(this.shape[1]),i.push(this.stride[1])),(0,e[n.length+1])(this.data,n,i,a)},function(t,e,r,i){return new n(t,e[0],e[1],r[0],r[1],i)}},3:function(t,e,r){function n(t,e,r,n,i,a,o,s){this.data=t,this.shape=[e,r,n],this.stride=[i,a,o],this.offset=0|s}var i=n.prototype;return i.dtype=t,i.dimension=3,Object.defineProperty(i,\"size\",{get:function(){return this.shape[0]*this.shape[1]*this.shape[2]}}),Object.defineProperty(i,\"order\",{get:function(){var t=Math.abs(this.stride[0]),e=Math.abs(this.stride[1]),r=Math.abs(this.stride[2]);return t&gt;e?e&gt;r?[2,1,0]:t&gt;r?[1,2,0]:[1,0,2]:t&gt;r?[2,0,1]:r&gt;e?[0,1,2]:[0,2,1]}}),i.set=function(e,r,n,i){return\"generic\"===t?this.data.set(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n,i):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n]=i},i.get=function(e,r,n){return\"generic\"===t?this.data.get(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n]},i.index=function(t,e,r){return this.offset+this.stride[0]*t+this.stride[1]*e+this.stride[2]*r},i.hi=function(t,e,r){return new n(this.data,\"number\"!=typeof t||t&lt;0?this.shape[0]:0|t,\"number\"!=typeof e||e&lt;0?this.shape[1]:0|e,\"number\"!=typeof r||r&lt;0?this.shape[2]:0|r,this.stride[0],this.stride[1],this.stride[2],this.offset)},i.lo=function(t,e,r){var i=this.offset,a=0,o=this.shape[0],s=this.shape[1],l=this.shape[2],c=this.stride[0],u=this.stride[1],f=this.stride[2];return\"number\"==typeof t&amp;&amp;t&gt;=0&amp;&amp;(i+=c*(a=0|t),o-=a),\"number\"==typeof e&amp;&amp;e&gt;=0&amp;&amp;(i+=u*(a=0|e),s-=a),\"number\"==typeof r&amp;&amp;r&gt;=0&amp;&amp;(i+=f*(a=0|r),l-=a),new n(this.data,o,s,l,c,u,f,i)},i.step=function(t,e,r){var i=this.shape[0],a=this.shape[1],o=this.shape[2],s=this.stride[0],l=this.stride[1],c=this.stride[2],u=this.offset,f=0,h=Math.ceil;return\"number\"==typeof t&amp;&amp;((f=0|t)&lt;0?(u+=s*(i-1),i=h(-i/f)):i=h(i/f),s*=f),\"number\"==typeof e&amp;&amp;((f=0|e)&lt;0?(u+=l*(a-1),a=h(-a/f)):a=h(a/f),l*=f),\"number\"==typeof r&amp;&amp;((f=0|r)&lt;0?(u+=c*(o-1),o=h(-o/f)):o=h(o/f),c*=f),new n(this.data,i,a,o,s,l,c,u)},i.transpose=function(t,e,r){t=void 0===t?0:0|t,e=void 0===e?1:0|e,r=void 0===r?2:0|r;var i=this.shape,a=this.stride;return new n(this.data,i[t],i[e],i[r],a[t],a[e],a[r],this.offset)},i.pick=function(t,r,n){var i=[],a=[],o=this.offset;return\"number\"==typeof t&amp;&amp;t&gt;=0?o=o+this.stride[0]*t|0:(i.push(this.shape[0]),a.push(this.stride[0])),\"number\"==typeof r&amp;&amp;r&gt;=0?o=o+this.stride[1]*r|0:(i.push(this.shape[1]),a.push(this.stride[1])),\"number\"==typeof n&amp;&amp;n&gt;=0?o=o+this.stride[2]*n|0:(i.push(this.shape[2]),a.push(this.stride[2])),(0,e[i.length+1])(this.data,i,a,o)},function(t,e,r,i){return new n(t,e[0],e[1],e[2],r[0],r[1],r[2],i)}},4:function(t,e,r){function n(t,e,r,n,i,a,o,s,l,c){this.data=t,this.shape=[e,r,n,i],this.stride=[a,o,s,l],this.offset=0|c}var i=n.prototype;return i.dtype=t,i.dimension=4,Object.defineProperty(i,\"size\",{get:function(){return this.shape[0]*this.shape[1]*this.shape[2]*this.shape[3]}}),Object.defineProperty(i,\"order\",{get:r}),i.set=function(e,r,n,i,a){return\"generic\"===t?this.data.set(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i,a):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i]=a},i.get=function(e,r,n,i){return\"generic\"===t?this.data.get(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i]},i.index=function(t,e,r,n){return this.offset+this.stride[0]*t+this.stride[1]*e+this.stride[2]*r+this.stride[3]*n},i.hi=function(t,e,r,i){return new n(this.data,\"number\"!=typeof t||t&lt;0?this.shape[0]:0|t,\"number\"!=typeof e||e&lt;0?this.shape[1]:0|e,\"number\"!=typeof r||r&lt;0?this.shape[2]:0|r,\"number\"!=typeof i||i&lt;0?this.shape[3]:0|i,this.stride[0],this.stride[1],this.stride[2],this.stride[3],this.offset)},i.lo=function(t,e,r,i){var a=this.offset,o=0,s=this.shape[0],l=this.shape[1],c=this.shape[2],u=this.shape[3],f=this.stride[0],h=this.stride[1],p=this.stride[2],d=this.stride[3];return\"number\"==typeof t&amp;&amp;t&gt;=0&amp;&amp;(a+=f*(o=0|t),s-=o),\"number\"==typeof e&amp;&amp;e&gt;=0&amp;&amp;(a+=h*(o=0|e),l-=o),\"number\"==typeof r&amp;&amp;r&gt;=0&amp;&amp;(a+=p*(o=0|r),c-=o),\"number\"==typeof i&amp;&amp;i&gt;=0&amp;&amp;(a+=d*(o=0|i),u-=o),new n(this.data,s,l,c,u,f,h,p,d,a)},i.step=function(t,e,r,i){var a=this.shape[0],o=this.shape[1],s=this.shape[2],l=this.shape[3],c=this.stride[0],u=this.stride[1],f=this.stride[2],h=this.stride[3],p=this.offset,d=0,m=Math.ceil;return\"number\"==typeof t&amp;&amp;((d=0|t)&lt;0?(p+=c*(a-1),a=m(-a/d)):a=m(a/d),c*=d),\"number\"==typeof e&amp;&amp;((d=0|e)&lt;0?(p+=u*(o-1),o=m(-o/d)):o=m(o/d),u*=d),\"number\"==typeof r&amp;&amp;((d=0|r)&lt;0?(p+=f*(s-1),s=m(-s/d)):s=m(s/d),f*=d),\"number\"==typeof i&amp;&amp;((d=0|i)&lt;0?(p+=h*(l-1),l=m(-l/d)):l=m(l/d),h*=d),new n(this.data,a,o,s,l,c,u,f,h,p)},i.transpose=function(t,e,r,i){t=void 0===t?0:0|t,e=void 0===e?1:0|e,r=void 0===r?2:0|r,i=void 0===i?3:0|i;var a=this.shape,o=this.stride;return new n(this.data,a[t],a[e],a[r],a[i],o[t],o[e],o[r],o[i],this.offset)},i.pick=function(t,r,n,i){var a=[],o=[],s=this.offset;return\"number\"==typeof t&amp;&amp;t&gt;=0?s=s+this.stride[0]*t|0:(a.push(this.shape[0]),o.push(this.stride[0])),\"number\"==typeof r&amp;&amp;r&gt;=0?s=s+this.stride[1]*r|0:(a.push(this.shape[1]),o.push(this.stride[1])),\"number\"==typeof n&amp;&amp;n&gt;=0?s=s+this.stride[2]*n|0:(a.push(this.shape[2]),o.push(this.stride[2])),\"number\"==typeof i&amp;&amp;i&gt;=0?s=s+this.stride[3]*i|0:(a.push(this.shape[3]),o.push(this.stride[3])),(0,e[a.length+1])(this.data,a,o,s)},function(t,e,r,i){return new n(t,e[0],e[1],e[2],e[3],r[0],r[1],r[2],r[3],i)}},5:function(t,e,r){function n(t,e,r,n,i,a,o,s,l,c,u,f){this.data=t,this.shape=[e,r,n,i,a],this.stride=[o,s,l,c,u],this.offset=0|f}var i=n.prototype;return i.dtype=t,i.dimension=5,Object.defineProperty(i,\"size\",{get:function(){return this.shape[0]*this.shape[1]*this.shape[2]*this.shape[3]*this.shape[4]}}),Object.defineProperty(i,\"order\",{get:r}),i.set=function(e,r,n,i,a,o){return\"generic\"===t?this.data.set(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i+this.stride[4]*a,o):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i+this.stride[4]*a]=o},i.get=function(e,r,n,i,a){return\"generic\"===t?this.data.get(this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i+this.stride[4]*a):this.data[this.offset+this.stride[0]*e+this.stride[1]*r+this.stride[2]*n+this.stride[3]*i+this.stride[4]*a]},i.index=function(t,e,r,n,i){return this.offset+this.stride[0]*t+this.stride[1]*e+this.stride[2]*r+this.stride[3]*n+this.stride[4]*i},i.hi=function(t,e,r,i,a){return new n(this.data,\"number\"!=typeof t||t&lt;0?this.shape[0]:0|t,\"number\"!=typeof e||e&lt;0?this.shape[1]:0|e,\"number\"!=typeof r||r&lt;0?this.shape[2]:0|r,\"number\"!=typeof i||i&lt;0?this.shape[3]:0|i,\"number\"!=typeof a||a&lt;0?this.shape[4]:0|a,this.stride[0],this.stride[1],this.stride[2],this.stride[3],this.stride[4],this.offset)},i.lo=function(t,e,r,i,a){var o=this.offset,s=0,l=this.shape[0],c=this.shape[1],u=this.shape[2],f=this.shape[3],h=this.shape[4],p=this.stride[0],d=this.stride[1],m=this.stride[2],g=this.stride[3],v=this.stride[4];return\"number\"==typeof t&amp;&amp;t&gt;=0&amp;&amp;(o+=p*(s=0|t),l-=s),\"number\"==typeof e&amp;&amp;e&gt;=0&amp;&amp;(o+=d*(s=0|e),c-=s),\"number\"==typeof r&amp;&amp;r&gt;=0&amp;&amp;(o+=m*(s=0|r),u-=s),\"number\"==typeof i&amp;&amp;i&gt;=0&amp;&amp;(o+=g*(s=0|i),f-=s),\"number\"==typeof a&amp;&amp;a&gt;=0&amp;&amp;(o+=v*(s=0|a),h-=s),new n(this.data,l,c,u,f,h,p,d,m,g,v,o)},i.step=function(t,e,r,i,a){var o=this.shape[0],s=this.shape[1],l=this.shape[2],c=this.shape[3],u=this.shape[4],f=this.stride[0],h=this.stride[1],p=this.stride[2],d=this.stride[3],m=this.stride[4],g=this.offset,v=0,y=Math.ceil;return\"number\"==typeof t&amp;&amp;((v=0|t)&lt;0?(g+=f*(o-1),o=y(-o/v)):o=y(o/v),f*=v),\"number\"==typeof e&amp;&amp;((v=0|e)&lt;0?(g+=h*(s-1),s=y(-s/v)):s=y(s/v),h*=v),\"number\"==typeof r&amp;&amp;((v=0|r)&lt;0?(g+=p*(l-1),l=y(-l/v)):l=y(l/v),p*=v),\"number\"==typeof i&amp;&amp;((v=0|i)&lt;0?(g+=d*(c-1),c=y(-c/v)):c=y(c/v),d*=v),\"number\"==typeof a&amp;&amp;((v=0|a)&lt;0?(g+=m*(u-1),u=y(-u/v)):u=y(u/v),m*=v),new n(this.data,o,s,l,c,u,f,h,p,d,m,g)},i.transpose=function(t,e,r,i,a){t=void 0===t?0:0|t,e=void 0===e?1:0|e,r=void 0===r?2:0|r,i=void 0===i?3:0|i,a=void 0===a?4:0|a;var o=this.shape,s=this.stride;return new n(this.data,o[t],o[e],o[r],o[i],o[a],s[t],s[e],s[r],s[i],s[a],this.offset)},i.pick=function(t,r,n,i,a){var o=[],s=[],l=this.offset;return\"number\"==typeof t&amp;&amp;t&gt;=0?l=l+this.stride[0]*t|0:(o.push(this.shape[0]),s.push(this.stride[0])),\"number\"==typeof r&amp;&amp;r&gt;=0?l=l+this.stride[1]*r|0:(o.push(this.shape[1]),s.push(this.stride[1])),\"number\"==typeof n&amp;&amp;n&gt;=0?l=l+this.stride[2]*n|0:(o.push(this.shape[2]),s.push(this.stride[2])),\"number\"==typeof i&amp;&amp;i&gt;=0?l=l+this.stride[3]*i|0:(o.push(this.shape[3]),s.push(this.stride[3])),\"number\"==typeof a&amp;&amp;a&gt;=0?l=l+this.stride[4]*a|0:(o.push(this.shape[4]),s.push(this.stride[4])),(0,e[o.length+1])(this.data,o,s,l)},function(t,e,r,i){return new n(t,e[0],e[1],e[2],e[3],e[4],r[0],r[1],r[2],r[3],r[4],i)}}};function l(t,e){var r=-1===e?\"T\":String(e),n=s[r];return-1===e?n(t):0===e?n(t,c[t][0]):n(t,c[t],o)}var c={generic:[],buffer:[],array:[],float32:[],float64:[],int8:[],int16:[],int32:[],uint8_clamped:[],uint8:[],uint16:[],uint32:[],bigint64:[],biguint64:[]};e.exports=function(t,e,r,a){if(void 0===t)return(0,c.array[0])([]);\"number\"==typeof t&amp;&amp;(t=[t]),void 0===e&amp;&amp;(e=[t.length]);var o=e.length;if(void 0===r){r=new Array(o);for(var s=o-1,u=1;s&gt;=0;--s)r[s]=u,u*=e[s]}if(void 0===a){a=0;for(s=0;st==t&gt;0?a===-1&gt;&gt;&gt;0?(r+=1,a=0):a+=1:0===a?(a=-1&gt;&gt;&gt;0,r-=1):a-=1;return n.pack(a,r)}},{\"double-bits\":64}],261:[function(t,e,r){r.vertexNormals=function(t,e,r){for(var n=e.length,i=new Array(n),a=void 0===r?1e-6:r,o=0;oa){var b=i[c],_=1/Math.sqrt(g*y);for(x=0;x&lt;3;++x){var w=(x+1)%3,T=(x+2)%3;b[x]+=_*(v[w]*m[T]-v[T]*m[w])}}}for(o=0;oa)for(_=1/Math.sqrt(k),x=0;x&lt;3;++x)b[x]*=_;else for(x=0;x&lt;3;++x)b[x]=0}return i},r.faceNormals=function(t,e,r){for(var n=t.length,i=new Array(n),a=void 0===r?1e-6:r,o=0;oa?1/Math.sqrt(p):0;for(c=0;c&lt;3;++c)h[c]*=p;i[o]=h}return i}},{}],262:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,n,i,a,o,s,l,c){var u=e+a+c;if(f&gt;0){var f=Math.sqrt(u+1);t[0]=.5*(o-l)/f,t[1]=.5*(s-n)/f,t[2]=.5*(r-a)/f,t[3]=.5*f}else{var h=Math.max(e,a,c);f=Math.sqrt(2*h-u+1);e&gt;=h?(t[0]=.5*f,t[1]=.5*(i+r)/f,t[2]=.5*(s+n)/f,t[3]=.5*(o-l)/f):a&gt;=h?(t[0]=.5*(r+i)/f,t[1]=.5*f,t[2]=.5*(l+o)/f,t[3]=.5*(s-n)/f):(t[0]=.5*(n+s)/f,t[1]=.5*(o+l)/f,t[2]=.5*f,t[3]=.5*(r-i)/f)}return t}},{}],263:[function(t,e,r){\"use strict\";e.exports=function(t){var e=(t=t||{}).center||[0,0,0],r=t.rotation||[0,0,0,1],n=t.radius||1;e=[].slice.call(e,0,3),u(r=[].slice.call(r,0,4),r);var i=new f(r,e,Math.log(n));i.setDistanceLimits(t.zoomMin,t.zoomMax),(\"eye\"in t||\"up\"in t)&amp;&amp;i.lookAt(0,t.eye,t.center,t.up);return i};var n=t(\"filtered-vector\"),i=t(\"gl-mat4/lookAt\"),a=t(\"gl-mat4/fromQuat\"),o=t(\"gl-mat4/invert\"),s=t(\"./lib/quatFromFrame\");function l(t,e,r){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2)+Math.pow(r,2))}function c(t,e,r,n){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2)+Math.pow(r,2)+Math.pow(n,2))}function u(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=c(r,n,i,a);o&gt;1e-6?(t[0]=r/o,t[1]=n/o,t[2]=i/o,t[3]=a/o):(t[0]=t[1]=t[2]=0,t[3]=1)}function f(t,e,r){this.radius=n([r]),this.center=n(e),this.rotation=n(t),this.computedRadius=this.radius.curve(0),this.computedCenter=this.center.curve(0),this.computedRotation=this.rotation.curve(0),this.computedUp=[.1,0,0],this.computedEye=[.1,0,0],this.computedMatrix=[.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this.recalcMatrix(0)}var h=f.prototype;h.lastT=function(){return Math.max(this.radius.lastT(),this.center.lastT(),this.rotation.lastT())},h.recalcMatrix=function(t){this.radius.curve(t),this.center.curve(t),this.rotation.curve(t);var e=this.computedRotation;u(e,e);var r=this.computedMatrix;a(r,e);var n=this.computedCenter,i=this.computedEye,o=this.computedUp,s=Math.exp(this.computedRadius[0]);i[0]=n[0]+s*r[2],i[1]=n[1]+s*r[6],i[2]=n[2]+s*r[10],o[0]=r[1],o[1]=r[5],o[2]=r[9];for(var l=0;l&lt;3;++l){for(var c=0,f=0;f&lt;3;++f)c+=r[l+4*f]*i[f];r[12+l]=-c}},h.getMatrix=function(t,e){this.recalcMatrix(t);var r=this.computedMatrix;if(e){for(var n=0;n&lt;16;++n)e[n]=r[n];return e}return r},h.idle=function(t){this.center.idle(t),this.radius.idle(t),this.rotation.idle(t)},h.flush=function(t){this.center.flush(t),this.radius.flush(t),this.rotation.flush(t)},h.pan=function(t,e,r,n){e=e||0,r=r||0,n=n||0,this.recalcMatrix(t);var i=this.computedMatrix,a=i[1],o=i[5],s=i[9],c=l(a,o,s);a/=c,o/=c,s/=c;var u=i[0],f=i[4],h=i[8],p=u*a+f*o+h*s,d=l(u-=a*p,f-=o*p,h-=s*p);u/=d,f/=d,h/=d;var m=i[2],g=i[6],v=i[10],y=m*a+g*o+v*s,x=m*u+g*f+v*h,b=l(m-=y*a+x*u,g-=y*o+x*f,v-=y*s+x*h);m/=b,g/=b,v/=b;var _=u*e+a*r,w=f*e+o*r,T=h*e+s*r;this.center.move(t,_,w,T);var k=Math.exp(this.computedRadius[0]);k=Math.max(1e-4,k+n),this.radius.set(t,Math.log(k))},h.rotate=function(t,e,r,n){this.recalcMatrix(t),e=e||0,r=r||0;var i=this.computedMatrix,a=i[0],o=i[4],s=i[8],u=i[1],f=i[5],h=i[9],p=i[2],d=i[6],m=i[10],g=e*a+r*u,v=e*o+r*f,y=e*s+r*h,x=-(d*y-m*v),b=-(m*g-p*y),_=-(p*v-d*g),w=Math.sqrt(Math.max(0,1-Math.pow(x,2)-Math.pow(b,2)-Math.pow(_,2))),T=c(x,b,_,w);T&gt;1e-6?(x/=T,b/=T,_/=T,w/=T):(x=b=_=0,w=1);var k=this.computedRotation,A=k[0],M=k[1],S=k[2],E=k[3],L=A*w+E*x+M*_-S*b,C=M*w+E*b+S*x-A*_,P=S*w+E*_+A*b-M*x,I=E*w-A*x-M*b-S*_;if(n){x=p,b=d,_=m;var O=Math.sin(n)/l(x,b,_);x*=O,b*=O,_*=O,I=I*(w=Math.cos(e))-(L=L*w+I*x+C*_-P*b)*x-(C=C*w+I*b+P*x-L*_)*b-(P=P*w+I*_+L*b-C*x)*_}var z=c(L,C,P,I);z&gt;1e-6?(L/=z,C/=z,P/=z,I/=z):(L=C=P=0,I=1),this.rotation.set(t,L,C,P,I)},h.lookAt=function(t,e,r,n){this.recalcMatrix(t),r=r||this.computedCenter,e=e||this.computedEye,n=n||this.computedUp;var a=this.computedMatrix;i(a,e,r,n);var o=this.computedRotation;s(o,a[0],a[1],a[2],a[4],a[5],a[6],a[8],a[9],a[10]),u(o,o),this.rotation.set(t,o[0],o[1],o[2],o[3]);for(var l=0,c=0;c&lt;3;++c)l+=Math.pow(r[c]-e[c],2);this.radius.set(t,.5*Math.log(Math.max(l,1e-6))),this.center.set(t,r[0],r[1],r[2])},h.translate=function(t,e,r,n){this.center.move(t,e||0,r||0,n||0)},h.setMatrix=function(t,e){var r=this.computedRotation;s(r,e[0],e[1],e[2],e[4],e[5],e[6],e[8],e[9],e[10]),u(r,r),this.rotation.set(t,r[0],r[1],r[2],r[3]);var n=this.computedMatrix;o(n,e);var i=n[15];if(Math.abs(i)&gt;1e-6){var a=n[12]/i,l=n[13]/i,c=n[14]/i;this.recalcMatrix(t);var f=Math.exp(this.computedRadius[0]);this.center.set(t,a-n[2]*f,l-n[6]*f,c-n[10]*f),this.radius.idle(t)}else this.center.idle(t),this.radius.idle(t)},h.setDistance=function(t,e){e&gt;0&amp;&amp;this.radius.set(t,Math.log(e))},h.setDistanceLimits=function(t,e){t=t&gt;0?Math.log(t):-1/0,e=e&gt;0?Math.log(e):1/0,e=Math.max(e,t),this.radius.bounds[0][0]=t,this.radius.bounds[1][0]=e},h.getDistanceLimits=function(t){var e=this.radius.bounds;return t?(t[0]=Math.exp(e[0][0]),t[1]=Math.exp(e[1][0]),t):[Math.exp(e[0][0]),Math.exp(e[1][0])]},h.toJSON=function(){return this.recalcMatrix(this.lastT()),{center:this.computedCenter.slice(),rotation:this.computedRotation.slice(),distance:Math.log(this.computedRadius[0]),zoomMin:this.radius.bounds[0][0],zoomMax:this.radius.bounds[1][0]}},h.fromJSON=function(t){var e=this.lastT(),r=t.center;r&amp;&amp;this.center.set(e,r[0],r[1],r[2]);var n=t.rotation;n&amp;&amp;this.rotation.set(e,n[0],n[1],n[2],n[3]);var i=t.distance;i&amp;&amp;i&gt;0&amp;&amp;this.radius.set(e,Math.log(i)),this.setDistanceLimits(t.zoomMin,t.zoomMax)}},{\"./lib/quatFromFrame\":262,\"filtered-vector\":68,\"gl-mat4/fromQuat\":95,\"gl-mat4/invert\":98,\"gl-mat4/lookAt\":99}],264:[function(t,e,r){ /*!  * pad-left   *  * Copyright (c) 2014-2015, Jon Schlinkert.  * Licensed under the MIT license.  */ \"use strict\";var n=t(\"repeat-string\");e.exports=function(t,e,r){return n(r=void 0!==r?r+\"\":\" \",e)+t}},{\"repeat-string\":277}],265:[function(t,e,r){e.exports=function(t,e){e||(e=[0,\"\"]),t=String(t);var r=parseFloat(t,10);return e[0]=r,e[1]=t.match(/[\\d.\\-\\+]*\\s*(.*)/)[1]||\"\",e}},{}],266:[function(t,e,r){\"use strict\";e.exports=function(t,e){for(var r=0|e.length,i=t.length,a=[new Array(r),new Array(r)],o=0;o0){o=a[u][r][0],l=u;break}s=o[1^l];for(var f=0;f&lt;2;++f)for(var h=a[f][r],p=0;p0&amp;&amp;(o=d,s=m,l=f)}return i||o&amp;&amp;c(o,l),s}function f(t,r){var i=a[r][t][0],o=[t];c(i,r);for(var s=i[1^r];;){for(;s!==t;)o.push(s),s=u(o[o.length-2],s,!1);if(a[0][t].length+a[1][t].length===0)break;var l=o[o.length-1],f=t,h=o[1],p=u(l,f,!0);if(n(e[l],e[f],e[h],e[p])&lt;0)break;o.push(t),s=u(l,f)}return o}function h(t,e){return e[1]===e[e.length-1]}for(o=0;o0;){a[0][o].length;var m=f(o,p);h(0,m)?d.push.apply(d,m):(d.length&gt;0&amp;&amp;l.push(d),d=m)}d.length&gt;0&amp;&amp;l.push(d)}return l};var n=t(\"compare-angle\")},{\"compare-angle\":54}],267:[function(t,e,r){\"use strict\";e.exports=function(t,e){for(var r=n(t,e.length),i=new Array(e.length),a=new Array(e.length),o=[],s=0;s0;){var c=o.pop();i[c]=!1;var u=r[c];for(s=0;s0}))).length,g=new Array(m),v=new Array(m);for(p=0;p0;){var B=R.pop(),N=E[B];l(N,(function(t,e){return t-e}));var j,U=N.length,V=F[B];if(0===V){var H=d[B];j=[H]}for(p=0;p=0))if(F[q]=1^V,R.push(q),0===V)D(H=d[q])||(H.reverse(),j.push(H))}0===V&amp;&amp;r.push(j)}return r};var n=t(\"edges-to-adjacency-list\"),i=t(\"planar-dual\"),a=t(\"point-in-big-polygon\"),o=t(\"two-product\"),s=t(\"robust-sum\"),l=t(\"uniq\"),c=t(\"./lib/trim-leaves\");function u(t,e){for(var r=new Array(t),n=0;n0&amp;&amp;e[i]===r[0]))return 1;a=t[i-1]}for(var s=1;a;){var l=a.key,c=n(r,l[0],l[1]);if(l[0][0]0))return 0;s=-1,a=a.right}else if(c&gt;0)a=a.left;else{if(!(c&lt;0))return 0;s=1,a=a.right}}return s}}(v.slabs,v.coordinates);return 0===a.length?y:function(t,e){return function(r){return t(r[0],r[1])?0:e(r)}}(l(a),y)};var n=t(\"robust-orientation\")[3],i=t(\"slab-decomposition\"),a=t(\"interval-tree-1d\"),o=t(\"binary-search-bounds\");function s(){return!0}function l(t){for(var e={},r=0;r=c?(k=1,y=c+2*h+d):y=h*(k=-h/c)+d):(k=0,p&gt;=0?(A=0,y=d):-p&gt;=f?(A=1,y=f+2*p+d):y=p*(A=-p/f)+d);else if(A&lt;0)A=0,h&gt;=0?(k=0,y=d):-h&gt;=c?(k=1,y=c+2*h+d):y=h*(k=-h/c)+d;else{var M=1/T;y=(k*=M)*(c*k+u*(A*=M)+2*h)+A*(u*k+f*A+2*p)+d}else k&lt;0?(b=f+p)&gt;(x=u+h)?(_=b-x)&gt;=(w=c-2*u+f)?(k=1,A=0,y=c+2*h+d):y=(k=_/w)*(c*k+u*(A=1-k)+2*h)+A*(u*k+f*A+2*p)+d:(k=0,b&lt;=0?(A=1,y=f+2*p+d):p&gt;=0?(A=0,y=d):y=p*(A=-p/f)+d):A&lt;0?(b=c+h)&gt;(x=u+p)?(_=b-x)&gt;=(w=c-2*u+f)?(A=1,k=0,y=f+2*p+d):y=(k=1-(A=_/w))*(c*k+u*A+2*h)+A*(u*k+f*A+2*p)+d:(A=0,b&lt;=0?(k=1,y=c+2*h+d):h&gt;=0?(k=0,y=d):y=h*(k=-h/c)+d):(_=f+p-u-h)&lt;=0?(k=0,A=1,y=f+2*p+d):_&gt;=(w=c-2*u+f)?(k=1,A=0,y=c+2*h+d):y=(k=_/w)*(c*k+u*(A=1-k)+2*h)+A*(u*k+f*A+2*p)+d;var S=1-k-A;for(l=0;l0){var c=t[r-1];if(0===n(s,c)&amp;&amp;a(c)!==l){r-=1;continue}}t[r++]=s}}return t.length=r,t}},{\"cell-orientation\":47,\"compare-cell\":56,\"compare-oriented-cell\":57}],277:[function(t,e,r){ /*!  * repeat-string   *  * Copyright (c) 2014-2015, Jon Schlinkert.  * Licensed under the MIT License.  */ \"use strict\";var n,i=\"\";e.exports=function(t,e){if(\"string\"!=typeof t)throw new TypeError(\"expected a string\");if(1===e)return t;if(2===e)return t+t;var r=t.length*e;if(n!==t||void 0===n)n=t,i=\"\";else if(i.length&gt;=r)return i.substr(0,r);for(;r&gt;i.length&amp;&amp;e&gt;1;)1&amp;e&amp;&amp;(i+=t),e&gt;&gt;=1,t+=t;return i=(i+=t).substr(0,r)}},{}],278:[function(t,e,r){(function(t){(function(){e.exports=t.performance&amp;&amp;t.performance.now?function(){return performance.now()}:Date.now||function(){return+new Date}}).call(this)}).call(this,void 0!==n?n:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],279:[function(t,e,r){\"use strict\";e.exports=function(t){for(var e=t.length,r=t[t.length-1],n=e,i=e-2;i&gt;=0;--i){var a=r,o=t[i];(l=o-((r=a+o)-a))&amp;&amp;(t[--n]=r,r=l)}var s=0;for(i=n;i0){if(a&lt;=0)return o;n=i+a}else{if(!(i&lt;0))return o;if(a&gt;=0)return o;n=-(i+a)}var s=33306690738754716e-32*n;return o&gt;=s||o&lt;=-s?o:f(t,e,r)},function(t,e,r,n){var i=t[0]-n[0],a=e[0]-n[0],o=r[0]-n[0],s=t[1]-n[1],l=e[1]-n[1],c=r[1]-n[1],u=t[2]-n[2],f=e[2]-n[2],p=r[2]-n[2],d=a*c,m=o*l,g=o*s,v=i*c,y=i*l,x=a*s,b=u*(d-m)+f*(g-v)+p*(y-x),_=7771561172376103e-31*((Math.abs(d)+Math.abs(m))*Math.abs(u)+(Math.abs(g)+Math.abs(v))*Math.abs(f)+(Math.abs(y)+Math.abs(x))*Math.abs(p));return b&gt;_||-b&gt;_?b:h(t,e,r,n)}];function d(t){var e=p[t.length];return e||(e=p[t.length]=u(t.length)),e.apply(void 0,t)}function m(t,e,r,n,i,a,o){return function(e,r,s,l,c){switch(arguments.length){case 0:case 1:return 0;case 2:return n(e,r);case 3:return i(e,r,s);case 4:return a(e,r,s,l);case 5:return o(e,r,s,l,c)}for(var u=new Array(arguments.length),f=0;f0&amp;&amp;o&gt;0||a&lt;0&amp;&amp;o&lt;0)return!1;var s=n(r,t,e),l=n(i,t,e);if(s&gt;0&amp;&amp;l&gt;0||s&lt;0&amp;&amp;l&lt;0)return!1;if(0===a&amp;&amp;0===o&amp;&amp;0===s&amp;&amp;0===l)return function(t,e,r,n){for(var i=0;i&lt;2;++i){var a=t[i],o=e[i],s=Math.min(a,o),l=Math.max(a,o),c=r[i],u=n[i],f=Math.min(c,u);if(Math.max(c,u)=n?(i=f,(l+=1)=n?(i=f,(l+=1)&gt;1,c=e[2*l+1];if(c===a)return l;a&gt;1,c=e[2*l+1];if(c===a)return l;a&gt;1,c=e[2*l+1];if(c===a)return l;a&gt;1,s=a(t[o],e);s&lt;=0?(0===s&amp;&amp;(i=o),r=o+1):s&gt;0&amp;&amp;(n=o-1)}return i}function u(t,e){for(var r=new Array(t.length),i=0,o=r.length;i=t.length||0!==a(t[g],s)););}return r}function f(t,e){if(e&lt;0)return[];for(var r=[],i=(1&lt;&gt;&gt;u&amp;1&amp;&amp;c.push(i[u]);e.push(c)}return s(e)},r.skeleton=f,r.boundary=function(t){for(var e=[],r=0,n=t.length;r&gt;1:(t&gt;&gt;1)-1}function x(t){for(var e=v(t);;){var r=e,n=2*t+1,i=2*(t+1),a=t;if(n0;){var r=y(t);if(r&gt;=0)if(e0){var t=k[0];return g(0,M-1),M-=1,x(0),t}return-1}function w(t,e){var r=k[t];return c[r]===e?t:(c[r]=-1/0,b(t),_(),c[r]=e,b((M+=1)-1))}function T(t){if(!u[t]){u[t]=!0;var e=s[t],r=l[t];s[r]&gt;=0&amp;&amp;(s[r]=e),l[e]&gt;=0&amp;&amp;(l[e]=r),A[e]&gt;=0&amp;&amp;w(A[e],m(e)),A[r]&gt;=0&amp;&amp;w(A[r],m(r))}}var k=[],A=new Array(a);for(f=0;f&gt;1;f&gt;=0;--f)x(f);for(;;){var S=_();if(S&lt;0||c[S]&gt;r)break;T(S)}var E=[];for(f=0;f=0&amp;&amp;r&gt;=0&amp;&amp;e!==r){var n=A[e],i=A[r];n!==i&amp;&amp;C.push([n,i])}})),i.unique(i.normalize(C)),{positions:E,edges:C}};var n=t(\"robust-orientation\"),i=t(\"simplicial-complex\")},{\"robust-orientation\":284,\"simplicial-complex\":295}],298:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,a,o,s;if(e[0][0]e[1][0]))return i(e,t);r=e[1],a=e[0]}if(t[0][0]t[1][0]))return-i(t,e);o=t[1],s=t[0]}var l=n(r,a,s),c=n(r,a,o);if(l&lt;0){if(c&lt;=0)return l}else if(l&gt;0){if(c&gt;=0)return l}else if(c)return c;if(l=n(s,o,a),c=n(s,o,r),l&lt;0){if(c&lt;=0)return l}else if(l&gt;0){if(c&gt;=0)return l}else if(c)return c;return a[0]-s[0]};var n=t(\"robust-orientation\");function i(t,e){var r,i,a,o;if(e[0][0]e[1][0])){var s=Math.min(t[0][1],t[1][1]),l=Math.max(t[0][1],t[1][1]),c=Math.min(e[0][1],e[1][1]),u=Math.max(e[0][1],e[1][1]);return lu?s-u:l-u}r=e[1],i=e[0]}t[0][1]0)if(e[0]!==o[1][0])r=t,t=t.right;else{if(l=c(t.right,e))return l;t=t.left}else{if(e[0]!==o[1][0])return t;var l;if(l=c(t.right,e))return l;t=t.left}}return r}function u(t,e,r,n){this.y=t,this.index=e,this.start=r,this.closed=n}function f(t,e,r,n){this.x=t,this.segment=e,this.create=r,this.index=n}s.prototype.castUp=function(t){var e=n.le(this.coordinates,t[0]);if(e&lt;0)return-1;this.slabs[e];var r=c(this.slabs[e],t),i=-1;if(r&amp;&amp;(i=r.value),this.coordinates[e]===t[0]){var s=null;if(r&amp;&amp;(s=r.key),e&gt;0){var u=c(this.slabs[e-1],t);u&amp;&amp;(s?o(u.key,s)&gt;0&amp;&amp;(s=u.key,i=u.value):(i=u.value,s=u.key))}var f=this.horizontal[e];if(f.length&gt;0){var h=n.ge(f,t[1],l);if(h=f.length)return i;p=f[h]}}if(p.start)if(s){var d=a(s[0],s[1],[t[0],p.y]);s[0][0]&gt;s[1][0]&amp;&amp;(d=-d),d&gt;0&amp;&amp;(i=p.index)}else i=p.index;else p.y!==t[1]&amp;&amp;(i=p.index)}}}return i}},{\"./lib/order-segments\":298,\"binary-search-bounds\":31,\"functional-red-black-tree\":69,\"robust-orientation\":284}],300:[function(t,e,r){\"use strict\";var n=t(\"robust-dot-product\"),i=t(\"robust-sum\");function a(t,e){var r=i(n(t,e),[e[e.length-1]]);return r[r.length-1]}function o(t,e,r,n){var i=-e/(n-e);i&lt;0?i=0:i&gt;1&amp;&amp;(i=1);for(var a=1-i,o=t.length,s=new Array(o),l=0;l0||i&gt;0&amp;&amp;u&lt;0){var f=o(s,u,l,i);r.push(f),n.push(f.slice())}u&lt;0?n.push(l.slice()):u&gt;0?r.push(l.slice()):(r.push(l.slice()),n.push(l.slice())),i=u}return{positive:r,negative:n}},e.exports.positive=function(t,e){for(var r=[],n=a(t[t.length-1],e),i=t[t.length-1],s=t[0],l=0;l0||n&gt;0&amp;&amp;c&lt;0)&amp;&amp;r.push(o(i,c,s,n)),c&gt;=0&amp;&amp;r.push(s.slice()),n=c}return r},e.exports.negative=function(t,e){for(var r=[],n=a(t[t.length-1],e),i=t[t.length-1],s=t[0],l=0;l0||n&gt;0&amp;&amp;c&lt;0)&amp;&amp;r.push(o(i,c,s,n)),c&lt;=0&amp;&amp;r.push(s.slice()),n=c}return r}},{\"robust-dot-product\":281,\"robust-sum\":289}],301:[function(t,e,r){!function(){\"use strict\";var t={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\\x25]+/,modulo:/^\\x25{2}/,placeholder:/^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\\d]*)/i,key_access:/^\\.([a-z_][a-z_\\d]*)/i,index_access:/^\\[(\\d+)\\]/,sign:/^[+-]/};function e(t){return i(o(t),arguments)}function n(t,r){return e.apply(null,[t].concat(r||[]))}function i(r,n){var i,a,o,s,l,c,u,f,h,p=1,d=r.length,m=\"\";for(a=0;a=0),s.type){case\"b\":i=parseInt(i,10).toString(2);break;case\"c\":i=String.fromCharCode(parseInt(i,10));break;case\"d\":case\"i\":i=parseInt(i,10);break;case\"j\":i=JSON.stringify(i,null,s.width?parseInt(s.width):0);break;case\"e\":i=s.precision?parseFloat(i).toExponential(s.precision):parseFloat(i).toExponential();break;case\"f\":i=s.precision?parseFloat(i).toFixed(s.precision):parseFloat(i);break;case\"g\":i=s.precision?String(Number(i.toPrecision(s.precision))):parseFloat(i);break;case\"o\":i=(parseInt(i,10)&gt;&gt;&gt;0).toString(8);break;case\"s\":i=String(i),i=s.precision?i.substring(0,s.precision):i;break;case\"t\":i=String(!!i),i=s.precision?i.substring(0,s.precision):i;break;case\"T\":i=Object.prototype.toString.call(i).slice(8,-1).toLowerCase(),i=s.precision?i.substring(0,s.precision):i;break;case\"u\":i=parseInt(i,10)&gt;&gt;&gt;0;break;case\"v\":i=i.valueOf(),i=s.precision?i.substring(0,s.precision):i;break;case\"x\":i=(parseInt(i,10)&gt;&gt;&gt;0).toString(16);break;case\"X\":i=(parseInt(i,10)&gt;&gt;&gt;0).toString(16).toUpperCase()}t.json.test(s.type)?m+=i:(!t.number.test(s.type)||f&amp;&amp;!s.sign?h=\"\":(h=f?\"+\":\"-\",i=i.toString().replace(t.sign,\"\")),c=s.pad_char?\"0\"===s.pad_char?\"0\":s.pad_char.charAt(1):\" \",u=s.width-(h+i).length,l=s.width&amp;&amp;u&gt;0?c.repeat(u):\"\",m+=s.align?h+i+l:\"0\"===c?h+l+i:l+h+i)}return m}var a=Object.create(null);function o(e){if(a[e])return a[e];for(var r,n=e,i=[],o=0;n;){if(null!==(r=t.text.exec(n)))i.push(r[0]);else if(null!==(r=t.modulo.exec(n)))i.push(\"%\");else{if(null===(r=t.placeholder.exec(n)))throw new SyntaxError(\"[sprintf] unexpected placeholder\");if(r[2]){o|=1;var s=[],l=r[2],c=[];if(null===(c=t.key.exec(l)))throw new SyntaxError(\"[sprintf] failed to parse named argument key\");for(s.push(c[1]);\"\"!==(l=l.substring(c[0].length));)if(null!==(c=t.key_access.exec(l)))s.push(c[1]);else{if(null===(c=t.index_access.exec(l)))throw new SyntaxError(\"[sprintf] failed to parse named argument key\");s.push(c[1])}r[2]=s}else o|=2;if(3===o)throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\");i.push({placeholder:r[0],param_no:r[1],keys:r[2],sign:r[3],pad_char:r[4],align:r[5],width:r[6],precision:r[7],type:r[8]})}n=n.substring(r[0].length)}return a[e]=i}void 0!==r&amp;&amp;(r.sprintf=e,r.vsprintf=n),\"undefined\"!=typeof window&amp;&amp;(window.sprintf=e,window.vsprintf=n)}()},{}],302:[function(t,e,r){\"use strict\";e.exports=function(t,e){if(t.dimension&lt;=0)return{positions:[],cells:[]};if(1===t.dimension)return function(t,e){for(var r=i(t,e),n=r.length,a=new Array(n),o=new Array(n),s=0;sn|0},vertex:function(t,e,r,n,i,a,o,s,l,c,u,f,h){var p=(o&lt;&lt;0)+(s&lt;&lt;1)+(l&lt;&lt;2)+(c&lt;&lt;3)|0;if(0!==p&amp;&amp;15!==p)switch(p){case 0:u.push([t-.5,e-.5]);break;case 1:u.push([t-.25-.25*(n+r-2*h)/(r-n),e-.25-.25*(i+r-2*h)/(r-i)]);break;case 2:u.push([t-.75-.25*(-n-r+2*h)/(n-r),e-.25-.25*(a+n-2*h)/(n-a)]);break;case 3:u.push([t-.5,e-.5-.5*(i+r+a+n-4*h)/(r-i+n-a)]);break;case 4:u.push([t-.25-.25*(a+i-2*h)/(i-a),e-.75-.25*(-i-r+2*h)/(i-r)]);break;case 5:u.push([t-.5-.5*(n+r+a+i-4*h)/(r-n+i-a),e-.5]);break;case 6:u.push([t-.5-.25*(-n-r+a+i)/(n-r+i-a),e-.5-.25*(-i-r+a+n)/(i-r+n-a)]);break;case 7:u.push([t-.75-.25*(a+i-2*h)/(i-a),e-.75-.25*(a+n-2*h)/(n-a)]);break;case 8:u.push([t-.75-.25*(-a-i+2*h)/(a-i),e-.75-.25*(-a-n+2*h)/(a-n)]);break;case 9:u.push([t-.5-.25*(n+r+-a-i)/(r-n+a-i),e-.5-.25*(i+r+-a-n)/(r-i+a-n)]);break;case 10:u.push([t-.5-.5*(-n-r-a-i+4*h)/(n-r+a-i),e-.5]);break;case 11:u.push([t-.25-.25*(-a-i+2*h)/(a-i),e-.75-.25*(i+r-2*h)/(r-i)]);break;case 12:u.push([t-.5,e-.5-.5*(-i-r-a-n+4*h)/(i-r+a-n)]);break;case 13:u.push([t-.75-.25*(n+r-2*h)/(r-n),e-.25-.25*(-a-n+2*h)/(a-n)]);break;case 14:u.push([t-.25-.25*(-n-r+2*h)/(n-r),e-.25-.25*(-i-r+2*h)/(i-r)]);break;case 15:u.push([t-.5,e-.5])}},cell:function(t,e,r,n,i,a,o,s,l){i?s.push([t,e]):s.push([e,t])}});return function(t,e){var r=[],i=[];return n(t,r,i,e),{positions:r,cells:i}}}};var o={}},{\"ndarray-extract-contour\":251,\"zero-crossings\":318}],303:[function(t,e,r){(function(r){(function(){\"use strict\";e.exports=function t(e,r,i){i=i||{};var o=a[e];o||(o=a[e]={\" \":{data:new Float32Array(0),shape:.2}});var s=o[r];if(!s)if(r.length&lt;=1||!/\\d/.test(r))s=o[r]=function(t){for(var e=t.cells,r=t.positions,n=new Float32Array(6*e.length),i=0,a=0,o=0;o0&amp;&amp;(f+=.02);var p=new Float32Array(u),d=0,m=-.5*f;for(h=0;hMath.max(r,n)?i[2]=1:r&gt;Math.max(e,n)?i[0]=1:i[1]=1;for(var a=0,o=0,l=0;l&lt;3;++l)a+=t[l]*t[l],o+=i[l]*t[l];for(l=0;l&lt;3;++l)i[l]-=o/a*t[l];return s(i,i),i}function h(t,e,r,i,a,o,s,l){this.center=n(r),this.up=n(i),this.right=n(a),this.radius=n([o]),this.angle=n([s,l]),this.angle.bounds=[[-1/0,-Math.PI/2],[1/0,Math.PI/2]],this.setDistanceLimits(t,e),this.computedCenter=this.center.curve(0),this.computedUp=this.up.curve(0),this.computedRight=this.right.curve(0),this.computedRadius=this.radius.curve(0),this.computedAngle=this.angle.curve(0),this.computedToward=[0,0,0],this.computedEye=[0,0,0],this.computedMatrix=new Array(16);for(var c=0;c&lt;16;++c)this.computedMatrix[c]=.5;this.recalcMatrix(0)}var p=h.prototype;p.setDistanceLimits=function(t,e){t=t&gt;0?Math.log(t):-1/0,e=e&gt;0?Math.log(e):1/0,e=Math.max(e,t),this.radius.bounds[0][0]=t,this.radius.bounds[1][0]=e},p.getDistanceLimits=function(t){var e=this.radius.bounds[0];return t?(t[0]=Math.exp(e[0][0]),t[1]=Math.exp(e[1][0]),t):[Math.exp(e[0][0]),Math.exp(e[1][0])]},p.recalcMatrix=function(t){this.center.curve(t),this.up.curve(t),this.right.curve(t),this.radius.curve(t),this.angle.curve(t);for(var e=this.computedUp,r=this.computedRight,n=0,i=0,a=0;a&lt;3;++a)i+=e[a]*r[a],n+=e[a]*e[a];var l=Math.sqrt(n),u=0;for(a=0;a&lt;3;++a)r[a]-=e[a]*i/n,u+=r[a]*r[a],e[a]/=l;var f=Math.sqrt(u);for(a=0;a&lt;3;++a)r[a]/=f;var h=this.computedToward;o(h,e,r),s(h,h);var p=Math.exp(this.computedRadius[0]),d=this.computedAngle[0],m=this.computedAngle[1],g=Math.cos(d),v=Math.sin(d),y=Math.cos(m),x=Math.sin(m),b=this.computedCenter,_=g*y,w=v*y,T=x,k=-g*x,A=-v*x,M=y,S=this.computedEye,E=this.computedMatrix;for(a=0;a&lt;3;++a){var L=_*r[a]+w*h[a]+T*e[a];E[4*a+1]=k*r[a]+A*h[a]+M*e[a],E[4*a+2]=L,E[4*a+3]=0}var C=E[1],P=E[5],I=E[9],O=E[2],z=E[6],D=E[10],R=P*D-I*z,F=I*O-C*D,B=C*z-P*O,N=c(R,F,B);R/=N,F/=N,B/=N,E[0]=R,E[4]=F,E[8]=B;for(a=0;a&lt;3;++a)S[a]=b[a]+E[2+4*a]*p;for(a=0;a&lt;3;++a){u=0;for(var j=0;j&lt;3;++j)u+=E[a+4*j]*S[j];E[12+a]=-u}E[15]=1},p.getMatrix=function(t,e){this.recalcMatrix(t);var r=this.computedMatrix;if(e){for(var n=0;n&lt;16;++n)e[n]=r[n];return e}return r};var d=[0,0,0];p.rotate=function(t,e,r,n){if(this.angle.move(t,e,r),n){this.recalcMatrix(t);var i=this.computedMatrix;d[0]=i[2],d[1]=i[6],d[2]=i[10];for(var o=this.computedUp,s=this.computedRight,l=this.computedToward,c=0;c&lt;3;++c)i[4*c]=o[c],i[4*c+1]=s[c],i[4*c+2]=l[c];a(i,i,n,d);for(c=0;c&lt;3;++c)o[c]=i[4*c],s[c]=i[4*c+1];this.up.set(t,o[0],o[1],o[2]),this.right.set(t,s[0],s[1],s[2])}},p.pan=function(t,e,r,n){e=e||0,r=r||0,n=n||0,this.recalcMatrix(t);var i=this.computedMatrix,a=(Math.exp(this.computedRadius[0]),i[1]),o=i[5],s=i[9],l=c(a,o,s);a/=l,o/=l,s/=l;var u=i[0],f=i[4],h=i[8],p=u*a+f*o+h*s,d=c(u-=a*p,f-=o*p,h-=s*p),m=(u/=d)*e+a*r,g=(f/=d)*e+o*r,v=(h/=d)*e+s*r;this.center.move(t,m,g,v);var y=Math.exp(this.computedRadius[0]);y=Math.max(1e-4,y+n),this.radius.set(t,Math.log(y))},p.translate=function(t,e,r,n){this.center.move(t,e||0,r||0,n||0)},p.setMatrix=function(t,e,r,n){var a=1;\"number\"==typeof r&amp;&amp;(a=0|r),(a&lt;0||a&gt;3)&amp;&amp;(a=1);var o=(a+2)%3;e||(this.recalcMatrix(t),e=this.computedMatrix);var s=e[a],l=e[a+4],f=e[a+8];if(n){var h=Math.abs(s),p=Math.abs(l),d=Math.abs(f),m=Math.max(h,p,d);h===m?(s=s&lt;0?-1:1,l=f=0):d===m?(f=f&lt;0?-1:1,s=l=0):(l=l&lt;0?-1:1,s=f=0)}else{var g=c(s,l,f);s/=g,l/=g,f/=g}var v,y,x=e[o],b=e[o+4],_=e[o+8],w=x*s+b*l+_*f,T=c(x-=s*w,b-=l*w,_-=f*w),k=l*(_/=T)-f*(b/=T),A=f*(x/=T)-s*_,M=s*b-l*x,S=c(k,A,M);if(k/=S,A/=S,M/=S,this.center.jump(t,q,G,Y),this.radius.idle(t),this.up.jump(t,s,l,f),this.right.jump(t,x,b,_),2===a){var E=e[1],L=e[5],C=e[9],P=E*x+L*b+C*_,I=E*k+L*A+C*M;v=R&lt;0?-Math.PI/2:Math.PI/2,y=Math.atan2(I,P)}else{var O=e[2],z=e[6],D=e[10],R=O*s+z*l+D*f,F=O*x+z*b+D*_,B=O*k+z*A+D*M;v=Math.asin(u(R)),y=Math.atan2(B,F)}this.angle.jump(t,y,v),this.recalcMatrix(t);var N=e[2],j=e[6],U=e[10],V=this.computedMatrix;i(V,e);var H=V[15],q=V[12]/H,G=V[13]/H,Y=V[14]/H,W=Math.exp(this.computedRadius[0]);this.center.jump(t,q-N*W,G-j*W,Y-U*W)},p.lastT=function(){return Math.max(this.center.lastT(),this.up.lastT(),this.right.lastT(),this.radius.lastT(),this.angle.lastT())},p.idle=function(t){this.center.idle(t),this.up.idle(t),this.right.idle(t),this.radius.idle(t),this.angle.idle(t)},p.flush=function(t){this.center.flush(t),this.up.flush(t),this.right.flush(t),this.radius.flush(t),this.angle.flush(t)},p.setDistance=function(t,e){e&gt;0&amp;&amp;this.radius.set(t,Math.log(e))},p.lookAt=function(t,e,r,n){this.recalcMatrix(t),e=e||this.computedEye,r=r||this.computedCenter;var i=(n=n||this.computedUp)[0],a=n[1],o=n[2],s=c(i,a,o);if(!(s&lt;1e-6)){i/=s,a/=s,o/=s;var l=e[0]-r[0],f=e[1]-r[1],h=e[2]-r[2],p=c(l,f,h);if(!(p&lt;1e-6)){l/=p,f/=p,h/=p;var d=this.computedRight,m=d[0],g=d[1],v=d[2],y=i*m+a*g+o*v,x=c(m-=y*i,g-=y*a,v-=y*o);if(!(x&lt;.01&amp;&amp;(x=c(m=a*h-o*f,g=o*l-i*h,v=i*f-a*l))&lt;1e-6)){m/=x,g/=x,v/=x,this.up.set(t,i,a,o),this.right.set(t,m,g,v),this.center.set(t,r[0],r[1],r[2]),this.radius.set(t,Math.log(p));var b=a*v-o*g,_=o*m-i*v,w=i*g-a*m,T=c(b,_,w),k=i*l+a*f+o*h,A=m*l+g*f+v*h,M=(b/=T)*l+(_/=T)*f+(w/=T)*h,S=Math.asin(u(k)),E=Math.atan2(M,A),L=this.angle._state,C=L[L.length-1],P=L[L.length-2];C%=2*Math.PI;var I=Math.abs(C+2*Math.PI-E),O=Math.abs(C-E),z=Math.abs(C-2*Math.PI-E);I0?r.pop():new ArrayBuffer(t)}function d(t){return new Uint8Array(p(t),0,t)}function m(t){return new Uint16Array(p(2*t),0,t)}function g(t){return new Uint32Array(p(4*t),0,t)}function v(t){return new Int8Array(p(t),0,t)}function y(t){return new Int16Array(p(2*t),0,t)}function x(t){return new Int32Array(p(4*t),0,t)}function b(t){return new Float32Array(p(4*t),0,t)}function _(t){return new Float64Array(p(8*t),0,t)}function w(t){return o?new Uint8ClampedArray(p(t),0,t):d(t)}function T(t){return s?new BigUint64Array(p(8*t),0,t):null}function k(t){return l?new BigInt64Array(p(8*t),0,t):null}function A(t){return new DataView(p(t),0,t)}function M(t){t=n.nextPow2(t);var e=n.log2(t),r=f[e];return r.length&gt;0?r.pop():new a(t)}r.free=function(t){if(a.isBuffer(t))f[n.log2(t.length)].push(t);else{if(\"[object ArrayBuffer]\"!==Object.prototype.toString.call(t)&amp;&amp;(t=t.buffer),!t)return;var e=t.length||t.byteLength,r=0|n.log2(e);u[r].push(t)}},r.freeUint8=r.freeUint16=r.freeUint32=r.freeBigUint64=r.freeInt8=r.freeInt16=r.freeInt32=r.freeBigInt64=r.freeFloat32=r.freeFloat=r.freeFloat64=r.freeDouble=r.freeUint8Clamped=r.freeDataView=function(t){h(t.buffer)},r.freeArrayBuffer=h,r.freeBuffer=function(t){f[n.log2(t.length)].push(t)},r.malloc=function(t,e){if(void 0===e||\"arraybuffer\"===e)return p(t);switch(e){case\"uint8\":return d(t);case\"uint16\":return m(t);case\"uint32\":return g(t);case\"int8\":return v(t);case\"int16\":return y(t);case\"int32\":return x(t);case\"float\":case\"float32\":return b(t);case\"double\":case\"float64\":return _(t);case\"uint8_clamped\":return w(t);case\"bigint64\":return k(t);case\"biguint64\":return T(t);case\"buffer\":return M(t);case\"data\":case\"dataview\":return A(t);default:return null}return null},r.mallocArrayBuffer=p,r.mallocUint8=d,r.mallocUint16=m,r.mallocUint32=g,r.mallocInt8=v,r.mallocInt16=y,r.mallocInt32=x,r.mallocFloat32=r.mallocFloat=b,r.mallocFloat64=r.mallocDouble=_,r.mallocUint8Clamped=w,r.mallocBigUint64=T,r.mallocBigInt64=k,r.mallocDataView=A,r.mallocBuffer=M,r.clearCache=function(){for(var t=0;t&lt;32;++t)c.UINT8[t].length=0,c.UINT16[t].length=0,c.UINT32[t].length=0,c.INT8[t].length=0,c.INT16[t].length=0,c.INT32[t].length=0,c.FLOAT[t].length=0,c.DOUBLE[t].length=0,c.BIGUINT64[t].length=0,c.BIGINT64[t].length=0,c.UINT8C[t].length=0,u[t].length=0,f[t].length=0}}).call(this)}).call(this,void 0!==n?n:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"bit-twiddle\":32,buffer:3,dup:65}],309:[function(t,e,r){\"use strict\";function n(t){this.roots=new Array(t),this.ranks=new Array(t);for(var e=0;e0&amp;&amp;(a=n.size),n.lineSpacing&amp;&amp;n.lineSpacing&gt;0&amp;&amp;(o=n.lineSpacing),n.styletags&amp;&amp;n.styletags.breaklines&amp;&amp;(s.breaklines=!!n.styletags.breaklines),n.styletags&amp;&amp;n.styletags.bolds&amp;&amp;(s.bolds=!!n.styletags.bolds),n.styletags&amp;&amp;n.styletags.italics&amp;&amp;(s.italics=!!n.styletags.italics),n.styletags&amp;&amp;n.styletags.subscripts&amp;&amp;(s.subscripts=!!n.styletags.subscripts),n.styletags&amp;&amp;n.styletags.superscripts&amp;&amp;(s.superscripts=!!n.styletags.superscripts));return r.font=[n.fontStyle,n.fontVariant,n.fontWeight,a+\"px\",n.font].filter((function(t){return t})).join(\" \"),r.textAlign=\"start\",r.textBaseline=\"alphabetic\",r.direction=\"ltr\",h(function(t,e,r,n,a,o){r=r.replace(/\\n/g,\"\"),r=!0===o.breaklines?r.replace(/\\/g,\"\\n\"):r.replace(/\\/g,\" \");var s=\"\",l=[];for(p=0;p-1?parseInt(t[1+i]):0,l=a&gt;-1?parseInt(r[1+a]):0;s!==l&amp;&amp;(n=n.replace(S(),\"?px \"),g*=Math.pow(.75,l-s),n=n.replace(\"?px \",S())),m+=.25*x*(l-s)}if(!0===o.superscripts){var c=t.indexOf(\"+\"),u=r.indexOf(\"+\"),f=c&gt;-1?parseInt(t[1+c]):0,h=u&gt;-1?parseInt(r[1+u]):0;f!==h&amp;&amp;(n=n.replace(S(),\"?px \"),g*=Math.pow(.75,h-f),n=n.replace(\"?px \",S())),m-=.25*x*(h-f)}if(!0===o.bolds){var p=t.indexOf(\"b|\")&gt;-1,d=r.indexOf(\"b|\")&gt;-1;!p&amp;&amp;d&amp;&amp;(n=v?n.replace(\"italic \",\"italic bold \"):\"bold \"+n),p&amp;&amp;!d&amp;&amp;(n=n.replace(\"bold \",\"\"))}if(!0===o.italics){var v=t.indexOf(\"i|\")&gt;-1,y=r.indexOf(\"i|\")&gt;-1;!v&amp;&amp;y&amp;&amp;(n=\"italic \"+n),v&amp;&amp;!y&amp;&amp;(n=n.replace(\"italic \",\"\"))}e.font=n}for(h=0;h\",a=\"\",o=i.length,s=a.length,l=\"+\"===e[0]||\"-\"===e[0],c=0,u=-s;c&gt;-1&amp;&amp;-1!==(c=r.indexOf(i,c))&amp;&amp;-1!==(u=r.indexOf(a,c+o))&amp;&amp;!(u&lt;=c);){for(var f=c;f=u)n[f]=null,r=r.substr(0,f)+\" \"+r.substr(f+1);else if(null!==n[f]){var h=n[f].indexOf(e[0]);-1===h?n[f]+=e:l&amp;&amp;(n[f]=n[f].substr(0,h+1)+(1+parseInt(n[f][h+1]))+n[f].substr(h+2))}var p=c+o,d=r.substr(p,u-p).indexOf(i);c=-1!==d?d:u+s}return n}function u(t,e){var r=n(t,128);return e?a(r.cells,r.positions,.25):{edges:r.cells,positions:r.positions}}function f(t,e,r,n){var i=u(t,n),a=function(t,e,r){for(var n=e.textAlign||\"start\",i=e.textBaseline||\"alphabetic\",a=[1&lt;&lt;30,1&lt;&lt;30],o=[0,0],s=t.length,l=0;l=0?e[a]:i}))},has___:{value:y((function(e){var n=v(e);return n?r in n:t.indexOf(e)&gt;=0}))},set___:{value:y((function(n,i){var a,o=v(n);return o?o[r]=i:(a=t.indexOf(n))&gt;=0?e[a]=i:(a=t.length,e[a]=i,t[a]=n),this}))},delete___:{value:y((function(n){var i,a,o=v(n);return o?r in o&amp;&amp;delete o[r]:!((i=t.indexOf(n))&lt;0)&amp;&amp;(a=t.length-1,t[i]=void 0,e[i]=e[a],t[i]=t[a],t.length=a,e.length=a,!0)}))}})};d.prototype=Object.create(Object.prototype,{get:{value:function(t,e){return this.get___(t,e)},writable:!0,configurable:!0},has:{value:function(t){return this.has___(t)},writable:!0,configurable:!0},set:{value:function(t,e){return this.set___(t,e)},writable:!0,configurable:!0},delete:{value:function(t){return this.delete___(t)},writable:!0,configurable:!0}}),\"function\"==typeof r?function(){function n(){this instanceof d||x();var e,n=new r,i=void 0,a=!1;return e=t?function(t,e){return n.set(t,e),n.has(t)||(i||(i=new d),i.set(t,e)),this}:function(t,e){if(a)try{n.set(t,e)}catch(r){i||(i=new d),i.set___(t,e)}else n.set(t,e);return this},Object.create(d.prototype,{get___:{value:y((function(t,e){return i?n.has(t)?n.get(t):i.get___(t,e):n.get(t,e)}))},has___:{value:y((function(t){return n.has(t)||!!i&amp;&amp;i.has___(t)}))},set___:{value:y(e)},delete___:{value:y((function(t){var e=!!n.delete(t);return i&amp;&amp;i.delete___(t)||e}))},permitHostObjects___:{value:y((function(t){if(t!==m)throw new Error(\"bogus call to permitHostObjects___\");a=!0}))}})}t&amp;&amp;\"undefined\"!=typeof Proxy&amp;&amp;(Proxy=void 0),n.prototype=d.prototype,e.exports=n,Object.defineProperty(WeakMap.prototype,\"constructor\",{value:WeakMap,enumerable:!1,configurable:!0,writable:!0})}():(\"undefined\"!=typeof Proxy&amp;&amp;(Proxy=void 0),e.exports=d)}function m(t){t.permitHostObjects___&amp;&amp;t.permitHostObjects___(m)}function g(t){return!(\"weakmap:\"==t.substr(0,\"weakmap:\".length)&amp;&amp;\"___\"===t.substr(t.length-3))}function v(t){if(t!==Object(t))throw new TypeError(\"Not an object: \"+t);var e=t[l];if(e&amp;&amp;e.key===t)return e;if(s(t)){e={key:t};try{return o(t,l,{value:e,writable:!1,enumerable:!1,configurable:!1}),e}catch(t){return}}}function y(t){return t.prototype=null,Object.freeze(t)}function x(){h||\"undefined\"==typeof console||(h=!0,console.warn(\"WeakMap should be invoked as new WeakMap(), not WeakMap(). This will be an error in the future.\"))}}()},{}],314:[function(t,e,r){var n=t(\"./hidden-store.js\");e.exports=function(){var t={};return function(e){if((\"object\"!=typeof e||null===e)&amp;&amp;\"function\"!=typeof e)throw new Error(\"Weakmap-shim: Key must be object\");var r=e.valueOf(t);return r&amp;&amp;r.identity===t?r:n(e,t)}}},{\"./hidden-store.js\":315}],315:[function(t,e,r){e.exports=function(t,e){var r={identity:e},n=t.valueOf;return Object.defineProperty(t,\"valueOf\",{value:function(t){return t!==e?n.apply(this,arguments):r},writable:!0}),r}},{}],316:[function(t,e,r){var n=t(\"./create-store.js\");e.exports=function(){var t=n();return{get:function(e,r){var n=t(e);return n.hasOwnProperty(\"value\")?n.value:r},set:function(e,r){return t(e).value=r,this},has:function(e){return\"value\"in t(e)},delete:function(e){return delete t(e).value}}}},{\"./create-store.js\":314}],317:[function(t,e,r){\"use strict\";var n,i=function(){return function(t,e,r,n,i,a){var o=t[0],s=r[0],l=[0],c=s;n|=0;var u=0,f=s;for(u=0;u=0!=p&gt;=0&amp;&amp;i.push(l[0]+.5+.5*(h+p)/(h-p)),n+=f,++l[0]}}};e.exports=(n={funcName:{funcName:\"zeroCrossings\"}.funcName},function(t){var e={};return function(r,n,i){var a=r.dtype,o=r.order,s=[a,o.join()].join(),l=e[s];return l||(e[s]=l=t([a,o])),l(r.shape.slice(0),r.data,r.stride,0|r.offset,n,i)}}(i.bind(void 0,n)))},{}],318:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r=[];return e=+e||0,n(t.hi(t.shape[0]-1),r,e),r};var n=t(\"./lib/zc-core\")},{\"./lib/zc-core\":317}]},{},[6])(6)}))}).call(this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[27])(27)}));         });         require(['plotly'], function(Plotly) {             window._Plotly = Plotly;         });         }         h&gt;   0.089886getElementById('a1af4536-be6f-422a-8b24-f0fa48b7156e'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             132.889999Observer(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             1980-12-17= window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.024751ay || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.017534e.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });                         Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             1980-12-18Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.092492r the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             133.000000emoval of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             1980-12-18moval of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.028992ner = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.000828ner) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });                 x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             1980-12-19learing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             0.098137clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             133.699997osest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });             1980-12-19 x.observe(outputEl, {childList: true}); }}                          })                };                });             0.061029utEl, {childList: true}); }}                          })                };                });             0.005263          })                };                });                                      })                };                });             ...&gt;       ...v&gt;       ...&gt;       ...&gt;       ...   ...&gt;     iv&gt;      2022-12-16der-box-sizing text_cell rendered\" markdown=\"1\"&gt;       134.509995ll\" markdown=\"1\"&gt;       3852.360107_render border-box-sizing rendered_html\" markdown=\"1\"&gt;       2022-12-16yncratic Risk  -0.014579&gt;       -0.011138class=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;     v&gt;      2022-12-19ll\" markdown=\"1\"&gt;       132.369995l_render border-box-sizing rendered_html\" markdown=\"1\"&gt;       3817.659912v&gt;       2022-12-19  -0.015910class=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       -0.009008cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;      class=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;      2022-12-20l_render border-box-sizing rendered_html\" markdown=\"1\"&gt;       132.300003ossibility that an individual or other entity will experience losses due to factors that affect the overall performance of investments in the financial markets. Market risk cannot be eliminated through diversification.  3821.620117 2022-12-20lass=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       -0.000529cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       0.001037order-box-sizing text_cell rendered\" markdown=\"1\"&gt;      class=\"inner_cell\" markdown=\"1\"&gt;      2022-12-21sk, investors and analysts use the value-at-risk (VaR) method. VaR modeling is a statistical risk management method that quantifies a stock or portfolio's potential loss as well as the probability of that potential loss occurring.   135.449997  3878.439941ass=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       2022-12-21ell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       0.023809order-box-sizing text_cell rendered\" markdown=\"1\"&gt;       0.014868cell\" markdown=\"1\"&gt;      class=\"text_cell_render border-box-sizing rendered_html\" markdown=\"1\"&gt;      2022-12-22  132.229996lass=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       3822.389893ll border-box-sizing text_cell rendered\" markdown=\"1\"&gt;       2022-12-22der-box-sizing text_cell rendered\" markdown=\"1\"&gt;       -0.023773ell\" markdown=\"1\"&gt;       -0.014452ll_render border-box-sizing rendered_html\" markdown=\"1\"&gt;     syncratic risk can be thought of as the factors that affect an asset such as the stock and its underlying company at the microeconomic level. It has little or no correlation with risks that reflect larger macroeconomic forces, such as market risk. Some examples of idiosyncratic risk are: - Business risk is an idiosyncratic risk associated with the nature of a business along with its competitive landscape and market. - Operational risk arises when, for example, a machine breaks down, a factory catches fire, or a key employee dies. - Financial risk relates to a particular company's capital structure and financial exposures. - Regulatory/legal risk has to do with the possibility of new laws or regulations that can harm a firm's bottom line or ability to operate freely.    Business risk is an idiosyncratic risk associated with the nature of a business along with its competitive landscape and market. - Operational risk arises when, for example, a machine breaks down, a factory catches fire, or a key employee dies. - Financial risk relates to a particular company's capital structure and financial exposures. - Regulatory/legal risk has to do with the possibility of new laws or regulations that can harm a firm's bottom line or ability to operate freely.  <p>10597 rows \u00d7 5 columns</p> <pre><code>#plot monthly return\napple_snp_month = apple_snp.asfreq(\"M\", method=\"ffill\")\n</code></pre> <pre><code>apple_snp_month.head()\n</code></pre> frame thead th {         text-align: right;     }  Applethead th {         text-align: right;     }  S&amp;P 500ight;     }  Date  Apple_returns\"1\" class=\"dataframe\"&gt;       S&amp;P_returnsdataframe\"&gt;     head&gt;      Date&gt;       Normal Cauchy 1980-12-31      0.118546&gt;       135.759995    1980-12-31/td&gt;       -0.028468/td&gt;       0.003177        1981-01-31td&gt;       0.0981378 129.550003      1981-01-30 -0.054397     -0.005298/td&gt;        1981-02-28 0.092058      131.270004/td&gt;       1981-02-27td&gt;       0.034153        0.008993&gt;        1981-03-31    0.085110        136.000000995 1981-03-31       -0.010101/td&gt;       0.012809 1981-04-30       0.0985711 132.809998/td&gt;       1981-04-30      0.017936&gt;       -0.001804        <pre><code># Plot returns\nfig = make_subplots()\nfig.add_traces(\n    [\n        go.Scatter(y=apple_snp_month[\"S&amp;P_returns\"], x=apple_snp_month.index,opacity=1.0, name=\"S&amp;P\"),\n        go.Scatter(y=apple_snp_month[\"Apple_returns\"], x=apple_snp_month.index,opacity=0.3, name=\"Apple\")\n    ]\n)\n</code></pre> <p>var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}</p> <pre><code>                    })                };                });            &lt;/script&gt;\n</code></pre> <pre><code>fig = px.scatter(apple_snp_month, x=\"S&amp;P_returns\", y=\"Apple_returns\", trendline=\"ols\", trendline_color_override=\"red\")\nfig.update_layout(\n    title=\"Apple vs S&amp;P 500 (Monthly Returns)\",\n    xaxis_title=\"S&amp;P 500 Returns\",\n    yaxis_title=\"Apple Returns\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()\n</code></pre> Apple_returns = 1.33538 * S&amp;P_returns + -0.000617118R20867506401956,-1.776518205382913,-1.4956067727271232,2.152528901374078,-0.7249645769782314,-4.505504890899681,-0.4334724668002077,-1.4100720049115363,0.0017368885797819367,-0.07908960277612587,-7.456845967814729,-0.8160896482120676,0.1259537303448628,1.39577599230542,-0.7682296477808588,-2.0848153529111464,-0.24201581768519453,-0.6353383527018875,-0.4801455056175955,-20.548248892690637,-0.9286094328335633,13.103909594176729,-1.11017221500542,-1.97421360283486,-26.411023696896034,-1.458576399155346,-0.6218727367254377,1.8803558538941698,-3.9020300992752297,-1.7210602768334562,-1.0668412751004999,-8.938862158910641,-1.93838842420153,-1.589258979181296,-2.7190933792555887,-0.4078605039624078,-4.068494065064911,-1.0996234468041102,-2.1402881037226713,3.001546398964175,-0.43029505578810745,-0.6965414537157957,1.426297426629095,5.585403834922594,-1.0239737136546334,-4.490163923376411,4.2245617926612145,0.052226057549350724,0.07372452348025926,-0.4619090860299062,-2.789495585631234,-2.429067814239792,-1.7018019245678295,-1.264000245547373,-3.492357759271874,-0.9149669890778732,-6.125832326014457,-0.022524457240630458,0.3129338130594206,2.824678574969456,-0.7189495356387097,-1.5383421595138658,-4.948642096663438,0.23377898601889857,-2.0320624400247462,-1.4866375584153415,0.17370716492738447,-1.4243797361250716,-5.623237721621026,-1.1090752663144199,-1.8368662304078138,-2.3782187623501456,-1.0900149267272703,-71.3685563037438,0.313585339855448,-2.1072560577529202,-1.5311750761112686,0.1705284443319075,1.1720866766670763,-0.7032763623957599,1.0706870140377198,-2.2410458975029255,-0.38501354076489225,-1.681460387668516,-4.273173981715562,-0.5641316459886763,-1.330864537216517,6.694471168015168,-1.9165949165266367,-1.6065505453470097,0.1841043100034443,-1.621472718330951,1.3859015770135938,-0.4326175004833581,-0.5926315156147273,0.05469892313510072,0.43490429408347286,-0.11071624839905936,-0.6294889562028732,-0.6294300072137887,-1.6006954391618562,11.045485090263863,-0.6277344042262363,5.031731898300926,-0.9419125012698638,9.052825492354787,0.11632535355924256,-1.1630082389772771,6.7378962985683675,-0.3402908781035021,-2.7101951476844155,-0.3698645296364451,-1.9506310029225316,-2.0443425628704697,-0.7713628169944904,-3.448668413508147,-2.7604595211633085,-1.1088202711511361,-13.659730365331686,-0.5492082825687777,-1.5317577980109611,-5.98150008943789,-1.2765075145549165,-1.044583258094694,-29.134006080818878,-0.594718180349757,5.09224797564548,-0.9082026308315572,-4.429085618591827,-1.2848065320997124,3.4424294492175322,-0.9100676466425541,-0.16922569015362454,-18.293974874828905,-0.0556855172714924,1.1158596023392806,-2.2473764204108857,-1.7109509429838028,-0.4429410098466827,0.03680455544915917,-2.245706189003237,-1.329580561096213,-5.230355767461975,-1.5397675040328438,-1.4142509964960985,-3.994138108845673,-3.5679735379473927,-1.5536204470139614,-1.2608800291938822,1.0456246468084247,-0.34709026172914026,-1.4477720227493391,-0.29935592839937,-1.3374767819698405,-4.355331263432163,-7.556911512204282,1.2933612349044155,-1.2521990427634078,1.4570819093950056,-0.9355512802444168,-30.221222047207416,-1.3115368682196178,-3.039528026356313,0.023539511341853503,-1.3299683930908384,-2.0278091843673973,1.861942090545527,-1.232822726111463,-0.4630296385800984,1.8572545684474187,0.7445247151128962,-0.36016433749329635,0.8850802342745856,-1.0278473297960762,-23.590812214370743,-1.3036286228669454,-7.655215595695289,-1.2126622264300322,1.5191258964926027,-3.3919212581684435,-1.1876159315510486,2.2820409837302598,-1.9853152813237003,-2.3827014469527295,-0.7494763080728151,-2.6825295273001015,-0.9208962555704641,-11.011406606875708,-0.8638693752570016,6.088391789511811,-2.7088878935690266,-1.1839531678861548,-9.34735249400903,-0.9213235334346465,7.126761214990662,-0.18627754778371575,-2.6805477297881457,-0.11712956395177887,-0.44182857886860516,-2.7932103199284586,-0.7103316376700537,-4.833961138361826,-0.8831776586153477,15.365933186175571,-0.8304174406378335,-0.511720300340947,-2.609569832197308,-1.43200838598749,-2.1417463183218826,-5.644254191506101,0.35106707245633606,-1.8215611551369446,0.6937033133974371,0.3793268625118975,-1.2766527831546468,-3.1720185911044707,0.95120151444317,-1.1804915706366972,5.415689099614681,-1.0024351836000935,-139.11612456246985,-0.9024087550622367,-2.208486232159097,-10.293960018358,-1.31583284912809,-1.9211703865362817,0.20309294346249485,-3.076764095916696,-2.4848922688941113,-1.1763631933426522,3.3195370967995705,-1.7099084087160246,-2.674653303305395,-1.0313657892548946,-1.323584887758839,-120.08059715339665,-0.5628509335366618,-1.0527218283356725,-33.67541643904143,0.7000059190221339,-0.5987575331854889,-0.9814406085267807,-127.715387234946,-0.18807421474613684,-0.7134346174159738,0.9969294538198221,-0.6932443643899602,-1.3029872712686654,8.350281669725208,-1.1330937179699698,-7.900852145528284,-0.8674733875449081,-31.639542400992706,-0.5244994727739227,-0.8466069130687762,7.39555322305765,-1.4959339813176362,1.5515544694006933,-0.2038143465639679,-1.1751309089900996,-7.984192680473234,-0.9002717846510291,-3.267382367748277,0.8197217211574226,-0.5068986418446797,0.28335775742758385,-1.439017000077215,-0.05775413389892625,-0.9810304251442296,142.44559383711209,1.724976569287897,-0.2024884673563364,-2.5637844257923943,0.7199303852291028,-1.3658374170098022,-2.4629664657391332,-0.835563022415049,4.205930344288671,0.540005450284258,-1.3004820235073964,0.4020450914869338,-1.7594105011377204,3.494354809347368,-0.7891796479322257,-1.7172686269965505,-4.774620852215812,-1.123983018086161,-1.0834961598556283,-38.83783191168715,-0.7935747917991225,-9.137363630721055,-2.2296883102449585,-1.132486502316366,-0.8277637478700164,33.17995600085933,-0.5250214615406681,0.9960255833582685,-0.8045371502802998,-10.897354590791217,-1.8014806018938874,0.17614990423364363,-1.911753546799953,-1.1422837813134017,2.196354792556499,-2.5542475837214615,-1.5823760072217068,-4.015130216672322,-0.6287391757503684,-1.7197120345648038,-5.421516236860108,-1.2807734746842092,-2.2251561647676574,-0.5966925658138476,3.349393785942854,0.19955571006588246,-0.9795043742671511,-24.54125612894611,-1.610513980412711,-2.473383508448274,-3.9708448965279883,-0.9321862541592699,-3.675655805827517,-1.505528089436828,-8.294368954073015,-0.2787505922329987,-2.235484318222174,-1.5472231491354957,0.5937282698233501,-1.5126059057595405,1.2094439077766768,-0.3936486535552294,0.38541358810132453,-1.7597980491839635,0.878726075547656,-2.055930783945991,-1.214928799085963,-0.22265668237871505,-6.29513283625917,-0.5812133242612416,-0.18039702213688802,3.7489809498850324,-1.2972367359766275,-2.4418241539686263,-0.9385528571447034,3.7110604680606096,4.690664053640539,-0.6677486119346507,0.059980657885454924,0.9924115724627318,-1.340279937345982,1.299502372239119,0.24499184731027812,0.8820245846117776,-2.045693919937906,-1.536525892580531,-0.7994452993102213,0.2511130683543821,-2.1105199711591043,1.6536091059599123,0.054841528782522575,-1.6776239436271467,-0.7133798999381926,-2.6908631684417057,-1.8800735004511377,-7.463220464222304,-0.6945430037179855,0.496772459771579,-0.09797073574560888,0.7702625084645314,-0.8457387375534519,-8.163964100422312,-1.3082033507754467,-2.62966356863051,-0.18843772624796917,-2.1092423659695885,1.1117992097513567,-0.9828217172415721,13.518576428582277,4.511764854120875,-0.8585647598457911,9.806433043613993,-0.7826370004289719,-4.113585723528113,-1.4278495880192943,-0.49404310845864063,2.3837711702955158,-0.478053953256556,-1.2056741229129064,7.842508651939854,-0.8292709643039768,3.06902306112978,-0.31744916076778473,-2.0138753303050834,1.8371827641132072,-0.76365622776958,-4.030071772776628,-1.3717777116631324,1.6914626748329602,-1.5095828675114515,-0.7802215087966383,-1.1095993527832528,-54.43735752100457,-1.8259419380048196,-1.1865676369262634,-4.468696699670158,-3.1154315731509348,-0.5070848946446058,-2.6513147819888636,-1.5161167962762643,-5.632001852690236,-1.2314096993571582,-1.5622231765783225,3.150664130604624,-2.520887493697823,0.24143496356162508,-0.13354800124276556,-1.8275678417015944,-1.4370862458940141,-5.635610264538575,-1.2205643640894053,-1.3270750352082519,7.355996006820041,0.3008753914198119,0.02762119780411676,-0.4138422827455174,-0.15252305146860334,-0.42139573095727967,0.31362983104141917,-1.7081362791714563,0.48443411936063474,-0.99587574918602,49.433181338303946,1.6631551229658652,-2.5365056255683225,0.37180130408638457,-0.9074569200516172,15.712839271113609,-1.7727010967642047,-0.8303746117201988,2.7014578232785422,1.6039041522917614,-0.9557036893429115,0.47250240055953663,-13.431053114265904,-0.583196146835081,-2.623601542910653,-2.8103069892043706,-0.3414386543065028,-0.5232746601491889,-1.3890826187773184,3.2362322193737167,-0.6120580003146913,-3.925117675709234,0.7309655064790372,-0.18112345218020698,-1.3167675177835274,1.2903114607313784,-1.125834274031741,-13.552249806735515,-1.1827417555149962,-1.4567367958492048,2.157373549845757,2.421841552912629,-1.3220662937897207,-2.0371898931637045,1.1961985951679703,1.4550994785350033,-0.9904204759149758,-65.4106019413199,-0.06262789229838528,-1.2751504717526432,0.3174731835681084,-1.7784205713074002,-3.1297787287800793,-1.3022799491795767,1.538438834319161,0.6015726530270997,-1.0816296066731963,1.0336041960082771,3.310730204524191,-0.058204152892692984,-0.7261043985444486,-2.622073932505414,1.4868546700286367,-1.879151123625939,-2.8584757079292444,-1.1816344056493682,-0.9211898401088243,33.969878121350014,2.244382185029185,-1.3646690515161712,-0.16650898231531353,-1.3818007562094556,-1.2381235521720417,6.701652394199843,-4.028546393196827,-0.6614162233929819,-2.501296021420446,-2.579183180808762,-1.2340432174137992,-5.621172368298951,-1.3438273909054899,-1.0764133602894257,44.316067452658785,-1.7211419792409763,-1.6306918144277924,0.10299717912111617,-1.2475391471453026,4.726888102893144,-1.8843712242890454,-1.0607191622542647,5.952294815689708,0.616322148818508,-0.7454333749023654,-3.080166650688653,1.2548431822383939,-1.104090020516252,-13.44590995983349,1.724787038654858,-1.1494376681689498,1.0705865095168736,-3.6140517304349813,-0.5726789773917516,-1.6131875143710328,2.323074069410993,-0.9898936799708621,-36.0107326982442,-0.7487696398643057,-8.517239869965955,-1.4698343575670223,0.23720793269587404,-0.3959605224213747,0.974813880359501,-1.1286757944029993,12.244267329828107,-0.8011426375281863,-1.7810884916645786,0.15635910124801944,4.3568555268819145,-1.5649404872610977,-1.0881398881849673,1.3186846458633625,-18.69231547333096,-0.9064381947623127,-3.516430900063273,-0.43287753139444507,-3.693620846485632,-0.9013706876775325,-13.69773784246896,-1.6391177146789135,-1.726852757140155,-3.8037332317419983,-0.4234509433436583,-1.4141685077346686,-3.863746161695521,-0.9470299423533558,11.567493317699359,-0.43158093239099704,-2.7460271407139176,-0.23962335674621527,-2.6004367740602303,-1.3250369590687467,0.2057294087413144,1.3662237474610044,-1.4435023050989169,3.8690497377598163,-1.517585462504865,-1.0226873160999224,57.30934089466542,-1.0563944427379386,-6.680109164015543,-3.348496384952303,-1.4031529615534646,-1.4369394442086934,-6.267219893999442,0.20457534696994273,1.1808944433919,-0.7761656968732614,-0.4379267239383463,-0.4033563558466078,-2.816845753205954,-1.9584262438180429,-1.8727193803932987,-1.5702781723023218,6.821381335812773,-1.7639226228631393,-2.1324693067623626,0.155487182805919,-1.089641770805597,16.971384526283806,-0.7135421524919408,-3.1338394696136675,-1.017631579376733,42.69859672560716,-0.4948726171971065,-2.665336353199081,-0.3496067771846998,-1.4370174305479777,0.5352663501029284,0.06797185908589509,1.3545398781106712,-2.7512552621561652,-1.199532821567473,-4.77623712140797,0.2498914692645542,-0.34378468110790106,-1.432350596912023,-1.9353825073574376,-1.0599301537587726,36.349833111411826,-1.3589228879749604,-4.634980891873383,-2.007327655407849,-1.3911975755512822,-1.4329577418716886,0.408273792858441,-1.913928903101334,-3.266058442530551,-1.8094574298012904,-2.8346822251355963,-2.5447995582848666,-1.093894121435209,14.342106739215962,-1.515919523144697,-0.3224795086847023,-1.758261399211772,-0.6505564527594044,0.952481457119593,0.39516582050762006,0.29750238598913303,0.7483256781446479,-0.6306941377894875,-1.5886936832664178,-3.7877818105549923,1.8247936716790263,-1.0698115729964497,6.347521511302817,-2.1360157811376737,-1.1087374816427162,17.048251692029716,-1.3900370761421565,-1.6317140573439677,-0.8308826535205952,-4.666942389801736,-0.42617178718826565,2.724162780545522,-1.6138350202921476,-2.1782361810879927,-1.5058346222290173,-3.8465418543014454,-0.1670834402973852,-2.5201302089350444,-2.160933489069239,-1.493528794932443,-2.5076733416197774,-0.5454690070653195,4.004756793182536,-1.1215689080437627,0.5631766070637405,-0.9444068933886545,14.612046124262209,-3.6385067449544137,-3.0205349969949165,-0.3480941016865863,0.013401099018315987,-1.889965341701958,0.8000628291618348,-1.0610595124600368,0.6163043204525775,-1.414947565926317,15.585901861887908,-1.7981499715665978,-1.2570423002267004,3.091126364655662,-0.4861614152490904,-0.621664693042623,4.2802909402650196,-3.7004074168721943,-1.250764731276129,-1.9648908350580556,1.7988089820177922,-1.279249105816252,1.6871118152360487,-1.1000601751517414,-7.93259254044323,0.6920152424275741,-0.18443702439774035,0.24720245100459604,-0.547473449711529,-0.8983548786305704,-22.236756375852664,-0.846399663274622,2.4269611826035953,-3.5745051679500426,-1.081018172895441,-1.7004817789489568,3.4761676953493046,-0.9209363506871047,37.875136178175964,-1.3673336949052708,-1.3125474258821117,-4.815221697405758,0.7778785269717599,-0.5365464712116577,-0.9394595156914424,10.591235169609964,0.6128986535126082,1.0310150970989271,-0.9409055389160071,17.106130869874434,-1.5051144231226732,-0.8915346278788352,-18.68020217895274,-0.7878571857231977,1.4325172235137504,-1.4243459313074238,3.1997415278015,-2.398912190457332,-1.0613415997778315,-2.3921433882955756,-5.1923959053789375,-0.6824312509914344,-4.527116436853127,-0.5757088458263948,1.4949570207943221,-2.3517238534429,-0.9801937664654357,88.20899152471549,-1.0319067488964657,10.678161276822815,1.1367870315729904,0.1912020425091816,-0.12145688774659791,-1.1686260905769736,0.9044338006096757,-4.108144144341541,-1.5660533627764313,-1.539709914186265,-1.3038808686272352,9.98295216133405,-0.4437242024151514,-1.2994189072171483,2.3187728565262637,1.4145356523129213,-0.6657922799520088,-0.7064183211305957,3.6756899089041966,-0.8670384023551543,-1.585507075633731,-3.925835687444587,1.8907506733721533,-1.2594676958867863,1.6203878280738966,-3.467297539851204,-2.293959623530794,-1.069874455855915,-1.19119565923511,36.57180848278664,-0.6706984161786592,3.0869241280584223,-0.6987586511883475,-3.1330053296278484,-1.5902701895329958,-4.163803746225149,-1.0949175642576552,-1.3060987537389497,5.2629225358277765,-0.3823781834712011,13.640465840913073,-0.7084118361917515,-1.1692011786440435,0.7217573612840094,-7.428739746250938,-2.231622514216185,-1.6843402720984577,-2.1192396114077177,-0.5593468575615543,-2.5127243417082097,-3.7471926140642604,-1.6723536912467005,-1.7700450833587573,0.08859030048589744,-1.670229922100062,-3.0763843397764123,-1.179571092067717,-2.1545597015934814,-0.09827646900075149,-1.5159334387945171,-7.036898747484593,-0.021360848403869315,-3.2036002881317884,-1.7459630494846423,-2.274584600998912,-1.6210834168059165,0.09119101120124773,-1.9682803375575149,-0.6234400284218189,1.6914951619408392,-0.8056252845680474,0.4332440328055056,-3.531083623793036,0.6806144365237048,0.06515644875544058,-1.4027903900813432,-0.6278303570233621,7.046186386211833,-0.5212951267114778,-2.1972794042251733,0.6744365331711526,-1.7640269838775442,-0.5200187948075272,-0.9554306330702851,-11.609851452294471,-3.889777881176393,-1.5237885384998457,-2.1173847568803073,-0.9694996395558596,-38.79919796720196,-0.9882437214061968,-68.94885661504854,-0.7488236757756552,-0.19384073284970493,3.187399711482122,-0.3005720322728067,-7.177246879374312,-0.6491286768648594,-1.5267785225020662,-3.3587168484161256,-1.4789689075720132,-4.514248489338004,-0.684907996682668,-1.290286515633272,-5.17248816382115,-4.508636956768005,-0.2827140017205687,0.059601949241779195,-1.1197253546056725,11.120312648533599,0.2878965820531312,-0.7140451487311142,-0.21504018437783357,-4.596041933681057,-0.6986916135760031,0.451670879070174,-0.21190606337431495,-0.7291705419197256,1.8076594291158377,3.1926272285095676,-1.377866077790174,-2.4343205176895255,-1.223023462628578,7.669215696747415,-1.4432728767254264,1.752153501267896,-0.8869676986077508,-4.849452388363969,0.7787640817759278,-1.6278505848400469,-1.4039684332194247,-1.9368052837853513,-0.7723060963699422,-25.958795862238453,-1.5683718531069677,-1.1688254629520947,0.8432008973710852,1.3215783134929162,-0.9097583463520147,2.143913301337097,-2.2713776383974666,-1.6871643703863406,-2.275205945230315,-2.8111476692042876,-1.5946381135884886,-2.020264741345513,-1.077599530942332,-39.48058709918964,-1.0456407016944793,33.499007746620926,-1.711730621600071,-1.7177406045860684,-0.2781903239774345,-0.08887738809773704,-3.3074154841265595,-2.5538526068145515,-2.4692074817040863,-0.663434848988926,-0.7886108851221876,-1.2458979915326334,-6.201917726013514,0.8249518191575713,0.23812668734416498,-0.1388855475564177,-0.8387689683281041,-3.2029126988333037,-0.2334321749514089,0.2884514412942498,-6.816941665154193,-0.47647523609854314,-5.95384606776121,-1.2230660154230424,-0.7031011371124076,-1.0960723119444507,19.76666368566056,-3.89333160638534,-0.15708945795520646,-1.8156792435031714,-1.526671042612445,-3.3870563199759487,0.41986168133774204,-0.5457313910578676,-2.3760487801288477,0.10520902105467034,-0.4616808963457273,0.41320676527994515,-0.28812400171459607,-2.2427519933245224,-1.673320244712278,0.8531320837441196,-0.0576182491094035,0.5761991746192907,-0.4042426772250577,-0.5038171698059145,2.044972816342529,-1.024782743861071,32.251613090693354,-0.8150905418170856,3.568078210270353],\"type\":\"scatter\"},{\"name\":\"Cauchy Distribution\",\"opacity\":0.5,\"y\":[-0.4492374329968759,-4.450282448353553,-0.9998338212051581,-477.6003400527975,1.9974764556676337,-0.611738486633146,-6.229585067943557,-1.03084546214872,-4.884324541225647,-1.4214007692731825,-5.811451649574264,14.798109115601873,-1.0884848864019157,-1.2934453341635717,0.9440722928170009,-2.1367233751545136,-0.5923395849382238,-3.006890380186009,-1.0187498401845065,116.4153569682723,-3.026589559775443,-0.7867309005285081,-0.9696518343279009,93.8986843853723,-0.549647495732893,-3.2771907258988238,-0.24183796439773586,-1.331528491899392,-3.4902582575724526,-5.567009240773529,-0.3892959741954428,-0.8796240146500237,-40.88596002150917,-0.915424337643102,-0.49157635940077615,-0.42467598215868296,3.3491292082566213,-0.7382552621480627,-0.39441201805815296,-0.997164925684652,715.0464290362296,-0.2827746812748765,6.624193765266764,-1.0907533993710796,-4.484747898853431,-1.5024278280540897,24.102838286949684,-0.9543908949012506,2.0369636282473227,-0.7803453651565864,0.8518314399427842,-0.06297652721509339,0.9483787565800694,-0.6138241264357187,-7.135002337809994,-1.0122158441868285,34.35405286916862,-1.1592648520463493,57.34479686757837,-0.7707558669031565,-0.9761739534039561,-0.43952998227720674,-26.806474476079988,-1.9400054072622315,21.439838700957537,-0.9491349329303783,-0.457121624175704,-0.893466035464732,11.840810640686966,2.83458097064498,-0.78054004587799,-1.2108412915432043,-13.897995354171067,-0.9674801688178305,-2.6843722960199234,-1.855372777514099,21.582694859656566,-0.4223977256603356,0.9460449510661371,-2.961977582698939,-1.0969155264614208,-4.563184257865165,-1.414104857034939,-1.7782574238793958,24.90584452281739,-0.8378709897566328,-0.810364801451607,20.773177495903415,-35.197537683202356,-0.9982134875136465,-1.247150119988748,9.977390263491595,-4.702188551436008,-1.136573783863275,3.741190775606495,-0.5705433504358073,-0.8070212409962875,-78.61417941579138,-1.0591160526399264,6.188265737393335,-0.9411169232528073,2.6378447084657077,-3.0613387881475007,104.86130026977384,-1.0046818480065145,-0.056454174472543306,-0.09417001862779995,-4.7353654870377815,-2.2871598651918283,-1.0651040560797802,-8.420637072607569,-0.8803197082433554,3.8108042715025876,-0.21643116656898687,-0.5325893440582232,1.5488752600276303,-0.2490776050269209,-0.9909724905286891,38.637927845774485,-1.305524386716991,-7.973110866385866,-13.26506960220155,-0.9564035254725278,-1.3037182996592278,-0.5886644938326024,-1423.207665343402,-1.0286911093491151,-0.38799728185229665,5.2101853886068845,-1.0825252170274335,-2.068088582157671,-1.4943733961146222,-10.754663217922696,-2.111498779248858,-1.1153813240926542,26.726502226026547,-1.0506092900560846,-1.5906067224145684,-3.435646268201378,0.768320205202929,-1.4778157034933586,-0.17416145668768945,2.098676145385853,-0.8651162580895042,-5.228847542717765,-1.0594199695234565,14.056544581905017,-1.187825100883231,-2.4496582124020927,1.4355967987782936,0.4560419177808721,-1.4181461455227904,-6.161000255852681,-1.1818171473248495,-1.296641318108577,-3.587716277063131,2.417289997208542,-1.8604582402442411,-1.3733770309935776,0.11184083515249843,-0.5154832239078293,-1.0306093377549959,-338.0233803479255,-0.7095442562658403,4.012209649663032,0.03548042436517651,-0.6358985882239176,5.498210408202332,-1.0010633976960375,-156.19317377340047,-1.5634441249266056,1.0983546289638424,-1.2827769864853011,-4.187447283425966,-1.9710850314794748,-1.2913100700915714,-10.269993279983515,-1.5551531834499905,0.6877487272052811,-1.1750790591639813,-2.7978911231372563,-0.7001247502991121,-1.7648831751570855,-3.8789667383117608,-1.3147146039478617,0.12155578529906608,1.4190018610794106,-0.6482984913652566,-6.855083712378822,-1.6338561618096135,-8.017763572520444,-0.9938808032435136,-6.765289725539508,2.4493683375296214,1.3098276102467503,0.1591361224585457,-0.9749996471975314,14.953192638313784,2.2551442675716573,-2.3656075950975617,-1.4930257460289766,-0.37964011043261814,-2.254602909659299,-0.5488444493129272,-1.7534200727214875,1.2980920006634777,2.0636893079520675,-0.5680286509587834,-1.1819050716436736,-4.040213299684316,4.892125922326012,-1.5643006434967814,2.0894744865551056,-0.6341155403375934,-0.8354748647101387,-1.2439550517079099,-5.51369648721091,-0.7389642323819443,-2.708107144612992,3.658572122766225,-2.4794058949105997,0.01882826986655095,-0.3424639432162333,-1.904254139882159,-0.029581176757089156,-0.9147870533688656,3.8862214543401796,-6.2832464989100645,-1.4369349377548417,-0.9033943700717494,-4.809906616348643,-3.5139849880651552,-21.53917709474032,-0.837737883179273,-1.1390384266017335,0.25383484199236084,-0.26016772939442057,-1.3772912811396125,11.16055245069067,-0.8175973857792145,6.375632640366228,-0.7540075602129211,-14.33434974802477,-1.001551364984639,-2.5169778916450456,-18.025934508177627,3.5234118808520822,-1.6453508399409964,1.33091502439712,-0.7464308555549127,-0.08181629913286304,1.4294442603733426,0.8022338098926771,-0.568812396036125,-0.13815047596530516,-3.4450442838098936,-0.8222721197148413,-0.8988489022206908,-7.973819151757541,-0.7825457041356131,-20.969933481978558,-2.6293485656160582,-0.6375115325055658,-3.626956890784525,-0.7188531277244127,0.1827016506169079,-3.33903616828536,-0.24881468802139672,-22.343556429935692,-1.024863882282885,0.24771833165488188,6.967251420690468,-0.5648063880170866,-0.7995009964110049,0.7250117617635545,4.692102607716347,-1.3382070302176654,479.7854302863582,-1.0004542272613623,-34.361038086599464,-0.6937541942351269,-1.6054465148154051,-1.6970812496799434,1.3924480544703366,-0.9927856082675384,-227.13096651995266,-1.394849491124439,-1.6231881541664341,-0.8913544696393632,4.991932055489504,-1.0454042202242642,39.36556896967268,-4.708732476248134,0.9377493012633229,-1.2148580185042648,-0.727251708577239,-0.48837468598503,6.604548651647893,-0.1503841441714714,0.2411961284669315,-1.176370100705778,5.335379591876211,-0.9189630433806544,1.5662850691710495,-1.8138604013500135,-54.952903077388946,-0.971002647948819,-10.993753044490289,-1.035080490186321,1.8425139636668266,-0.933435195452659,-9.00688420077831,-5.225634323579276,-0.5404976953300642,-0.3070268551426617,-0.010221999804959303,1.5032805633003559,-0.8723435747474876,-13.812255980812369,2.1979195887739547,-1.1566525037143636,0.06817108079057621,-0.8101529735785179,-0.934332786650107,-35.517198325372924,-1.8295296872639446,-2.5532078907923594,0.5932861935132092,-1.2532296932853877,3.2286373824304713,-1.4794815767897989,-0.46199096131086703,1.0310834353531773,-2.282823358829104,-2.3560977258729454,-0.5962594509761439,-2.063192327162028,-1.4348225049751022,0.6196643743700159,5.21283330955599,-0.7998002575858646,-3.3543250831975233,-1.288357785151795,-5.043340541017894,2.3710245686611873,-0.9298369279300756,-0.20190932607493006,-4.534384731752027,-1.5678175697733667,-0.24256910884270322,4.544093191260102,-0.8786402708242658,24.409406732252986,-1.0370823127840723,1.3761415254252012,-0.33116132038609103,-0.5099168833132859,-5.036147886732432,-7.785347270385022,-0.1941051525417563,-0.8150382105258227,-744.0654217520656,-0.9985801855963874,1.0291053039583247,-0.5225383750781568,-1.8758207792702866,4.849450458154087,-0.7384058755663313,-2.859009890068614,-0.5079541405395742,-0.9129362963746169,108.38808502093788,-1.0245840387153686,8.011613784040335,-1.5906659301701547,1.767158836160791,-0.9469826503856882,-2.5708933809923753,6.059414999340849,-0.5689165122732487,0.8112529207577859,-1.217690459113952,-1.239513260369312,-36.56189112878932,-0.8951006233647327,-0.5860203194549898,14.10386058375803,-0.384724122609173,-1.121442002538171,9.447458329139764,-1.8579067315124689,0.1989812884692035,-0.5708786685518126,-5.231891081995388,-0.5754052174176192,-1.4174993889692138,-0.9168530412358616,-9.660575183663639,2.721617029007008,-1.0571545879583744,-6.10360709306945,-1.1542677162635593,0.8002047666362224,-18.216596594236638,-1.1102945975702898,-30.462398000085372,-1.415836909486842,-0.41917828900072474,-1.1562588003233254,0.6152706466412894,-1.1054542476091713,-1.8837366146322476,652.939056630697,-0.8709094722417775,-1.7099742220512337,-4.094870987824477,-1.1423038198783162,0.4427248084750306,-12.912561683515904,-0.9860278423295122,5.488483079834602,-0.843799076485517,-4.560176591502442,0.6031396768647146,-1.5835090888904733,6.614540401496161,-0.5262698958389109,-2.3122268038861593,0.9515522966713144,-1.1806328924923004,0.473619316016328,-0.17944977416133745,-1.7124503059228093,-0.5398702171759995,-4.194895829900433,-3.5676681999932303,-0.990435986872702,40.075358858814035,-2.1122098259255258,-1.6766457182208099,-2.256314435005908,-5.146473150299007,-1.0689433380474371,1.6521852261678358,-0.9340497768663031,-54.792832170469474,-0.9637024764812094,-10.33451601991376,-0.17211365775548915,-1.10723613497199,-17.11982074704675,0.16884840715097438,-1.18220166747683,-1.9719567675726573,3.1720993985037023,-0.35423540378745266,-1.3845035610220928,-1.7080534196135522,-1.288223829102299,-13.74984838362491,-4.143667544876596,-0.8800781514127201,-2.4881707334973564,-3.9583467870771956,-2.1914228627108168,-0.512125185352718,-1.6390609810938057,3.4230982861878685,0.5876372562268299,-1.5114005009400464,0.5737751642884503,-0.9160166975121817,-0.8991083364073691,-5.023788018735217,12.533495769025558,-0.8022196616405823,-2.7699663854793286,6.256508125401536,-0.7395105048513633,-2.3198080762535325,-0.6304521585565501,-10.437483967148328,-0.8691955995166973,9.907784628989175,-5.132823773714061,-1.0247127863820962,-13.516053244327198,-1.1732680252525984,-2.821592238937182,-0.9237105886387755,11.226197202402188,-0.32055279780838564,-1.7623975585724294,-0.6434012049168751,-6.373937121642515,-1.1347909744567934,35.192300218344116,-0.9831050132269913,9.369403894013068,-2.030203098690003,-1.0988130887519196,0.9020088019261705,-0.24625520702531267,6.316033194415776,-0.9692674856516228,-14.044690570175694,-1.6100400586535062,-1.9545103697027115,-2.52424503913619,2.169197135890206,-0.8624120877020298,-14.497192527392947,-0.9119161643535165,-35.91934166207379,-1.2553806927950117,-1.12213114678901,-1.285896009586776,-16.224345978127893,-3.318786524510307,-0.16572884860049764,-1.6729223080440563,-0.8667387893351056,8.888154273693461,-1.103100977948535,4.440376626097599,-0.8095832777642298,-6.50020250503241,0.3422850648986855,-2.117765139797651,-1.3139092022503975,-1.184986429407147,-27.69293720316693,-21.251180968713264,-0.9965902046198343,-3.292721433275562,-1.1662998170785723,-4.251915308241095,-4.476300937835527,-1.6718195197565144,-10.083345296156644,-0.7941440495856331,-1.3404852355897794,-0.9225640860573271,291.70301185667665,-0.8238925326832195,-0.9059288465461297,1.9993717105980444,-3.643946069073115,-1.1251201835718716,2.699122054392045,-2.8647070783621205,-2.3102723329169166,0.1191194732098908,-0.8933301373577911,-18.02669164973233,-0.9393765429918399,5.218232316846672,-0.8338239783721146,1.4646065933280723,0.24690235062124288,-2.7368592399600757,-0.8626339307606745,6.685037161656726,-0.8780495140604532,-14.447049809138441,-1.487575485592495,-1.080554418909717,-10.989022168631635,0.8984744116403842,-0.7749854916234642,-1.412960594028245,4.594338964482726,0.08045916645008377,-0.8757847661908577,-19.477404776991225,-4.400827572376998,-0.9179120715588134,-18.765240055149594,-1.3750929152681959,-1.3135828282077353,-1.496825037279418,-0.003017596506186271,-4.743906038206698,-1.0941562548812886,-7.69376430482792,0.0915830641796671,-1.784766970291608,1.1962798634763385,-0.35341313584099643,-0.009327809454733549,0.7805355120216961,-1.1757431137097167,1.2838137964617942,-1.3644527667717448,-2.1784393056280615,5.422993537057468,-1.2210277578426914,-1.4635211191898583,1.2495391795823685,-1.5112315398674712,-0.6006494019099049,7.092841570174379,-1.6616281392804182,-3.1440340203000243,-1.5034591485007072,-2.08948300067346,-0.6228014808602351,6.6511228614684725,-1.322642464014213,0.3602694061110616,-2.4220382143546075,-1.1456992288705365,1.3593546583392562,28.472750568149515,-1.0103284218469775,-3.715749240836921,11.062236638663112,-0.8812038431005947,-1.2453148592689134,-0.9778732065220805,-362.6772180333547,-0.8579607749658098,1.6888633493915757,-0.7952322723069857,-17.415057910121547,-0.7016766758151256,3.1128163260855723,-0.5016665345651978,-0.33211331926760235,-7.264651501843047,-0.8509744114846729,-1.444389803124054,5.77850350823504,-0.8459241350042165,-0.30991583628535335,3.9473184833509665,-1.5530752858161563,-13.889934593464142,-0.9835126284552549,-200.72598090858423,-0.9144128030013151,-0.5770684252699686,-2.5016164348477394,0.3973514181150637,-1.2616359871518628,-7.6253723840234935,-0.7028688712187601,-2.5795404217379123,-0.4280348505958086,-0.644059497659249,-0.4149301269309913,-5.911156749245924,0.4182907812251362,-3817.930112403055,-0.999531685520383,-0.218202562888567,-0.5777750848246528,-1.063223316401658,7.811708440965219,-1.4486459965171332,26.676747686427365,-1.3869125250325238,-0.9982440331660585,-321.7306162263143,-0.5481716296135641,-5.684716072257771,-1.3765486126615387,-9.79203821258623,-0.9694725689570616,-11.395101355520485,-0.7131985585506999,-0.29006752371634015,-0.6981892371397357,26.718484965511276,-1.3074272206461175,2.6435994473489215,-0.3541772575876664,-1.0102959957598971,11.669169696900964,-2.4615996405796543,0.9362567233753403,-1.2742745404615832,7.150369718418549,-2.0328053273157436,-0.9787961310431145,11.391680769557695,1.046650265929006,-0.8234529108398695,-3.3948741934677535,-3.6175489008623893,-0.8861786973563947,-10.473965207514144,4.326451509124465,-1.5932053959051888,-0.6829777756852884,-0.5023044143404893,-2.4557705178008344,-1.2385631121301983,-17.543394092207727,-1.1535586196879275,-3.292881628559899,-0.9129426429142071,-32.397079286879226,-1.0201069914551038,-16.405719321923932,-2.4294277820645567,-2.5632364130813245,0.0813014989638079,-0.399634986896912,2.2380464779676283,-0.8705346205822797,-2.6393365318791107,-1.1092819589829273,1.2109832842787926,-0.14076154071534852,-16.390499749835776,-1.479228749963871,-1.1758703722538641,8.79060834332932,-0.9461609579009318,-1.3745180013766092,-7.867575548700946,-1.2272919753597855,5.766549711409266,-0.59400894176979,-0.40164001840552066,-7.266501204152062,1.0276737954670243,-0.9944486676462797,-56.6446325243826,-0.8287110671973033,-1.8565568318339074,22.80494433882996,-1.6659618840248496,-0.45638988945677306,-1.0436005679890066,-12.328259149600438,-1.831964981044666,-2.791874250129485,-0.8604947323290165,47.49347048587779,-0.6515548829577618,0.17323656893790318,-0.7485240565968887,1.647229492497579,-1.6050405010404107,-1.285157297463972,-65.15839286907361,-1.0302798994601672,-4.665182382135415,-1.4693222873033518,-0.5860850490451569,-15.480868267485926,-0.8229268857263883,0.48525762381067516,-0.29644455714836926,-1.9334897579607402,-3.0498861401524873,-0.6920967614929838,-0.6506492211376915,1.9395633762879094,-1.83613354569795,-1.1931350533033067,-19.202106811354117,-0.5373511238168694,-0.8964402490816524,14.746648451367374,-1.6357914415096677,-1.3658432883745264,-0.254229464077935,-4.579831131887225,-6.38542398780358,-0.8934246637211615,65.22827537623468,-0.9890752526433789,-0.5927469279843125,411.9248760389517,-0.9086996004966605,-0.9832690066894413,-4.532717941222395,4.959517684452407,-11.119728464389015,-0.9885061246941592,0.16381765333313392,-1.9136994143370658,-8.290620703121053,-3.67739521575823,-1.2944944946231998,-0.4132972580657265,1.0869820734185023,-1.9839468361022985,-0.9649212943436222,-14.755529802185494,-5.128696018690695,-1.5652917701843463,-1.8804691707439956,-1.7054053346088032,-1.8799143686846458,0.5289581566117432,-1.7753676596786003,2619.0541660035,-1.000329419442467,-0.27115723911421685,-5.509559433499125,-0.9060006450745733,-2.480918867372253,-3.0844328102705507,2.6784540118057705,-0.6150583764110324,-3.924796604689396,9.79081486220959,-0.9524988763634135,-0.45456846412694685,-3.232803469818701,-1.3856631266332735,-0.6627958786088369,-5.98257502465165,-1.5800341715853503,-0.7050689882391629,-11.070863286509429,9.389250220110942,-0.9742567246947437,0.6701846410084344,-2.493500727963612,-1.4079777260113722,-1.72713807668034,-1.7614377556921539,-1.0083876881389984,-22.083350244041707,5.817339360849429,1.4169142757453907,-1.793368865736364,-2.306386706406529,-1.3388103706955725,-3.8118848753805454,-2.1809215810844353,-0.3630598149122768,-0.4511616875325133,28.218103376185542,-1.1998541958930309,-0.9489001492443931,-5.877634248404984,-14.236980440028498,-1.8956416115369752,-1.075578638056422,0.813322294837435,-3.40266959336291,-0.3790070903922532,1.437303180546043,-1.1750201335162034,0.4931196410767018,-1.4167949468446703,-0.14989327714330214,-28.711538602551197,-0.8984892237688128,-1.1207480507200378,47.5917021096778,-1.2194649342911135,0.21431393015726963,-0.6574311821100738,0.5686667689120952,-2.1641067337054576,-1.4351242133424085,0.11519631092442295,-3.00011500720245,12.43092900368697,-0.5329762379314584,-1.4421097075248386,-0.9043150001682801,-5.987247400486128,-2.396102087295707,1.86447776907504,-3.224775926500081,-0.9205374306374765,0.8367693059010279,0.5699782557171325,-1.1257863709147362,-0.8559297397851824,-246.7748188747509,1.3324413131888413,-0.9659910013870029,-13.979551231593828,-1.058377241204628,0.6066103814707284,0.6748363069093535,-1.5112436205363455,-4.648798293972767,-1.396874104318218,15.177950319965419,-0.9809197923789951,0.9329481764729124,-1.94835629150184,-0.5763099790910094,-1.388756842740276,-11.230462073599856,-0.24808507124710744,-0.9773545328830021,31.015942862859575,-2.262003721535547,-0.11263674760900577,-9.797661127412514,-0.7722921499379672,-0.9898549473730601,-46.80859052160208,-3.9279723898802796,2.7075288326955333,-1.0804171361115635,3.387406791192894,-0.8914448609109584,-5.421320421773398,-0.834350128326083,1.3249456282507635,3.218097339624298,-2.018761155602326,-0.8440147884489538,-2.899330094720616,-4.351412415829736,0.33553135632861664,-0.042757189741170376,-0.7225630566976864,-1.8245049835448588,-3.7219816439953037,-2.213107640724518,-1.044399896591888,-11.158489823779568,0.1014390091268762,-3.063672377006119,-1.9770528234876503,-2.569834477818409,-0.8454756786768662,-0.9429329328126874,14.622778079330644,-0.621471065948203,-0.273228646867096,-63.750338946489805,-1.084316141437826,-1.8348896498787992,-7.302212662282007,0.9973937977877683,-0.7798955962489309,0.20492124626065755,-1.0576952015127166,-114.37138571050735,-0.9875705152309171,6.063685912538172,-0.6474798418290906,-1.935974248048915,-5.997536491730789,-0.4233239489102383,2.7808738194497598,-1.4141365256900695,1.8317365874826508,-0.8121110234778399,-0.15593847538735117,7.143755787881396,-0.8155204473945789,-14.661056145740709,-1.009770151599341,99.22767161017448,-1.5177475251877546,-0.9740221130380626,2.632380725087399,1.6592472871533537,-4.297362727779202,-1.0641880890955098,1.654234306659295,-0.8673463302780311,-7.058818016519928,-1.4824522089220526,-0.3186089304070071,-0.1896524210953332,-2.806888527150702,-3.7823830609502287,-0.8256524055277654,-3.82147314514941,-7.198236614819386,-0.7519224452536788,-0.5913842373472883,14.438021363678418,-1.064598810749295,-1.165712411869712,-27.117757352239025,-0.901709318476714,-10.484074786960843,-0.7692251305903623,10.125204391672645,-0.5368971507595237,-0.8115937311085738,-2.547331690661946,-2.5345093114103188,-4.378106002518838,-0.9584213116676537,7.649857377662979,1.4608836399887566,-2.4435060869933283,-1.7337772004651242,26.590694898367666,-1.0893948938123867,-0.29757192411502154,5.072980081776466,-0.9986224676002354,-61.51012639838194,-2.861327415415883,-1.1795671746101388,-0.9791159362905022,306.91329622144997,-1.0275388921819677,-6.058892269621411,-9.50860312621405,-1.259355022698526,0.5505349068585943,-1.9023491613562737,0.4099658044612997,-0.3372030990028142,-1.3054976713880468,-1.6659918702943473,-3.086506714025725,1.758482221603464,-1.0138713087971758,7.258851922257497,-21.1705156780105,-0.5834515985894473,-1.1108260722297916,-2.065671407216721,14.348941313407238,-1.580125175746229,-3.091752583503211,-1.6595845929230393,-2.2453382486271116,-1.6615818172076415,-2.1117806259863743,-1.5248746779357094,-0.593514775599342,-2.7714543003507246,-0.2806388302198296,-14.073081428948875,-1.371454095588635,-1.0458920901041586,6.024888285925333,-1.7142298156094187,-0.032428761083979296,5.656284367880994,-2.842831489380017,-1.2731119636111432,-0.7371024132287054,-0.3377403210667974,1.3360676327693644,-0.15631224654824205,0.8114162259511901,-2.053392071561542,-0.20851541246311667,-1.1689937334105458,-0.1581456452348321,2.984223852226243,0.7059440666082712,-0.30912804200550903,3.293350085853322,-1.0293658171982563,2.4061163290894045,9.117723292141806,0.042535858959322104,-1.0608748360517157,0.7434737713920851,-0.09343014839109909,238.32086900830984,-1.0079215441719445,-0.6608407155762435,-1.5797265973259293,-1274.4775461298364,-0.9982073240613857,2.2389559369668794,-0.5281006978433689,-8.093764616750297,-0.48389467703033107,-0.9746622423766911,1.1524977336009568,38.55525260711723,-0.7581476299117554,6.0002411399970415,-1.003462952571742,4.47174919587439,-4.726641707581031,-3.213883359814844,-2.1478482429688315,-7.9326902002928135,-0.9478285727537991,-1.7120888117110877,-0.915201311629457,173.7905216965764,-0.8966442696467489,-3.647148947361812,-1.9204055408994654,1.463262831240412,-3.011871616542579,-0.7724628866475138,-1.352392192181736,-10.095534433027094,-1.1456017682867206,6.51312973515126,-0.9575558774820069,-5.547234373992948,-1.1736564642937737,-0.019323513068285614,-5.396557149644362,-0.37389069380941464,-1.9006646186470233,-1.1898778326517743,-48.299794106098204,-0.9533273485426652,14.741883588669,-0.9983337085218676,558.903119490778,-2.68556632799457,6.259823446303272,-1.035848605452351,0.044895188376951056,-2.0944405202699268,-4.1180658915941315,3.495730305058035,-0.8888532416088618,-0.5910961557879564,-0.9806491681616206,-5.578873798133379,-115.57393145646141,-1.595544975371887,-1.0376039785161555,-2.176592016818861,-3.5987831810163806,-1.1760030748157833,-34.67459235718229,-0.2516365123688553,-0.9534372848780184,0.20262383383386884,7.275838706197334,-1.209132660243852,3.9871339545717754,14.865199318456954,-0.9689853858354044,-1.302310078439281,6.39710627881272,-1.8605498496372956,-4.217515068584579,-0.3570995064421997,-2.0111235684946207,-1.4743142201208694,-7.022931057083127,-1.1109861627774964,9.575900855226122,-1.1486876930949197,-0.7503373485230432,-5.464452728159939,-1.590830268760386,-2.0520022515663614,-1.4924466734538517,-1.0599481805517712,-51.77463167943382,-1.3153771758633734,1.4567198972546365,-0.5407842740177798,-1.4036105295644883,-7.117218621406876,-0.35078302706315434,-0.10124053313299042,5.395767661348266,-0.8603670614609544,-7.4080809368211655,-1.193613410926365,3.5045801856062164,-2.9698766695882184,-0.2456745040383438,-0.6124823169523649,-13.596201434909188,-1.0012506045411798,55.011804822926194,-26.565631811104357,-1.003472684420584,2.7924342920442276,-2.2407409867277304,-2.2411012495362903,-1.4287424427397988,-1.6206570635209865,-2.2291380089905273,56.033553726939076,-0.8143012073549359,-2.059318458754125,-3.529137487708381,-1.190763447020169,-1.7544607170933495,-0.6725754758790095,-3.3451983241618914,-4.778090961683913,-1.4458730181695016,-0.6811414290748639,-0.47984377487262075,1.5202681735154164,-1.969532822038559,0.015927472131535003,-2.510216430179185,0.22640188717046983,-0.6031716483906381,-6.548461265346767,-0.9414016489667809,-3.025139115850951,1.0624732829659433,16.725427797303304,-0.9612803982790286,-0.2230131454767733,-1.408317411323388,-2.1765655104733996,-8.9741244409168,-2.0523929513047596,-0.40099874253970447,-1.5219611850981014,-0.48849641542858724,-4.762182308016835,-1.5054990861899753,0.9689943627955815,4.416921748874937,-0.8418297447622278,7.929098612855684,-1.133424950324271,2.135403018853655,-4.4564408392834185,-1.0365309257004198,2.0970051364523137,2.896889042885063,0.13259434200764142,-0.8023056789745545,-3.699964474311941,-1.2742517371139397,0.1281057233884939,-0.3082267010774121,3.057782783568916,-0.8637172016448241,-0.09240366918470366,8.452384639041577,-0.3085464150777373,-1.3704772534745189,1.1707325755818694,2.1586842573492353,-0.6345920048287483,-1.0139291044225178,-35.21962987814355,-914.0674073847064,-1.0006212737337443,-4.111715621791097,-0.6025250520902987,-2.4639786661601484,-3.4298971447563114,-0.6098278683329106,-6.408977793680583,-0.8528520446396847,-5.607263104718604,-4.6390866775364525,-0.881380560400704,-1.5611391332010702,-0.6904510849730761,-7.224705150167135,-0.6802181371984417,0.17005762506992284,-1.5269647197206633,3.311136253894434,-2.761742595384674,-1.053049161623042,0.8441958175847981,-4.207325057731797,1.042535915490292,-0.3865934917391477,-0.6001185004323364,0.8721419369771861,-6.697963099646895,-0.7920622940504422,1.763221108508303,-2.0148549624126035,-1.9342033545717965,-1.54426986216371,-1.2924708906823588,-11.56728485540318,-0.7061931530098702,-0.24109373672432388,5.565239514826616,-0.6604845605965151,-0.5002231127050902,-148.9811106784836,-0.9805758120454009,-1.6942934602243374,-3.4439358438788266,-1.1911250616047062,0.05349996453910655,-0.6876112288389995,-0.9643013583820376,19.77478893099594,-8.045147123239998,-0.617083901942137,-8.345370278256205,-0.9196174306834763,-0.7958068579020389,3.188166077421684,-2.4977428475145222,-1.7155868800700604,-6.411149432927789,2.453793679939997,-1.163867220563478,0.1597115028742606,-0.9589513296390457,82.79552564839337,-0.9358938834630444,1.2387073917872184,-1.3886491424559904,-2.6741492297764387,3.3749408372217573,-1.245630398519417,2.2232871402037913,1.8311164156691828,0.11161730789317059,-0.839002401220926,-0.4946482578875794,-2.8396001099745516,-2.661202619829915,7.885434776586711,-1.0256698575276193,-3.4271744911216278,101.22897067130893,-0.8251521382374853,-1.0562931963933146,-1.1842128673207633,3.4662733751934,0.02641980167694502,-1.915455955968876,16.059216364792672,-1.2293314055251479,-4.795215716052718,-0.9153966095682038,61.47703857006423,-0.9833894392615331,0.1383394759116463,0.8777433601310678,-1.73296387617235,4.4714587530450265,-0.8829324153431239,-6.240822875853116,-0.2588506311995299,-1.5376394916199874,2.5673607768615856,-1.1138235478008742,-6.306151441401172,-0.4665979416134428,-0.583731100071962,-1.6716386256287956,-3.551543209137066,0.6779431375765737,-4.892864810043974,-0.3523884057595539,7.484210629498133,-0.9583600915036828,-2.1176856550854968,-2.869184499202661,-1.9402445012751508,2.2058236648664797,-0.6992704448257304,-1.0443973913186118,-1.2956614250903358,-17.892455956591785,-191.96823319550876,-0.7104905259224913,-1.092705647733438,-1.1374594893353054,-77.56100594809166,-0.9163268951096258,-1.537815714644223,-0.9962701079067292,-1442.6598536689812,-0.9773161505362433,68.53891920322332,-0.5147400773614781,-1.1346045098334347,-4.126725745361916,-0.3552495174942596,-0.21141172420666876,1.059978592281991,-1.921070455865413,-3.278480825006221,-2.1745520904115505,-0.7239406934458181,-1.0120543466053684,-2139.6329290407666,-1.0890055148817739,-0.9932025493542825,-18.108342898457312,1.7762375672116009,0.8050836634235283,-6.217817162835417,-0.8753903956520754,-11.92853772383524,-0.9458988258038226,-1.6531103427213782,-1.2737702322039794,-3.1000331857865753,10.121730921358823,2.184706524154776,-1.22314475792169,-0.9164785307964168,-7.881139895880248,2.003715417060848,-0.8838566906036244,1.0754287262369973,0.5123580234717151,0.21723140230850446,0.48700221251133113,-1.383468088694153,68.66139151957714,-1.0043295596301698,-1.4077784267485538,-9.300622911807627,-0.16688628264446415,-2.29528100459173,-22.671275792600618,-1.030036676661732,-4.346915092333193,4.154991991074729,-0.5456601552675308,-1.4538474073157484,0.872833696258756,-1.2848987076423262,-0.12143089501626947,-4.463867542911446,-0.8586563558028689,0.8203128226806204,-2.006226671887508,-1.6236980538250023,-0.11677427015919206,-0.9114657922533945,-117.68275698863168,-0.9464480445556677,-9.038697463424558,-3.36247861094681,-1.112141106994271,-6.17323286026935,-0.772926939277274,-2.027399413079764,-3.479004919638087,-0.25616160191324466,-0.6404950243482217,-1.7460123157023832,0.8848140066594259,5.810075163001345,22.543189587438274,-0.9860542508648319,-0.26292311023420545,-0.6534838227273315,6.1485460479942216,-0.7477376580685068,-0.380045489451837,-1.7555566372674942,0.2023637385415329,-14.38888740673712,-2.1491636375819567,-0.5298167066157167,-1.3694454662255482,4.215051898685724,-0.9237950500114211,-3.148961337971135,1.1065220397844286,-5.791169488806944,-1.0555491714294463,-3.732055637805541,-1.618869522983656,-1.0030246288822218,-275.2636151160098,3.068991019433147,-0.9601693898291492,-15.775735404545634,-0.670218341020492,-2.6013400600837766,-1.2159534109697852,3.2502821510513975,-1.28877247969061,-0.21533386706318713,-0.44523429943554393,-4.022285424695896,-2.289445780828164,-7.969853490365748,-1.3017434927657703,-0.7585246259404135,92.06297984430742,-1.0256304551791762,1.2162739641152047,10.107394925274356,-1.0147432158207559,6.696500574724795,0.4425623422549423,-1.1772478908457102,-10.228000655981072,-1.025267542289349,-39.164133254635836,-0.9340797933456862,-67.28012475518132,-0.9829773099579538,-5.169151134696248,-1.9808966221927586,4.820533780876412,-1.1057223307515744,-4.737556122850021,1.41348623445906,-0.5800001826011157,-1.0169605826157788,3.0507390892763846,5.884874151455673,-1.3785216994078793,-0.7980784281724502,0.47570845949322016,-16.867309925142933,-2.2707872564702285,36.87449692871944,-1.0111006278139232,-2.3776313668578117,-0.77982018620037,-11.644654021919933,-2.3319019950250546,-1.069590224774138,-1.7107599524664976,2.688094682301223,120.77584040087314,-1.0638327655498605,-1.3454695484034884,-1.6065505786066485,-1.8614088829125284,32.60688059661887,-0.9910365181774946,-1.8921206891314646,-1.8575369078503627,-15.519970732696097,-1.0053805069640638,-4.640497944068473,-76.48398866025286,-1.0730199536633762,-6.084891043221134,-0.9800228439128981,4.683919315832,-33.30638134592084,-0.9891932315554939,-6.2074495372192455,-1.0818586552853058,2.5173175711004547,-22.781174169109335,-1.3166235481017396,-1.407386304722337,-3.3820086079883094,13.212410663844155,-1.1820281547694114,0.5501878877499802,-0.3756322536509229,-12.261828003352925,-0.40757878113395996,-0.9857061865736193,-1.1500968026034755,-10.093906087709716,9.98805050962659,-0.3175876518255223,-2.6339457113530393,0.16878948025480844,-1.2724812211655403,-20.027750948665552,-0.9202777299046669,-0.6621170843559421,0.6753149382159187,-37.39113555640163,-1.0208823080950387,0.5970257981047706,-2.01876296626844,1.370813804905159,-3.8979199931543445,-0.9200392286056398,2.9002364909505522,-2.1645149480665653,-0.633385618457486,-82.70594927189417,-0.9994115936497214,2.461699294253215,-1.807648174796617,42.60548664430805,-1.142226394623054,3.0967159776632593,-0.7968719255291843,-1.358279574740058,-2.712270341085845,-0.2676198475199274,1.3019651314273082,-12.326203900090551,-0.938419535232061,0.1143592910058513,-0.02521398988554302,2.2424543929742433,-0.6927002322632033,-30.019442704123446,-1.061110315419084,-5.5810363014266375,-1.7093285936655187,-0.7007532211326111,-1.7090704973299164,-0.7009288512937493,13.847730560200533,-1.7961896420492116,6.1797352883064045,-0.9939624240121642,3.4177618736509965,-2.6279775268712218,-1.803020543937893,-1.7468830392772066,308.57925951501966,-0.9981755546285048,-12.297768801344688,-0.6229426745773752,-1.6075615912121621,4.699646230623447,0.15084712074115214,-0.9637857008366263,-8.809401222932038,-1.1847462549246892,-0.4361899295490418,8.476762212148376,-64.67753754990348,-1.0052668008118857,4.023350901682107,-0.07230520258645023,-0.8244819995476744,1.2912930294094007,-0.2257188982795031,-2.44060770817868,0.99876902767929,-1.4058611475189435,-3.229706031197143,0.3699065435515261,-0.07448885427301621,-1.2703676450969468,-4.441585478540713,-0.6952399311160199,-3.226000046563082,-9.437708236194073,-0.9010012773672555,-2.760713368045251,1.2729875694590609,-1.2292769137607158,-0.25528769489827974,-6.184242862460339,-0.5271505642951866,-5.799980077217231,-1.0134076686346283,22.81720650918852,-0.7327889619843537,1.3221556352949468,-1.153427621867306,-1.6371911577210594,4.118233697617952,-1.2847394623352915,18.345802962298116,-1.59058035420097,1.7141522121596093,-1.052361428783026,-0.48031970761941,-28.670085120783426,-5.190929214625992,-0.8899752629372697,-0.8854749476531972,-8.762146787732837,-0.898415023314067,6.219377493270571,-0.5874003094643236,-1.7043938714412425,4.468869521560888,-2.230814881039919,-1.0648862570961293,-1.634584411267731,-471.52174429749505,-1.0278301399614673,-0.9118045816836454,-5.182075234033829,-3.9909925204480623,2.6456856134202766,-1.0616660238276379,-0.8354457077976449,-2.9042214555469066,-36.340878823975494,-0.9314716346076346,-4.5869767555683225,13.634654656010783,-0.963870588530578,-2.959409323147824,-0.04440364352661297,-1.865967189035989,-1.5701685616521535,-68.30949271225644,-1.0245982374042606,-1.6840276824085614,-8.079428555675264,-1.1592319514197307,-3.5508590746310067,-1.1860609687898869,-19.58875004274549,-1.4919669028568254,0.9622909349018116,-24.140296294636858,-0.9901913494328681,-0.862161176815767,-6.479551702201665,-1.8672901323167468,0.261867741094983,-1.1758634057715271,1.4989749660811005,-1.0588814410400282,355.99092539105584,-0.9733679427426299,176.11905072815492,-1.0090647325383129,1.556819487341536,-1.2790563268177297,2.6181331842352833,-0.9570716889961852,117.17888511465523,-1.1669601306284851,0.6539995967562016,-3.1660380162209583,-0.7758485917019986,-0.7020871798087314,16.521427283338713,-0.6139522336904344,-1.4533802665714233,2.2480921929206796,1.2484348314586935,-1.010890320013501,25.272033156734963,-64.54504311460285,-0.9872909676509375,-3.224996434028174,-2.5160495044915203,-0.8119745196867187,-1.1390260224866824,-90.23415750124663,-1.0473931248888333,-10.91009638243992,-0.48259958928275914,-2.4219191793154238,-1.0978892906084035,4.908144168429882,-1.2174069005756354,-0.5479692685840498,0.8571649798831389,-1.5840263645318817,-7.955166888028673,-1.9611945563156066,-1.0907578665595188,3.800330387544446,-1.722714576143461,2.858450356208887,-0.8838499441608545,12.24148928407016,-1.3194281458453059,-2.0232272015924977,0.024148273629549744,0.36710324830322527,-2.08727514573592,-2.142014398152095,60.25454107773224,-0.9810001642887679,-2.0584105513444246,-4.623662238022153,-1.010263873728644,-47.53049022406086,-1.4335278478361508,-1.781748009984625,-7.122791535617663,-1.035288046209945,18.862747857639174,-1.0853320397889763,5.458124756850138,-0.8870162698205604,-1.1621055333979577,0.64450896470526,-1.5231109049530014,-1057.2527800976181,-1.0209991543957486,-1.0545843941115118,33.46258875889914,-1.1739728477873452,-1.0191015840792947,174.77222736457145,-0.45502148865228154,-7.901317297616585,23.88168576396163,-1.0216060998793828,1.2622812545584416,-1.3837790183828305,-1.1458672770424991,2.273594402527602,1.82870261858527,-1.9044259139386464,-0.672357866825877,1.2926509764642211,-1.1669401147865766,6.354210207284925,-1.1213183440979824,-9.612812094851215,0.7683964286960139,6.101110738576153,-0.9843389450523689,28.86139867637671,-0.9820510820235426,1.5810805381228734,-5.910773192466596,-1.070987208617971,-11.952506361064984,7.92203234939711,-1.0195610587497534,-7.42317128671796,-0.6126770704743227,-1.592473716202727,-3.1819227913328074,0.8686329367185026,-0.2907576900402127,-0.04194043889984078,0.4830653572851522,-0.7906624241078244,-0.11206643198740662,-4.9811592988497875,-2.3758444387130653,-0.9453177871184294,-10.366450626717825,-21.952446942688248,-0.9098617893985974,-1.0289295079349166,-1.0838527428002003,-69.1806848753502,1.8521924918470298,-2.3395296672606425,-42.84843199827853,-1.0041816462927982,287.9872974725818,-1.0020355959523017,-6.4027572713079435,-4.857085155858202,-8.566156784420684,-1.017936111635399,-7.678546459888663,-3.988387749371292,-1.005194308680189,7.090021938581829,-11.310835387751226,-0.8356617845615659,-1.3191877290012968,-1.6853607151725645,-1.8233673445885263,-2.7022656171481585,18.80504402938655,-1.1250004772032285,-0.7938371531960128,-26.628930208918067,-1.4305886958986338,0.8570155864049656,-0.8304270746313085,-0.1367350930761737,-6.042223319181482,-0.709717634440993,24.97090291963225,-1.270189167972827,0.30087191355724685,0.5955593828841435,-1.3802227513760392,-0.7990807864870526,-16.474576894262714,-0.9463095946240615,-0.9591354181737851,345.27103862965544,-0.6065754986240589,-1.0096575649072446,1.0024319250795037,-28.951633611670736,-1.1831179042491953,-10.162266222526549,-0.6467885894329859,-1.0937066644823985,11.262705893075236,-1.4813400984835774,22.31511077039701,-0.9838857719940104,90.01767366773649,-0.9274351734164256,-0.7166471771236593,4.371718207291318,-1.0329319236178403,42.055694380417414,-0.8789569087351785,-2.071711012566894,-0.7642166183927911,334.27135513125125,-1.0351203116193732,2.2881043820190468,0.25785834543566555,-5.474175441019357,-0.9345396477674792,0.5775161587982767,-0.8178777033053822,-39.142027575591236,-0.25855983981254527,-2.8359925916587407,-1.0652887282205223,-1.3399689172394078,12.684926907773194,0.2994179306044269,-2.018752737605842,-0.9733579789010547,-8.41931824030447,-1.3827161502266554,-9.897185329181244,-1.0371727294193742,15.766295134823856,-1.6801527420675888,-0.6736169980181386,2.0051138614276534,-2.5745765383952293,-1.1442359723429574,-3.347995434371831,-2.8807205223366283,1.2260389836004055,-1.5536056925466601,-1.3172775216248942,0.21011290394949023,-2.2278664118798375,4.586320256087548,-0.8889434838525135,1.1242019050125682,-0.8156758898170344,4.062315311800376,-0.003129122529194839,0.7949427072454043,-2.8046075445899286,-0.8702849135355047,2.2773004221397555,2.2759621761776665,-0.40119324255197286,-0.32149450522323164,-0.7404407485978364,0.973639133898113,-1.9996123454421504,6.308164052886964,-1.0492671800802633,-3.8914890055145444,-0.5132443738286128,-4.2430870151667275,-1.0236692359277793,-0.1903454413490102,-6.148912053066366,-17.07074500563632,-0.9736309080585687,-31.524190664554943,2.1458474139942885,-1.530963237948697,-0.9151087458435374,-2.6197781790832684,0.379945473854685,-14.210708566439171,0.01191758449712177,-0.7408529147333798,0.9817063005287168,-0.2741531172124574,-0.5853333079241698,-1.0366245782968546,-86.17656937526407,-1.2049257165500236,-1.7184345546217705,-4.070161479531308,-0.9995802894876066,-823.7223477036405,-1.871993275749034,-3.1627441867892823,3.8256618531981657,-1.1644874340435754,-1.6989678124764158,-1.3303096581910667,0.061843306000161746,0.7786982147301607,-0.9342831091171747,-429.41965420316274,-0.9359997270349796,-1.8205378851081144,-2264.1965542156513,-1.0002465807760126,1.198000387575307,-4.790834105140934,-0.8141188762724155,-2.2470807836994515,-9.239862182951265,-1.5513493754349381,5.970311758699382,-0.9433219803655792,-2.589909523895817,-2.096348531629779,-3.6170994747937635,-1.1880061095484176,-0.5776741070891915],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('8471f9d3-5624-4957-8e8f-d6aa24813aea'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            =0.168494S&amp;P_returns=%{x}Apple_returns=%{y} (trend)0.7249645769782314,-4.505504890899681,-0.4334724668002077,-1.4100720049115363,0.0017368885797819367,-0.07908960277612587,-7.456845967814729,-0.8160896482120676,0.1259537303448628,1.39577599230542,-0.7682296477808588,-2.0848153529111464,-0.24201581768519453,-0.6353383527018875,-0.4801455056175955,-20.548248892690637,-0.9286094328335633,13.103909594176729,-1.11017221500542,-1.97421360283486,-26.411023696896034,-1.458576399155346,-0.6218727367254377,1.8803558538941698,-3.9020300992752297,-1.7210602768334562,-1.0668412751004999,-8.938862158910641,-1.93838842420153,-1.589258979181296,-2.7190933792555887,-0.4078605039624078,-4.068494065064911,-1.0996234468041102,-2.1402881037226713,3.001546398964175,-0.43029505578810745,-0.6965414537157957,1.426297426629095,5.585403834922594,-1.0239737136546334,-4.490163923376411,4.2245617926612145,0.052226057549350724,0.07372452348025926,-0.4619090860299062,-2.789495585631234,-2.429067814239792,-1.7018019245678295,-1.264000245547373,-3.492357759271874,-0.9149669890778732,-6.125832326014457,-0.022524457240630458,0.3129338130594206,2.824678574969456,-0.7189495356387097,-1.5383421595138658,-4.948642096663438,0.23377898601889857,-2.0320624400247462,-1.4866375584153415,0.17370716492738447,-1.4243797361250716,-5.623237721621026,-1.1090752663144199,-1.8368662304078138,-2.3782187623501456,-1.0900149267272703,-71.3685563037438,0.313585339855448,-2.1072560577529202,-1.5311750761112686,0.1705284443319075,1.1720866766670763,-0.7032763623957599,1.0706870140377198,-2.2410458975029255,-0.38501354076489225,-1.681460387668516,-4.273173981715562,-0.5641316459886763,-1.330864537216517,6.694471168015168,-1.9165949165266367,-1.6065505453470097,0.1841043100034443,-1.621472718330951,1.3859015770135938,-0.4326175004833581,-0.5926315156147273,0.05469892313510072,0.43490429408347286,-0.11071624839905936,-0.6294889562028732,-0.6294300072137887,-1.6006954391618562,11.045485090263863,-0.6277344042262363,5.031731898300926,-0.9419125012698638,9.052825492354787,0.11632535355924256,-1.1630082389772771,6.7378962985683675,-0.3402908781035021,-2.7101951476844155,-0.3698645296364451,-1.9506310029225316,-2.0443425628704697,-0.7713628169944904,-3.448668413508147,-2.7604595211633085,-1.1088202711511361,-13.659730365331686,-0.5492082825687777,-1.5317577980109611,-5.98150008943789,-1.2765075145549165,-1.044583258094694,-29.134006080818878,-0.594718180349757,5.09224797564548,-0.9082026308315572,-4.429085618591827,-1.2848065320997124,3.4424294492175322,-0.9100676466425541,-0.16922569015362454,-18.293974874828905,-0.0556855172714924,1.1158596023392806,-2.2473764204108857,-1.7109509429838028,-0.4429410098466827,0.03680455544915917,-2.245706189003237,-1.329580561096213,-5.230355767461975,-1.5397675040328438,-1.4142509964960985,-3.994138108845673,-3.5679735379473927,-1.5536204470139614,-1.2608800291938822,1.0456246468084247,-0.34709026172914026,-1.4477720227493391,-0.29935592839937,-1.3374767819698405,-4.355331263432163,-7.556911512204282,1.2933612349044155,-1.2521990427634078,1.4570819093950056,-0.9355512802444168,-30.221222047207416,-1.3115368682196178,-3.039528026356313,0.023539511341853503,-1.3299683930908384,-2.0278091843673973,1.861942090545527,-1.232822726111463,-0.4630296385800984,1.8572545684474187,0.7445247151128962,-0.36016433749329635,0.8850802342745856,-1.0278473297960762,-23.590812214370743,-1.3036286228669454,-7.655215595695289,-1.2126622264300322,1.5191258964926027,-3.3919212581684435,-1.1876159315510486,2.2820409837302598,-1.9853152813237003,-2.3827014469527295,-0.7494763080728151,-2.6825295273001015,-0.9208962555704641,-11.011406606875708,-0.8638693752570016,6.088391789511811,-2.7088878935690266,-1.1839531678861548,-9.34735249400903,-0.9213235334346465,7.126761214990662,-0.18627754778371575,-2.6805477297881457,-0.11712956395177887,-0.44182857886860516,-2.7932103199284586,-0.7103316376700537,-4.833961138361826,-0.8831776586153477,15.365933186175571,-0.8304174406378335,-0.511720300340947,-2.609569832197308,-1.43200838598749,-2.1417463183218826,-5.644254191506101,0.35106707245633606,-1.8215611551369446,0.6937033133974371,0.3793268625118975,-1.2766527831546468,-3.1720185911044707,0.95120151444317,-1.1804915706366972,5.415689099614681,-1.0024351836000935,-139.11612456246985,-0.9024087550622367,-2.208486232159097,-10.293960018358,-1.31583284912809,-1.9211703865362817,0.20309294346249485,-3.076764095916696,-2.4848922688941113,-1.1763631933426522,3.3195370967995705,-1.7099084087160246,-2.674653303305395,-1.0313657892548946,-1.323584887758839,-120.08059715339665,-0.5628509335366618,-1.0527218283356725,-33.67541643904143,0.7000059190221339,-0.5987575331854889,-0.9814406085267807,-127.715387234946,-0.18807421474613684,-0.7134346174159738,0.9969294538198221,-0.6932443643899602,-1.3029872712686654,8.350281669725208,-1.1330937179699698,-7.900852145528284,-0.8674733875449081,-31.639542400992706,-0.5244994727739227,-0.8466069130687762,7.39555322305765,-1.4959339813176362,1.5515544694006933,-0.2038143465639679,-1.1751309089900996,-7.984192680473234,-0.9002717846510291,-3.267382367748277,0.8197217211574226,-0.5068986418446797,0.28335775742758385,-1.439017000077215,-0.05775413389892625,-0.9810304251442296,142.44559383711209,1.724976569287897,-0.2024884673563364,-2.5637844257923943,0.7199303852291028,-1.3658374170098022,-2.4629664657391332,-0.835563022415049,4.205930344288671,0.540005450284258,-1.3004820235073964,0.4020450914869338,-1.7594105011377204,3.494354809347368,-0.7891796479322257,-1.7172686269965505,-4.774620852215812,-1.123983018086161,-1.0834961598556283,-38.83783191168715,-0.7935747917991225,-9.137363630721055,-2.2296883102449585,-1.132486502316366,-0.8277637478700164,33.17995600085933,-0.5250214615406681,0.9960255833582685,-0.8045371502802998,-10.897354590791217,-1.8014806018938874,0.17614990423364363,-1.911753546799953,-1.1422837813134017,2.196354792556499,-2.5542475837214615,-1.5823760072217068,-4.015130216672322,-0.6287391757503684,-1.7197120345648038,-5.421516236860108,-1.2807734746842092,-2.2251561647676574,-0.5966925658138476,3.349393785942854,0.19955571006588246,-0.9795043742671511,-24.54125612894611,-1.610513980412711,-2.473383508448274,-3.9708448965279883,-0.9321862541592699,-3.675655805827517,-1.505528089436828,-8.294368954073015,-0.2787505922329987,-2.235484318222174,-1.5472231491354957,0.5937282698233501,-1.5126059057595405,1.2094439077766768,-0.3936486535552294,0.38541358810132453,-1.7597980491839635,0.878726075547656,-2.055930783945991,-1.214928799085963,-0.22265668237871505,-6.29513283625917,-0.5812133242612416,-0.18039702213688802,3.7489809498850324,-1.2972367359766275,-2.4418241539686263,-0.9385528571447034,3.7110604680606096,4.690664053640539,-0.6677486119346507,0.059980657885454924,0.9924115724627318,-1.340279937345982,1.299502372239119,0.24499184731027812,0.8820245846117776,-2.045693919937906,-1.536525892580531,-0.7994452993102213,0.2511130683543821,-2.1105199711591043,1.6536091059599123,0.054841528782522575,-1.6776239436271467,-0.7133798999381926,-2.6908631684417057,-1.8800735004511377,-7.463220464222304,-0.6945430037179855,0.496772459771579,-0.09797073574560888,0.7702625084645314,-0.8457387375534519,-8.163964100422312,-1.3082033507754467,-2.62966356863051,-0.18843772624796917,-2.1092423659695885,1.1117992097513567,-0.9828217172415721,13.518576428582277,4.511764854120875,-0.8585647598457911,9.806433043613993,-0.7826370004289719,-4.113585723528113,-1.4278495880192943,-0.49404310845864063,2.3837711702955158,-0.478053953256556,-1.2056741229129064,7.842508651939854,-0.8292709643039768,3.06902306112978,-0.31744916076778473,-2.0138753303050834,1.8371827641132072,-0.76365622776958,-4.030071772776628,-1.3717777116631324,1.6914626748329602,-1.5095828675114515,-0.7802215087966383,-1.1095993527832528,-54.43735752100457,-1.8259419380048196,-1.1865676369262634,-4.468696699670158,-3.1154315731509348,-0.5070848946446058,-2.6513147819888636,-1.5161167962762643,-5.632001852690236,-1.2314096993571582,-1.5622231765783225,3.150664130604624,-2.520887493697823,0.24143496356162508,-0.13354800124276556,-1.8275678417015944,-1.4370862458940141,-5.635610264538575,-1.2205643640894053,-1.3270750352082519,7.355996006820041,0.3008753914198119,0.02762119780411676,-0.4138422827455174,-0.15252305146860334,-0.42139573095727967,0.31362983104141917,-1.7081362791714563,0.48443411936063474,-0.99587574918602,49.433181338303946,1.6631551229658652,-2.5365056255683225,0.37180130408638457,-0.9074569200516172,15.712839271113609,-1.7727010967642047,-0.8303746117201988,2.7014578232785422,1.6039041522917614,-0.9557036893429115,0.47250240055953663,-13.431053114265904,-0.583196146835081,-2.623601542910653,-2.8103069892043706,-0.3414386543065028,-0.5232746601491889,-1.3890826187773184,3.2362322193737167,-0.6120580003146913,-3.925117675709234,0.7309655064790372,-0.18112345218020698,-1.3167675177835274,1.2903114607313784,-1.125834274031741,-13.552249806735515,-1.1827417555149962,-1.4567367958492048,2.157373549845757,2.421841552912629,-1.3220662937897207,-2.0371898931637045,1.1961985951679703,1.4550994785350033,-0.9904204759149758,-65.4106019413199,-0.06262789229838528,-1.2751504717526432,0.3174731835681084,-1.7784205713074002,-3.1297787287800793,-1.3022799491795767,1.538438834319161,0.6015726530270997,-1.0816296066731963,1.0336041960082771,3.310730204524191,-0.058204152892692984,-0.7261043985444486,-2.622073932505414,1.4868546700286367,-1.879151123625939,-2.8584757079292444,-1.1816344056493682,-0.9211898401088243,33.969878121350014,2.244382185029185,-1.3646690515161712,-0.16650898231531353,-1.3818007562094556,-1.2381235521720417,6.701652394199843,-4.028546393196827,-0.6614162233929819,-2.501296021420446,-2.579183180808762,-1.2340432174137992,-5.621172368298951,-1.3438273909054899,-1.0764133602894257,44.316067452658785,-1.7211419792409763,-1.6306918144277924,0.10299717912111617,-1.2475391471453026,4.726888102893144,-1.8843712242890454,-1.0607191622542647,5.952294815689708,0.616322148818508,-0.7454333749023654,-3.080166650688653,1.2548431822383939,-1.104090020516252,-13.44590995983349,1.724787038654858,-1.1494376681689498,1.0705865095168736,-3.6140517304349813,-0.5726789773917516,-1.6131875143710328,2.323074069410993,-0.9898936799708621,-36.0107326982442,-0.7487696398643057,-8.517239869965955,-1.4698343575670223,0.23720793269587404,-0.3959605224213747,0.974813880359501,-1.1286757944029993,12.244267329828107,-0.8011426375281863,-1.7810884916645786,0.15635910124801944,4.3568555268819145,-1.5649404872610977,-1.0881398881849673,1.3186846458633625,-18.69231547333096,-0.9064381947623127,-3.516430900063273,-0.43287753139444507,-3.693620846485632,-0.9013706876775325,-13.69773784246896,-1.6391177146789135,-1.726852757140155,-3.8037332317419983,-0.4234509433436583,-1.4141685077346686,-3.863746161695521,-0.9470299423533558,11.567493317699359,-0.43158093239099704,-2.7460271407139176,-0.23962335674621527,-2.6004367740602303,-1.3250369590687467,0.2057294087413144,1.3662237474610044,-1.4435023050989169,3.8690497377598163,-1.517585462504865,-1.0226873160999224,57.30934089466542,-1.0563944427379386,-6.680109164015543,-3.348496384952303,-1.4031529615534646,-1.4369394442086934,-6.267219893999442,0.20457534696994273,1.1808944433919,-0.7761656968732614,-0.4379267239383463,-0.4033563558466078,-2.816845753205954,-1.9584262438180429,-1.8727193803932987,-1.5702781723023218,6.821381335812773,-1.7639226228631393,-2.1324693067623626,0.155487182805919,-1.089641770805597,16.971384526283806,-0.7135421524919408,-3.1338394696136675,-1.017631579376733,42.69859672560716,-0.4948726171971065,-2.665336353199081,-0.3496067771846998,-1.4370174305479777,0.5352663501029284,0.06797185908589509,1.3545398781106712,-2.7512552621561652,-1.199532821567473,-4.77623712140797,0.2498914692645542,-0.34378468110790106,-1.432350596912023,-1.9353825073574376,-1.0599301537587726,36.349833111411826,-1.3589228879749604,-4.634980891873383,-2.007327655407849,-1.3911975755512822,-1.4329577418716886,0.408273792858441,-1.913928903101334,-3.266058442530551,-1.8094574298012904,-2.8346822251355963,-2.5447995582848666,-1.093894121435209,14.342106739215962,-1.515919523144697,-0.3224795086847023,-1.758261399211772,-0.6505564527594044,0.952481457119593,0.39516582050762006,0.29750238598913303,0.7483256781446479,-0.6306941377894875,-1.5886936832664178,-3.7877818105549923,1.8247936716790263,-1.0698115729964497,6.347521511302817,-2.1360157811376737,-1.1087374816427162,17.048251692029716,-1.3900370761421565,-1.6317140573439677,-0.8308826535205952,-4.666942389801736,-0.42617178718826565,2.724162780545522,-1.6138350202921476,-2.1782361810879927,-1.5058346222290173,-3.8465418543014454,-0.1670834402973852,-2.5201302089350444,-2.160933489069239,-1.493528794932443,-2.5076733416197774,-0.5454690070653195,4.004756793182536,-1.1215689080437627,0.5631766070637405,-0.9444068933886545,14.612046124262209,-3.6385067449544137,-3.0205349969949165,-0.3480941016865863,0.013401099018315987,-1.889965341701958,0.8000628291618348,-1.0610595124600368,0.6163043204525775,-1.414947565926317,15.585901861887908,-1.7981499715665978,-1.2570423002267004,3.091126364655662,-0.4861614152490904,-0.621664693042623,4.2802909402650196,-3.7004074168721943,-1.250764731276129,-1.9648908350580556,1.7988089820177922,-1.279249105816252,1.6871118152360487,-1.1000601751517414,-7.93259254044323,0.6920152424275741,-0.18443702439774035,0.24720245100459604,-0.547473449711529,-0.8983548786305704,-22.236756375852664,-0.846399663274622,2.4269611826035953,-3.5745051679500426,-1.081018172895441,-1.7004817789489568,3.4761676953493046,-0.9209363506871047,37.875136178175964,-1.3673336949052708,-1.3125474258821117,-4.815221697405758,0.7778785269717599,-0.5365464712116577,-0.9394595156914424,10.591235169609964,0.6128986535126082,1.0310150970989271,-0.9409055389160071,17.106130869874434,-1.5051144231226732,-0.8915346278788352,-18.68020217895274,-0.7878571857231977,1.4325172235137504,-1.4243459313074238,3.1997415278015,-2.398912190457332,-1.0613415997778315,-2.3921433882955756,-5.1923959053789375,-0.6824312509914344,-4.527116436853127,-0.5757088458263948,1.4949570207943221,-2.3517238534429,-0.9801937664654357,88.20899152471549,-1.0319067488964657,10.678161276822815,1.1367870315729904,0.1912020425091816,-0.12145688774659791,-1.1686260905769736,0.9044338006096757,-4.108144144341541,-1.5660533627764313,-1.539709914186265,-1.3038808686272352,9.98295216133405,-0.4437242024151514,-1.2994189072171483,2.3187728565262637,1.4145356523129213,-0.6657922799520088,-0.7064183211305957,3.6756899089041966,-0.8670384023551543,-1.585507075633731,-3.925835687444587,1.8907506733721533,-1.2594676958867863,1.6203878280738966,-3.467297539851204,-2.293959623530794,-1.069874455855915,-1.19119565923511,36.57180848278664,-0.6706984161786592,3.0869241280584223,-0.6987586511883475,-3.1330053296278484,-1.5902701895329958,-4.163803746225149,-1.0949175642576552,-1.3060987537389497,5.2629225358277765,-0.3823781834712011,13.640465840913073,-0.7084118361917515,-1.1692011786440435,0.7217573612840094,-7.428739746250938,-2.231622514216185,-1.6843402720984577,-2.1192396114077177,-0.5593468575615543,-2.5127243417082097,-3.7471926140642604,-1.6723536912467005,-1.7700450833587573,0.08859030048589744,-1.670229922100062,-3.0763843397764123,-1.179571092067717,-2.1545597015934814,-0.09827646900075149,-1.5159334387945171,-7.036898747484593,-0.021360848403869315,-3.2036002881317884,-1.7459630494846423,-2.274584600998912,-1.6210834168059165,0.09119101120124773,-1.9682803375575149,-0.6234400284218189,1.6914951619408392,-0.8056252845680474,0.4332440328055056,-3.531083623793036,0.6806144365237048,0.06515644875544058,-1.4027903900813432,-0.6278303570233621,7.046186386211833,-0.5212951267114778,-2.1972794042251733,0.6744365331711526,-1.7640269838775442,-0.5200187948075272,-0.9554306330702851,-11.609851452294471,-3.889777881176393,-1.5237885384998457,-2.1173847568803073,-0.9694996395558596,-38.79919796720196,-0.9882437214061968,-68.94885661504854,-0.7488236757756552,-0.19384073284970493,3.187399711482122,-0.3005720322728067,-7.177246879374312,-0.6491286768648594,-1.5267785225020662,-3.3587168484161256,-1.4789689075720132,-4.514248489338004,-0.684907996682668,-1.290286515633272,-5.17248816382115,-4.508636956768005,-0.2827140017205687,0.059601949241779195,-1.1197253546056725,11.120312648533599,0.2878965820531312,-0.7140451487311142,-0.21504018437783357,-4.596041933681057,-0.6986916135760031,0.451670879070174,-0.21190606337431495,-0.7291705419197256,1.8076594291158377,3.1926272285095676,-1.377866077790174,-2.4343205176895255,-1.223023462628578,7.669215696747415,-1.4432728767254264,1.752153501267896,-0.8869676986077508,-4.849452388363969,0.7787640817759278,-1.6278505848400469,-1.4039684332194247,-1.9368052837853513,-0.7723060963699422,-25.958795862238453,-1.5683718531069677,-1.1688254629520947,0.8432008973710852,1.3215783134929162,-0.9097583463520147,2.143913301337097,-2.2713776383974666,-1.6871643703863406,-2.275205945230315,-2.8111476692042876,-1.5946381135884886,-2.020264741345513,-1.077599530942332,-39.48058709918964,-1.0456407016944793,33.499007746620926,-1.711730621600071,-1.7177406045860684,-0.2781903239774345,-0.08887738809773704,-3.3074154841265595,-2.5538526068145515,-2.4692074817040863,-0.663434848988926,-0.7886108851221876,-1.2458979915326334,-6.201917726013514,0.8249518191575713,0.23812668734416498,-0.1388855475564177,-0.8387689683281041,-3.2029126988333037,-0.2334321749514089,0.2884514412942498,-6.816941665154193,-0.47647523609854314,-5.95384606776121,-1.2230660154230424,-0.7031011371124076,-1.0960723119444507,19.76666368566056,-3.89333160638534,-0.15708945795520646,-1.8156792435031714,-1.526671042612445,-3.3870563199759487,0.41986168133774204,-0.5457313910578676,-2.3760487801288477,0.10520902105467034,-0.4616808963457273,0.41320676527994515,-0.28812400171459607,-2.2427519933245224,-1.673320244712278,0.8531320837441196,-0.0576182491094035,0.5761991746192907,-0.4042426772250577,-0.5038171698059145,2.044972816342529,-1.024782743861071,32.251613090693354,-0.8150905418170856,3.568078210270353],\"type\":\"scatter\"},{\"name\":\"Cauchy Distribution\",\"opacity\":0.5,\"y\":[-0.4492374329968759,-4.450282448353553,-0.9998338212051581,-477.6003400527975,1.9974764556676337,-0.611738486633146,-6.229585067943557,-1.03084546214872,-4.884324541225647,-1.4214007692731825,-5.811451649574264,14.798109115601873,-1.0884848864019157,-1.2934453341635717,0.9440722928170009,-2.1367233751545136,-0.5923395849382238,-3.006890380186009,-1.0187498401845065,116.4153569682723,-3.026589559775443,-0.7867309005285081,-0.9696518343279009,93.8986843853723,-0.549647495732893,-3.2771907258988238,-0.24183796439773586,-1.331528491899392,-3.4902582575724526,-5.567009240773529,-0.3892959741954428,-0.8796240146500237,-40.88596002150917,-0.915424337643102,-0.49157635940077615,-0.42467598215868296,3.3491292082566213,-0.7382552621480627,-0.39441201805815296,-0.997164925684652,715.0464290362296,-0.2827746812748765,6.624193765266764,-1.0907533993710796,-4.484747898853431,-1.5024278280540897,24.102838286949684,-0.9543908949012506,2.0369636282473227,-0.7803453651565864,0.8518314399427842,-0.06297652721509339,0.9483787565800694,-0.6138241264357187,-7.135002337809994,-1.0122158441868285,34.35405286916862,-1.1592648520463493,57.34479686757837,-0.7707558669031565,-0.9761739534039561,-0.43952998227720674,-26.806474476079988,-1.9400054072622315,21.439838700957537,-0.9491349329303783,-0.457121624175704,-0.893466035464732,11.840810640686966,2.83458097064498,-0.78054004587799,-1.2108412915432043,-13.897995354171067,-0.9674801688178305,-2.6843722960199234,-1.855372777514099,21.582694859656566,-0.4223977256603356,0.9460449510661371,-2.961977582698939,-1.0969155264614208,-4.563184257865165,-1.414104857034939,-1.7782574238793958,24.90584452281739,-0.8378709897566328,-0.810364801451607,20.773177495903415,-35.197537683202356,-0.9982134875136465,-1.247150119988748,9.977390263491595,-4.702188551436008,-1.136573783863275,3.741190775606495,-0.5705433504358073,-0.8070212409962875,-78.61417941579138,-1.0591160526399264,6.188265737393335,-0.9411169232528073,2.6378447084657077,-3.0613387881475007,104.86130026977384,-1.0046818480065145,-0.056454174472543306,-0.09417001862779995,-4.7353654870377815,-2.2871598651918283,-1.0651040560797802,-8.420637072607569,-0.8803197082433554,3.8108042715025876,-0.21643116656898687,-0.5325893440582232,1.5488752600276303,-0.2490776050269209,-0.9909724905286891,38.637927845774485,-1.305524386716991,-7.973110866385866,-13.26506960220155,-0.9564035254725278,-1.3037182996592278,-0.5886644938326024,-1423.207665343402,-1.0286911093491151,-0.38799728185229665,5.2101853886068845,-1.0825252170274335,-2.068088582157671,-1.4943733961146222,-10.754663217922696,-2.111498779248858,-1.1153813240926542,26.726502226026547,-1.0506092900560846,-1.5906067224145684,-3.435646268201378,0.768320205202929,-1.4778157034933586,-0.17416145668768945,2.098676145385853,-0.8651162580895042,-5.228847542717765,-1.0594199695234565,14.056544581905017,-1.187825100883231,-2.4496582124020927,1.4355967987782936,0.4560419177808721,-1.4181461455227904,-6.161000255852681,-1.1818171473248495,-1.296641318108577,-3.587716277063131,2.417289997208542,-1.8604582402442411,-1.3733770309935776,0.11184083515249843,-0.5154832239078293,-1.0306093377549959,-338.0233803479255,-0.7095442562658403,4.012209649663032,0.03548042436517651,-0.6358985882239176,5.498210408202332,-1.0010633976960375,-156.19317377340047,-1.5634441249266056,1.0983546289638424,-1.2827769864853011,-4.187447283425966,-1.9710850314794748,-1.2913100700915714,-10.269993279983515,-1.5551531834499905,0.6877487272052811,-1.1750790591639813,-2.7978911231372563,-0.7001247502991121,-1.7648831751570855,-3.8789667383117608,-1.3147146039478617,0.12155578529906608,1.4190018610794106,-0.6482984913652566,-6.855083712378822,-1.6338561618096135,-8.017763572520444,-0.9938808032435136,-6.765289725539508,2.4493683375296214,1.3098276102467503,0.1591361224585457,-0.9749996471975314,14.953192638313784,2.2551442675716573,-2.3656075950975617,-1.4930257460289766,-0.37964011043261814,-2.254602909659299,-0.5488444493129272,-1.7534200727214875,1.2980920006634777,2.0636893079520675,-0.5680286509587834,-1.1819050716436736,-4.040213299684316,4.892125922326012,-1.5643006434967814,2.0894744865551056,-0.6341155403375934,-0.8354748647101387,-1.2439550517079099,-5.51369648721091,-0.7389642323819443,-2.708107144612992,3.658572122766225,-2.4794058949105997,0.01882826986655095,-0.3424639432162333,-1.904254139882159,-0.029581176757089156,-0.9147870533688656,3.8862214543401796,-6.2832464989100645,-1.4369349377548417,-0.9033943700717494,-4.809906616348643,-3.5139849880651552,-21.53917709474032,-0.837737883179273,-1.1390384266017335,0.25383484199236084,-0.26016772939442057,-1.3772912811396125,11.16055245069067,-0.8175973857792145,6.375632640366228,-0.7540075602129211,-14.33434974802477,-1.001551364984639,-2.5169778916450456,-18.025934508177627,3.5234118808520822,-1.6453508399409964,1.33091502439712,-0.7464308555549127,-0.08181629913286304,1.4294442603733426,0.8022338098926771,-0.568812396036125,-0.13815047596530516,-3.4450442838098936,-0.8222721197148413,-0.8988489022206908,-7.973819151757541,-0.7825457041356131,-20.969933481978558,-2.6293485656160582,-0.6375115325055658,-3.626956890784525,-0.7188531277244127,0.1827016506169079,-3.33903616828536,-0.24881468802139672,-22.343556429935692,-1.024863882282885,0.24771833165488188,6.967251420690468,-0.5648063880170866,-0.7995009964110049,0.7250117617635545,4.692102607716347,-1.3382070302176654,479.7854302863582,-1.0004542272613623,-34.361038086599464,-0.6937541942351269,-1.6054465148154051,-1.6970812496799434,1.3924480544703366,-0.9927856082675384,-227.13096651995266,-1.394849491124439,-1.6231881541664341,-0.8913544696393632,4.991932055489504,-1.0454042202242642,39.36556896967268,-4.708732476248134,0.9377493012633229,-1.2148580185042648,-0.727251708577239,-0.48837468598503,6.604548651647893,-0.1503841441714714,0.2411961284669315,-1.176370100705778,5.335379591876211,-0.9189630433806544,1.5662850691710495,-1.8138604013500135,-54.952903077388946,-0.971002647948819,-10.993753044490289,-1.035080490186321,1.8425139636668266,-0.933435195452659,-9.00688420077831,-5.225634323579276,-0.5404976953300642,-0.3070268551426617,-0.010221999804959303,1.5032805633003559,-0.8723435747474876,-13.812255980812369,2.1979195887739547,-1.1566525037143636,0.06817108079057621,-0.8101529735785179,-0.934332786650107,-35.517198325372924,-1.8295296872639446,-2.5532078907923594,0.5932861935132092,-1.2532296932853877,3.2286373824304713,-1.4794815767897989,-0.46199096131086703,1.0310834353531773,-2.282823358829104,-2.3560977258729454,-0.5962594509761439,-2.063192327162028,-1.4348225049751022,0.6196643743700159,5.21283330955599,-0.7998002575858646,-3.3543250831975233,-1.288357785151795,-5.043340541017894,2.3710245686611873,-0.9298369279300756,-0.20190932607493006,-4.534384731752027,-1.5678175697733667,-0.24256910884270322,4.544093191260102,-0.8786402708242658,24.409406732252986,-1.0370823127840723,1.3761415254252012,-0.33116132038609103,-0.5099168833132859,-5.036147886732432,-7.785347270385022,-0.1941051525417563,-0.8150382105258227,-744.0654217520656,-0.9985801855963874,1.0291053039583247,-0.5225383750781568,-1.8758207792702866,4.849450458154087,-0.7384058755663313,-2.859009890068614,-0.5079541405395742,-0.9129362963746169,108.38808502093788,-1.0245840387153686,8.011613784040335,-1.5906659301701547,1.767158836160791,-0.9469826503856882,-2.5708933809923753,6.059414999340849,-0.5689165122732487,0.8112529207577859,-1.217690459113952,-1.239513260369312,-36.56189112878932,-0.8951006233647327,-0.5860203194549898,14.10386058375803,-0.384724122609173,-1.121442002538171,9.447458329139764,-1.8579067315124689,0.1989812884692035,-0.5708786685518126,-5.231891081995388,-0.5754052174176192,-1.4174993889692138,-0.9168530412358616,-9.660575183663639,2.721617029007008,-1.0571545879583744,-6.10360709306945,-1.1542677162635593,0.8002047666362224,-18.216596594236638,-1.1102945975702898,-30.462398000085372,-1.415836909486842,-0.41917828900072474,-1.1562588003233254,0.6152706466412894,-1.1054542476091713,-1.8837366146322476,652.939056630697,-0.8709094722417775,-1.7099742220512337,-4.094870987824477,-1.1423038198783162,0.4427248084750306,-12.912561683515904,-0.9860278423295122,5.488483079834602,-0.843799076485517,-4.560176591502442,0.6031396768647146,-1.5835090888904733,6.614540401496161,-0.5262698958389109,-2.3122268038861593,0.9515522966713144,-1.1806328924923004,0.473619316016328,-0.17944977416133745,-1.7124503059228093,-0.5398702171759995,-4.194895829900433,-3.5676681999932303,-0.990435986872702,40.075358858814035,-2.1122098259255258,-1.6766457182208099,-2.256314435005908,-5.146473150299007,-1.0689433380474371,1.6521852261678358,-0.9340497768663031,-54.792832170469474,-0.9637024764812094,-10.33451601991376,-0.17211365775548915,-1.10723613497199,-17.11982074704675,0.16884840715097438,-1.18220166747683,-1.9719567675726573,3.1720993985037023,-0.35423540378745266,-1.3845035610220928,-1.7080534196135522,-1.288223829102299,-13.74984838362491,-4.143667544876596,-0.8800781514127201,-2.4881707334973564,-3.9583467870771956,-2.1914228627108168,-0.512125185352718,-1.6390609810938057,3.4230982861878685,0.5876372562268299,-1.5114005009400464,0.5737751642884503,-0.9160166975121817,-0.8991083364073691,-5.023788018735217,12.533495769025558,-0.8022196616405823,-2.7699663854793286,6.256508125401536,-0.7395105048513633,-2.3198080762535325,-0.6304521585565501,-10.437483967148328,-0.8691955995166973,9.907784628989175,-5.132823773714061,-1.0247127863820962,-13.516053244327198,-1.1732680252525984,-2.821592238937182,-0.9237105886387755,11.226197202402188,-0.32055279780838564,-1.7623975585724294,-0.6434012049168751,-6.373937121642515,-1.1347909744567934,35.192300218344116,-0.9831050132269913,9.369403894013068,-2.030203098690003,-1.0988130887519196,0.9020088019261705,-0.24625520702531267,6.316033194415776,-0.9692674856516228,-14.044690570175694,-1.6100400586535062,-1.9545103697027115,-2.52424503913619,2.169197135890206,-0.8624120877020298,-14.497192527392947,-0.9119161643535165,-35.91934166207379,-1.2553806927950117,-1.12213114678901,-1.285896009586776,-16.224345978127893,-3.318786524510307,-0.16572884860049764,-1.6729223080440563,-0.8667387893351056,8.888154273693461,-1.103100977948535,4.440376626097599,-0.8095832777642298,-6.50020250503241,0.3422850648986855,-2.117765139797651,-1.3139092022503975,-1.184986429407147,-27.69293720316693,-21.251180968713264,-0.9965902046198343,-3.292721433275562,-1.1662998170785723,-4.251915308241095,-4.476300937835527,-1.6718195197565144,-10.083345296156644,-0.7941440495856331,-1.3404852355897794,-0.9225640860573271,291.70301185667665,-0.8238925326832195,-0.9059288465461297,1.9993717105980444,-3.643946069073115,-1.1251201835718716,2.699122054392045,-2.8647070783621205,-2.3102723329169166,0.1191194732098908,-0.8933301373577911,-18.02669164973233,-0.9393765429918399,5.218232316846672,-0.8338239783721146,1.4646065933280723,0.24690235062124288,-2.7368592399600757,-0.8626339307606745,6.685037161656726,-0.8780495140604532,-14.447049809138441,-1.487575485592495,-1.080554418909717,-10.989022168631635,0.8984744116403842,-0.7749854916234642,-1.412960594028245,4.594338964482726,0.08045916645008377,-0.8757847661908577,-19.477404776991225,-4.400827572376998,-0.9179120715588134,-18.765240055149594,-1.3750929152681959,-1.3135828282077353,-1.496825037279418,-0.003017596506186271,-4.743906038206698,-1.0941562548812886,-7.69376430482792,0.0915830641796671,-1.784766970291608,1.1962798634763385,-0.35341313584099643,-0.009327809454733549,0.7805355120216961,-1.1757431137097167,1.2838137964617942,-1.3644527667717448,-2.1784393056280615,5.422993537057468,-1.2210277578426914,-1.4635211191898583,1.2495391795823685,-1.5112315398674712,-0.6006494019099049,7.092841570174379,-1.6616281392804182,-3.1440340203000243,-1.5034591485007072,-2.08948300067346,-0.6228014808602351,6.6511228614684725,-1.322642464014213,0.3602694061110616,-2.4220382143546075,-1.1456992288705365,1.3593546583392562,28.472750568149515,-1.0103284218469775,-3.715749240836921,11.062236638663112,-0.8812038431005947,-1.2453148592689134,-0.9778732065220805,-362.6772180333547,-0.8579607749658098,1.6888633493915757,-0.7952322723069857,-17.415057910121547,-0.7016766758151256,3.1128163260855723,-0.5016665345651978,-0.33211331926760235,-7.264651501843047,-0.8509744114846729,-1.444389803124054,5.77850350823504,-0.8459241350042165,-0.30991583628535335,3.9473184833509665,-1.5530752858161563,-13.889934593464142,-0.9835126284552549,-200.72598090858423,-0.9144128030013151,-0.5770684252699686,-2.5016164348477394,0.3973514181150637,-1.2616359871518628,-7.6253723840234935,-0.7028688712187601,-2.5795404217379123,-0.4280348505958086,-0.644059497659249,-0.4149301269309913,-5.911156749245924,0.4182907812251362,-3817.930112403055,-0.999531685520383,-0.218202562888567,-0.5777750848246528,-1.063223316401658,7.811708440965219,-1.4486459965171332,26.676747686427365,-1.3869125250325238,-0.9982440331660585,-321.7306162263143,-0.5481716296135641,-5.684716072257771,-1.3765486126615387,-9.79203821258623,-0.9694725689570616,-11.395101355520485,-0.7131985585506999,-0.29006752371634015,-0.6981892371397357,26.718484965511276,-1.3074272206461175,2.6435994473489215,-0.3541772575876664,-1.0102959957598971,11.669169696900964,-2.4615996405796543,0.9362567233753403,-1.2742745404615832,7.150369718418549,-2.0328053273157436,-0.9787961310431145,11.391680769557695,1.046650265929006,-0.8234529108398695,-3.3948741934677535,-3.6175489008623893,-0.8861786973563947,-10.473965207514144,4.326451509124465,-1.5932053959051888,-0.6829777756852884,-0.5023044143404893,-2.4557705178008344,-1.2385631121301983,-17.543394092207727,-1.1535586196879275,-3.292881628559899,-0.9129426429142071,-32.397079286879226,-1.0201069914551038,-16.405719321923932,-2.4294277820645567,-2.5632364130813245,0.0813014989638079,-0.399634986896912,2.2380464779676283,-0.8705346205822797,-2.6393365318791107,-1.1092819589829273,1.2109832842787926,-0.14076154071534852,-16.390499749835776,-1.479228749963871,-1.1758703722538641,8.79060834332932,-0.9461609579009318,-1.3745180013766092,-7.867575548700946,-1.2272919753597855,5.766549711409266,-0.59400894176979,-0.40164001840552066,-7.266501204152062,1.0276737954670243,-0.9944486676462797,-56.6446325243826,-0.8287110671973033,-1.8565568318339074,22.80494433882996,-1.6659618840248496,-0.45638988945677306,-1.0436005679890066,-12.328259149600438,-1.831964981044666,-2.791874250129485,-0.8604947323290165,47.49347048587779,-0.6515548829577618,0.17323656893790318,-0.7485240565968887,1.647229492497579,-1.6050405010404107,-1.285157297463972,-65.15839286907361,-1.0302798994601672,-4.665182382135415,-1.4693222873033518,-0.5860850490451569,-15.480868267485926,-0.8229268857263883,0.48525762381067516,-0.29644455714836926,-1.9334897579607402,-3.0498861401524873,-0.6920967614929838,-0.6506492211376915,1.9395633762879094,-1.83613354569795,-1.1931350533033067,-19.202106811354117,-0.5373511238168694,-0.8964402490816524,14.746648451367374,-1.6357914415096677,-1.3658432883745264,-0.254229464077935,-4.579831131887225,-6.38542398780358,-0.8934246637211615,65.22827537623468,-0.9890752526433789,-0.5927469279843125,411.9248760389517,-0.9086996004966605,-0.9832690066894413,-4.532717941222395,4.959517684452407,-11.119728464389015,-0.9885061246941592,0.16381765333313392,-1.9136994143370658,-8.290620703121053,-3.67739521575823,-1.2944944946231998,-0.4132972580657265,1.0869820734185023,-1.9839468361022985,-0.9649212943436222,-14.755529802185494,-5.128696018690695,-1.5652917701843463,-1.8804691707439956,-1.7054053346088032,-1.8799143686846458,0.5289581566117432,-1.7753676596786003,2619.0541660035,-1.000329419442467,-0.27115723911421685,-5.509559433499125,-0.9060006450745733,-2.480918867372253,-3.0844328102705507,2.6784540118057705,-0.6150583764110324,-3.924796604689396,9.79081486220959,-0.9524988763634135,-0.45456846412694685,-3.232803469818701,-1.3856631266332735,-0.6627958786088369,-5.98257502465165,-1.5800341715853503,-0.7050689882391629,-11.070863286509429,9.389250220110942,-0.9742567246947437,0.6701846410084344,-2.493500727963612,-1.4079777260113722,-1.72713807668034,-1.7614377556921539,-1.0083876881389984,-22.083350244041707,5.817339360849429,1.4169142757453907,-1.793368865736364,-2.306386706406529,-1.3388103706955725,-3.8118848753805454,-2.1809215810844353,-0.3630598149122768,-0.4511616875325133,28.218103376185542,-1.1998541958930309,-0.9489001492443931,-5.877634248404984,-14.236980440028498,-1.8956416115369752,-1.075578638056422,0.813322294837435,-3.40266959336291,-0.3790070903922532,1.437303180546043,-1.1750201335162034,0.4931196410767018,-1.4167949468446703,-0.14989327714330214,-28.711538602551197,-0.8984892237688128,-1.1207480507200378,47.5917021096778,-1.2194649342911135,0.21431393015726963,-0.6574311821100738,0.5686667689120952,-2.1641067337054576,-1.4351242133424085,0.11519631092442295,-3.00011500720245,12.43092900368697,-0.5329762379314584,-1.4421097075248386,-0.9043150001682801,-5.987247400486128,-2.396102087295707,1.86447776907504,-3.224775926500081,-0.9205374306374765,0.8367693059010279,0.5699782557171325,-1.1257863709147362,-0.8559297397851824,-246.7748188747509,1.3324413131888413,-0.9659910013870029,-13.979551231593828,-1.058377241204628,0.6066103814707284,0.6748363069093535,-1.5112436205363455,-4.648798293972767,-1.396874104318218,15.177950319965419,-0.9809197923789951,0.9329481764729124,-1.94835629150184,-0.5763099790910094,-1.388756842740276,-11.230462073599856,-0.24808507124710744,-0.9773545328830021,31.015942862859575,-2.262003721535547,-0.11263674760900577,-9.797661127412514,-0.7722921499379672,-0.9898549473730601,-46.80859052160208,-3.9279723898802796,2.7075288326955333,-1.0804171361115635,3.387406791192894,-0.8914448609109584,-5.421320421773398,-0.834350128326083,1.3249456282507635,3.218097339624298,-2.018761155602326,-0.8440147884489538,-2.899330094720616,-4.351412415829736,0.33553135632861664,-0.042757189741170376,-0.7225630566976864,-1.8245049835448588,-3.7219816439953037,-2.213107640724518,-1.044399896591888,-11.158489823779568,0.1014390091268762,-3.063672377006119,-1.9770528234876503,-2.569834477818409,-0.8454756786768662,-0.9429329328126874,14.622778079330644,-0.621471065948203,-0.273228646867096,-63.750338946489805,-1.084316141437826,-1.8348896498787992,-7.302212662282007,0.9973937977877683,-0.7798955962489309,0.20492124626065755,-1.0576952015127166,-114.37138571050735,-0.9875705152309171,6.063685912538172,-0.6474798418290906,-1.935974248048915,-5.997536491730789,-0.4233239489102383,2.7808738194497598,-1.4141365256900695,1.8317365874826508,-0.8121110234778399,-0.15593847538735117,7.143755787881396,-0.8155204473945789,-14.661056145740709,-1.009770151599341,99.22767161017448,-1.5177475251877546,-0.9740221130380626,2.632380725087399,1.6592472871533537,-4.297362727779202,-1.0641880890955098,1.654234306659295,-0.8673463302780311,-7.058818016519928,-1.4824522089220526,-0.3186089304070071,-0.1896524210953332,-2.806888527150702,-3.7823830609502287,-0.8256524055277654,-3.82147314514941,-7.198236614819386,-0.7519224452536788,-0.5913842373472883,14.438021363678418,-1.064598810749295,-1.165712411869712,-27.117757352239025,-0.901709318476714,-10.484074786960843,-0.7692251305903623,10.125204391672645,-0.5368971507595237,-0.8115937311085738,-2.547331690661946,-2.5345093114103188,-4.378106002518838,-0.9584213116676537,7.649857377662979,1.4608836399887566,-2.4435060869933283,-1.7337772004651242,26.590694898367666,-1.0893948938123867,-0.29757192411502154,5.072980081776466,-0.9986224676002354,-61.51012639838194,-2.861327415415883,-1.1795671746101388,-0.9791159362905022,306.91329622144997,-1.0275388921819677,-6.058892269621411,-9.50860312621405,-1.259355022698526,0.5505349068585943,-1.9023491613562737,0.4099658044612997,-0.3372030990028142,-1.3054976713880468,-1.6659918702943473,-3.086506714025725,1.758482221603464,-1.0138713087971758,7.258851922257497,-21.1705156780105,-0.5834515985894473,-1.1108260722297916,-2.065671407216721,14.348941313407238,-1.580125175746229,-3.091752583503211,-1.6595845929230393,-2.2453382486271116,-1.6615818172076415,-2.1117806259863743,-1.5248746779357094,-0.593514775599342,-2.7714543003507246,-0.2806388302198296,-14.073081428948875,-1.371454095588635,-1.0458920901041586,6.024888285925333,-1.7142298156094187,-0.032428761083979296,5.656284367880994,-2.842831489380017,-1.2731119636111432,-0.7371024132287054,-0.3377403210667974,1.3360676327693644,-0.15631224654824205,0.8114162259511901,-2.053392071561542,-0.20851541246311667,-1.1689937334105458,-0.1581456452348321,2.984223852226243,0.7059440666082712,-0.30912804200550903,3.293350085853322,-1.0293658171982563,2.4061163290894045,9.117723292141806,0.042535858959322104,-1.0608748360517157,0.7434737713920851,-0.09343014839109909,238.32086900830984,-1.0079215441719445,-0.6608407155762435,-1.5797265973259293,-1274.4775461298364,-0.9982073240613857,2.2389559369668794,-0.5281006978433689,-8.093764616750297,-0.48389467703033107,-0.9746622423766911,1.1524977336009568,38.55525260711723,-0.7581476299117554,6.0002411399970415,-1.003462952571742,4.47174919587439,-4.726641707581031,-3.213883359814844,-2.1478482429688315,-7.9326902002928135,-0.9478285727537991,-1.7120888117110877,-0.915201311629457,173.7905216965764,-0.8966442696467489,-3.647148947361812,-1.9204055408994654,1.463262831240412,-3.011871616542579,-0.7724628866475138,-1.352392192181736,-10.095534433027094,-1.1456017682867206,6.51312973515126,-0.9575558774820069,-5.547234373992948,-1.1736564642937737,-0.019323513068285614,-5.396557149644362,-0.37389069380941464,-1.9006646186470233,-1.1898778326517743,-48.299794106098204,-0.9533273485426652,14.741883588669,-0.9983337085218676,558.903119490778,-2.68556632799457,6.259823446303272,-1.035848605452351,0.044895188376951056,-2.0944405202699268,-4.1180658915941315,3.495730305058035,-0.8888532416088618,-0.5910961557879564,-0.9806491681616206,-5.578873798133379,-115.57393145646141,-1.595544975371887,-1.0376039785161555,-2.176592016818861,-3.5987831810163806,-1.1760030748157833,-34.67459235718229,-0.2516365123688553,-0.9534372848780184,0.20262383383386884,7.275838706197334,-1.209132660243852,3.9871339545717754,14.865199318456954,-0.9689853858354044,-1.302310078439281,6.39710627881272,-1.8605498496372956,-4.217515068584579,-0.3570995064421997,-2.0111235684946207,-1.4743142201208694,-7.022931057083127,-1.1109861627774964,9.575900855226122,-1.1486876930949197,-0.7503373485230432,-5.464452728159939,-1.590830268760386,-2.0520022515663614,-1.4924466734538517,-1.0599481805517712,-51.77463167943382,-1.3153771758633734,1.4567198972546365,-0.5407842740177798,-1.4036105295644883,-7.117218621406876,-0.35078302706315434,-0.10124053313299042,5.395767661348266,-0.8603670614609544,-7.4080809368211655,-1.193613410926365,3.5045801856062164,-2.9698766695882184,-0.2456745040383438,-0.6124823169523649,-13.596201434909188,-1.0012506045411798,55.011804822926194,-26.565631811104357,-1.003472684420584,2.7924342920442276,-2.2407409867277304,-2.2411012495362903,-1.4287424427397988,-1.6206570635209865,-2.2291380089905273,56.033553726939076,-0.8143012073549359,-2.059318458754125,-3.529137487708381,-1.190763447020169,-1.7544607170933495,-0.6725754758790095,-3.3451983241618914,-4.778090961683913,-1.4458730181695016,-0.6811414290748639,-0.47984377487262075,1.5202681735154164,-1.969532822038559,0.015927472131535003,-2.510216430179185,0.22640188717046983,-0.6031716483906381,-6.548461265346767,-0.9414016489667809,-3.025139115850951,1.0624732829659433,16.725427797303304,-0.9612803982790286,-0.2230131454767733,-1.408317411323388,-2.1765655104733996,-8.9741244409168,-2.0523929513047596,-0.40099874253970447,-1.5219611850981014,-0.48849641542858724,-4.762182308016835,-1.5054990861899753,0.9689943627955815,4.416921748874937,-0.8418297447622278,7.929098612855684,-1.133424950324271,2.135403018853655,-4.4564408392834185,-1.0365309257004198,2.0970051364523137,2.896889042885063,0.13259434200764142,-0.8023056789745545,-3.699964474311941,-1.2742517371139397,0.1281057233884939,-0.3082267010774121,3.057782783568916,-0.8637172016448241,-0.09240366918470366,8.452384639041577,-0.3085464150777373,-1.3704772534745189,1.1707325755818694,2.1586842573492353,-0.6345920048287483,-1.0139291044225178,-35.21962987814355,-914.0674073847064,-1.0006212737337443,-4.111715621791097,-0.6025250520902987,-2.4639786661601484,-3.4298971447563114,-0.6098278683329106,-6.408977793680583,-0.8528520446396847,-5.607263104718604,-4.6390866775364525,-0.881380560400704,-1.5611391332010702,-0.6904510849730761,-7.224705150167135,-0.6802181371984417,0.17005762506992284,-1.5269647197206633,3.311136253894434,-2.761742595384674,-1.053049161623042,0.8441958175847981,-4.207325057731797,1.042535915490292,-0.3865934917391477,-0.6001185004323364,0.8721419369771861,-6.697963099646895,-0.7920622940504422,1.763221108508303,-2.0148549624126035,-1.9342033545717965,-1.54426986216371,-1.2924708906823588,-11.56728485540318,-0.7061931530098702,-0.24109373672432388,5.565239514826616,-0.6604845605965151,-0.5002231127050902,-148.9811106784836,-0.9805758120454009,-1.6942934602243374,-3.4439358438788266,-1.1911250616047062,0.05349996453910655,-0.6876112288389995,-0.9643013583820376,19.77478893099594,-8.045147123239998,-0.617083901942137,-8.345370278256205,-0.9196174306834763,-0.7958068579020389,3.188166077421684,-2.4977428475145222,-1.7155868800700604,-6.411149432927789,2.453793679939997,-1.163867220563478,0.1597115028742606,-0.9589513296390457,82.79552564839337,-0.9358938834630444,1.2387073917872184,-1.3886491424559904,-2.6741492297764387,3.3749408372217573,-1.245630398519417,2.2232871402037913,1.8311164156691828,0.11161730789317059,-0.839002401220926,-0.4946482578875794,-2.8396001099745516,-2.661202619829915,7.885434776586711,-1.0256698575276193,-3.4271744911216278,101.22897067130893,-0.8251521382374853,-1.0562931963933146,-1.1842128673207633,3.4662733751934,0.02641980167694502,-1.915455955968876,16.059216364792672,-1.2293314055251479,-4.795215716052718,-0.9153966095682038,61.47703857006423,-0.9833894392615331,0.1383394759116463,0.8777433601310678,-1.73296387617235,4.4714587530450265,-0.8829324153431239,-6.240822875853116,-0.2588506311995299,-1.5376394916199874,2.5673607768615856,-1.1138235478008742,-6.306151441401172,-0.4665979416134428,-0.583731100071962,-1.6716386256287956,-3.551543209137066,0.6779431375765737,-4.892864810043974,-0.3523884057595539,7.484210629498133,-0.9583600915036828,-2.1176856550854968,-2.869184499202661,-1.9402445012751508,2.2058236648664797,-0.6992704448257304,-1.0443973913186118,-1.2956614250903358,-17.892455956591785,-191.96823319550876,-0.7104905259224913,-1.092705647733438,-1.1374594893353054,-77.56100594809166,-0.9163268951096258,-1.537815714644223,-0.9962701079067292,-1442.6598536689812,-0.9773161505362433,68.53891920322332,-0.5147400773614781,-1.1346045098334347,-4.126725745361916,-0.3552495174942596,-0.21141172420666876,1.059978592281991,-1.921070455865413,-3.278480825006221,-2.1745520904115505,-0.7239406934458181,-1.0120543466053684,-2139.6329290407666,-1.0890055148817739,-0.9932025493542825,-18.108342898457312,1.7762375672116009,0.8050836634235283,-6.217817162835417,-0.8753903956520754,-11.92853772383524,-0.9458988258038226,-1.6531103427213782,-1.2737702322039794,-3.1000331857865753,10.121730921358823,2.184706524154776,-1.22314475792169,-0.9164785307964168,-7.881139895880248,2.003715417060848,-0.8838566906036244,1.0754287262369973,0.5123580234717151,0.21723140230850446,0.48700221251133113,-1.383468088694153,68.66139151957714,-1.0043295596301698,-1.4077784267485538,-9.300622911807627,-0.16688628264446415,-2.29528100459173,-22.671275792600618,-1.030036676661732,-4.346915092333193,4.154991991074729,-0.5456601552675308,-1.4538474073157484,0.872833696258756,-1.2848987076423262,-0.12143089501626947,-4.463867542911446,-0.8586563558028689,0.8203128226806204,-2.006226671887508,-1.6236980538250023,-0.11677427015919206,-0.9114657922533945,-117.68275698863168,-0.9464480445556677,-9.038697463424558,-3.36247861094681,-1.112141106994271,-6.17323286026935,-0.772926939277274,-2.027399413079764,-3.479004919638087,-0.25616160191324466,-0.6404950243482217,-1.7460123157023832,0.8848140066594259,5.810075163001345,22.543189587438274,-0.9860542508648319,-0.26292311023420545,-0.6534838227273315,6.1485460479942216,-0.7477376580685068,-0.380045489451837,-1.7555566372674942,0.2023637385415329,-14.38888740673712,-2.1491636375819567,-0.5298167066157167,-1.3694454662255482,4.215051898685724,-0.9237950500114211,-3.148961337971135,1.1065220397844286,-5.791169488806944,-1.0555491714294463,-3.732055637805541,-1.618869522983656,-1.0030246288822218,-275.2636151160098,3.068991019433147,-0.9601693898291492,-15.775735404545634,-0.670218341020492,-2.6013400600837766,-1.2159534109697852,3.2502821510513975,-1.28877247969061,-0.21533386706318713,-0.44523429943554393,-4.022285424695896,-2.289445780828164,-7.969853490365748,-1.3017434927657703,-0.7585246259404135,92.06297984430742,-1.0256304551791762,1.2162739641152047,10.107394925274356,-1.0147432158207559,6.696500574724795,0.4425623422549423,-1.1772478908457102,-10.228000655981072,-1.025267542289349,-39.164133254635836,-0.9340797933456862,-67.28012475518132,-0.9829773099579538,-5.169151134696248,-1.9808966221927586,4.820533780876412,-1.1057223307515744,-4.737556122850021,1.41348623445906,-0.5800001826011157,-1.0169605826157788,3.0507390892763846,5.884874151455673,-1.3785216994078793,-0.7980784281724502,0.47570845949322016,-16.867309925142933,-2.2707872564702285,36.87449692871944,-1.0111006278139232,-2.3776313668578117,-0.77982018620037,-11.644654021919933,-2.3319019950250546,-1.069590224774138,-1.7107599524664976,2.688094682301223,120.77584040087314,-1.0638327655498605,-1.3454695484034884,-1.6065505786066485,-1.8614088829125284,32.60688059661887,-0.9910365181774946,-1.8921206891314646,-1.8575369078503627,-15.519970732696097,-1.0053805069640638,-4.640497944068473,-76.48398866025286,-1.0730199536633762,-6.084891043221134,-0.9800228439128981,4.683919315832,-33.30638134592084,-0.9891932315554939,-6.2074495372192455,-1.0818586552853058,2.5173175711004547,-22.781174169109335,-1.3166235481017396,-1.407386304722337,-3.3820086079883094,13.212410663844155,-1.1820281547694114,0.5501878877499802,-0.3756322536509229,-12.261828003352925,-0.40757878113395996,-0.9857061865736193,-1.1500968026034755,-10.093906087709716,9.98805050962659,-0.3175876518255223,-2.6339457113530393,0.16878948025480844,-1.2724812211655403,-20.027750948665552,-0.9202777299046669,-0.6621170843559421,0.6753149382159187,-37.39113555640163,-1.0208823080950387,0.5970257981047706,-2.01876296626844,1.370813804905159,-3.8979199931543445,-0.9200392286056398,2.9002364909505522,-2.1645149480665653,-0.633385618457486,-82.70594927189417,-0.9994115936497214,2.461699294253215,-1.807648174796617,42.60548664430805,-1.142226394623054,3.0967159776632593,-0.7968719255291843,-1.358279574740058,-2.712270341085845,-0.2676198475199274,1.3019651314273082,-12.326203900090551,-0.938419535232061,0.1143592910058513,-0.02521398988554302,2.2424543929742433,-0.6927002322632033,-30.019442704123446,-1.061110315419084,-5.5810363014266375,-1.7093285936655187,-0.7007532211326111,-1.7090704973299164,-0.7009288512937493,13.847730560200533,-1.7961896420492116,6.1797352883064045,-0.9939624240121642,3.4177618736509965,-2.6279775268712218,-1.803020543937893,-1.7468830392772066,308.57925951501966,-0.9981755546285048,-12.297768801344688,-0.6229426745773752,-1.6075615912121621,4.699646230623447,0.15084712074115214,-0.9637857008366263,-8.809401222932038,-1.1847462549246892,-0.4361899295490418,8.476762212148376,-64.67753754990348,-1.0052668008118857,4.023350901682107,-0.07230520258645023,-0.8244819995476744,1.2912930294094007,-0.2257188982795031,-2.44060770817868,0.99876902767929,-1.4058611475189435,-3.229706031197143,0.3699065435515261,-0.07448885427301621,-1.2703676450969468,-4.441585478540713,-0.6952399311160199,-3.226000046563082,-9.437708236194073,-0.9010012773672555,-2.760713368045251,1.2729875694590609,-1.2292769137607158,-0.25528769489827974,-6.184242862460339,-0.5271505642951866,-5.799980077217231,-1.0134076686346283,22.81720650918852,-0.7327889619843537,1.3221556352949468,-1.153427621867306,-1.6371911577210594,4.118233697617952,-1.2847394623352915,18.345802962298116,-1.59058035420097,1.7141522121596093,-1.052361428783026,-0.48031970761941,-28.670085120783426,-5.190929214625992,-0.8899752629372697,-0.8854749476531972,-8.762146787732837,-0.898415023314067,6.219377493270571,-0.5874003094643236,-1.7043938714412425,4.468869521560888,-2.230814881039919,-1.0648862570961293,-1.634584411267731,-471.52174429749505,-1.0278301399614673,-0.9118045816836454,-5.182075234033829,-3.9909925204480623,2.6456856134202766,-1.0616660238276379,-0.8354457077976449,-2.9042214555469066,-36.340878823975494,-0.9314716346076346,-4.5869767555683225,13.634654656010783,-0.963870588530578,-2.959409323147824,-0.04440364352661297,-1.865967189035989,-1.5701685616521535,-68.30949271225644,-1.0245982374042606,-1.6840276824085614,-8.079428555675264,-1.1592319514197307,-3.5508590746310067,-1.1860609687898869,-19.58875004274549,-1.4919669028568254,0.9622909349018116,-24.140296294636858,-0.9901913494328681,-0.862161176815767,-6.479551702201665,-1.8672901323167468,0.261867741094983,-1.1758634057715271,1.4989749660811005,-1.0588814410400282,355.99092539105584,-0.9733679427426299,176.11905072815492,-1.0090647325383129,1.556819487341536,-1.2790563268177297,2.6181331842352833,-0.9570716889961852,117.17888511465523,-1.1669601306284851,0.6539995967562016,-3.1660380162209583,-0.7758485917019986,-0.7020871798087314,16.521427283338713,-0.6139522336904344,-1.4533802665714233,2.2480921929206796,1.2484348314586935,-1.010890320013501,25.272033156734963,-64.54504311460285,-0.9872909676509375,-3.224996434028174,-2.5160495044915203,-0.8119745196867187,-1.1390260224866824,-90.23415750124663,-1.0473931248888333,-10.91009638243992,-0.48259958928275914,-2.4219191793154238,-1.0978892906084035,4.908144168429882,-1.2174069005756354,-0.5479692685840498,0.8571649798831389,-1.5840263645318817,-7.955166888028673,-1.9611945563156066,-1.0907578665595188,3.800330387544446,-1.722714576143461,2.858450356208887,-0.8838499441608545,12.24148928407016,-1.3194281458453059,-2.0232272015924977,0.024148273629549744,0.36710324830322527,-2.08727514573592,-2.142014398152095,60.25454107773224,-0.9810001642887679,-2.0584105513444246,-4.623662238022153,-1.010263873728644,-47.53049022406086,-1.4335278478361508,-1.781748009984625,-7.122791535617663,-1.035288046209945,18.862747857639174,-1.0853320397889763,5.458124756850138,-0.8870162698205604,-1.1621055333979577,0.64450896470526,-1.5231109049530014,-1057.2527800976181,-1.0209991543957486,-1.0545843941115118,33.46258875889914,-1.1739728477873452,-1.0191015840792947,174.77222736457145,-0.45502148865228154,-7.901317297616585,23.88168576396163,-1.0216060998793828,1.2622812545584416,-1.3837790183828305,-1.1458672770424991,2.273594402527602,1.82870261858527,-1.9044259139386464,-0.672357866825877,1.2926509764642211,-1.1669401147865766,6.354210207284925,-1.1213183440979824,-9.612812094851215,0.7683964286960139,6.101110738576153,-0.9843389450523689,28.86139867637671,-0.9820510820235426,1.5810805381228734,-5.910773192466596,-1.070987208617971,-11.952506361064984,7.92203234939711,-1.0195610587497534,-7.42317128671796,-0.6126770704743227,-1.592473716202727,-3.1819227913328074,0.8686329367185026,-0.2907576900402127,-0.04194043889984078,0.4830653572851522,-0.7906624241078244,-0.11206643198740662,-4.9811592988497875,-2.3758444387130653,-0.9453177871184294,-10.366450626717825,-21.952446942688248,-0.9098617893985974,-1.0289295079349166,-1.0838527428002003,-69.1806848753502,1.8521924918470298,-2.3395296672606425,-42.84843199827853,-1.0041816462927982,287.9872974725818,-1.0020355959523017,-6.4027572713079435,-4.857085155858202,-8.566156784420684,-1.017936111635399,-7.678546459888663,-3.988387749371292,-1.005194308680189,7.090021938581829,-11.310835387751226,-0.8356617845615659,-1.3191877290012968,-1.6853607151725645,-1.8233673445885263,-2.7022656171481585,18.80504402938655,-1.1250004772032285,-0.7938371531960128,-26.628930208918067,-1.4305886958986338,0.8570155864049656,-0.8304270746313085,-0.1367350930761737,-6.042223319181482,-0.709717634440993,24.97090291963225,-1.270189167972827,0.30087191355724685,0.5955593828841435,-1.3802227513760392,-0.7990807864870526,-16.474576894262714,-0.9463095946240615,-0.9591354181737851,345.27103862965544,-0.6065754986240589,-1.0096575649072446,1.0024319250795037,-28.951633611670736,-1.1831179042491953,-10.162266222526549,-0.6467885894329859,-1.0937066644823985,11.262705893075236,-1.4813400984835774,22.31511077039701,-0.9838857719940104,90.01767366773649,-0.9274351734164256,-0.7166471771236593,4.371718207291318,-1.0329319236178403,42.055694380417414,-0.8789569087351785,-2.071711012566894,-0.7642166183927911,334.27135513125125,-1.0351203116193732,2.2881043820190468,0.25785834543566555,-5.474175441019357,-0.9345396477674792,0.5775161587982767,-0.8178777033053822,-39.142027575591236,-0.25855983981254527,-2.8359925916587407,-1.0652887282205223,-1.3399689172394078,12.684926907773194,0.2994179306044269,-2.018752737605842,-0.9733579789010547,-8.41931824030447,-1.3827161502266554,-9.897185329181244,-1.0371727294193742,15.766295134823856,-1.6801527420675888,-0.6736169980181386,2.0051138614276534,-2.5745765383952293,-1.1442359723429574,-3.347995434371831,-2.8807205223366283,1.2260389836004055,-1.5536056925466601,-1.3172775216248942,0.21011290394949023,-2.2278664118798375,4.586320256087548,-0.8889434838525135,1.1242019050125682,-0.8156758898170344,4.062315311800376,-0.003129122529194839,0.7949427072454043,-2.8046075445899286,-0.8702849135355047,2.2773004221397555,2.2759621761776665,-0.40119324255197286,-0.32149450522323164,-0.7404407485978364,0.973639133898113,-1.9996123454421504,6.308164052886964,-1.0492671800802633,-3.8914890055145444,-0.5132443738286128,-4.2430870151667275,-1.0236692359277793,-0.1903454413490102,-6.148912053066366,-17.07074500563632,-0.9736309080585687,-31.524190664554943,2.1458474139942885,-1.530963237948697,-0.9151087458435374,-2.6197781790832684,0.379945473854685,-14.210708566439171,0.01191758449712177,-0.7408529147333798,0.9817063005287168,-0.2741531172124574,-0.5853333079241698,-1.0366245782968546,-86.17656937526407,-1.2049257165500236,-1.7184345546217705,-4.070161479531308,-0.9995802894876066,-823.7223477036405,-1.871993275749034,-3.1627441867892823,3.8256618531981657,-1.1644874340435754,-1.6989678124764158,-1.3303096581910667,0.061843306000161746,0.7786982147301607,-0.9342831091171747,-429.41965420316274,-0.9359997270349796,-1.8205378851081144,-2264.1965542156513,-1.0002465807760126,1.198000387575307,-4.790834105140934,-0.8141188762724155,-2.2470807836994515,-9.239862182951265,-1.5513493754349381,5.970311758699382,-0.9433219803655792,-2.589909523895817,-2.096348531629779,-3.6170994747937635,-1.1880061095484176,-0.5776741070891915],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('8471f9d3-5624-4957-8e8f-d6aa24813aea'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            9782314,-4.505504890899681,-0.4334724668002077,-1.4100720049115363,0.0017368885797819367,-0.07908960277612587,-7.456845967814729,-0.8160896482120676,0.1259537303448628,1.39577599230542,-0.7682296477808588,-2.0848153529111464,-0.24201581768519453,-0.6353383527018875,-0.4801455056175955,-20.548248892690637,-0.9286094328335633,13.103909594176729,-1.11017221500542,-1.97421360283486,-26.411023696896034,-1.458576399155346,-0.6218727367254377,1.8803558538941698,-3.9020300992752297,-1.7210602768334562,-1.0668412751004999,-8.938862158910641,-1.93838842420153,-1.589258979181296,-2.7190933792555887,-0.4078605039624078,-4.068494065064911,-1.0996234468041102,-2.1402881037226713,3.001546398964175,-0.43029505578810745,-0.6965414537157957,1.426297426629095,5.585403834922594,-1.0239737136546334,-4.490163923376411,4.2245617926612145,0.052226057549350724,0.07372452348025926,-0.4619090860299062,-2.789495585631234,-2.429067814239792,-1.7018019245678295,-1.264000245547373,-3.492357759271874,-0.9149669890778732,-6.125832326014457,-0.022524457240630458,0.3129338130594206,2.824678574969456,-0.7189495356387097,-1.5383421595138658,-4.948642096663438,0.23377898601889857,-2.0320624400247462,-1.4866375584153415,0.17370716492738447,-1.4243797361250716,-5.623237721621026,-1.1090752663144199,-1.8368662304078138,-2.3782187623501456,-1.0900149267272703,-71.3685563037438,0.313585339855448,-2.1072560577529202,-1.5311750761112686,0.1705284443319075,1.1720866766670763,-0.7032763623957599,1.0706870140377198,-2.2410458975029255,-0.38501354076489225,-1.681460387668516,-4.273173981715562,-0.5641316459886763,-1.330864537216517,6.694471168015168,-1.9165949165266367,-1.6065505453470097,0.1841043100034443,-1.621472718330951,1.3859015770135938,-0.4326175004833581,-0.5926315156147273,0.05469892313510072,0.43490429408347286,-0.11071624839905936,-0.6294889562028732,-0.6294300072137887,-1.6006954391618562,11.045485090263863,-0.6277344042262363,5.031731898300926,-0.9419125012698638,9.052825492354787,0.11632535355924256,-1.1630082389772771,6.7378962985683675,-0.3402908781035021,-2.7101951476844155,-0.3698645296364451,-1.9506310029225316,-2.0443425628704697,-0.7713628169944904,-3.448668413508147,-2.7604595211633085,-1.1088202711511361,-13.659730365331686,-0.5492082825687777,-1.5317577980109611,-5.98150008943789,-1.2765075145549165,-1.044583258094694,-29.134006080818878,-0.594718180349757,5.09224797564548,-0.9082026308315572,-4.429085618591827,-1.2848065320997124,3.4424294492175322,-0.9100676466425541,-0.16922569015362454,-18.293974874828905,-0.0556855172714924,1.1158596023392806,-2.2473764204108857,-1.7109509429838028,-0.4429410098466827,0.03680455544915917,-2.245706189003237,-1.329580561096213,-5.230355767461975,-1.5397675040328438,-1.4142509964960985,-3.994138108845673,-3.5679735379473927,-1.5536204470139614,-1.2608800291938822,1.0456246468084247,-0.34709026172914026,-1.4477720227493391,-0.29935592839937,-1.3374767819698405,-4.355331263432163,-7.556911512204282,1.2933612349044155,-1.2521990427634078,1.4570819093950056,-0.9355512802444168,-30.221222047207416,-1.3115368682196178,-3.039528026356313,0.023539511341853503,-1.3299683930908384,-2.0278091843673973,1.861942090545527,-1.232822726111463,-0.4630296385800984,1.8572545684474187,0.7445247151128962,-0.36016433749329635,0.8850802342745856,-1.0278473297960762,-23.590812214370743,-1.3036286228669454,-7.655215595695289,-1.2126622264300322,1.5191258964926027,-3.3919212581684435,-1.1876159315510486,2.2820409837302598,-1.9853152813237003,-2.3827014469527295,-0.7494763080728151,-2.6825295273001015,-0.9208962555704641,-11.011406606875708,-0.8638693752570016,6.088391789511811,-2.7088878935690266,-1.1839531678861548,-9.34735249400903,-0.9213235334346465,7.126761214990662,-0.18627754778371575,-2.6805477297881457,-0.11712956395177887,-0.44182857886860516,-2.7932103199284586,-0.7103316376700537,-4.833961138361826,-0.8831776586153477,15.365933186175571,-0.8304174406378335,-0.511720300340947,-2.609569832197308,-1.43200838598749,-2.1417463183218826,-5.644254191506101,0.35106707245633606,-1.8215611551369446,0.6937033133974371,0.3793268625118975,-1.2766527831546468,-3.1720185911044707,0.95120151444317,-1.1804915706366972,5.415689099614681,-1.0024351836000935,-139.11612456246985,-0.9024087550622367,-2.208486232159097,-10.293960018358,-1.31583284912809,-1.9211703865362817,0.20309294346249485,-3.076764095916696,-2.4848922688941113,-1.1763631933426522,3.3195370967995705,-1.7099084087160246,-2.674653303305395,-1.0313657892548946,-1.323584887758839,-120.08059715339665,-0.5628509335366618,-1.0527218283356725,-33.67541643904143,0.7000059190221339,-0.5987575331854889,-0.9814406085267807,-127.715387234946,-0.18807421474613684,-0.7134346174159738,0.9969294538198221,-0.6932443643899602,-1.3029872712686654,8.350281669725208,-1.1330937179699698,-7.900852145528284,-0.8674733875449081,-31.639542400992706,-0.5244994727739227,-0.8466069130687762,7.39555322305765,-1.4959339813176362,1.5515544694006933,-0.2038143465639679,-1.1751309089900996,-7.984192680473234,-0.9002717846510291,-3.267382367748277,0.8197217211574226,-0.5068986418446797,0.28335775742758385,-1.439017000077215,-0.05775413389892625,-0.9810304251442296,142.44559383711209,1.724976569287897,-0.2024884673563364,-2.5637844257923943,0.7199303852291028,-1.3658374170098022,-2.4629664657391332,-0.835563022415049,4.205930344288671,0.540005450284258,-1.3004820235073964,0.4020450914869338,-1.7594105011377204,3.494354809347368,-0.7891796479322257,-1.7172686269965505,-4.774620852215812,-1.123983018086161,-1.0834961598556283,-38.83783191168715,-0.7935747917991225,-9.137363630721055,-2.2296883102449585,-1.132486502316366,-0.8277637478700164,33.17995600085933,-0.5250214615406681,0.9960255833582685,-0.8045371502802998,-10.897354590791217,-1.8014806018938874,0.17614990423364363,-1.911753546799953,-1.1422837813134017,2.196354792556499,-2.5542475837214615,-1.5823760072217068,-4.015130216672322,-0.6287391757503684,-1.7197120345648038,-5.421516236860108,-1.2807734746842092,-2.2251561647676574,-0.5966925658138476,3.349393785942854,0.19955571006588246,-0.9795043742671511,-24.54125612894611,-1.610513980412711,-2.473383508448274,-3.9708448965279883,-0.9321862541592699,-3.675655805827517,-1.505528089436828,-8.294368954073015,-0.2787505922329987,-2.235484318222174,-1.5472231491354957,0.5937282698233501,-1.5126059057595405,1.2094439077766768,-0.3936486535552294,0.38541358810132453,-1.7597980491839635,0.878726075547656,-2.055930783945991,-1.214928799085963,-0.22265668237871505,-6.29513283625917,-0.5812133242612416,-0.18039702213688802,3.7489809498850324,-1.2972367359766275,-2.4418241539686263,-0.9385528571447034,3.7110604680606096,4.690664053640539,-0.6677486119346507,0.059980657885454924,0.9924115724627318,-1.340279937345982,1.299502372239119,0.24499184731027812,0.8820245846117776,-2.045693919937906,-1.536525892580531,-0.7994452993102213,0.2511130683543821,-2.1105199711591043,1.6536091059599123,0.054841528782522575,-1.6776239436271467,-0.7133798999381926,-2.6908631684417057,-1.8800735004511377,-7.463220464222304,-0.6945430037179855,0.496772459771579,-0.09797073574560888,0.7702625084645314,-0.8457387375534519,-8.163964100422312,-1.3082033507754467,-2.62966356863051,-0.18843772624796917,-2.1092423659695885,1.1117992097513567,-0.9828217172415721,13.518576428582277,4.511764854120875,-0.8585647598457911,9.806433043613993,-0.7826370004289719,-4.113585723528113,-1.4278495880192943,-0.49404310845864063,2.3837711702955158,-0.478053953256556,-1.2056741229129064,7.842508651939854,-0.8292709643039768,3.06902306112978,-0.31744916076778473,-2.0138753303050834,1.8371827641132072,-0.76365622776958,-4.030071772776628,-1.3717777116631324,1.6914626748329602,-1.5095828675114515,-0.7802215087966383,-1.1095993527832528,-54.43735752100457,-1.8259419380048196,-1.1865676369262634,-4.468696699670158,-3.1154315731509348,-0.5070848946446058,-2.6513147819888636,-1.5161167962762643,-5.632001852690236,-1.2314096993571582,-1.5622231765783225,3.150664130604624,-2.520887493697823,0.24143496356162508,-0.13354800124276556,-1.8275678417015944,-1.4370862458940141,-5.635610264538575,-1.2205643640894053,-1.3270750352082519,7.355996006820041,0.3008753914198119,0.02762119780411676,-0.4138422827455174,-0.15252305146860334,-0.42139573095727967,0.31362983104141917,-1.7081362791714563,0.48443411936063474,-0.99587574918602,49.433181338303946,1.6631551229658652,-2.5365056255683225,0.37180130408638457,-0.9074569200516172,15.712839271113609,-1.7727010967642047,-0.8303746117201988,2.7014578232785422,1.6039041522917614,-0.9557036893429115,0.47250240055953663,-13.431053114265904,-0.583196146835081,-2.623601542910653,-2.8103069892043706,-0.3414386543065028,-0.5232746601491889,-1.3890826187773184,3.2362322193737167,-0.6120580003146913,-3.925117675709234,0.7309655064790372,-0.18112345218020698,-1.3167675177835274,1.2903114607313784,-1.125834274031741,-13.552249806735515,-1.1827417555149962,-1.4567367958492048,2.157373549845757,2.421841552912629,-1.3220662937897207,-2.0371898931637045,1.1961985951679703,1.4550994785350033,-0.9904204759149758,-65.4106019413199,-0.06262789229838528,-1.2751504717526432,0.3174731835681084,-1.7784205713074002,-3.1297787287800793,-1.3022799491795767,1.538438834319161,0.6015726530270997,-1.0816296066731963,1.0336041960082771,3.310730204524191,-0.058204152892692984,-0.7261043985444486,-2.622073932505414,1.4868546700286367,-1.879151123625939,-2.8584757079292444,-1.1816344056493682,-0.9211898401088243,33.969878121350014,2.244382185029185,-1.3646690515161712,-0.16650898231531353,-1.3818007562094556,-1.2381235521720417,6.701652394199843,-4.028546393196827,-0.6614162233929819,-2.501296021420446,-2.579183180808762,-1.2340432174137992,-5.621172368298951,-1.3438273909054899,-1.0764133602894257,44.316067452658785,-1.7211419792409763,-1.6306918144277924,0.10299717912111617,-1.2475391471453026,4.726888102893144,-1.8843712242890454,-1.0607191622542647,5.952294815689708,0.616322148818508,-0.7454333749023654,-3.080166650688653,1.2548431822383939,-1.104090020516252,-13.44590995983349,1.724787038654858,-1.1494376681689498,1.0705865095168736,-3.6140517304349813,-0.5726789773917516,-1.6131875143710328,2.323074069410993,-0.9898936799708621,-36.0107326982442,-0.7487696398643057,-8.517239869965955,-1.4698343575670223,0.23720793269587404,-0.3959605224213747,0.974813880359501,-1.1286757944029993,12.244267329828107,-0.8011426375281863,-1.7810884916645786,0.15635910124801944,4.3568555268819145,-1.5649404872610977,-1.0881398881849673,1.3186846458633625,-18.69231547333096,-0.9064381947623127,-3.516430900063273,-0.43287753139444507,-3.693620846485632,-0.9013706876775325,-13.69773784246896,-1.6391177146789135,-1.726852757140155,-3.8037332317419983,-0.4234509433436583,-1.4141685077346686,-3.863746161695521,-0.9470299423533558,11.567493317699359,-0.43158093239099704,-2.7460271407139176,-0.23962335674621527,-2.6004367740602303,-1.3250369590687467,0.2057294087413144,1.3662237474610044,-1.4435023050989169,3.8690497377598163,-1.517585462504865,-1.0226873160999224,57.30934089466542,-1.0563944427379386,-6.680109164015543,-3.348496384952303,-1.4031529615534646,-1.4369394442086934,-6.267219893999442,0.20457534696994273,1.1808944433919,-0.7761656968732614,-0.4379267239383463,-0.4033563558466078,-2.816845753205954,-1.9584262438180429,-1.8727193803932987,-1.5702781723023218,6.821381335812773,-1.7639226228631393,-2.1324693067623626,0.155487182805919,-1.089641770805597,16.971384526283806,-0.7135421524919408,-3.1338394696136675,-1.017631579376733,42.69859672560716,-0.4948726171971065,-2.665336353199081,-0.3496067771846998,-1.4370174305479777,0.5352663501029284,0.06797185908589509,1.3545398781106712,-2.7512552621561652,-1.199532821567473,-4.77623712140797,0.2498914692645542,-0.34378468110790106,-1.432350596912023,-1.9353825073574376,-1.0599301537587726,36.349833111411826,-1.3589228879749604,-4.634980891873383,-2.007327655407849,-1.3911975755512822,-1.4329577418716886,0.408273792858441,-1.913928903101334,-3.266058442530551,-1.8094574298012904,-2.8346822251355963,-2.5447995582848666,-1.093894121435209,14.342106739215962,-1.515919523144697,-0.3224795086847023,-1.758261399211772,-0.6505564527594044,0.952481457119593,0.39516582050762006,0.29750238598913303,0.7483256781446479,-0.6306941377894875,-1.5886936832664178,-3.7877818105549923,1.8247936716790263,-1.0698115729964497,6.347521511302817,-2.1360157811376737,-1.1087374816427162,17.048251692029716,-1.3900370761421565,-1.6317140573439677,-0.8308826535205952,-4.666942389801736,-0.42617178718826565,2.724162780545522,-1.6138350202921476,-2.1782361810879927,-1.5058346222290173,-3.8465418543014454,-0.1670834402973852,-2.5201302089350444,-2.160933489069239,-1.493528794932443,-2.5076733416197774,-0.5454690070653195,4.004756793182536,-1.1215689080437627,0.5631766070637405,-0.9444068933886545,14.612046124262209,-3.6385067449544137,-3.0205349969949165,-0.3480941016865863,0.013401099018315987,-1.889965341701958,0.8000628291618348,-1.0610595124600368,0.6163043204525775,-1.414947565926317,15.585901861887908,-1.7981499715665978,-1.2570423002267004,3.091126364655662,-0.4861614152490904,-0.621664693042623,4.2802909402650196,-3.7004074168721943,-1.250764731276129,-1.9648908350580556,1.7988089820177922,-1.279249105816252,1.6871118152360487,-1.1000601751517414,-7.93259254044323,0.6920152424275741,-0.18443702439774035,0.24720245100459604,-0.547473449711529,-0.8983548786305704,-22.236756375852664,-0.846399663274622,2.4269611826035953,-3.5745051679500426,-1.081018172895441,-1.7004817789489568,3.4761676953493046,-0.9209363506871047,37.875136178175964,-1.3673336949052708,-1.3125474258821117,-4.815221697405758,0.7778785269717599,-0.5365464712116577,-0.9394595156914424,10.591235169609964,0.6128986535126082,1.0310150970989271,-0.9409055389160071,17.106130869874434,-1.5051144231226732,-0.8915346278788352,-18.68020217895274,-0.7878571857231977,1.4325172235137504,-1.4243459313074238,3.1997415278015,-2.398912190457332,-1.0613415997778315,-2.3921433882955756,-5.1923959053789375,-0.6824312509914344,-4.527116436853127,-0.5757088458263948,1.4949570207943221,-2.3517238534429,-0.9801937664654357,88.20899152471549,-1.0319067488964657,10.678161276822815,1.1367870315729904,0.1912020425091816,-0.12145688774659791,-1.1686260905769736,0.9044338006096757,-4.108144144341541,-1.5660533627764313,-1.539709914186265,-1.3038808686272352,9.98295216133405,-0.4437242024151514,-1.2994189072171483,2.3187728565262637,1.4145356523129213,-0.6657922799520088,-0.7064183211305957,3.6756899089041966,-0.8670384023551543,-1.585507075633731,-3.925835687444587,1.8907506733721533,-1.2594676958867863,1.6203878280738966,-3.467297539851204,-2.293959623530794,-1.069874455855915,-1.19119565923511,36.57180848278664,-0.6706984161786592,3.0869241280584223,-0.6987586511883475,-3.1330053296278484,-1.5902701895329958,-4.163803746225149,-1.0949175642576552,-1.3060987537389497,5.2629225358277765,-0.3823781834712011,13.640465840913073,-0.7084118361917515,-1.1692011786440435,0.7217573612840094,-7.428739746250938,-2.231622514216185,-1.6843402720984577,-2.1192396114077177,-0.5593468575615543,-2.5127243417082097,-3.7471926140642604,-1.6723536912467005,-1.7700450833587573,0.08859030048589744,-1.670229922100062,-3.0763843397764123,-1.179571092067717,-2.1545597015934814,-0.09827646900075149,-1.5159334387945171,-7.036898747484593,-0.021360848403869315,-3.2036002881317884,-1.7459630494846423,-2.274584600998912,-1.6210834168059165,0.09119101120124773,-1.9682803375575149,-0.6234400284218189,1.6914951619408392,-0.8056252845680474,0.4332440328055056,-3.531083623793036,0.6806144365237048,0.06515644875544058,-1.4027903900813432,-0.6278303570233621,7.046186386211833,-0.5212951267114778,-2.1972794042251733,0.6744365331711526,-1.7640269838775442,-0.5200187948075272,-0.9554306330702851,-11.609851452294471,-3.889777881176393,-1.5237885384998457,-2.1173847568803073,-0.9694996395558596,-38.79919796720196,-0.9882437214061968,-68.94885661504854,-0.7488236757756552,-0.19384073284970493,3.187399711482122,-0.3005720322728067,-7.177246879374312,-0.6491286768648594,-1.5267785225020662,-3.3587168484161256,-1.4789689075720132,-4.514248489338004,-0.684907996682668,-1.290286515633272,-5.17248816382115,-4.508636956768005,-0.2827140017205687,0.059601949241779195,-1.1197253546056725,11.120312648533599,0.2878965820531312,-0.7140451487311142,-0.21504018437783357,-4.596041933681057,-0.6986916135760031,0.451670879070174,-0.21190606337431495,-0.7291705419197256,1.8076594291158377,3.1926272285095676,-1.377866077790174,-2.4343205176895255,-1.223023462628578,7.669215696747415,-1.4432728767254264,1.752153501267896,-0.8869676986077508,-4.849452388363969,0.7787640817759278,-1.6278505848400469,-1.4039684332194247,-1.9368052837853513,-0.7723060963699422,-25.958795862238453,-1.5683718531069677,-1.1688254629520947,0.8432008973710852,1.3215783134929162,-0.9097583463520147,2.143913301337097,-2.2713776383974666,-1.6871643703863406,-2.275205945230315,-2.8111476692042876,-1.5946381135884886,-2.020264741345513,-1.077599530942332,-39.48058709918964,-1.0456407016944793,33.499007746620926,-1.711730621600071,-1.7177406045860684,-0.2781903239774345,-0.08887738809773704,-3.3074154841265595,-2.5538526068145515,-2.4692074817040863,-0.663434848988926,-0.7886108851221876,-1.2458979915326334,-6.201917726013514,0.8249518191575713,0.23812668734416498,-0.1388855475564177,-0.8387689683281041,-3.2029126988333037,-0.2334321749514089,0.2884514412942498,-6.816941665154193,-0.47647523609854314,-5.95384606776121,-1.2230660154230424,-0.7031011371124076,-1.0960723119444507,19.76666368566056,-3.89333160638534,-0.15708945795520646,-1.8156792435031714,-1.526671042612445,-3.3870563199759487,0.41986168133774204,-0.5457313910578676,-2.3760487801288477,0.10520902105467034,-0.4616808963457273,0.41320676527994515,-0.28812400171459607,-2.2427519933245224,-1.673320244712278,0.8531320837441196,-0.0576182491094035,0.5761991746192907,-0.4042426772250577,-0.5038171698059145,2.044972816342529,-1.024782743861071,32.251613090693354,-0.8150905418170856,3.568078210270353],\"type\":\"scatter\"},{\"name\":\"Cauchy Distribution\",\"opacity\":0.5,\"y\":[-0.4492374329968759,-4.450282448353553,-0.9998338212051581,-477.6003400527975,1.9974764556676337,-0.611738486633146,-6.229585067943557,-1.03084546214872,-4.884324541225647,-1.4214007692731825,-5.811451649574264,14.798109115601873,-1.0884848864019157,-1.2934453341635717,0.9440722928170009,-2.1367233751545136,-0.5923395849382238,-3.006890380186009,-1.0187498401845065,116.4153569682723,-3.026589559775443,-0.7867309005285081,-0.9696518343279009,93.8986843853723,-0.549647495732893,-3.2771907258988238,-0.24183796439773586,-1.331528491899392,-3.4902582575724526,-5.567009240773529,-0.3892959741954428,-0.8796240146500237,-40.88596002150917,-0.915424337643102,-0.49157635940077615,-0.42467598215868296,3.3491292082566213,-0.7382552621480627,-0.39441201805815296,-0.997164925684652,715.0464290362296,-0.2827746812748765,6.624193765266764,-1.0907533993710796,-4.484747898853431,-1.5024278280540897,24.102838286949684,-0.9543908949012506,2.0369636282473227,-0.7803453651565864,0.8518314399427842,-0.06297652721509339,0.9483787565800694,-0.6138241264357187,-7.135002337809994,-1.0122158441868285,34.35405286916862,-1.1592648520463493,57.34479686757837,-0.7707558669031565,-0.9761739534039561,-0.43952998227720674,-26.806474476079988,-1.9400054072622315,21.439838700957537,-0.9491349329303783,-0.457121624175704,-0.893466035464732,11.840810640686966,2.83458097064498,-0.78054004587799,-1.2108412915432043,-13.897995354171067,-0.9674801688178305,-2.6843722960199234,-1.855372777514099,21.582694859656566,-0.4223977256603356,0.9460449510661371,-2.961977582698939,-1.0969155264614208,-4.563184257865165,-1.414104857034939,-1.7782574238793958,24.90584452281739,-0.8378709897566328,-0.810364801451607,20.773177495903415,-35.197537683202356,-0.9982134875136465,-1.247150119988748,9.977390263491595,-4.702188551436008,-1.136573783863275,3.741190775606495,-0.5705433504358073,-0.8070212409962875,-78.61417941579138,-1.0591160526399264,6.188265737393335,-0.9411169232528073,2.6378447084657077,-3.0613387881475007,104.86130026977384,-1.0046818480065145,-0.056454174472543306,-0.09417001862779995,-4.7353654870377815,-2.2871598651918283,-1.0651040560797802,-8.420637072607569,-0.8803197082433554,3.8108042715025876,-0.21643116656898687,-0.5325893440582232,1.5488752600276303,-0.2490776050269209,-0.9909724905286891,38.637927845774485,-1.305524386716991,-7.973110866385866,-13.26506960220155,-0.9564035254725278,-1.3037182996592278,-0.5886644938326024,-1423.207665343402,-1.0286911093491151,-0.38799728185229665,5.2101853886068845,-1.0825252170274335,-2.068088582157671,-1.4943733961146222,-10.754663217922696,-2.111498779248858,-1.1153813240926542,26.726502226026547,-1.0506092900560846,-1.5906067224145684,-3.435646268201378,0.768320205202929,-1.4778157034933586,-0.17416145668768945,2.098676145385853,-0.8651162580895042,-5.228847542717765,-1.0594199695234565,14.056544581905017,-1.187825100883231,-2.4496582124020927,1.4355967987782936,0.4560419177808721,-1.4181461455227904,-6.161000255852681,-1.1818171473248495,-1.296641318108577,-3.587716277063131,2.417289997208542,-1.8604582402442411,-1.3733770309935776,0.11184083515249843,-0.5154832239078293,-1.0306093377549959,-338.0233803479255,-0.7095442562658403,4.012209649663032,0.03548042436517651,-0.6358985882239176,5.498210408202332,-1.0010633976960375,-156.19317377340047,-1.5634441249266056,1.0983546289638424,-1.2827769864853011,-4.187447283425966,-1.9710850314794748,-1.2913100700915714,-10.269993279983515,-1.5551531834499905,0.6877487272052811,-1.1750790591639813,-2.7978911231372563,-0.7001247502991121,-1.7648831751570855,-3.8789667383117608,-1.3147146039478617,0.12155578529906608,1.4190018610794106,-0.6482984913652566,-6.855083712378822,-1.6338561618096135,-8.017763572520444,-0.9938808032435136,-6.765289725539508,2.4493683375296214,1.3098276102467503,0.1591361224585457,-0.9749996471975314,14.953192638313784,2.2551442675716573,-2.3656075950975617,-1.4930257460289766,-0.37964011043261814,-2.254602909659299,-0.5488444493129272,-1.7534200727214875,1.2980920006634777,2.0636893079520675,-0.5680286509587834,-1.1819050716436736,-4.040213299684316,4.892125922326012,-1.5643006434967814,2.0894744865551056,-0.6341155403375934,-0.8354748647101387,-1.2439550517079099,-5.51369648721091,-0.7389642323819443,-2.708107144612992,3.658572122766225,-2.4794058949105997,0.01882826986655095,-0.3424639432162333,-1.904254139882159,-0.029581176757089156,-0.9147870533688656,3.8862214543401796,-6.2832464989100645,-1.4369349377548417,-0.9033943700717494,-4.809906616348643,-3.5139849880651552,-21.53917709474032,-0.837737883179273,-1.1390384266017335,0.25383484199236084,-0.26016772939442057,-1.3772912811396125,11.16055245069067,-0.8175973857792145,6.375632640366228,-0.7540075602129211,-14.33434974802477,-1.001551364984639,-2.5169778916450456,-18.025934508177627,3.5234118808520822,-1.6453508399409964,1.33091502439712,-0.7464308555549127,-0.08181629913286304,1.4294442603733426,0.8022338098926771,-0.568812396036125,-0.13815047596530516,-3.4450442838098936,-0.8222721197148413,-0.8988489022206908,-7.973819151757541,-0.7825457041356131,-20.969933481978558,-2.6293485656160582,-0.6375115325055658,-3.626956890784525,-0.7188531277244127,0.1827016506169079,-3.33903616828536,-0.24881468802139672,-22.343556429935692,-1.024863882282885,0.24771833165488188,6.967251420690468,-0.5648063880170866,-0.7995009964110049,0.7250117617635545,4.692102607716347,-1.3382070302176654,479.7854302863582,-1.0004542272613623,-34.361038086599464,-0.6937541942351269,-1.6054465148154051,-1.6970812496799434,1.3924480544703366,-0.9927856082675384,-227.13096651995266,-1.394849491124439,-1.6231881541664341,-0.8913544696393632,4.991932055489504,-1.0454042202242642,39.36556896967268,-4.708732476248134,0.9377493012633229,-1.2148580185042648,-0.727251708577239,-0.48837468598503,6.604548651647893,-0.1503841441714714,0.2411961284669315,-1.176370100705778,5.335379591876211,-0.9189630433806544,1.5662850691710495,-1.8138604013500135,-54.952903077388946,-0.971002647948819,-10.993753044490289,-1.035080490186321,1.8425139636668266,-0.933435195452659,-9.00688420077831,-5.225634323579276,-0.5404976953300642,-0.3070268551426617,-0.010221999804959303,1.5032805633003559,-0.8723435747474876,-13.812255980812369,2.1979195887739547,-1.1566525037143636,0.06817108079057621,-0.8101529735785179,-0.934332786650107,-35.517198325372924,-1.8295296872639446,-2.5532078907923594,0.5932861935132092,-1.2532296932853877,3.2286373824304713,-1.4794815767897989,-0.46199096131086703,1.0310834353531773,-2.282823358829104,-2.3560977258729454,-0.5962594509761439,-2.063192327162028,-1.4348225049751022,0.6196643743700159,5.21283330955599,-0.7998002575858646,-3.3543250831975233,-1.288357785151795,-5.043340541017894,2.3710245686611873,-0.9298369279300756,-0.20190932607493006,-4.534384731752027,-1.5678175697733667,-0.24256910884270322,4.544093191260102,-0.8786402708242658,24.409406732252986,-1.0370823127840723,1.3761415254252012,-0.33116132038609103,-0.5099168833132859,-5.036147886732432,-7.785347270385022,-0.1941051525417563,-0.8150382105258227,-744.0654217520656,-0.9985801855963874,1.0291053039583247,-0.5225383750781568,-1.8758207792702866,4.849450458154087,-0.7384058755663313,-2.859009890068614,-0.5079541405395742,-0.9129362963746169,108.38808502093788,-1.0245840387153686,8.011613784040335,-1.5906659301701547,1.767158836160791,-0.9469826503856882,-2.5708933809923753,6.059414999340849,-0.5689165122732487,0.8112529207577859,-1.217690459113952,-1.239513260369312,-36.56189112878932,-0.8951006233647327,-0.5860203194549898,14.10386058375803,-0.384724122609173,-1.121442002538171,9.447458329139764,-1.8579067315124689,0.1989812884692035,-0.5708786685518126,-5.231891081995388,-0.5754052174176192,-1.4174993889692138,-0.9168530412358616,-9.660575183663639,2.721617029007008,-1.0571545879583744,-6.10360709306945,-1.1542677162635593,0.8002047666362224,-18.216596594236638,-1.1102945975702898,-30.462398000085372,-1.415836909486842,-0.41917828900072474,-1.1562588003233254,0.6152706466412894,-1.1054542476091713,-1.8837366146322476,652.939056630697,-0.8709094722417775,-1.7099742220512337,-4.094870987824477,-1.1423038198783162,0.4427248084750306,-12.912561683515904,-0.9860278423295122,5.488483079834602,-0.843799076485517,-4.560176591502442,0.6031396768647146,-1.5835090888904733,6.614540401496161,-0.5262698958389109,-2.3122268038861593,0.9515522966713144,-1.1806328924923004,0.473619316016328,-0.17944977416133745,-1.7124503059228093,-0.5398702171759995,-4.194895829900433,-3.5676681999932303,-0.990435986872702,40.075358858814035,-2.1122098259255258,-1.6766457182208099,-2.256314435005908,-5.146473150299007,-1.0689433380474371,1.6521852261678358,-0.9340497768663031,-54.792832170469474,-0.9637024764812094,-10.33451601991376,-0.17211365775548915,-1.10723613497199,-17.11982074704675,0.16884840715097438,-1.18220166747683,-1.9719567675726573,3.1720993985037023,-0.35423540378745266,-1.3845035610220928,-1.7080534196135522,-1.288223829102299,-13.74984838362491,-4.143667544876596,-0.8800781514127201,-2.4881707334973564,-3.9583467870771956,-2.1914228627108168,-0.512125185352718,-1.6390609810938057,3.4230982861878685,0.5876372562268299,-1.5114005009400464,0.5737751642884503,-0.9160166975121817,-0.8991083364073691,-5.023788018735217,12.533495769025558,-0.8022196616405823,-2.7699663854793286,6.256508125401536,-0.7395105048513633,-2.3198080762535325,-0.6304521585565501,-10.437483967148328,-0.8691955995166973,9.907784628989175,-5.132823773714061,-1.0247127863820962,-13.516053244327198,-1.1732680252525984,-2.821592238937182,-0.9237105886387755,11.226197202402188,-0.32055279780838564,-1.7623975585724294,-0.6434012049168751,-6.373937121642515,-1.1347909744567934,35.192300218344116,-0.9831050132269913,9.369403894013068,-2.030203098690003,-1.0988130887519196,0.9020088019261705,-0.24625520702531267,6.316033194415776,-0.9692674856516228,-14.044690570175694,-1.6100400586535062,-1.9545103697027115,-2.52424503913619,2.169197135890206,-0.8624120877020298,-14.497192527392947,-0.9119161643535165,-35.91934166207379,-1.2553806927950117,-1.12213114678901,-1.285896009586776,-16.224345978127893,-3.318786524510307,-0.16572884860049764,-1.6729223080440563,-0.8667387893351056,8.888154273693461,-1.103100977948535,4.440376626097599,-0.8095832777642298,-6.50020250503241,0.3422850648986855,-2.117765139797651,-1.3139092022503975,-1.184986429407147,-27.69293720316693,-21.251180968713264,-0.9965902046198343,-3.292721433275562,-1.1662998170785723,-4.251915308241095,-4.476300937835527,-1.6718195197565144,-10.083345296156644,-0.7941440495856331,-1.3404852355897794,-0.9225640860573271,291.70301185667665,-0.8238925326832195,-0.9059288465461297,1.9993717105980444,-3.643946069073115,-1.1251201835718716,2.699122054392045,-2.8647070783621205,-2.3102723329169166,0.1191194732098908,-0.8933301373577911,-18.02669164973233,-0.9393765429918399,5.218232316846672,-0.8338239783721146,1.4646065933280723,0.24690235062124288,-2.7368592399600757,-0.8626339307606745,6.685037161656726,-0.8780495140604532,-14.447049809138441,-1.487575485592495,-1.080554418909717,-10.989022168631635,0.8984744116403842,-0.7749854916234642,-1.412960594028245,4.594338964482726,0.08045916645008377,-0.8757847661908577,-19.477404776991225,-4.400827572376998,-0.9179120715588134,-18.765240055149594,-1.3750929152681959,-1.3135828282077353,-1.496825037279418,-0.003017596506186271,-4.743906038206698,-1.0941562548812886,-7.69376430482792,0.0915830641796671,-1.784766970291608,1.1962798634763385,-0.35341313584099643,-0.009327809454733549,0.7805355120216961,-1.1757431137097167,1.2838137964617942,-1.3644527667717448,-2.1784393056280615,5.422993537057468,-1.2210277578426914,-1.4635211191898583,1.2495391795823685,-1.5112315398674712,-0.6006494019099049,7.092841570174379,-1.6616281392804182,-3.1440340203000243,-1.5034591485007072,-2.08948300067346,-0.6228014808602351,6.6511228614684725,-1.322642464014213,0.3602694061110616,-2.4220382143546075,-1.1456992288705365,1.3593546583392562,28.472750568149515,-1.0103284218469775,-3.715749240836921,11.062236638663112,-0.8812038431005947,-1.2453148592689134,-0.9778732065220805,-362.6772180333547,-0.8579607749658098,1.6888633493915757,-0.7952322723069857,-17.415057910121547,-0.7016766758151256,3.1128163260855723,-0.5016665345651978,-0.33211331926760235,-7.264651501843047,-0.8509744114846729,-1.444389803124054,5.77850350823504,-0.8459241350042165,-0.30991583628535335,3.9473184833509665,-1.5530752858161563,-13.889934593464142,-0.9835126284552549,-200.72598090858423,-0.9144128030013151,-0.5770684252699686,-2.5016164348477394,0.3973514181150637,-1.2616359871518628,-7.6253723840234935,-0.7028688712187601,-2.5795404217379123,-0.4280348505958086,-0.644059497659249,-0.4149301269309913,-5.911156749245924,0.4182907812251362,-3817.930112403055,-0.999531685520383,-0.218202562888567,-0.5777750848246528,-1.063223316401658,7.811708440965219,-1.4486459965171332,26.676747686427365,-1.3869125250325238,-0.9982440331660585,-321.7306162263143,-0.5481716296135641,-5.684716072257771,-1.3765486126615387,-9.79203821258623,-0.9694725689570616,-11.395101355520485,-0.7131985585506999,-0.29006752371634015,-0.6981892371397357,26.718484965511276,-1.3074272206461175,2.6435994473489215,-0.3541772575876664,-1.0102959957598971,11.669169696900964,-2.4615996405796543,0.9362567233753403,-1.2742745404615832,7.150369718418549,-2.0328053273157436,-0.9787961310431145,11.391680769557695,1.046650265929006,-0.8234529108398695,-3.3948741934677535,-3.6175489008623893,-0.8861786973563947,-10.473965207514144,4.326451509124465,-1.5932053959051888,-0.6829777756852884,-0.5023044143404893,-2.4557705178008344,-1.2385631121301983,-17.543394092207727,-1.1535586196879275,-3.292881628559899,-0.9129426429142071,-32.397079286879226,-1.0201069914551038,-16.405719321923932,-2.4294277820645567,-2.5632364130813245,0.0813014989638079,-0.399634986896912,2.2380464779676283,-0.8705346205822797,-2.6393365318791107,-1.1092819589829273,1.2109832842787926,-0.14076154071534852,-16.390499749835776,-1.479228749963871,-1.1758703722538641,8.79060834332932,-0.9461609579009318,-1.3745180013766092,-7.867575548700946,-1.2272919753597855,5.766549711409266,-0.59400894176979,-0.40164001840552066,-7.266501204152062,1.0276737954670243,-0.9944486676462797,-56.6446325243826,-0.8287110671973033,-1.8565568318339074,22.80494433882996,-1.6659618840248496,-0.45638988945677306,-1.0436005679890066,-12.328259149600438,-1.831964981044666,-2.791874250129485,-0.8604947323290165,47.49347048587779,-0.6515548829577618,0.17323656893790318,-0.7485240565968887,1.647229492497579,-1.6050405010404107,-1.285157297463972,-65.15839286907361,-1.0302798994601672,-4.665182382135415,-1.4693222873033518,-0.5860850490451569,-15.480868267485926,-0.8229268857263883,0.48525762381067516,-0.29644455714836926,-1.9334897579607402,-3.0498861401524873,-0.6920967614929838,-0.6506492211376915,1.9395633762879094,-1.83613354569795,-1.1931350533033067,-19.202106811354117,-0.5373511238168694,-0.8964402490816524,14.746648451367374,-1.6357914415096677,-1.3658432883745264,-0.254229464077935,-4.579831131887225,-6.38542398780358,-0.8934246637211615,65.22827537623468,-0.9890752526433789,-0.5927469279843125,411.9248760389517,-0.9086996004966605,-0.9832690066894413,-4.532717941222395,4.959517684452407,-11.119728464389015,-0.9885061246941592,0.16381765333313392,-1.9136994143370658,-8.290620703121053,-3.67739521575823,-1.2944944946231998,-0.4132972580657265,1.0869820734185023,-1.9839468361022985,-0.9649212943436222,-14.755529802185494,-5.128696018690695,-1.5652917701843463,-1.8804691707439956,-1.7054053346088032,-1.8799143686846458,0.5289581566117432,-1.7753676596786003,2619.0541660035,-1.000329419442467,-0.27115723911421685,-5.509559433499125,-0.9060006450745733,-2.480918867372253,-3.0844328102705507,2.6784540118057705,-0.6150583764110324,-3.924796604689396,9.79081486220959,-0.9524988763634135,-0.45456846412694685,-3.232803469818701,-1.3856631266332735,-0.6627958786088369,-5.98257502465165,-1.5800341715853503,-0.7050689882391629,-11.070863286509429,9.389250220110942,-0.9742567246947437,0.6701846410084344,-2.493500727963612,-1.4079777260113722,-1.72713807668034,-1.7614377556921539,-1.0083876881389984,-22.083350244041707,5.817339360849429,1.4169142757453907,-1.793368865736364,-2.306386706406529,-1.3388103706955725,-3.8118848753805454,-2.1809215810844353,-0.3630598149122768,-0.4511616875325133,28.218103376185542,-1.1998541958930309,-0.9489001492443931,-5.877634248404984,-14.236980440028498,-1.8956416115369752,-1.075578638056422,0.813322294837435,-3.40266959336291,-0.3790070903922532,1.437303180546043,-1.1750201335162034,0.4931196410767018,-1.4167949468446703,-0.14989327714330214,-28.711538602551197,-0.8984892237688128,-1.1207480507200378,47.5917021096778,-1.2194649342911135,0.21431393015726963,-0.6574311821100738,0.5686667689120952,-2.1641067337054576,-1.4351242133424085,0.11519631092442295,-3.00011500720245,12.43092900368697,-0.5329762379314584,-1.4421097075248386,-0.9043150001682801,-5.987247400486128,-2.396102087295707,1.86447776907504,-3.224775926500081,-0.9205374306374765,0.8367693059010279,0.5699782557171325,-1.1257863709147362,-0.8559297397851824,-246.7748188747509,1.3324413131888413,-0.9659910013870029,-13.979551231593828,-1.058377241204628,0.6066103814707284,0.6748363069093535,-1.5112436205363455,-4.648798293972767,-1.396874104318218,15.177950319965419,-0.9809197923789951,0.9329481764729124,-1.94835629150184,-0.5763099790910094,-1.388756842740276,-11.230462073599856,-0.24808507124710744,-0.9773545328830021,31.015942862859575,-2.262003721535547,-0.11263674760900577,-9.797661127412514,-0.7722921499379672,-0.9898549473730601,-46.80859052160208,-3.9279723898802796,2.7075288326955333,-1.0804171361115635,3.387406791192894,-0.8914448609109584,-5.421320421773398,-0.834350128326083,1.3249456282507635,3.218097339624298,-2.018761155602326,-0.8440147884489538,-2.899330094720616,-4.351412415829736,0.33553135632861664,-0.042757189741170376,-0.7225630566976864,-1.8245049835448588,-3.7219816439953037,-2.213107640724518,-1.044399896591888,-11.158489823779568,0.1014390091268762,-3.063672377006119,-1.9770528234876503,-2.569834477818409,-0.8454756786768662,-0.9429329328126874,14.622778079330644,-0.621471065948203,-0.273228646867096,-63.750338946489805,-1.084316141437826,-1.8348896498787992,-7.302212662282007,0.9973937977877683,-0.7798955962489309,0.20492124626065755,-1.0576952015127166,-114.37138571050735,-0.9875705152309171,6.063685912538172,-0.6474798418290906,-1.935974248048915,-5.997536491730789,-0.4233239489102383,2.7808738194497598,-1.4141365256900695,1.8317365874826508,-0.8121110234778399,-0.15593847538735117,7.143755787881396,-0.8155204473945789,-14.661056145740709,-1.009770151599341,99.22767161017448,-1.5177475251877546,-0.9740221130380626,2.632380725087399,1.6592472871533537,-4.297362727779202,-1.0641880890955098,1.654234306659295,-0.8673463302780311,-7.058818016519928,-1.4824522089220526,-0.3186089304070071,-0.1896524210953332,-2.806888527150702,-3.7823830609502287,-0.8256524055277654,-3.82147314514941,-7.198236614819386,-0.7519224452536788,-0.5913842373472883,14.438021363678418,-1.064598810749295,-1.165712411869712,-27.117757352239025,-0.901709318476714,-10.484074786960843,-0.7692251305903623,10.125204391672645,-0.5368971507595237,-0.8115937311085738,-2.547331690661946,-2.5345093114103188,-4.378106002518838,-0.9584213116676537,7.649857377662979,1.4608836399887566,-2.4435060869933283,-1.7337772004651242,26.590694898367666,-1.0893948938123867,-0.29757192411502154,5.072980081776466,-0.9986224676002354,-61.51012639838194,-2.861327415415883,-1.1795671746101388,-0.9791159362905022,306.91329622144997,-1.0275388921819677,-6.058892269621411,-9.50860312621405,-1.259355022698526,0.5505349068585943,-1.9023491613562737,0.4099658044612997,-0.3372030990028142,-1.3054976713880468,-1.6659918702943473,-3.086506714025725,1.758482221603464,-1.0138713087971758,7.258851922257497,-21.1705156780105,-0.5834515985894473,-1.1108260722297916,-2.065671407216721,14.348941313407238,-1.580125175746229,-3.091752583503211,-1.6595845929230393,-2.2453382486271116,-1.6615818172076415,-2.1117806259863743,-1.5248746779357094,-0.593514775599342,-2.7714543003507246,-0.2806388302198296,-14.073081428948875,-1.371454095588635,-1.0458920901041586,6.024888285925333,-1.7142298156094187,-0.032428761083979296,5.656284367880994,-2.842831489380017,-1.2731119636111432,-0.7371024132287054,-0.3377403210667974,1.3360676327693644,-0.15631224654824205,0.8114162259511901,-2.053392071561542,-0.20851541246311667,-1.1689937334105458,-0.1581456452348321,2.984223852226243,0.7059440666082712,-0.30912804200550903,3.293350085853322,-1.0293658171982563,2.4061163290894045,9.117723292141806,0.042535858959322104,-1.0608748360517157,0.7434737713920851,-0.09343014839109909,238.32086900830984,-1.0079215441719445,-0.6608407155762435,-1.5797265973259293,-1274.4775461298364,-0.9982073240613857,2.2389559369668794,-0.5281006978433689,-8.093764616750297,-0.48389467703033107,-0.9746622423766911,1.1524977336009568,38.55525260711723,-0.7581476299117554,6.0002411399970415,-1.003462952571742,4.47174919587439,-4.726641707581031,-3.213883359814844,-2.1478482429688315,-7.9326902002928135,-0.9478285727537991,-1.7120888117110877,-0.915201311629457,173.7905216965764,-0.8966442696467489,-3.647148947361812,-1.9204055408994654,1.463262831240412,-3.011871616542579,-0.7724628866475138,-1.352392192181736,-10.095534433027094,-1.1456017682867206,6.51312973515126,-0.9575558774820069,-5.547234373992948,-1.1736564642937737,-0.019323513068285614,-5.396557149644362,-0.37389069380941464,-1.9006646186470233,-1.1898778326517743,-48.299794106098204,-0.9533273485426652,14.741883588669,-0.9983337085218676,558.903119490778,-2.68556632799457,6.259823446303272,-1.035848605452351,0.044895188376951056,-2.0944405202699268,-4.1180658915941315,3.495730305058035,-0.8888532416088618,-0.5910961557879564,-0.9806491681616206,-5.578873798133379,-115.57393145646141,-1.595544975371887,-1.0376039785161555,-2.176592016818861,-3.5987831810163806,-1.1760030748157833,-34.67459235718229,-0.2516365123688553,-0.9534372848780184,0.20262383383386884,7.275838706197334,-1.209132660243852,3.9871339545717754,14.865199318456954,-0.9689853858354044,-1.302310078439281,6.39710627881272,-1.8605498496372956,-4.217515068584579,-0.3570995064421997,-2.0111235684946207,-1.4743142201208694,-7.022931057083127,-1.1109861627774964,9.575900855226122,-1.1486876930949197,-0.7503373485230432,-5.464452728159939,-1.590830268760386,-2.0520022515663614,-1.4924466734538517,-1.0599481805517712,-51.77463167943382,-1.3153771758633734,1.4567198972546365,-0.5407842740177798,-1.4036105295644883,-7.117218621406876,-0.35078302706315434,-0.10124053313299042,5.395767661348266,-0.8603670614609544,-7.4080809368211655,-1.193613410926365,3.5045801856062164,-2.9698766695882184,-0.2456745040383438,-0.6124823169523649,-13.596201434909188,-1.0012506045411798,55.011804822926194,-26.565631811104357,-1.003472684420584,2.7924342920442276,-2.2407409867277304,-2.2411012495362903,-1.4287424427397988,-1.6206570635209865,-2.2291380089905273,56.033553726939076,-0.8143012073549359,-2.059318458754125,-3.529137487708381,-1.190763447020169,-1.7544607170933495,-0.6725754758790095,-3.3451983241618914,-4.778090961683913,-1.4458730181695016,-0.6811414290748639,-0.47984377487262075,1.5202681735154164,-1.969532822038559,0.015927472131535003,-2.510216430179185,0.22640188717046983,-0.6031716483906381,-6.548461265346767,-0.9414016489667809,-3.025139115850951,1.0624732829659433,16.725427797303304,-0.9612803982790286,-0.2230131454767733,-1.408317411323388,-2.1765655104733996,-8.9741244409168,-2.0523929513047596,-0.40099874253970447,-1.5219611850981014,-0.48849641542858724,-4.762182308016835,-1.5054990861899753,0.9689943627955815,4.416921748874937,-0.8418297447622278,7.929098612855684,-1.133424950324271,2.135403018853655,-4.4564408392834185,-1.0365309257004198,2.0970051364523137,2.896889042885063,0.13259434200764142,-0.8023056789745545,-3.699964474311941,-1.2742517371139397,0.1281057233884939,-0.3082267010774121,3.057782783568916,-0.8637172016448241,-0.09240366918470366,8.452384639041577,-0.3085464150777373,-1.3704772534745189,1.1707325755818694,2.1586842573492353,-0.6345920048287483,-1.0139291044225178,-35.21962987814355,-914.0674073847064,-1.0006212737337443,-4.111715621791097,-0.6025250520902987,-2.4639786661601484,-3.4298971447563114,-0.6098278683329106,-6.408977793680583,-0.8528520446396847,-5.607263104718604,-4.6390866775364525,-0.881380560400704,-1.5611391332010702,-0.6904510849730761,-7.224705150167135,-0.6802181371984417,0.17005762506992284,-1.5269647197206633,3.311136253894434,-2.761742595384674,-1.053049161623042,0.8441958175847981,-4.207325057731797,1.042535915490292,-0.3865934917391477,-0.6001185004323364,0.8721419369771861,-6.697963099646895,-0.7920622940504422,1.763221108508303,-2.0148549624126035,-1.9342033545717965,-1.54426986216371,-1.2924708906823588,-11.56728485540318,-0.7061931530098702,-0.24109373672432388,5.565239514826616,-0.6604845605965151,-0.5002231127050902,-148.9811106784836,-0.9805758120454009,-1.6942934602243374,-3.4439358438788266,-1.1911250616047062,0.05349996453910655,-0.6876112288389995,-0.9643013583820376,19.77478893099594,-8.045147123239998,-0.617083901942137,-8.345370278256205,-0.9196174306834763,-0.7958068579020389,3.188166077421684,-2.4977428475145222,-1.7155868800700604,-6.411149432927789,2.453793679939997,-1.163867220563478,0.1597115028742606,-0.9589513296390457,82.79552564839337,-0.9358938834630444,1.2387073917872184,-1.3886491424559904,-2.6741492297764387,3.3749408372217573,-1.245630398519417,2.2232871402037913,1.8311164156691828,0.11161730789317059,-0.839002401220926,-0.4946482578875794,-2.8396001099745516,-2.661202619829915,7.885434776586711,-1.0256698575276193,-3.4271744911216278,101.22897067130893,-0.8251521382374853,-1.0562931963933146,-1.1842128673207633,3.4662733751934,0.02641980167694502,-1.915455955968876,16.059216364792672,-1.2293314055251479,-4.795215716052718,-0.9153966095682038,61.47703857006423,-0.9833894392615331,0.1383394759116463,0.8777433601310678,-1.73296387617235,4.4714587530450265,-0.8829324153431239,-6.240822875853116,-0.2588506311995299,-1.5376394916199874,2.5673607768615856,-1.1138235478008742,-6.306151441401172,-0.4665979416134428,-0.583731100071962,-1.6716386256287956,-3.551543209137066,0.6779431375765737,-4.892864810043974,-0.3523884057595539,7.484210629498133,-0.9583600915036828,-2.1176856550854968,-2.869184499202661,-1.9402445012751508,2.2058236648664797,-0.6992704448257304,-1.0443973913186118,-1.2956614250903358,-17.892455956591785,-191.96823319550876,-0.7104905259224913,-1.092705647733438,-1.1374594893353054,-77.56100594809166,-0.9163268951096258,-1.537815714644223,-0.9962701079067292,-1442.6598536689812,-0.9773161505362433,68.53891920322332,-0.5147400773614781,-1.1346045098334347,-4.126725745361916,-0.3552495174942596,-0.21141172420666876,1.059978592281991,-1.921070455865413,-3.278480825006221,-2.1745520904115505,-0.7239406934458181,-1.0120543466053684,-2139.6329290407666,-1.0890055148817739,-0.9932025493542825,-18.108342898457312,1.7762375672116009,0.8050836634235283,-6.217817162835417,-0.8753903956520754,-11.92853772383524,-0.9458988258038226,-1.6531103427213782,-1.2737702322039794,-3.1000331857865753,10.121730921358823,2.184706524154776,-1.22314475792169,-0.9164785307964168,-7.881139895880248,2.003715417060848,-0.8838566906036244,1.0754287262369973,0.5123580234717151,0.21723140230850446,0.48700221251133113,-1.383468088694153,68.66139151957714,-1.0043295596301698,-1.4077784267485538,-9.300622911807627,-0.16688628264446415,-2.29528100459173,-22.671275792600618,-1.030036676661732,-4.346915092333193,4.154991991074729,-0.5456601552675308,-1.4538474073157484,0.872833696258756,-1.2848987076423262,-0.12143089501626947,-4.463867542911446,-0.8586563558028689,0.8203128226806204,-2.006226671887508,-1.6236980538250023,-0.11677427015919206,-0.9114657922533945,-117.68275698863168,-0.9464480445556677,-9.038697463424558,-3.36247861094681,-1.112141106994271,-6.17323286026935,-0.772926939277274,-2.027399413079764,-3.479004919638087,-0.25616160191324466,-0.6404950243482217,-1.7460123157023832,0.8848140066594259,5.810075163001345,22.543189587438274,-0.9860542508648319,-0.26292311023420545,-0.6534838227273315,6.1485460479942216,-0.7477376580685068,-0.380045489451837,-1.7555566372674942,0.2023637385415329,-14.38888740673712,-2.1491636375819567,-0.5298167066157167,-1.3694454662255482,4.215051898685724,-0.9237950500114211,-3.148961337971135,1.1065220397844286,-5.791169488806944,-1.0555491714294463,-3.732055637805541,-1.618869522983656,-1.0030246288822218,-275.2636151160098,3.068991019433147,-0.9601693898291492,-15.775735404545634,-0.670218341020492,-2.6013400600837766,-1.2159534109697852,3.2502821510513975,-1.28877247969061,-0.21533386706318713,-0.44523429943554393,-4.022285424695896,-2.289445780828164,-7.969853490365748,-1.3017434927657703,-0.7585246259404135,92.06297984430742,-1.0256304551791762,1.2162739641152047,10.107394925274356,-1.0147432158207559,6.696500574724795,0.4425623422549423,-1.1772478908457102,-10.228000655981072,-1.025267542289349,-39.164133254635836,-0.9340797933456862,-67.28012475518132,-0.9829773099579538,-5.169151134696248,-1.9808966221927586,4.820533780876412,-1.1057223307515744,-4.737556122850021,1.41348623445906,-0.5800001826011157,-1.0169605826157788,3.0507390892763846,5.884874151455673,-1.3785216994078793,-0.7980784281724502,0.47570845949322016,-16.867309925142933,-2.2707872564702285,36.87449692871944,-1.0111006278139232,-2.3776313668578117,-0.77982018620037,-11.644654021919933,-2.3319019950250546,-1.069590224774138,-1.7107599524664976,2.688094682301223,120.77584040087314,-1.0638327655498605,-1.3454695484034884,-1.6065505786066485,-1.8614088829125284,32.60688059661887,-0.9910365181774946,-1.8921206891314646,-1.8575369078503627,-15.519970732696097,-1.0053805069640638,-4.640497944068473,-76.48398866025286,-1.0730199536633762,-6.084891043221134,-0.9800228439128981,4.683919315832,-33.30638134592084,-0.9891932315554939,-6.2074495372192455,-1.0818586552853058,2.5173175711004547,-22.781174169109335,-1.3166235481017396,-1.407386304722337,-3.3820086079883094,13.212410663844155,-1.1820281547694114,0.5501878877499802,-0.3756322536509229,-12.261828003352925,-0.40757878113395996,-0.9857061865736193,-1.1500968026034755,-10.093906087709716,9.98805050962659,-0.3175876518255223,-2.6339457113530393,0.16878948025480844,-1.2724812211655403,-20.027750948665552,-0.9202777299046669,-0.6621170843559421,0.6753149382159187,-37.39113555640163,-1.0208823080950387,0.5970257981047706,-2.01876296626844,1.370813804905159,-3.8979199931543445,-0.9200392286056398,2.9002364909505522,-2.1645149480665653,-0.633385618457486,-82.70594927189417,-0.9994115936497214,2.461699294253215,-1.807648174796617,42.60548664430805,-1.142226394623054,3.0967159776632593,-0.7968719255291843,-1.358279574740058,-2.712270341085845,-0.2676198475199274,1.3019651314273082,-12.326203900090551,-0.938419535232061,0.1143592910058513,-0.02521398988554302,2.2424543929742433,-0.6927002322632033,-30.019442704123446,-1.061110315419084,-5.5810363014266375,-1.7093285936655187,-0.7007532211326111,-1.7090704973299164,-0.7009288512937493,13.847730560200533,-1.7961896420492116,6.1797352883064045,-0.9939624240121642,3.4177618736509965,-2.6279775268712218,-1.803020543937893,-1.7468830392772066,308.57925951501966,-0.9981755546285048,-12.297768801344688,-0.6229426745773752,-1.6075615912121621,4.699646230623447,0.15084712074115214,-0.9637857008366263,-8.809401222932038,-1.1847462549246892,-0.4361899295490418,8.476762212148376,-64.67753754990348,-1.0052668008118857,4.023350901682107,-0.07230520258645023,-0.8244819995476744,1.2912930294094007,-0.2257188982795031,-2.44060770817868,0.99876902767929,-1.4058611475189435,-3.229706031197143,0.3699065435515261,-0.07448885427301621,-1.2703676450969468,-4.441585478540713,-0.6952399311160199,-3.226000046563082,-9.437708236194073,-0.9010012773672555,-2.760713368045251,1.2729875694590609,-1.2292769137607158,-0.25528769489827974,-6.184242862460339,-0.5271505642951866,-5.799980077217231,-1.0134076686346283,22.81720650918852,-0.7327889619843537,1.3221556352949468,-1.153427621867306,-1.6371911577210594,4.118233697617952,-1.2847394623352915,18.345802962298116,-1.59058035420097,1.7141522121596093,-1.052361428783026,-0.48031970761941,-28.670085120783426,-5.190929214625992,-0.8899752629372697,-0.8854749476531972,-8.762146787732837,-0.898415023314067,6.219377493270571,-0.5874003094643236,-1.7043938714412425,4.468869521560888,-2.230814881039919,-1.0648862570961293,-1.634584411267731,-471.52174429749505,-1.0278301399614673,-0.9118045816836454,-5.182075234033829,-3.9909925204480623,2.6456856134202766,-1.0616660238276379,-0.8354457077976449,-2.9042214555469066,-36.340878823975494,-0.9314716346076346,-4.5869767555683225,13.634654656010783,-0.963870588530578,-2.959409323147824,-0.04440364352661297,-1.865967189035989,-1.5701685616521535,-68.30949271225644,-1.0245982374042606,-1.6840276824085614,-8.079428555675264,-1.1592319514197307,-3.5508590746310067,-1.1860609687898869,-19.58875004274549,-1.4919669028568254,0.9622909349018116,-24.140296294636858,-0.9901913494328681,-0.862161176815767,-6.479551702201665,-1.8672901323167468,0.261867741094983,-1.1758634057715271,1.4989749660811005,-1.0588814410400282,355.99092539105584,-0.9733679427426299,176.11905072815492,-1.0090647325383129,1.556819487341536,-1.2790563268177297,2.6181331842352833,-0.9570716889961852,117.17888511465523,-1.1669601306284851,0.6539995967562016,-3.1660380162209583,-0.7758485917019986,-0.7020871798087314,16.521427283338713,-0.6139522336904344,-1.4533802665714233,2.2480921929206796,1.2484348314586935,-1.010890320013501,25.272033156734963,-64.54504311460285,-0.9872909676509375,-3.224996434028174,-2.5160495044915203,-0.8119745196867187,-1.1390260224866824,-90.23415750124663,-1.0473931248888333,-10.91009638243992,-0.48259958928275914,-2.4219191793154238,-1.0978892906084035,4.908144168429882,-1.2174069005756354,-0.5479692685840498,0.8571649798831389,-1.5840263645318817,-7.955166888028673,-1.9611945563156066,-1.0907578665595188,3.800330387544446,-1.722714576143461,2.858450356208887,-0.8838499441608545,12.24148928407016,-1.3194281458453059,-2.0232272015924977,0.024148273629549744,0.36710324830322527,-2.08727514573592,-2.142014398152095,60.25454107773224,-0.9810001642887679,-2.0584105513444246,-4.623662238022153,-1.010263873728644,-47.53049022406086,-1.4335278478361508,-1.781748009984625,-7.122791535617663,-1.035288046209945,18.862747857639174,-1.0853320397889763,5.458124756850138,-0.8870162698205604,-1.1621055333979577,0.64450896470526,-1.5231109049530014,-1057.2527800976181,-1.0209991543957486,-1.0545843941115118,33.46258875889914,-1.1739728477873452,-1.0191015840792947,174.77222736457145,-0.45502148865228154,-7.901317297616585,23.88168576396163,-1.0216060998793828,1.2622812545584416,-1.3837790183828305,-1.1458672770424991,2.273594402527602,1.82870261858527,-1.9044259139386464,-0.672357866825877,1.2926509764642211,-1.1669401147865766,6.354210207284925,-1.1213183440979824,-9.612812094851215,0.7683964286960139,6.101110738576153,-0.9843389450523689,28.86139867637671,-0.9820510820235426,1.5810805381228734,-5.910773192466596,-1.070987208617971,-11.952506361064984,7.92203234939711,-1.0195610587497534,-7.42317128671796,-0.6126770704743227,-1.592473716202727,-3.1819227913328074,0.8686329367185026,-0.2907576900402127,-0.04194043889984078,0.4830653572851522,-0.7906624241078244,-0.11206643198740662,-4.9811592988497875,-2.3758444387130653,-0.9453177871184294,-10.366450626717825,-21.952446942688248,-0.9098617893985974,-1.0289295079349166,-1.0838527428002003,-69.1806848753502,1.8521924918470298,-2.3395296672606425,-42.84843199827853,-1.0041816462927982,287.9872974725818,-1.0020355959523017,-6.4027572713079435,-4.857085155858202,-8.566156784420684,-1.017936111635399,-7.678546459888663,-3.988387749371292,-1.005194308680189,7.090021938581829,-11.310835387751226,-0.8356617845615659,-1.3191877290012968,-1.6853607151725645,-1.8233673445885263,-2.7022656171481585,18.80504402938655,-1.1250004772032285,-0.7938371531960128,-26.628930208918067,-1.4305886958986338,0.8570155864049656,-0.8304270746313085,-0.1367350930761737,-6.042223319181482,-0.709717634440993,24.97090291963225,-1.270189167972827,0.30087191355724685,0.5955593828841435,-1.3802227513760392,-0.7990807864870526,-16.474576894262714,-0.9463095946240615,-0.9591354181737851,345.27103862965544,-0.6065754986240589,-1.0096575649072446,1.0024319250795037,-28.951633611670736,-1.1831179042491953,-10.162266222526549,-0.6467885894329859,-1.0937066644823985,11.262705893075236,-1.4813400984835774,22.31511077039701,-0.9838857719940104,90.01767366773649,-0.9274351734164256,-0.7166471771236593,4.371718207291318,-1.0329319236178403,42.055694380417414,-0.8789569087351785,-2.071711012566894,-0.7642166183927911,334.27135513125125,-1.0351203116193732,2.2881043820190468,0.25785834543566555,-5.474175441019357,-0.9345396477674792,0.5775161587982767,-0.8178777033053822,-39.142027575591236,-0.25855983981254527,-2.8359925916587407,-1.0652887282205223,-1.3399689172394078,12.684926907773194,0.2994179306044269,-2.018752737605842,-0.9733579789010547,-8.41931824030447,-1.3827161502266554,-9.897185329181244,-1.0371727294193742,15.766295134823856,-1.6801527420675888,-0.6736169980181386,2.0051138614276534,-2.5745765383952293,-1.1442359723429574,-3.347995434371831,-2.8807205223366283,1.2260389836004055,-1.5536056925466601,-1.3172775216248942,0.21011290394949023,-2.2278664118798375,4.586320256087548,-0.8889434838525135,1.1242019050125682,-0.8156758898170344,4.062315311800376,-0.003129122529194839,0.7949427072454043,-2.8046075445899286,-0.8702849135355047,2.2773004221397555,2.2759621761776665,-0.40119324255197286,-0.32149450522323164,-0.7404407485978364,0.973639133898113,-1.9996123454421504,6.308164052886964,-1.0492671800802633,-3.8914890055145444,-0.5132443738286128,-4.2430870151667275,-1.0236692359277793,-0.1903454413490102,-6.148912053066366,-17.07074500563632,-0.9736309080585687,-31.524190664554943,2.1458474139942885,-1.530963237948697,-0.9151087458435374,-2.6197781790832684,0.379945473854685,-14.210708566439171,0.01191758449712177,-0.7408529147333798,0.9817063005287168,-0.2741531172124574,-0.5853333079241698,-1.0366245782968546,-86.17656937526407,-1.2049257165500236,-1.7184345546217705,-4.070161479531308,-0.9995802894876066,-823.7223477036405,-1.871993275749034,-3.1627441867892823,3.8256618531981657,-1.1644874340435754,-1.6989678124764158,-1.3303096581910667,0.061843306000161746,0.7786982147301607,-0.9342831091171747,-429.41965420316274,-0.9359997270349796,-1.8205378851081144,-2264.1965542156513,-1.0002465807760126,1.198000387575307,-4.790834105140934,-0.8141188762724155,-2.2470807836994515,-9.239862182951265,-1.5513493754349381,5.970311758699382,-0.9433219803655792,-2.589909523895817,-2.096348531629779,-3.6170994747937635,-1.1880061095484176,-0.5776741070891915],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0]}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('8471f9d3-5624-4957-8e8f-d6aa24813aea'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            \",\"legendgroup\":\"\",\"line\":{\"color\":\"red\"},\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"showlegend\":false,\"x\":[-0.06801408216529636,-0.041774125984498034,-0.036284507106413955,-0.03051420294145435,-0.02806468784310845,-0.027089704735838493,-0.024974129488995245,-0.02473750308360323,-0.02407047732562262,-0.023564403426620917,-0.022789134855526583,-0.021657116943036847,-0.020747537933327953,-0.020105446229818358,-0.019999240340662028,-0.01949333582255175,-0.019311475173124593,-0.01896131033450521,-0.017741757179176365,-0.01770582037552626,-0.01739070873003956,-0.016647680109796337,-0.016012721914555605,-0.015652540713177343,-0.015066695771983274,-0.015026634927447269,-0.014935320624473891,-0.014612526308257157,-0.014309109209043602,-0.014307241527974024,-0.013723665251360151,-0.01343906754763291,-0.01319537280847849,-0.013143759639368535,-0.012991965252009852,-0.012666430574193366,-0.012646643428824822,-0.012586691230167646,-0.01237468831159061,-0.012129550130175693,-0.011909714125195148,-0.011219499618937867,-0.011145426658350721,-0.011095788639207016,-0.011055164238179871,-0.010885526112695776,-0.010540688476405324,-0.010448008358699412,-0.010400860034838644,-0.01039652560034432,-0.010310858415930158,-0.010128906614839228,-0.0101129704925228,-0.010049597767921581,-0.009948196265692433,-0.009829173828039273,-0.00941191309542666,-0.009212446303987654,-0.009179554763739661,-0.008992970833730962,-0.008795775050879251,-0.008759278267998716,-0.008653820211521723,-0.008530756458643096,-0.008526055934586774,-0.008391670369217286,-0.008238340444361891,-0.008229440186756087,-0.008187490964434607,-0.008120976341902342,-0.008076407685613685,-0.007830925989064319,-0.007817025105971265,-0.00767047021589129,-0.007506234685988655,-0.00745440410765752,-0.007194706699326425,-0.007100904033514155,-0.0070872244137284435,-0.006936485277499127,-0.006923543257026821,-0.006899558747339496,-0.006879559974886984,-0.006851588410961562,-0.006700282782813094,-0.0064652996420466735,-0.006450532698506817,-0.006444365904969662,-0.006414241365205964,-0.006361930308439456,-0.006356596164940553,-0.0063184691730722164,-0.006274368617659065,-0.006177140531782199,-0.006072865011894635,-0.006070216944686235,-0.0060292307798877065,-0.006012858670296439,-0.005916172812081788,-0.005848541363471682,-0.005696851123448199,-0.005619714800495723,-0.005557377917527417,-0.0054441382733450006,-0.0054060480514769305,-0.005373458556177546,-0.005345441232657233,-0.005317760661916804,-0.005300956064450468,-0.005297930069900536,-0.005286670579232267,-0.005183153157965359,-0.005179852567737342,-0.005155756152309343,-0.0051509378040779374,-0.005063088369821722,-0.00493075141684729,-0.004907055995077236,-0.004886724277406218,-0.004874143599617131,-0.004809877003672414,-0.004750214169902844,-0.0047369876733168725,-0.004686357048080403,-0.0046731016834938854,-0.004647727916673339,-0.004640997274763192,-0.004637050227782158,-0.004595548640170977,-0.004513087903512458,-0.00449532496081495,-0.004477753072888002,-0.00442895991879555,-0.0043168283608459035,-0.0042913365279230176,-0.004289562412875814,-0.004137669588781034,-0.004120008584123203,-0.004084378829808832,-0.00403030809919791,-0.004011219709926239,-0.003976054579116317,-0.0038835019016946193,-0.0038463023648085404,-0.0038410258194971902,-0.0038393812241105385,-0.0037713638151819495,-0.0037357966501981865,-0.0035320319091257657,-0.0033353749662412557,-0.003328301020761093,-0.00327287474868454,-0.0032515564353253756,-0.0031743183568806455,-0.0031469328547412134,-0.003083722237648967,-0.0030234199663373706,-0.0030228605633046968,-0.0030066699095112615,-0.0030004286326618113,-0.0029971989427031165,-0.0029563045487578377,-0.0028650794068301177,-0.0028471597527511827,-0.0028255083152146643,-0.0028032640817017285,-0.0028028154100131486,-0.002785928622506484,-0.0027611790136532477,-0.0027266794890749013,-0.0027265338124121685,-0.0026534040390964186,-0.0026275938905750973,-0.0026261799136575448,-0.002623170836935196,-0.0025783763780462543,-0.0025645882796470065,-0.0025633010773032927,-0.002542427180532325,-0.002540485663672709,-0.0024945621076217783,-0.0024942224895175835,-0.002492057939175063,-0.002442603440647617,-0.0024343211701195466,-0.0023758642617150993,-0.0022766655169013106,-0.002271519985995063,-0.0022699258492988594,-0.0022631074374287463,-0.002255047489714501,-0.0021949627140287475,-0.002191742326647539,-0.0021314668228001876,-0.002097656442177853,-0.00203975921756705,-0.0020133111078135535,-0.0019865642164849096,-0.0019562473423798687,-0.0019525541552025683,-0.0019131470681601481,-0.0018849209977764847,-0.0018295015230987977,-0.0018267755971770328,-0.0018218929894711078,-0.0018148527248048607,-0.001803874390522875,-0.0017618679751922883,-0.0015878251447537517,-0.0015673572021088766,-0.0015454765752525024,-0.0014842165727727563,-0.0014782484660414985,-0.0013491160395050494,-0.0013431707117366187,-0.0013153048369886067,-0.0013005558363676784,-0.0012977892384372636,-0.0012183441109928639,-0.0011874402153588814,-0.0011739955648866207,-0.0010052630048559275,-0.0010024012010726446,-0.0009500676204463598,-0.0008899054071440649,-0.0008833007236973556,-0.0008640799292052304,-0.0008277550998279093,-0.0007856896412440362,-0.0007281456077897763,-0.0007010107031942825,-0.0006941437228814573,-0.0006637338587927033,-0.0006577793651273423,-0.0005834439462043539,-0.0005350809523592126,-0.000459968801852062,-0.0004569466961219515,-0.0004392872986367369,-0.000422349891171625,-0.0003722566922789161,-0.00035501932867976205,-0.00034635641587454913,-0.0002929544455836375,-0.00023811507472581983,-0.00023619444615519125,-0.0001974280263701278,-0.00019732144667317097,-0.0001907894500615681,-0.00013640921141577778,-0.00012227640782913607,-9.445045958234033e-06,-6.870120538793323e-06,7.175759964006545e-06,1.530170911689943e-05,2.6121900996267655e-05,6.349921218862242e-05,0.00013447750859452157,0.00015587969925845435,0.00016250753698754394,0.00019390166927935049,0.0002137463570632825,0.00025487322390449485,0.0002735492549712504,0.0003559418572776085,0.000390794428747121,0.00042455456248058354,0.0004351522577543676,0.000480111460595678,0.0004889669755383519,0.0004889853730833948,0.0004937744960848978,0.0006388299912520878,0.0006427872591217021,0.0006614362290358056,0.0006795457566091123,0.0006840394842391184,0.0007397825880415265,0.0007584033300001014,0.0007688818911402162,0.0008217512433992269,0.000920439229583403,0.0009444586571358826,0.0009514170090862972,0.0009731633084537616,0.0010007108807315035,0.0010167904781774872,0.0010253994618028006,0.0010904681529368965,0.001101842075964976,0.001107829002642502,0.0011721935327353439,0.0012672250121246176,0.0013281596467464851,0.0013302091128915006,0.0013378978425813148,0.0014053791778985136,0.0015161665944682934,0.0015303546943397084,0.0015332318107057485,0.0015777044846219113,0.0015797308847687042,0.0016180427137240105,0.0016313092573088106,0.0016613687817972345,0.0016875435919434523,0.001711513231665407,0.0017121648670130885,0.0018088874884987227,0.0018436779311643559,0.0019179873999481956,0.001949334719149265,0.0020441536693518447,0.0020547468248948153,0.0020700177567345435,0.002121223133561001,0.0022090611740102073,0.002224524640389136,0.0022588534850771502,0.0022815295151068504,0.0022958081562933774,0.002300662213150728,0.002329363730329881,0.002351151949929964,0.0023992323159489626,0.0024480326306184352,0.002455100300232438,0.002484899676771457,0.002537702638131911,0.0025831156650113485,0.0026007744145470912,0.0026584898861461426,0.0026755225579471187,0.002766418149700911,0.0027826887923012578,0.0028479500872158336,0.0028557325665139466,0.002896364297282794,0.0029460216619106028,0.002947302763278925,0.00296198990539831,0.002992016977140688,0.003111236448766208,0.003129377542200107,0.0031773639988421642,0.0031774607701255952,0.003242223447308623,0.0032639995305467906,0.0033155802855726613,0.00332041473363498,0.003593859458853821,0.0036009893043016383,0.00361329303342095,0.0036224990395776757,0.0036984360198231148,0.0037051100814438076,0.003792993692547375,0.003951084136593286,0.003959675229718407,0.004029943083662779,0.004030277296804385,0.00405666949441863,0.004076761696222508,0.004083801133464071,0.0043577062947703915,0.004382318311421107,0.004496046296944334,0.004563154035135408,0.004607432305112624,0.004622103695029578,0.004630819912892159,0.0046971663069013125,0.004812335824971425,0.004884728797982518,0.004921982065451136,0.004935519998225724,0.004967909471367493,0.004975846035914611,0.005047606675254723,0.0050732955705157234,0.005079013957185685,0.005135068872495374,0.005155341601558616,0.005212475813938688,0.005466809044024412,0.005560889616694542,0.005561085699577806,0.005570651237587043,0.0056872467232620405,0.005720976220730423,0.0057574526279098315,0.005894448566746702,0.006000960175604364,0.0060789076046079416,0.006132850418208324,0.006201517937073353,0.0062348337351545435,0.006238222222675116,0.006438845522919845,0.006592883847806208,0.0067342800173637585,0.006955716206068274,0.006999490043525292,0.007111361757893286,0.007164304394414511,0.007176154521957301,0.007382807620987419,0.00739963437694402,0.007416774810221405,0.007452473112662394,0.007662558220206783,0.007670504990141325,0.007704780858649007,0.0077702175740654855,0.00778504110478373,0.007924102207026662,0.007967969231286176,0.008033659892574985,0.00811192483568468,0.008170747552017188,0.008190950433802913,0.008253718228220741,0.00840710216762841,0.008439270963594536,0.008460280617075266,0.00846508975623772,0.00849248413140935,0.008597395948725328,0.008644536287952587,0.008849990352403303,0.008858610721981464,0.008993067748316541,0.009082514607282599,0.009180831401764067,0.009299538384766715,0.009315234293048924,0.009587233298310682,0.009643111965147444,0.009791937718424792,0.009864136789539124,0.010042718395491868,0.010072764994148553,0.01011922818616795,0.010298654561319509,0.010592724697279676,0.010765491857052112,0.010784446543313564,0.010851331974038647,0.01119443993684377,0.011216744478492524,0.011277349381062507,0.011305822335372806,0.011486169065869634,0.01170399334453509,0.011731393541549506,0.011731870013946821,0.011922469194121543,0.011991995609034412,0.012079966762065686,0.012106058040538548,0.012445369826116215,0.012809064911670998,0.013129614663131228,0.013130352526974365,0.013318262395185299,0.013565044705922347,0.01357475748111936,0.013627086867551208,0.013769718690019195,0.01415834135471683,0.014207760082581844,0.01468978980650415,0.014923661172100866,0.014933956271208082,0.01526333631225496,0.01536539816147986,0.015409875731554612,0.01564927094263302,0.015723256982328904,0.0157312594130401,0.015787679922736553,0.015943321103852215,0.016772253672436177,0.016878713996948846,0.016941941334216226,0.018330028275197474,0.018755504418981106,0.018885951732779516,0.01888654213401364,0.019075555906861608,0.020422220695141657,0.021921988175857887,0.021978171595075313,0.02255469606718785,0.023769543835761686,0.0247602174153414,0.02492023877666627,0.025217566974388372,0.02867993990741513,0.030947872397389053,0.032265290085846,0.03448822333009982,0.0433153072475978,0.0541746705821724],\"xaxis\":\"x\",\"y\":[-0.09144169247553777,-0.0564014071176367,-0.04907068557721931,-0.04136514281072533,-0.03809411188967003,-0.03679213996325072,-0.033967045293323415,-0.03365105937051848,-0.03276032720848025,-0.0320845267722668,-0.031049249435178995,-0.029537576534104472,-0.02832294386337312,-0.027465508113027576,-0.027323683003370926,-0.02664810875483587,-0.02640525587019714,-0.025937653112670232,-0.024309087490174165,-0.024261098238741192,-0.02384030477775471,-0.022848079992659132,-0.022000170179156685,-0.021519191781560063,-0.020736866774098927,-0.0206833703652426,-0.020561431166434545,-0.020130378428609475,-0.019725201618646295,-0.019722707556644643,-0.018943412076127975,-0.018563366290910415,-0.018237941463926943,-0.018169018323911875,-0.017966315293002535,-0.01753160313395826,-0.017505179796382744,-0.017425120891775336,-0.01714201665515,-0.016814664285743935,-0.016521099910354616,-0.015599401981791914,-0.015500486508824109,-0.01543420094251401,-0.015379951972177442,-0.015153420788833015,-0.014692931865204262,-0.014569168786141062,-0.014506207906525074,-0.014500419793904009,-0.01438602163839654,-0.014143047031743966,-0.014121766269321248,-0.014037139666340893,-0.013901730233895678,-0.013742790175054741,-0.013185588972482155,-0.012919225216259026,-0.012875302545496568,-0.012626142291353776,-0.012362811192212875,-0.012314074156298344,-0.01217324768666622,-0.012008910940508204,-0.012002633959589093,-0.011823178303257792,-0.011618424747885235,-0.011606539531152503,-0.0115505214223356,-0.011461699194968117,-0.011402183149148058,-0.011074372056859499,-0.011055809110071351,-0.010860102793581539,-0.010640786122698313,-0.01057157265898388,-0.010224778204300759,-0.010099516098116336,-0.010081248621693122,-0.009879954750937957,-0.009862672249117728,-0.009830643839549414,-0.009803937899618899,-0.009766585261714313,-0.00956453490957011,-0.009250743367769574,-0.009231023902083909,-0.009222788895752485,-0.009182561219215134,-0.009112706134708052,-0.00910558303171757,-0.00905466904902264,-0.008995778095262223,-0.00886594175519924,-0.00872669442004639,-0.008723158246815388,-0.008668426184750538,-0.008646563214094792,-0.00851745095344269,-0.008427137340030467,-0.008224573385281146,-0.008121567162668174,-0.00803832380080883,-0.007887105962690537,-0.00783624108188027,-0.007792721755586728,-0.007755308011281973,-0.007718343959553715,-0.007695903453689763,-0.007691862604239005,-0.007676826917316271,-0.007538591931109973,-0.007534184392368585,-0.00750200654622883,-0.007495572225385499,-0.007378259939356587,-0.00720153995691193,-0.0071698975892655215,-0.007142747041295852,-0.007125947068891631,-0.0070401268089274865,-0.0069604543161023436,-0.006942791930865706,-0.006875180859265173,-0.006857479924308029,-0.006823596329995954,-0.006814608372411407,-0.006809337568924406,-0.006753917222080769,-0.006643800889437971,-0.006620080629517255,-0.0065966155001170815,-0.006531458148819266,-0.006381720025740507,-0.006347678768439646,-0.00634530965253551,-0.0061424751712800384,-0.006118891037272586,-0.006071311813061798,-0.00599910689712892,-0.005973616663742347,-0.0059266578879830605,-0.005803064989993877,-0.005753389511167285,-0.005746343323584513,-0.0057441471655098,-0.0056533181488094275,-0.005605822505073764,-0.005333719357345137,-0.005071107813758481,-0.00506166141581013,-0.0049876463383265665,-0.004959178311234321,-0.004856036206478072,-0.004819466183150926,-0.004735056055127078,-0.004654529670862986,-0.004653782655823788,-0.00463216199742238,-0.004623827527642951,-0.004619514667629372,-0.004564905154430962,-0.004443085019407206,-0.004419155490405162,-0.004390242616295885,-0.0043605381349129686,-0.004359938988180729,-0.004337388727466316,-0.004304338620570617,-0.004258268681367678,-0.004258074147817509,-0.004160418187285925,-0.004125951858032727,-0.004124063663009109,-0.004120045405269331,-0.004060227827408059,-0.004041815490926872,-0.004040096588001642,-0.004012222025470119,-0.0040096293647080596,-0.003948304014254474,-0.003947850495384179,-0.00394496000040199,-0.0038789195036613103,-0.003867859533868857,-0.003789797408401916,-0.003657329491860029,-0.0036504582581571026,-0.003648329481555892,-0.0036392243178136104,-0.0036284612332287518,-0.0035482252880469933,-0.0035439248504996503,-0.0034634342109440856,-0.003418284540079437,-0.003340969804573986,-0.003305651555314951,-0.0032699343194272524,-0.0032294498036574597,-0.003224517999210795,-0.003171894604355414,-0.0031342021038816698,-0.0030601961035015258,-0.003056555959382953,-0.00305003582778946,-0.003040634406491319,-0.0030259741698908968,-0.002969879686733056,-0.002737466553073716,-0.0027101340931403265,-0.002680915164435782,-0.0025991098461217665,-0.002591140161970285,-0.0024186994367031245,-0.0024107601710993,-0.002373548668298377,-0.0023538531632091055,-0.0023501587065459786,-0.002244069354995015,-0.002202800943027241,-0.00218484723968112,-0.0019595253293887846,-0.001955703736833004,-0.0018858185744375095,-0.001805479220692019,-0.0017966594653892013,-0.0017709924208572257,-0.00172248500803274,-0.0016663116797568146,-0.0015894685882901684,-0.0015532332076502687,-0.0015440631866315384,-0.0015034544939941366,-0.001495502988444415,-0.0013962370341374219,-0.001331654109782683,-0.001231350924461735,-0.0012273152680591412,-0.0012037332802361839,-0.0011811154226943764,-0.0011142220189250865,-0.0010912036062733824,-0.0010796353347932873,-0.001008323467320086,-0.0009350921253747874,-0.0009325273583943223,-0.0008807594971138665,-0.0008806171728291386,-0.0008718944819964878,-0.0007992762555463367,-0.0007804036070109906,-0.0006297309805006547,-0.0006262924792756207,-0.0006075359059974517,-0.000596684684480187,-0.0005822356279166798,-0.00053232275302211,-0.00043753982948581307,-0.00040895979440567847,-0.00040010911936136915,-0.0003581860556760117,-0.000331685877169758,-0.0002767659245576788,-0.0002518263456413458,-0.00014180099817877963,-9.525960758598466e-05,-5.017703535946968e-05,-3.6025096081415036e-05,2.4012477387404035e-05,3.583794570924208e-05,3.586251340378195e-05,4.225780749004073e-05,0.00023596186356271897,0.00024124631580926684,0.0002661497578317533,0.0002903328399029727,0.0002963336692256727,0.000370771837129353,0.00039563758413398284,0.00040963043419668687,0.00048023105475712724,0.0006120169149721165,0.0006440919531228361,0.0006533839899038143,0.0006824235405061092,0.0007192099888857692,0.0007406823449775737,0.0007521786005655776,0.0008390699615683946,0.0008542584590566014,0.000862253274968331,0.0009482043141332058,0.001075107352112377,0.0011564781810351834,0.0011592149950015592,0.001169482362847547,0.0012595955181270203,0.001407538703089749,0.0014264851931202688,0.0014303272337768654,0.0014897151067563017,0.0014924211188739925,0.0015435819291256272,0.0015612977922818544,0.001601438648788618,0.0016363919395027053,0.0016684004920321485,0.0016692706721641096,0.0017984320257147298,0.0018448904508101024,0.001944121751847304,0.001985982302316305,0.0021126015332914813,0.0021267474103085302,0.0021471398913652136,0.0022155184741454283,0.002332815545124203,0.002353465132753335,0.002399307149622072,0.0024295882429878637,0.002448655639985466,0.002455137645376524,0.0024934650474968886,0.0025225605774957614,0.0025867660865983603,0.00265193299998006,0.002661371017268795,0.0027011644776778056,0.0027716764412292726,0.0028323200417695042,0.0028559011643343704,0.002932973190692269,0.0029557182622236924,0.0030770983228793907,0.0030988257966504703,0.003185974356689083,0.003196366915789368,0.0032506256741087775,0.003316937073971291,0.003318647829782357,0.0033382607303302585,0.0033783582501228046,0.003537561423984557,0.0035617866584418205,0.0036258667629384387,0.0036259959892741274,0.003712478705685656,0.0037415580290421926,0.0038104378839714137,0.0038168937041901823,0.00418204603658213,0.004191567082171074,0.004207997223149072,0.004220290730063322,0.004321695375661192,0.0043306077771177315,0.004447965702189468,0.004659076354720957,0.004670548719711445,0.004764382933333339,0.0047648292345303205,0.004800072819895069,0.004826903523415513,0.00483630383978814,0.00520207102884308,0.005234937398006668,0.005386807356876083,0.0054764216184143445,0.005535549888464246,0.00555514175385247,0.00556678120778456,0.0056553787863220465,0.005809173737422681,0.00590584579033075,0.0059555930198466975,0.0059736712904165535,0.006016923511329566,0.006027521832629199,0.006123349480458239,0.006157653890658945,0.006165290103895037,0.006240144658324584,0.006267216434148631,0.006343512259176025,0.006683143503100203,0.006808776720255058,0.006809038565211506,0.006821812183396539,0.006977511341632353,0.0070225530028351114,0.007071262829467092,0.00725420432360077,0.007396437684913803,0.007500527041480593,0.007572561139729152,0.0076642582995594104,0.007708747515305335,0.007713272430241719,0.00798118056398942,0.00818688010185759,0.008375697571508562,0.008671398798572738,0.008729853460049142,0.008879244593476443,0.00894994307629864,0.00896576748727577,0.009241727687445953,0.009264197783291558,0.009287086757231125,0.00933475751916785,0.009615300751293658,0.00962591270065292,0.009671683974245136,0.009759066787130894,0.009778861818143903,0.009964561088036065,0.010023140189207741,0.010110862116068027,0.010215375474291181,0.010293926091968135,0.010320904595207472,0.01040472338714952,0.010609549072418642,0.01065250660567466,0.010680562454859887,0.010686984478106312,0.010723566350293954,0.010863663383644107,0.010926613600748513,0.011200972635370754,0.011212484095520612,0.01139203517932172,0.011511480632696074,0.011642770811321666,0.011801289618659925,0.01182224960431579,0.01218547135269705,0.012260090548624368,0.012458829328045767,0.012555242448440872,0.012793716567419603,0.01283384016304264,0.012895886132013808,0.013135488338005494,0.01352818340991348,0.013758893039807232,0.01378420472900726,0.013873522125833102,0.014331701279884335,0.014361486295482853,0.014442416807161605,0.014480438991236189,0.014721270220390362,0.015012148178788097,0.015048737825342095,0.015049374096555811,0.015303896231283748,0.015396740342823899,0.015514215169543889,0.015549056913819003,0.016002166732677653,0.016487837497266487,0.01691589289054455,0.01691687821839497,0.017167809102513403,0.017497357007621426,0.017510327243248934,0.01758020680480543,0.01777067433935311,0.018289632868617647,0.01835562559796838,0.018999317948704388,0.019311624849336628,0.019325372708060902,0.01976521988425114,0.019901511130179843,0.019960905541386437,0.020280588869045376,0.02037938826968393,0.020390074547273155,0.02046541730875416,0.020673257267104565,0.02178019637727332,0.021922361254551142,0.022006793710345047,0.023860415804011176,0.024428587693797625,0.024602784291847313,0.024603572701232482,0.02485597771637549,0.02665428553890535,0.02865704347541644,0.028732069631260473,0.029501948280426037,0.03112423042845748,0.03244715508144943,0.032660844240285994,0.03305789005931663,0.03768147002083771,0.04071001934742898,0.04246927120825558,0.04543772948896026,0.05722523161800756,0.07172659691857435],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"S&amp;P 500 Returns\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Apple Returns\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"font\":{\"family\":\"Courier New, monospace\",\"size\":18,\"color\":\"#7f7f7f\"},\"title\":{\"text\":\"Apple vs S&amp;P 500 (Monthly Returns)\"}},                        {\"responsive\": true}                    ).then(function(){  var gd = document.getElementById('02135d9a-d161-4eb6-aacf-acb03e39fa50'); var x = new MutationObserver(function (mutations, observer) {{         var display = window.getComputedStyle(gd).display;         if (!display || display === 'none') {{             console.log([gd, 'removed!']);             Plotly.purge(gd);             observer.disconnect();         }} }});  // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}  // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}                          })                };                });            tml output_subarea \"&gt;         <pre><code>    var display = window.getComputedStyle(gd).display;\n    if (!display || display === 'none') {{\n        console.log([gd, 'removed!']);\n        Plotly.purge(gd);\n        observer.disconnect();\n    }}\n</code></pre> <p>}});</p> <p>// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{     x.observe(notebookContainer, {childList: true}); }}</p> <p>// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}</p> <pre><code>                    })                };                });            &lt;/script&gt;\n</code></pre> <p>\\(\\beta\\) is nothing but the slope of the regression line of the security's returns on the benchmark's returns.</p> <pre><code># Calculate beta for apple\ncovariance = apple_snp_month[\"Apple_returns\"].cov(apple_snp_month[\"S&amp;P_returns\"])\nvariance = apple_snp_month[\"S&amp;P_returns\"].var()\napple_beta = covariance / variance\nprint(f\"Apple's beta is {apple_beta}\")\n</code></pre> <pre>\n<code>Apple's beta is 1.3353789585800684\n\n\n<p>Let's see how this varies year by year.</p>\n<pre><code>def clc_beta(year):\n    data = apple_snp[apple_snp[\"Date\"].dt.year == year]\n    covariance = data[\"Apple_returns\"].cov(data[\"S&amp;P_returns\"])\n    variance = data[\"S&amp;P_returns\"].var()\n    apple_beta = covariance / variance\n    return apple_beta\n\nbetas = []\nyears = np.arange(1980,2023)\nfor year in years:\n    betas.append(clc_beta(year))\n</code></pre>\n\n<pre><code>fig = px.line(x=years, y=betas)\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=r\"Beta for Apple\")\n</code></pre>\n\nNormally.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      Cauchyrver.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n  0kContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      0.496714ner) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      4.671910bookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    // Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    1or the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      -0.138264losest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      2.573113   x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    2              })                };                });            \n      0.647689      })                };                });            \n      -8.877968iv&gt;\n    iv&gt;\n    \n      3iv&gt;\n      1.523030iv&gt;\n      -0.001475 class=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n    iv&gt;\n    \n      4\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n      -0.234153ell\" markdown=\"1\"&gt;\n      0.703143ell_render border-box-sizing rendered_html\" markdown=\"1\"&gt;\n    is not valid!\n\n    ...\n\n      ...lass=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n      ...ell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n     class=\"inner_cell\" markdown=\"1\"&gt;\n    \n      1995 and Correlation\n\n      1.070150v&gt;\n      1.755178 class=\"cell border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n    v&gt;\n    \n      1996ner_cell\" markdown=\"1\"&gt;\n      -0.026521ll_render border-box-sizing rendered_html\" markdown=\"1\"&gt;\n      -1.924287two stocks measures how independent the two stocks are. If the covariance is zero, the two stocks are independent. If the covariance is positive, the two stocks tend to move in the same direction. If the covariance is negative, the two stocks tend to move in opposite directions. Mathematically, covariance is defined as:\n$$\n\\operatorname{cov}(X, Y)=\\operatorname{E}\\left[(X-\\mu_{X})(Y-\\mu_{Y})\\right]\n$$\nwhere $\\mu_X$ and $\\mu_Y$ are the means of $X$ and $Y$ respectively.\n\n    operatorname{cov}(X, Y)=\\operatorname{E}\\left[(X-\\mu_{X})(Y-\\mu_{Y})\\right]\n$$\nwhere $\\mu_X$ and $\\mu_Y$ are the means of $X$ and $Y$ respectively.\n\n    1997X$ and $\\mu_Y$ are the means of $X$ and $Y$ respectively.\n\n      -0.881875\\mu_Y$ are the means of $X$ and $Y$ respectively.\n\n      5.036051v&gt;\n    v&gt;\n    \n      1998ll border-box-sizing text_cell rendered\" markdown=\"1\"&gt;\n      -0.163067ell\" markdown=\"1\"&gt;\n      -0.946808ll_render border-box-sizing rendered_html\" markdown=\"1\"&gt;\n    example, let's calculate the covariance between the close price of Apple and Google.\n\n    1999\n      -0.744903cell border-box-sizing code_cell rendered\" markdown=\"1\"&gt;\n      -0.399862rder-box-sizing code_cell rendered\" markdown=\"1\"&gt;\n     class=\"input\"&gt;\n  wzxhzdk:27\u0003\n\n\n<p>2000 rows \u00d7 2 columns</p>\n<pre><code>fig = make_subplots()\nfig.add_traces(\n    [\n        go.Histogram(x=distribution[\"Normal\"], name=\"Normal Distribution\"),\n        go.Histogram(x=distribution[\"Cauchy\"], name=\"Cauchy Distribution\")\n    ]\n)\n</code></pre>\n\n75%utationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      0.684002y = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      1.003477ay || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      0.051385e.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      -0.092917purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    maxen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      3.852731 removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      3001.984748oval of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      320.541185r = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n      2619.054166) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n  \n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            \n<p>The central limit theorem says that the sum of a large number of independent random variables will be approximately normally distributed. (This does not work if the underlining distribution is fait tailed.)</p>\n<p>Let's see if the central limit theorem holds for Cauchy distribution.</p>\n<pre><code>means = []\nfor _ in range(1000):\n    cauchy = np.random.standard_cauchy(2000)\n    means.append(cauchy.mean())\n</code></pre>\n\n<pre><code>fig = px.histogram(x=cauchy)\nfig.update_xaxes(title_text=\"Value From Cauchy Distribution\")\nfig.update_yaxes(title_text=r\"Count\")\n</code></pre>"},{"location":"Notes/Finance/Module_1/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L1</li> <li>L2</li> <ol><li>Var Variance/Value at Risk</li> <li>Stress Testing</li> <li>S&amp;P 500</li> <li>Alpha</li> <li>Beta</li> <li>Market and Idiosyncratic Risk</li> <ol><li>Market Risk</li> <li>Idiosyncratic Risk</li> </ol><li>Normal and Cauchy Distribution</li> <li>Central Limit Theorem</li> <li>Covariance and Correlation</li> </ol><li>L3</li> <ol><li>Insurance</li> <li>Risk Pooling</li> <li>Different Insurance Risks</li> <ol><li>Moral Hazard</li> <li>Adverse Selection or Selection Bias</li> </ol><li>Health Insurance</li> <li>The Health Maintenance Organization</li> <li>EMTALA (Emergency Medical Treatment and Active Labor Act)</li> </ol><li>L4</li> <ol><li>Portfolio Management as an Alternative to Insurance</li> <li>Portfolio Diversification</li> <li>Hedge Funds</li> <li>Captial Asset Pricing Model (CAPM)</li> <li>Short Sales</li> <li>Calculating the Optimal Portfolio</li> <li>Efficient Portfolio Frontier</li> <li>Gordon Growth Model</li> <li>Dividend Discount Model</li> </ol> </ol>"},{"location":"Notes/Finance/Module_1/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_1/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_1/#l1","title":"L1","text":""},{"location":"Notes/Finance/Module_1/#l2","title":"L2","text":""},{"location":"Notes/Finance/Module_1/#var-variancevalue-at-risk","title":"Var Variance/Value at Risk","text":""},{"location":"Notes/Finance/Module_1/#stress-testing","title":"Stress Testing","text":""},{"location":"Notes/Finance/Module_1/#sp-500","title":"S&amp;P 500","text":""},{"location":"Notes/Finance/Module_1/#central-limit-theorem","title":"Central Limit Theorem","text":""},{"location":"Notes/Finance/Module_2/","title":"Module 2","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <pre><code>plt.rcParams[\"figure.figsize\"] = [12, 8]\n</code></pre> <p>Financial innovation is the process of creating new financial products, services, or processes. Financial innovation has come via advances in financial instruments, technology, and payment systems. Digital technology has helped to transform the financial services industry, changing how we save, borrow, invest, and pay for goods.</p> <p>Some examples of financial innovation are: - Investment Crowdfunding is a way to source money for a company by asking a large number of backers to each invest a relatively small amount in it. In return, backers receive equity shares of the company. - Remittances are a form of financial innovation that allows people to send money to their families in other countries. This is done through a variety of channels, including banks, money transfer companies, and mobile money services. - Mobile Banking is a form of financial innovation that allows people to access their bank accounts through their mobile phones.</p> <p>Some classic examples are below:</p> <p>The idea is that investors, in order to be encouraged to invest in businesses, should have protection against liability for what the managers of the business do. So, an investor should not be liable for the debts or mistake of the business. This is the idea of limited liability.</p> <p>The idea was enuciated first in 1811 by New York State.</p> <p>Limited liability is a type of legal structure for an organization where a corporate loss will not exceed the amount invested in a partnership or limited liability company (LLC). In other words, investors' and owners' private assets are not at risk if the company fails.</p> <p>The limited liability feature is one of the biggest advantages of investing in publicly listed companies. While a shareholder can participate wholly in the growth of a company, their liability is restricted to the amount of the investment in the company, even if it subsequently goes bankrupt and has remaining debt obligations.</p> <p>Instead of using a currency which is liable of changes, inflation indexed debt uses some index to tie the debt to that index.</p> <p>An inflation-indexed security is a security that guarantees a return higher than the rate of inflation if it is held to maturity. Inflation-indexed securities link their capital appreciation, or coupon payments, to inflation rates.</p> <p>An inflation-indexed security has its principal indexed to the Consumer Price Index (CPI), or some other nationally recognized inflation index, on a daily basis. </p> <p>The Unidad de Fomento (UF) is a unit of account used in Chile. It is a non-circulating currency;the exchange rate between the UF and the Chilean peso is constantly adjusted for inflation so that the value of the Unidad de Fomento remains almost constant on a daily basis during low inflation.</p> <p>It has become the preferred and predominant measure to determine the cost of real estate, values of housing and any secured loan, either private or of the Chilean government. Individual payments are made in Chilean pesos (the country's legal tender), according to the daily value of the UF. </p> <p>This is an innovation to deal with inflation.</p> <p>Forecasting is the process of making predictions based on past and present data. Later these can be compared (resolved) against what happens. For example, a company might estimate their revenue in the next year, then compare it against the actual results. Prediction is a similar but more general term.</p> <p>Something that happended on past is not the represenative of what will happen in future.</p> <p>Random walk theory suggests that changes in stock prices have the same distribution and are independent of each other. Therefore, it assumes the past movement or trend of a stock price or market cannot be used to predict its future movement. In short, random walk theory proclaims that stocks take a random and unpredictable path that makes all methods of predicting stock prices futile in the long run.</p> <p>We have</p> \\[ x_{t} = x_{t-1}+\\epsilon_t \\] <p>where \\(\\epsilon\\) is a noise and is completely unforcastable.</p> <pre><code>apple = pd.read_csv(\"Data/AAPL.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\ngoogle = pd.read_csv(\"Data/GOOG.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\napple.head()\n</code></pre> Open High Low Close Volume Date 1980-12-12 00:00:00-05:00 0.099874 0.100308 0.099874 0.099874 469033600 1980-12-15 00:00:00-05:00 0.095098 0.095098 0.094663 0.094663 175884800 1980-12-16 00:00:00-05:00 0.088149 0.088149 0.087715 0.087715 105728000 1980-12-17 00:00:00-05:00 0.089886 0.090320 0.089886 0.089886 86441600 1980-12-18 00:00:00-05:00 0.092492 0.092927 0.092492 0.092492 73449600 <pre><code>apple = apple[apple.index &gt;= pd.to_datetime(\"2022-01-01\", format=\"%Y-%m-%d\", utc=True)]\napple = apple[[\"Close\"]]\napple.head()\n</code></pre> Close Date 2022-01-03 00:00:00-05:00 180.959732 2022-01-04 00:00:00-05:00 178.663071 2022-01-05 00:00:00-05:00 173.910660 2022-01-06 00:00:00-05:00 171.007507 2022-01-07 00:00:00-05:00 171.176544 <pre><code>px.line(apple, x=apple.index, y=\"Close\", title=\"Apple Stock Price\")\n</code></pre> <p>}}</p> <p>// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}</p> <pre><code>                    })                };                });            &lt;/script&gt;\n</code></pre> <pre><code>sigma = apple[\"Close\"].std()\nprint(\"Standard Deviation: \", sigma)\n</code></pre> <pre>\n<code>Standard Deviation:  12.466134262158613\n\n\n<pre><code>sigma = 3\n</code></pre>\n\n<pre><code>walk_prices = []\nstart_price = apple[\"Close\"].iloc[-1]\ncur_price = start_price\nwalk_prices.append(cur_price)\nfor i in range(1, 200):\n    cur_price = cur_price + np.random.normal(0, sigma)\n    walk_prices.append(cur_price)\n\nwalk_prices = np.array(walk_prices)\n</code></pre>\n\n<pre><code>fig = px.line(x=range(0, 200), y=walk_prices, title=\"Apple Stock Price (Random Walk)\")\nfig.update_xaxes(title_text=\"Days\")\nfig.update_yaxes(title_text=\"Price\")\nfig.show()\n</code></pre>\n\n<pre><code>rho = 0.5\nar_prices = []\nstart_price = apple[\"Close\"].iloc[-1]\ncur_price = start_price\nar_prices.append(cur_price)\nfor i in range(1, 200):\n    cur_price = (\n        start_price + rho * (cur_price - start_price) + np.random.normal(0, sigma)\n    )\n    ar_prices.append(cur_price)\n\nfig = px.line(\n    y=apple[\"Close\"], x=np.arange(0, len(apple[\"Close\"])), title=\"Apple Stock Price\"\n)\nfig.add_scatter(\n    y=ar_prices,\n    x=np.arange(len(apple[\"Close\"]), len(apple[\"Close\"]) + len(ar_prices)),\n    mode=\"lines\",\n    name=f\"AR(1) for rho={rho}\",\n)\n</code></pre>\n\n<pre><code>rho = 0.9\nar_prices = []\nstart_price = apple[\"Close\"].iloc[-1]\ncur_price = start_price\nar_prices.append(cur_price)\nfor i in range(1, 200):\n    cur_price = (\n        start_price + rho * (cur_price - start_price) + np.random.normal(0, sigma)\n    )\n    ar_prices.append(cur_price)\n\nfig = px.line(\n    y=apple[\"Close\"], x=np.arange(0, len(apple[\"Close\"])), title=\"Apple Stock Price\"\n)\nfig.add_scatter(\n    y=ar_prices,\n    x=np.arange(len(apple[\"Close\"]), len(apple[\"Close\"]) + len(ar_prices)),\n    mode=\"lines\",\n    name=f\"AR(1) for rho={rho}\",\n)\n</code></pre>\n\n<pre><code>rho = 1.0\nar_prices = []\nstart_price = apple[\"Close\"].iloc[-1]\ncur_price = start_price\nar_prices.append(cur_price)\nfor i in range(1, 200):\n    cur_price = (\n        start_price + rho * (cur_price - start_price) + np.random.normal(0, sigma)\n    )\n    ar_prices.append(cur_price)\n\nfig = px.line(\n    y=apple[\"Close\"], x=np.arange(0, len(apple[\"Close\"])), title=\"Apple Stock Price\"\n)\nfig.add_scatter(\n    y=ar_prices,\n    x=np.arange(len(apple[\"Close\"]), len(apple[\"Close\"]) + len(ar_prices)),\n    mode=\"lines\",\n    name=f\"AR(1) for rho={rho}\",\n)\n</code></pre>\n\n<p>Same as before, we'll make a plot with multiple simulations. We'll be using \\(\\rho = 0.9\\)</p>\n<pre><code>def simulate_one(days=200, sigma=3, rho=0.9):\n    ar_prices = []\n    start_price = apple[\"Close\"].iloc[-1]\n    cur_price = start_price\n    ar_prices.append(cur_price)\n    for i in range(1, 200):\n        cur_price = (\n            start_price + rho * (cur_price - start_price) + np.random.normal(0, sigma)\n        )\n        ar_prices.append(cur_price)\n\n    ar_prices = np.array(ar_prices)\n    return ar_prices\n</code></pre>\n\n<pre><code>ar_prices = simulate_one()\nsum_ar_price = ar_prices\nfig = px.line(y=ar_prices, x=np.arange(0, 200))\nfor i in range(100):\n    ar_prices = simulate_one()\n    sum_ar_price += ar_prices\n    fig.add_scatter(y=ar_prices, x=np.arange(0, 200), mode=\"lines\", name=f\"S_{i+1}\")\nfig.add_scatter(\n    y=sum_ar_price / 100,\n    x=np.arange(0, 200),\n    mode=\"lines\",\n    name=f\"Avereged\",\n    line=dict(color=\"royalblue\", width=4),\n)\nfig.show()\n</code></pre>\n\n<p>The efficient market hypothesis (EMH), alternatively known as the efficient market theory, is a hypothesis that states that share prices reflect all information.</p>\n<p>According to the EMH, stocks always trade at their fair value on exchanges, making it impossible for investors to purchase undervalued stocks or sell stocks for inflated prices. Therefore, it should be impossible to outperform the overall market through expert stock selection or market timing, and the only way an investor can obtain higher returns is by purchasing riskier investments.</p>\n<p>Weak Form: prices incorporate information about past prices</p>\n<p>Semi Strong Form: all publicly information is already incorporated in the market prices</p>\n<p>Strong Form: all information including inside information held by the companies is already incorporated in the stock prices, prices because it leaks out.</p>\n<p>The hypothesis is only a \"half truth\".</p>\n<p>Discounted present value is a concept in economics and finance that refers to a method of measuring the value of payments or utility that will be received in the future. Most people would agree that receiving $1,000 today is better than receiving $1,000 in a year, because $1,000 today can be used for consumption or investment. </p>\n<p>By Gordon model, if the earnings by a stock is due to dividends and the dividends grow with factor g, we have:</p>\n\\[\nP = \\frac{E}{r-g}\\\\\n\\frac{P}{E} = \\frac{1}{r-g}\n\\]\n<p>\\(E\\) can be seen as the value of the next year's dividends.</p>\n<p>This means that if the P/E ratio is higher it would either have to be because it's low risk as measured by beta, so we willing to pay more for it because it's low risk. Or would have to be that people have reason to think that they're earning path the gross rate g is high.</p>\n<p>Behavioral finance, a subfield of behavioral economics, proposes that psychological influences and biases affect the financial behaviors of investors and financial practitioners. Moreover, influences and biases can be the source for the explanation of all types of market anomalies and specifically market anomalies in the stock market, such as severe rises or falls in stock price.</p>\n<p>In economics, utility is a term used to determine the worth or value of a good or service. More specifically, utility is the total satisfaction or benefit derived from consuming a good or service. Economic theories based on rational choice usually assume that consumers will strive to maximize their utility.</p>\n<p>People are rational and are trying to maximize their utility which is an measure of happiness.</p>\n<p>Prospect theory is is a experimentally based set of knowledge about mistakes that people make. This is based on research by Kahneman and Tversky of people making decisions under uncertainty and is a modification of the expected utility theory. The theory is based on some real life facts such as:</p>\n<ol>\n<li>People are overly focused on little losses, little gains and losses.</li>\n<li>Another thing is that people will often try to gamble out of losses. If you went to the casino and you lost money, you think, maybe I should gamble some more, maybe I can get back to where I was.</li>\n<li>People have a skewed representation of probability, and they do not treat gains and losses equivalently.</li>\n</ol>\n<p>Prospect theory assumes that losses and gains are valued differently, and thus individuals make decisions based on perceived gains instead of perceived losses. Also known as the \"loss-aversion\" theory, the general concept is that if two choices are put before an individual, both equal, with one presented in terms of potential gains and the other in terms of possible losses, the former option will be chosen.</p>\n<p>The main assumption of the prospect theory is that people are not very rational; which is in contrast with the traditional economic models that people are very sensible and calculating.</p>\n<p>Efficient market hypothesis and behavioral finance are two main revolution of past 50-60 years. These two revolutions are kind of incompatible views of the world. But they both offer insights, they're both exciting.</p>\n<p>Tversky and Kahneman proposed that losses cause a greater emotional impact on an individual than does an equivalent amount of gain, so given choices presented two ways\u2014with both offering the same result\u2014an individual will pick the option offering perceived gains.</p>\n<p>For example, assume that the end result of receiving 25. One option is being given 25 outright. The other option is being given 50 and then having to give back 25. The utility of the 25 is exactly the same in both options. However, individuals are most likely to choose to receive straight cash because a single gain is generally observed as more favorable than initially having more cash and then suffering a loss.</p>\n<p></p>\n<p>Example: Let's say I toss a coin. If it turns head, I'll give you 200 and if it turns tail you'll give me 100. So, you have an expected return of 50. By expected utility theory, you should take the bet. However, people don't usually take the bet.</p>\n<p>This can be understood by the prospect thoery. People don't take the bet because the gaining 200 gives a little happiness but losing 100 gives a lot of unhappiness. This is called the loss aversion namely, people are more afraid of loosing. (\"You are always worried about little losses today.\")</p>\n<p></p>\n<ol>\n<li>Overconfidence</li>\n<li>Wishful Thinking Bias: People overestimate the probability of the things that they identify with and want to see happen. Very simple, you ask people what they think the probability of their team winning is. And it's always higher if it's their team.</li>\n<li>Overconfidence in Friends or Leaders</li>\n</ol>\n<p>Anchoring refers to a tendency in ambiguous situations to allow one's decisions to be affected by some anchor. it's the same way I think with stock prices, that stock prices are anchored to past values. Nobody knows what this company is worth but it was worth something yesterday.</p>"},{"location":"Notes/Finance/Module_2/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L5</li> <ol><li>Financial Innovation</li> <ol><li>Limited Liability</li> <li>Inflation Indexed Debt/Securities</li> </ol><li>Unidad de Fomento</li> </ol><li>L6</li> <ol><li>Forecasting</li> <li>Random Walk</li> <li>First Order Auto Regressive Model</li> <li>Efficient Market Hypothesis</li> <li>Price as PDV</li> </ol><li>L7</li> <ol><li>Behavioral Finance</li> <li>Expected Utility Theory</li> <li>Prospect Theory</li> <li>Value Function in Prospect Theory</li> <li>Logical Fallacies</li> <li>Anchoring</li> </ol> </ol>"},{"location":"Notes/Finance/Module_2/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_2/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_2/#l5","title":"L5","text":""},{"location":"Notes/Finance/Module_2/#financial-innovation","title":"Financial Innovation","text":""},{"location":"Notes/Finance/Module_2/#limited-liability","title":"Limited Liability","text":""},{"location":"Notes/Finance/Module_2/#inflation-indexed-debtsecurities","title":"Inflation Indexed Debt/Securities","text":""},{"location":"Notes/Finance/Module_2/#unidad-de-fomento","title":"Unidad de Fomento","text":""},{"location":"Notes/Finance/Module_2/#l6","title":"L6","text":""},{"location":"Notes/Finance/Module_2/#forecasting","title":"Forecasting","text":""},{"location":"Notes/Finance/Module_2/#random-walk","title":"Random Walk","text":""},{"location":"Notes/Finance/Module_2/#efficient-market-hypothesis","title":"Efficient Market Hypothesis","text":""},{"location":"Notes/Finance/Module_2/#price-as-pdv","title":"Price as PDV","text":""},{"location":"Notes/Finance/Module_2/#l7","title":"L7","text":""},{"location":"Notes/Finance/Module_2/#behavioral-finance","title":"Behavioral Finance","text":""},{"location":"Notes/Finance/Module_2/#expected-utility-theory","title":"Expected Utility Theory","text":""},{"location":"Notes/Finance/Module_2/#prospect-theory","title":"Prospect Theory","text":""},{"location":"Notes/Finance/Module_2/#value-function-in-prospect-theory","title":"Value Function in Prospect Theory","text":""},{"location":"Notes/Finance/Module_2/#logical-fallacies","title":"Logical Fallacies","text":""},{"location":"Notes/Finance/Module_2/#anchoring","title":"Anchoring","text":""},{"location":"Notes/Finance/Module_3/","title":"Module 3","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <pre><code>plt.rcParams[\"figure.figsize\"] = [12, 8]\n</code></pre> <p>Term is the time period over which the loan is repaid. It is usually expressed in months or years.</p> <p>Federal Funds Rate is the interest rate at which banks lend to each other overnight. EONIA is the Euro Overnight Index Average, which is the average interest rate at which Eurozone banks lend to each other overnight.</p> <p>The federal fund rate is virtually zero after the financial crisis of 2008. The EONIA rate is negative, which means that banks are paying each other to borrow money overnight.</p> <p>The reason why there is negative interest rate is that storing cash is costly. Banks have to pay for security, insurance, and other costs. So, they would rather lend money to each other at a negative interest rate than to store cash.</p> <p>Since the formula for copunding at a rate of \\(r\\) and assuming that the compunding happens \\(n\\) time a year, we have: $$ A = P\\left(1 + \\frac{r}{n}\\right)^{nt} $$</p> <p>Taking the limit as \\(n \\to \\infty\\) gives us: $$ A = P\\left(1 + \\frac{r}{n}\\right)^{nt} \\to Pe^{rt} $$</p> <p>This is called continuous compounding.</p> <pre><code>def simple_interest(p, r, t):\n    return p*(1+ r * t)\n\ndef compound_interest(p, r, t, n=1):\n    return p * (1 + r/n) ** (n * t)\n\ndef continous_compound_interest(p, r, t):\n    return p * np.exp(r * t)\n</code></pre> <pre><code>p = 100\nr = 0.05\nts = np.arange(1, 51)\nsi = simple_interest(p, r, ts)\nci = compound_interest(p, r, ts, n=1)\ncci = continous_compound_interest(p, r, ts)\nci_cci_diff = -ci + cci\nsi_ci_diff = -si + ci\nsi_cci_diff = -si + cci\n</code></pre> <pre><code>fig = go.Figure()\nfig.add_trace(go.Scatter(x=ts, y=si, name=\"Simple\"))\nfig.add_trace(go.Scatter(x=ts, y=ci, name=\"Compound\"))\nfig.add_trace(go.Scatter(x=ts, y=cci, name=\"Continous Compound\"))\nfig.add_trace(go.Scatter(x=ts, y=ci_cci_diff, name=\"Continous Compound - Compound\"))\nfig.add_trace(go.Scatter(x=ts, y=si_ci_diff, name=\"Compound - Simple\"))\nfig.add_trace(go.Scatter(x=ts, y=si_cci_diff, name=\"Continous Compound - Simple\"))\nfig.update_layout(\n    title=\"Simple, Compound and Continous Compound Interest\",   \n    xaxis_title=\"Time\",\n    yaxis_title=\"Amount\",\n    legend_title=\"Interest Type\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=18,\n        color=\"RebeccaPurple\"\n    )\n)\nfig.show()\n</code></pre>"},{"location":"Notes/Finance/Module_3/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L8</li> <ol><li>Term</li> <li>Federal Funds Rate and EONIA</li> <li>Interest and Compound Interest</li> <li>Continuos Compounding</li> <li>Bonds</li> <li>Discount Bonds</li> <li>Yield to Maturity</li> <li>Consol</li> <li>Forward Rate</li> <li>Interest Rates</li> <ol><li>Nominal Interest Rate</li> <li>Effective Interest Rate</li> <li>Real Interest Rate</li> <li>A Summary of Interest Rates</li> </ol><li>Leverage</li> </ol><li>L9</li> <ol><li>Corporation</li> <li>For-Profit and Non-Profit</li> <li>Equity</li> <li>Shares</li> <li>Share Splitting</li> <li>Market Cap</li> <li>Dividend</li> <li>Classes of Shares</li> <li>Dilution</li> <li>Stock Dividend</li> <li>Share Repurchase</li> <li>P/E Ratio</li> <li>Pecking Order Theory</li> </ol> </ol>"},{"location":"Notes/Finance/Module_3/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_3/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_3/#l8","title":"L8","text":""},{"location":"Notes/Finance/Module_3/#term","title":"Term","text":""},{"location":"Notes/Finance/Module_3/#federal-funds-rate-and-eonia","title":"Federal Funds Rate and EONIA","text":""},{"location":"Notes/Finance/Module_3/#interest-and-compound-interest","title":"Interest and Compound Interest","text":""},{"location":"Notes/Finance/Module_3/#continuos-compounding","title":"Continuos Compounding","text":""},{"location":"Notes/Finance/Module_4/","title":"Module 4","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <pre><code>plt.rcParams[\"figure.figsize\"] = [12, 8]\n</code></pre> <p>An inverted yield curve is a situation in which short term interest rates, like overnight rates or three month rates, are above long term interest rates. Inverted yield curves have often heralded a recession.</p> <pre><code>three_m = pd.read_csv(\"Data/3M.csv\", index_col=\"Date\", parse_dates=True)\nsix_m = pd.read_csv(\"Data/6M.csv\", index_col=\"Date\", parse_dates=True)\nten_y = pd.read_csv(\"Data/10Y.csv\", index_col=\"Date\", parse_dates=True)\nthirty_y = pd.read_csv(\"Data/30Y.csv\", index_col=\"Date\", parse_dates=True)\n\nus_13_w = pd.read_csv(\"Data/US13W.csv\", index_col=\"Date\", parse_dates=True)\nus_10_y = pd.read_csv(\"Data/US10Y.csv\", index_col=\"Date\", parse_dates=True)\nus_5_y = pd.read_csv(\"Data/US5Y.csv\", index_col=\"Date\", parse_dates=True)\nus_30_y = pd.read_csv(\"Data/US30Y.csv\", index_col=\"Date\", parse_dates=True)\n</code></pre> <pre><code>fig = go.Figure()\n\nfig.add_scatter(\n    x=us_30_y.index,\n    y=us_30_y[\"Close\"],\n    name=\"US 30 Year Treasury Yield\",\n    line=dict(color=\"red\", width=1),\n)\n\nfig.add_scatter(\n    x=us_10_y.index,\n    y=us_10_y[\"Close\"],\n    name=\"US 10 Year Treasury Yield\",\n    line=dict(color=\"blue\", width=1),\n)\n\nfig.add_scatter(\n    x=us_5_y.index,\n    y=us_5_y[\"Close\"],\n    name=\"US 5 Year Treasury Yield\",\n    line=dict(color=\"green\", width=1),\n)\n\n# fig.add_scatter(\n#     x=us_13_w.index,\n#     y=us_13_w[\"Close\"],\n#     name=\"US 13 Week Treasury Yield\",\n#     line=dict(color=\"yellow\", width=1),\n# )\n\nfig.update_layout(\n    title=\"US Treasury Yield Curve\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Yield\",\n    font=dict(family=\"Courier New, monospace\", size=18, color=\"#7f7f7f\"),\n)\nfig.show()\n</code></pre> <pre><code>x.observe(notebookContainer, {childList: true});\n</code></pre> <p>}}</p> <p>// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{     x.observe(outputEl, {childList: true}); }}</p> <pre><code>                    })                };                });            &lt;/script&gt;\n</code></pre> <p>The LIBOR-OIS spread represents the difference between an interest rate with some credit risk built-in and one that is virtually free of such hazards. Therefore, when the gap widens, it\u2019s a good sign that the financial sector is on edge.</p> <p>A mortgage is a type of loan used to purchase or maintain a home, land, or other types of real estate. The borrower agrees to pay the lender over time, typically in a series of regular payments that are divided into principal and interest. The property then serves as collateral to secure the loan.</p> <p>Most traditional mortgages are fully-amortizing. This means that the regular payment amount will stay the same, but different proportions of principal vs. interest will be paid over the life of the loan with each payment. Typical mortgage terms are for 30 or 15 years.</p> <p>We have it as a verb. To mortgage something, to mortgage your house means to offer it as collateral for a loan. So when you get a mortgage on your house, typically it is to buy the house, the bank lends you the money to buy the house, but if you stop paying on the mortgage, they can reclaim the house.</p> <p>Underwater: The term underwater is used to describe a situation in which the value of a home is less than the amount of money owed on the mortgage. If you are underwater, you are in a negative equity situation.</p> <p>An investment vehicle is a product used by investors to gain positive returns. Investment vehicles can be low risk, such as certificates of deposit (CDs) or bonds, or they can carry a greater degree of risk, such as stocks, options, and futures. </p> <p>Investment vehicles can be low risk, such as CDs or bonds, or high risk such as options and futures.</p> <p>Commercial real estate (CRE) is property used exclusively for business-related purposes or to provide a work space rather than a living space, which would instead constitute residential real estate. Most often, commercial real estate is leased to tenants to conduct income-generating activities. This broad category of real estate can include everything from a single storefront to a huge shopping center.</p> <p>Real estate is defined as the land and any permanent structures, like a home, or improvements attached to the land, whether natural or man-made.</p> <p>Real estate is a form of real property. It differs from personal property, which is not permanently attached to the land, such as vehicles, boats, jewelry, furniture, and farm equipment.</p> <p>Not everyone can invest in real state. You must be \"wealthy enough\" to do so. The reason is that real estate is a very illiquid asset. It is very hard to sell at a price that you want. So, if you are a wealthy person, you can afford to buy a house and hold it for a long time. If you are not wealthy, you cannot afford to buy a house and hold it for a long time. You need to be able to sell it quickly if you need to.</p> <pre><code>m_15_us = pd.read_csv(\"Data/MORTGAGE15US.csv\", index_col=\"DATE\", parse_dates=True)\nm_30_us = pd.read_csv(\"Data/MORTGAGE30US.csv\", index_col=\"DATE\", parse_dates=True)\n</code></pre> <pre><code>fig = go.Figure()\n\nfig.add_scatter(\n    x=m_15_us.index,\n    y=m_15_us[\"MORTGAGE15US\"],\n    name=\"15 Year Mortgage Rate\",\n    line=dict(color=\"red\", width=1),\n)\n\nfig.add_scatter(\n    x=m_30_us.index,\n    y=m_30_us[\"MORTGAGE30US\"],\n    name=\"30 Year Mortgage Rate\",\n    line=dict(color=\"blue\", width=1),\n)\n\nfig.update_layout(\n    title=\"US Mortgage Rate\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Rate\",\n    font=dict(family=\"Courier New, monospace\", size=18, color=\"#7f7f7f\"),\n)\nfig.show()\n</code></pre>"},{"location":"Notes/Finance/Module_4/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L10</li> <ol><li>Inverted Yield Curve</li> <li>LIBOR-OIS Spread</li> <li>Mortgage</li> <li>Investment Vehicle</li> <li>Commercial Real Estate</li> <li>Real Estate</li> <li>Real Estate Investment Trust (REIT)</li> <li>Limited Partnership</li> <li>Direct Participation Program (DPP)</li> <li>Amortization</li> <li>Kind of Mortgages</li> <li>Private Mortgage Insurance (PMI)</li> <li>Collateralized Mortgage Obligation (CMO)</li> <li>Tranches</li> <li>Centralized Debt Obligation (CDO)</li> <li>Excess Reserves</li> <li>Real Estate Bubble</li> </ol><li>L11</li> <ol><li>Regulation and Human Behavior</li> <li>Dodd-Frank Act</li> <li>Levels of Financial Regulation</li> <li>Tunneling</li> <li>Hedge Funds</li> <li>Public and Private Securities</li> <li>Insiders and Outsiders</li> <li>Front Running</li> <li>Generally Accepted Accounting Principles (GAAP)</li> <li>International Financial Reporting Standards (IFRS)</li> </ol> </ol>"},{"location":"Notes/Finance/Module_4/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_4/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_4/#l10","title":"L10","text":""},{"location":"Notes/Finance/Module_4/#inverted-yield-curve","title":"Inverted Yield Curve","text":""},{"location":"Notes/Finance/Module_4/#libor-ois-spread","title":"LIBOR-OIS Spread","text":""},{"location":"Notes/Finance/Module_4/#mortgage","title":"Mortgage","text":""},{"location":"Notes/Finance/Module_4/#investment-vehicle","title":"Investment Vehicle","text":""},{"location":"Notes/Finance/Module_4/#commercial-real-estate","title":"Commercial Real Estate","text":""},{"location":"Notes/Finance/Module_4/#real-estate","title":"Real Estate","text":""},{"location":"Notes/Finance/Module_4/#real-estate-investment-trust-reit","title":"Real Estate Investment Trust (REIT)","text":""},{"location":"Notes/Finance/Module_4/#limited-partnership","title":"Limited Partnership","text":""},{"location":"Notes/Finance/Module_4/#direct-participation-program-dpp","title":"Direct Participation Program (DPP)","text":""},{"location":"Notes/Finance/Module_5/","title":"Module 5","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <p>To hedge, in finance, is to take an offsetting position in an asset or investment that reduces the price risk of an existing position. A hedge is therefore a trade that is made with the purpose of reducing the risk of adverse price movements in another asset. Normally, a hedge consists of taking the opposite position in a related security or in a derivative security based on the asset to be hedged.</p> <p>The spot market for any thing is that the market for immediate delivery. You pay the money, you get the item. Forward and futures reflect contracts involving future delivery.</p> <p>A forward contract is a contract between two individuals, you might call them counter-parties, to deliver at a future date called the exercise date or maturity date. Historically, forward contracts preceded futures contracts.</p> <p>If you're going to go with forwards, you have to worry about your counterparty, and you have to check the counterparty out, and you need to establish that the counterparty has good credit so they're inherently limited.</p> <p>A forward exchange contract, FX forwards can be thought of as a pair of zero coupon bonds stapled together in two different currencies.</p> <p>Let's have a look at an example: Suppose I'm selling goods. I'm a Japanese producer of goods which I'm selling in the United States. I'm going to sell them for dollars of course, Americans pay dollars. And then I want to repatriate the money to Japan, so I'm going to exchange it into yen. But I want to have a forward contract which locks in the price today. I don't have to go through the forward market. I can borrow the money today in dollars, exchange it at the spot exchange rate today into yen, take the yen back to Japan and put them in some interest bearing account in Japan earning the Japanese interest rate. So I'm going to be charged the dollar interest rate but I'm going to be credited the Japanese interest rate. And so I have an amount left at the end equal to:</p> \\[ \\text{Forward Rate} = \\frac{1 + \\text{Japanese Interest Rate}}{1 + \\text{Dollar Interest Rate}} \\times \\text{Spot Rate} \\] <p>So, ideally, forward rate should be equal to the expression above.</p> <p>The forward rate agreement is given by:</p> \\[ \\text{Settlement} = \\frac{(L-R)\\times D\\times A}{(B\\times 100)+L\\times D} \\] <p>where</p> <ul> <li>\\(L\\) is the actual interest rate on contract date</li> <li>\\(R\\) the contract date</li> <li>\\(D\\) the number of days in the contract</li> <li>\\(A\\) Contract amount</li> <li>\\(B\\) the number of days in the year (360 or 365)</li> </ul> <p>A futures contract is like a forward contract except there's an intermediary. The exchange who, you make your contract with the intermediary, not with the ultimate counter party, and they're standardized.</p> <p>Future works on the concept of margin. If market goes agains you, money is deducted from your margin account. This means that you can close away from the contract anytime you want, the money is deducted from your margin account.</p> <p>There are two types of margins:</p> <ul> <li>Initial margin: The amount of money you have to put up to enter into the contract.</li> <li>Maintenance margin: The amount of money you have to keep in your account to maintain the contract.</li> </ul> <p>A margin call is a request for additional funds from a customer to meet a margin requirement. The margin call is made by the broker to the customer. The customer has to deposit the funds with the broker. The broker then uses the funds to meet the margin call.</p> <p>Future contracts are not usually delivered. It's just an insurance against price drops.</p> <p>Contango is a situation in which the futures price is higher than the spot price. This is because the futures price is the price of the underlying asset at a future date, and the spot price is the price of the underlying asset at the current date. The difference between the two prices is the interest rate.</p> <p>As time increases, the futures price increases more than the spot price. Meaning that the slope is positive. This is contango.</p> <p>The futures market makes the shortages less severe because you can see it coming in the futures curve.</p> <p>When someone \"buys\" a futures contract, they are agreeing to buy the underlying asset at a future date at a price that is set today. When someone \"sells\" a futures contract, they are agreeing to sell the underlying asset at a future date at a price that is set today.</p> <p>What actually happens is that a buyer agrees with the exchange to a daily settlement procedure. This is done by the initial margin give by the buyer.</p> <p>Every day until expiration, a margin account is credited or debited with an amount equal to the change in the settle price times the contract amount. The amount credited or debited is called the daily settlement amount and is calculated as follows:</p> \\[ \\text{Daily Settlement Amount} = \\text{Settle Price} \\times \\text{Contract Amount} \\] <p>Last Day: The last day is different. The buyer/seller has to pay the difference between the settle price and the spot price times the contract amount. (Or else they have to be ready with their truck to deliver the goods /take goods).</p> <p>This means that you don't need to buy/sell the underlying asset. You just need to have the money to pay the difference between the settle price and the spot price.</p> <p>On the last day, the spot price is going to be approximately equal to the futures price.</p> <p>Arbitrage is the simultaneous purchase and sale of the same or similar asset in different markets in order to profit from tiny differences in the asset's listed price. It exploits short-lived variations in the price of identical or similar financial instruments in different markets or in different forms.</p> <p>Fair Value In Futures Contract is a little bit like the forward interest parity in forward rate. This answers the question: What should the futures price be? We have:</p> \\[ P_{\\text{Future}} = P_{\\text{Spot}} \\times (1+r+s) \\] <p>where</p> <ul> <li>\\(P_{\\text{Future}}\\) is the futures price</li> <li>\\(P_{\\text{Spot}}\\) is the spot price</li> <li>\\(r\\) is the interest rate for the particular time period</li> <li>\\(s\\) is the storage cost for the particular time period</li> </ul> <p>The contango can be easily explained by above formula.</p> <p>It is possible that the future price is less than the spot price. This is called backwardation.This can happen when the commodity is not in storage escpecially at harvest time.</p> <p>There is no obvious spot oil price. Now there are spot oil prices but it's overwhelming majority of oil is not sold on the spot market. The spot oil price is a volatile number, it differs from place to place. Again, when you look at oil price typically when they quote that, they're quoting the nearest future contract.</p> <p>SPI stands for stock price index. In US, S&amp;P 500 is used. The future price is given by:</p> \\[ F = P + P\\times(r-y) \\] <p>where</p> <ul> <li>\\(F\\) is the future price</li> <li>\\(P\\) is the spot price</li> <li>\\(r\\) is the interest rate</li> <li>\\(y\\) is the dividend yield</li> </ul> <p>The formula is same as the fair price for a commodity with a negative storage cost. The storage cost is negative because storing stocks gives you a dividend yield.</p> <p>As an index can not be deliverable, cash settlement is used. The lot size varies from exchange to exchange. In US, it is 250.</p> <p>Options are contracts that derive their value from an underlying asset or investment. Options give the owner the right to buy or sell the underlying asset (such as a stock), at a fixed price (called the strike price), on or before a specific expiration date in the future. A call option gives the owner the right to buy a stock, for example, while a put option gives the owner the right to sell the stock. The up-front fee (called the premium) is what the investor pays to purchase the option.</p> <p>There are two types of options:</p> <ul> <li>Call option: The right to buy the underlying asset at a certain price.</li> <li>Put option: The right to sell the underlying asset at a certain price.</li> </ul> <p>At the time that the option is bought, the buyer of the option compensates the seller, the writer, of the option. Because the writer of the option is now subject to the choice in the future of the buyer of the option. And it has to be compensated for giving that choice to the other person.</p> <p>With a call option, you are buying the right to buy something which is specified in the contract at a predetermined price. That means you don't have to wait to find out what your market price is of that item on the day of purchase. It's locked in in advance. But we call it an option because you don't have to purchase it, you can wait and see.</p> <p>You will buy a call option on the date specified if the price of buying it through the option is less than the price of buying it in the open market. Because you will always do that, even if you decide you don't want the object, because you can then sell it in the open market and make a profit.</p> <p>With a put option, you are buying the right to sell something which is specified in the contract at a predetermined price.</p> <p>You will buy a put option on the date specified if the price of selling it through the option is more than the price of selling it in the open market. Because you will always do that, even if you decide you don't want to sell it, because you can then buy it in the open market and make a profit.</p> <p>Options are optional, futures are not. Futures are binding. You have to buy or sell the underlying asset. Options are not binding. You can choose not to buy or sell the underlying asset.</p> <p>There are three main terms of options:</p> <ul> <li>Exercise price (Strike Price): The price at which the underlying asset can be bought or sold.</li> <li>Exchange date: The date on which the option can be exercised.</li> <li>Underlying asset: The asset that can be bought or sold and the number of units.</li> </ul> <p>Bid price is the price at which the option can be sold. Ask price is the price at which the option can be bought. Last price is the price at which the option was last traded.</p> <p>Theoretical and Behavioral reasons.</p> <p>American and European options have similar characteristics but the differences are important. For instance, owners of American-style options may exercise at any time before the option expires. On the other hand, European-style options may exercise only at expiration.</p> <p>On expiry date, you exercise a put option only if the spot price is less than the exercise price. You exercise a call option only if the spot price is more than the exercise price. So, the value of a put option is equal to the value of a call option plus the difference between the spot price and the exercise price.</p> <p>Let's plot how return varies on the excersice date for a put and call option.</p> <pre><code># a function to calculate the return if you excersice the put on last day\ndef put_return(spot_price, strike_price, type=\"long\", premium=0):\n    if type == \"long\":\n        return max(strike_price - spot_price, 0) - premium\n    elif type == \"short\":\n        return min(spot_price - strike_price, 0) + premium\n\n\n# a function to calculate the return if you excersice the call on last day\ndef call_return(spot_price, strike_price, type=\"long\", premium=0):\n    if type == \"long\":\n        return max(spot_price - strike_price, 0) - premium\n    elif type == \"short\":\n        return min(strike_price - spot_price, 0) + premium\n</code></pre> <pre><code>strike_price = 100\npremium = 5\nspot_prices = np.arange(80, 120, 0.1)\nput_return_long = [\n    put_return(spot_price, strike_price, type=\"long\", premium=premium)\n    for spot_price in spot_prices\n]\nput_return_short = [\n    put_return(spot_price, strike_price, type=\"short\", premium=premium)\n    for spot_price in spot_prices\n]\ncall_return_long = [\n    call_return(spot_price, strike_price, type=\"long\", premium=premium)\n    for spot_price in spot_prices\n]\ncall_return_short = [\n    call_return(spot_price, strike_price, type=\"short\", premium=premium)\n    for spot_price in spot_prices\n]\n\nput_return_long = np.array(put_return_long)\nput_return_short = np.array(put_return_short)\ncall_return_long = np.array(call_return_long)\ncall_return_short = np.array(call_return_short)\n\n# Calculate_break_even points\n\n# Put\nput_break_even_long = strike_price - premium\nput_break_even_short = strike_price - premium\n\n# Call\ncall_break_even_long = strike_price + premium\ncall_break_even_short = strike_price + premium\n</code></pre> <pre><code>figure = make_subplots(\n    rows=2, cols=2, subplot_titles=(\"Long Put\", \"Short Put\", \"Long Call\", \"Short Call\")\n)\nfigure.add_trace(\n    go.Scatter(x=spot_prices, y=put_return_long, name=\"Long Put\"), row=1, col=1\n)\nfigure.add_trace(\n    go.Scatter(x=spot_prices, y=put_return_short, name=\"Short Put\"), row=1, col=2\n)\nfigure.add_trace(\n    go.Scatter(x=spot_prices, y=call_return_long, name=\"Long Call\"), row=2, col=1\n)\nfigure.add_trace(\n    go.Scatter(x=spot_prices, y=call_return_short, name=\"Short Call\"), row=2, col=2\n)\n\n# Adding breakeven point as circle\nfigure.add_trace(\n    go.Scatter(\n        x=[put_break_even_long],\n        y=[0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Long Put\",\n    ),\n    row=1,\n    col=1,\n)\nfigure.add_trace(\n    go.Scatter(\n        x=[put_break_even_short],\n        y=[0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Short Put\",\n    ),\n    row=1,\n    col=2,\n)\nfigure.add_trace(\n    go.Scatter(\n        x=[call_break_even_long],\n        y=[0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Long Call\",\n    ),\n    row=2,\n    col=1,\n)\nfigure.add_trace(\n    go.Scatter(\n        x=[call_break_even_short],\n        y=[0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Short Call\",\n    ),\n    row=2,\n    col=2,\n)\n\nfigure.update_layout(\n    title=\"Options Payoffs\",\n    xaxis_title=\"Spot Price\",\n    yaxis_title=\"Return\",\n    legend_title=\"Option Type\",\n    font=dict(family=\"Courier New, monospace\", size=18, color=\"#7f7f7f\"),\n)\n# Setting y axis range\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=1, col=1)\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=1, col=2)\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=2, col=1)\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=2, col=2)\nfigure.show()\n</code></pre> <pre><code># Breakevens for put+call\nput_call_break_even_long = [strike_price - 2 * premium, strike_price + 2 * premium]\nput_call_break_even_short = [strike_price - 2 * premium, strike_price + 2 * premium]\n# Ploting put+call payoffs\nfigure = make_subplots(\n    rows=1, cols=2, subplot_titles=(\"Long Put + Long Call\", \"Short Put + Short Call\")\n)\n\nfigure.add_trace(\n    go.Scatter(\n        x=spot_prices, y=put_return_long + call_return_long, name=\"Long Put + Long Call\"\n    ),\n    row=1,\n    col=1,\n)\nfigure.add_trace(\n    go.Scatter(\n        x=spot_prices,\n        y=put_return_short + call_return_short,\n        name=\"Short Put + Short Call\",\n    ),\n    row=1,\n    col=2,\n)\n\n# Adding breakeven point as circle\nfigure.add_trace(\n    go.Scatter(\n        x=put_call_break_even_long,\n        y=[0, 0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Long Put + Long Call\",\n    ),\n    row=1,\n    col=1,\n)\nfigure.add_trace(\n    go.Scatter(\n        x=put_call_break_even_short,\n        y=[0, 0],\n        mode=\"markers\",\n        marker=dict(size=10, color=\"red\"),\n        name=\"Breakeven for Short Put + Short Call\",\n    ),\n    row=1,\n    col=2,\n)\nfigure.update_layout(\n    title=\"Options Payoffs\",\n    xaxis_title=\"Spot Price\",\n    yaxis_title=\"Return\",\n    legend_title=\"Option Type\",\n    font=dict(family=\"Courier New, monospace\", size=18, color=\"#7f7f7f\"),\n)\n# Setting y axis range\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=1, col=1)\nfigure.update_yaxes(range=[-premium - 10, premium + 10], row=1, col=2)\nfigure.show()\n</code></pre> <p>Put-call parity is an arbitrage between a put price and a stock price that have the same underlying, the same strike price and the same exercise date.</p> <p>This gives a relationship between the put and call prices. This relationship is called the put-call parity relationship. It is given by:</p> \\[ P-C = K - S + D \\] <p>where</p> <ul> <li>\\(C\\) is the call price</li> <li>\\(P\\) is the put price</li> <li>\\(S\\) is the spot price</li> <li>\\(K\\) is the present value of exercise price</li> <li>\\(D\\) is the present value of dividend</li> </ul> <p>The formula means that if you add the present value of the strike price to the sum of put and call, you get the stock price again. (Ignoring dividends)</p> <p>The put-call parity relation must always hold. If it doesn't, there is an arbitrage opportunity and the market will adjust to make it hold.</p> <p>On an earlier day, like months or years before the exercise date, the stock option is worth more than the intrinsic value because it has option value. This is so beacuse there's always a chance that the stock will go up.</p> <p>If you are worried that the stock you have will go down, you can buy a put option. This puts a floor on the price of the stock. If the stock goes down, you can exercise the put option and sell the stock at the strike price. If the stock goes up, you can just hold the stock.</p>"},{"location":"Notes/Finance/Module_5/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n</code></pre> <li>Imports</li> <li>Topics cum Notes</li> <ol><li>L12</li> <ol><li>Hedging</li> <li>Forward and Future Markets</li> <li>Forwrad Contracts</li> <li>Forward Interest Parity</li> <li>Forward Rate Agreement</li> <li>Futures Contracts</li> <li>Margins</li> <li>Margin Calls</li> <li>Contango</li> <li>Buying/Selling Futures</li> <li>Daily Settlement</li> <li>Arbitrage</li> <li>Fair Value in Futures Contracts</li> <li>Oil Futures</li> <li>SPI Futures</li> </ol><li>L13</li> <ol><li>Options</li> <li>Call Option</li> <li>Put Option</li> <li>Difference between Futures and Options</li> <li>Terms of Options</li> <li>Bid, Ask and Last Price</li> <li>Why Options Exist?</li> <li>European and American Options</li> <li>Put/Call Parity</li> <li>Put-Call Parity Relationship</li> <li>Using Options to Hedge</li> </ol> </ol>"},{"location":"Notes/Finance/Module_5/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_5/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_5/#l12","title":"L12","text":""},{"location":"Notes/Finance/Module_5/#hedging","title":"Hedging","text":""},{"location":"Notes/Finance/Module_5/#forward-and-future-markets","title":"Forward and Future Markets","text":""},{"location":"Notes/Finance/Module_5/#forwrad-contracts","title":"Forwrad Contracts","text":""},{"location":"Notes/Finance/Module_5/#forward-interest-parity","title":"Forward Interest Parity","text":""},{"location":"Notes/Finance/Module_5/#forward-rate-agreement","title":"Forward Rate Agreement","text":""},{"location":"Notes/Finance/Module_5/#futures-contracts","title":"Futures Contracts","text":""},{"location":"Notes/Finance/Module_5/#margins","title":"Margins","text":""},{"location":"Notes/Finance/Module_5/#margin-calls","title":"Margin Calls","text":""},{"location":"Notes/Finance/Module_5/#contango","title":"Contango","text":""},{"location":"Notes/Finance/Module_5/#buyingselling-futures","title":"Buying/Selling Futures","text":""},{"location":"Notes/Finance/Module_5/#daily-settlement","title":"Daily Settlement","text":""},{"location":"Notes/Finance/Module_5/#arbitrage","title":"Arbitrage","text":""},{"location":"Notes/Finance/Module_5/#fair-value-in-futures-contracts","title":"Fair Value in Futures Contracts","text":""},{"location":"Notes/Finance/Module_5/#oil-futures","title":"Oil Futures","text":""},{"location":"Notes/Finance/Module_5/#spi-futures","title":"SPI Futures","text":""},{"location":"Notes/Finance/Module_5/#l13","title":"L13","text":""},{"location":"Notes/Finance/Module_5/#options","title":"Options","text":""},{"location":"Notes/Finance/Module_5/#call-option","title":"Call Option","text":""},{"location":"Notes/Finance/Module_5/#put-option","title":"Put Option","text":""},{"location":"Notes/Finance/Module_5/#difference-between-futures-and-options","title":"Difference between Futures and Options","text":""},{"location":"Notes/Finance/Module_5/#terms-of-options","title":"Terms of Options","text":""},{"location":"Notes/Finance/Module_5/#bid-ask-and-last-price","title":"Bid, Ask and Last Price","text":""},{"location":"Notes/Finance/Module_5/#why-options-exist","title":"Why Options Exist?","text":""},{"location":"Notes/Finance/Module_5/#european-and-american-options","title":"European and American Options","text":""},{"location":"Notes/Finance/Module_5/#putcall-parity","title":"Put/Call Parity","text":""},{"location":"Notes/Finance/Module_5/#put-call-parity-relationship","title":"Put-Call Parity Relationship","text":""},{"location":"Notes/Finance/Module_5/#using-options-to-hedge","title":"Using Options to Hedge","text":""},{"location":"Notes/Finance/Module_6/","title":"Module 6","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <p>Investment banks are financial institutions that help companies raise capital by issuing securities. They also provide advice on mergers and acquisitions, and help companies manage their finances. Investment banks are also known as underwriters. They are the institutions that companies go to, or non profits or even governments go to, when they want to raise money, and they do it with them as a broker, intervening.</p> <p>A consulting firm, is a firm that a company will go to for advice. They have researchers there. But the difference, in investment bank, you go to for advice to, but an investment bank is like a consulting firm with an army. And I shouldn't say army. With resources. They know where the money is and they can get it for you. And so, they'll give you advice. And it may share some of the risks of the offering. But the really important thing that investment banks do is put their reputation behind the issue. They check you out, due diligence.</p> <p>An underwriting syndicate is a band of investment banks and broker dealers who come together to sell new offerings of equity or debt securities of a firm to investors when the issue is too large for a single firm to handle. The syndicate takes on inventory risk by committing to purchase the full issue upfront, and selling it afterwards to investors in the market. It is compensated by the underwriting spread, which is the difference between the price paid to the issuer, and the price received from investors.</p> <p>Underwriters under-price the offer and from what they know they could get, that way it sells out quickly, it looks great.</p> <p>Underwriting is the issuance of shares and corporate debt.</p> <p>There are a number of steps involved in underwriting. Some of them are: - Prefilling Period - The period of time before the offering when the investment bank and the company work together to prepare the offering documents. Here, you get advice from the investment bank, about choices.</p> <ul> <li>Forming Syndicate- This happens if the issue to be underwritten is large. The investment bank will form a syndicate of other investment banks to help underwrite the issue. The syndicate will share the risk and the profits of the issue.</li> </ul> <ul> <li>Registration with SEC- The company files a registration statement with the SEC. The SEC reviews the registration statement and approves it.</li> </ul> <ul> <li>Cooling off Period- The SEC requires a cooling off period of 20 days after the registration statement is filed. This is to give investors time to review the registration statement. SEC regulates a document which shows the risk involved in the security so that the investors can make an informed decision.</li> </ul> <ul> <li>Offering Price- The investment bank and the company decide on the offering price. The offering price is the price at which the shares are sold to the investors. The offering price is determined by the investment bank and the company. The investment bank will advise the company on the offering price. The company will also consider the offering price in deciding whether to go ahead with the offering.</li> </ul> <ul> <li>IPO - After the registration statement is approved, the company goes ahead with the offering. The company sells the shares to the investors at the offering price. The company receives the proceeds from the sale of the shares. The investment bank receives the underwriting spread.</li> </ul> <p>This is a form of market manipulation. After IPO is done, if the price of the security comes down, the investment bank will buy the security from the market and sell it to the investors at the offering price. This is done to stabilize the price of the security. This is done to avoid panic selling.</p> <p>An initial public offering is an offering of a shares in a company for the first time publicly.</p> <p>Rating agencies are independent organizations that rate the creditworthiness of a company. They rate the creditworthiness of a company by assigning a credit rating to it. The credit rating is a letter grade that indicates the creditworthiness of a company. The credit rating is based on the company's financial statements and other information. The credit rating is used by investors to decide whether to invest in a company's securities.</p> <p>They publishes its information which makes it more trustworthy.</p> <p>They give rating as letter grades. AAA is the highest and D is the lowest. The higher the rating, the lower the risk.</p> <p>At starting, rating agencies did not take money from the compnaies they rated. However, later, it turned out to be very difficult to keep track of all the securities and mortgages and they started charging. This let to the rating agencies beging 'casual'. They started giving higher ratings to securities that were not so good. This led to the 2008 crisis.</p> <p>New regulations were put in place to prevent this.</p> <p>Regulations requires investment managers to be prudent.</p> <p>The prudent person is defined as: \"With the care, skill, prudence and diligence under the circumstances then prevailing that a prudent man acting in a like capacity and familiar with such matters would use in the conduct of an enterprise of a like character and with like aims.\"</p> <p>It's telling investment managers to do is do what somebody else would do in this circumstance.</p> <p>A financial advisor is anyone who advises others on the value of securities or the advisability of an investment or who publishes analysis. It excludes bankers, lawyers, reporters, and professors.</p> <p>A mutual fund is a financial vehicle that pools assets from shareholders to invest in securities like stocks, bonds, money market instruments, and other assets. Mutual funds are operated by professional money managers, who allocate the fund's assets and attempt to produce capital gains or income for the fund's investors. </p> <p>The term stock exchange-traded fund (ETF) refers to a security that tracks a particular set of equities. These ETFs trade on exchanges the same way normal stocks do and track equities just like an index. They can track stocks in a single industry or an entire index of equities. Investors who purchase shares of stock exchange ETF can gain exposure to a basket of equities and limited company-specific risk associated with single stocks, providing them with a cost-effective way to diversify their portfolios.</p> <p>Research suggests that passive-investment vehicles like ETFs tend to return more than actively-managed vehicles like mutual funds over the long run.</p> <p>Brokers act on behalf of Others as their Agent for which they earn a Commision. So a stock broker, what he or she does is brings people together so that if someone who wants to buy a stock, he finds someone who wants to sell that. Puts the two together, charges a commission for finding the other side. </p> <p>A dealer always acts for himself. When you buy from a dealer, they don't charge commison but you are getting a higher price. This is called markup.</p> <p>So a dealer posts prices, bid and asked, and stands ready to buy.</p> <p>Churn is the rate at which a broker trades the fund's portfolio. The higher the churn, the higher the trading costs and the lower the returns.</p> <p>Instead of sitting there with your finger to push the button, when a bidder ask comes up that you want, you can program a computer to do that, and the computer program can trade algorithmically.</p> <ol> <li>Market Order - Buy or sell at the current market price.</li> <li>Limit Order - Buy or sell at a specified price or better.</li> <li>Stop Order - Buy or sell when the price reaches a specified price.</li> </ol> <p>Government debt, also known as national or sovereign debt, is incurred when countries borrow funds to pay for more public services and projects than they raise in taxes.</p> <p>Repudiation of a debt occurs when the government announces, we're never going to pay. Like the communist governments in Russia and China repudiated their government debt. </p> <p>If a new government comes in, they can sometimes say, \"The past government was so corrupt and stealing, this is not the debt of our people, it's the debt of some criminal that we've finally got rid of. So that's odious debt, it stinks. We will not pay it back and we're morally right not to pay back what this person took from all of us.\"</p> <p>Usually, when a government id unable to pay its full debt to investors, it offers restructuring. It offers to pay back some of the debt, but not all of it. The investors agree to this because they know that if the government defaults, they will get nothing. So they agree to take a haircut, which is a reduction in the amount of money they will get back.</p> <p>When you buy the debt from some organization or country, it says you sign a contract when you buy it that you will agree to anything that's voted by a super-majority of the other investors in the same bonds.</p> <p>Municipal finance is the financing of municipal governments. Municipal governments are the governments of cities, towns, and villages. Municipal governments are funded by taxes and fees. They also borrow money from investors. Municipal bonds are bonds issued by municipal governments. Municipal bonds are issued to finance capital projects. Municipal bonds are issued to finance operating expenses. Municipal bonds are issued to refinance existing debt. Municipal bonds are issued to fund pension plans.</p> <p>These are bonds that are backed by the revenue of a specific project. For example, a toll road. The revenue from the tolls is used to pay back the bondholders.</p>"},{"location":"Notes/Finance/Module_6/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L14</li> <ol><li>Investment Banks</li> <li>Underwriting Syndicate</li> <li>Underwriting</li> <li>Stabilization</li> <li>Initial Public Offering (IPO)</li> <li>Rating Agencies</li> <li>The Prudent Person</li> <li>Financial Advisors</li> <li>Mutual Fund</li> <li>Exchange Traded Fund (ETF)</li> </ol><li>L15</li> <ol><li>Broker</li> <li>Dealer</li> <li>Churn</li> <li>High Frequency Trading</li> <li>Kinds of Order</li> </ol><li>L16</li> <ol><li>Government Debt</li> <li>Repudiation</li> <li>Odious Debt</li> <li>Default and Restructuring</li> <li>Collective Action Clause</li> <li>Municipal Finance</li> <li>Revenue Bonds</li> </ol> </ol>"},{"location":"Notes/Finance/Module_6/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_6/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_6/#l14","title":"L14","text":""},{"location":"Notes/Finance/Module_6/#investment-banks","title":"Investment Banks","text":""},{"location":"Notes/Finance/Module_6/#underwriting-syndicate","title":"Underwriting Syndicate","text":""},{"location":"Notes/Finance/Module_6/#underwriting","title":"Underwriting","text":""},{"location":"Notes/Finance/Module_6/#stabilization","title":"Stabilization","text":""},{"location":"Notes/Finance/Module_6/#initial-public-offering-ipo","title":"Initial Public Offering (IPO)","text":""},{"location":"Notes/Finance/Module_6/#rating-agencies","title":"Rating Agencies","text":""},{"location":"Notes/Finance/Module_6/#the-prudent-person","title":"The Prudent Person","text":""},{"location":"Notes/Finance/Module_6/#financial-advisors","title":"Financial Advisors","text":""},{"location":"Notes/Finance/Module_6/#mutual-fund","title":"Mutual Fund","text":""},{"location":"Notes/Finance/Module_6/#exchange-traded-fund-etf","title":"Exchange Traded Fund (ETF)","text":""},{"location":"Notes/Finance/Module_6/#l15","title":"L15","text":""},{"location":"Notes/Finance/Module_6/#broker","title":"Broker","text":""},{"location":"Notes/Finance/Module_6/#dealer","title":"Dealer","text":""},{"location":"Notes/Finance/Module_6/#churn","title":"Churn","text":""},{"location":"Notes/Finance/Module_6/#high-frequency-trading","title":"High Frequency Trading","text":""},{"location":"Notes/Finance/Module_6/#kinds-of-order","title":"Kinds of Order","text":""},{"location":"Notes/Finance/Module_6/#l16","title":"L16","text":""},{"location":"Notes/Finance/Module_6/#government-debt","title":"Government Debt","text":""},{"location":"Notes/Finance/Module_6/#repudiation","title":"Repudiation","text":""},{"location":"Notes/Finance/Module_6/#odious-debt","title":"Odious Debt","text":""},{"location":"Notes/Finance/Module_6/#default-and-restructuring","title":"Default and Restructuring","text":""},{"location":"Notes/Finance/Module_6/#collective-action-clause","title":"Collective Action Clause","text":""},{"location":"Notes/Finance/Module_6/#municipal-finance","title":"Municipal Finance","text":""},{"location":"Notes/Finance/Module_6/#revenue-bonds","title":"Revenue Bonds","text":""},{"location":"Notes/Finance/Module_7/","title":"Module 7","text":"<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport mplfinance as mpf\nimport matplotlib.dates as mdates\nimport datetime as dt\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\nimport gc\n\nnp.random.seed(42)\n</code></pre> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <p>Traditional economic theory describes people as having a utility function, which is arguments include own consumption, and they care only about that. Nonprofit organizations don't work this way. They exist for the benefit of their cause.</p> <p>It's an organization, it's a business but with one key different, there's a non-distribution constraint. They don't give back the dividend, the profits as dividend. They have to re-invest them. Either give them away or reinvest them in the activities of the organization.</p> <p>A financial cooperative (co-op) is a type of financial institution that is owned and operated by its members. The goal of a financial cooperative is to act on behalf of a unified group to offer traditional banking services. These institutions attempt to differentiate themselves by offering above-average services along with competitive rates in the areas of insurance, lending, and investment dealings.</p> <p>By democratization we mean that it should benefit real people. Everyone, not just the rich. It shouldn't be a plot to preserve the riches of the already rich.</p> <ol> <li>Mathematical Finance</li> <li>Behavioral Finance</li> </ol>"},{"location":"Notes/Finance/Module_7/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Imports\"&gt;Imports&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Topics cum Notes</li> <ol><li>L17</li> <ol><li>Nonprofit Organizations</li> <li>Financial Cooperative</li> </ol><li>L18</li> <ol><li>Critisim of Finance</li> <li>Democratization of Finance</li> <li>Crowdfunding</li> <li>Importance of Financial Theory</li> </ol> </ol>"},{"location":"Notes/Finance/Module_7/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Module_7/#topics-cum-notes","title":"Topics cum Notes","text":""},{"location":"Notes/Finance/Module_7/#l17","title":"L17","text":""},{"location":"Notes/Finance/Module_7/#nonprofit-organizations","title":"Nonprofit Organizations","text":""},{"location":"Notes/Finance/Module_7/#financial-cooperative","title":"Financial Cooperative","text":""},{"location":"Notes/Finance/Module_7/#l18","title":"L18","text":""},{"location":"Notes/Finance/Module_7/#critisim-of-finance","title":"Critisim of Finance","text":""},{"location":"Notes/Finance/Module_7/#democratization-of-finance","title":"Democratization of Finance","text":""},{"location":"Notes/Finance/Module_7/#crowdfunding","title":"Crowdfunding","text":""},{"location":"Notes/Finance/Module_7/#importance-of-financial-theory","title":"Importance of Financial Theory","text":""},{"location":"Notes/Finance/Working_With_pystock/","title":"Working With pystock","text":""},{"location":"Notes/Finance/Working_With_pystock/#Contents","title":"Contents","text":"<ol> <li>Imports</li> <li>The FamaFrenchFactors class</li> <ol> <li>Working with the Fama-French Factors </li> <ol> <li>Downloading FFF</li> <li>load function</li> </ol> <pre><code>            &lt;li&gt;&lt;a class=\"\" href=\"#Some-More-Functions\"&gt;Some More Functions&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Changing-the-Frequncy\"&gt;Changing the Frequncy&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Calculating-Mean-%22Returns%22\"&gt;Calculating Mean \"Returns\"&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n    &lt;/ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#The-Stock-class\"&gt;The Stock class&lt;/a&gt;&lt;/li&gt;\n    &lt;ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Creating-a-Stock-object\"&gt;Creating a Stock object&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#load_data-function\"&gt;load_data function&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Working-With-Returns\"&gt;Working With Returns&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Changing-the-frequency-of-the-data\"&gt;Changing the frequency of the data&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Stock-object-with-FamaFrenchFactors\"&gt;Stock object with FamaFrenchFactors&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#download_data-function\"&gt;download_data function&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#load_fff-function\"&gt;load_fff function&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Calculating-Fam-French-Factors\"&gt;Calculating Fam-French Factors&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n    &lt;/ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Portfolio-class\"&gt;Portfolio class&lt;/a&gt;&lt;/li&gt;\n    &lt;ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Getting-Started-with-Portfolio\"&gt;Getting Started with Portfolio&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Customizing-the-Portfolio\"&gt;Customizing the Portfolio&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Loading-The-Benchmark\"&gt;Loading The Benchmark&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Changing-The-Benchmark\"&gt;Changing The Benchmark&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Adding-A-Stock\"&gt;Adding A Stock&lt;/a&gt;&lt;/li&gt;\n                    &lt;ol&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#Quick-Way\"&gt;Quick Way&lt;/a&gt;&lt;/li&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#Using-Stock-Object\"&gt;Using Stock Object&lt;/a&gt;&lt;/li&gt;\n                    &lt;/ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Adding-Multiple-Stocks\"&gt;Adding Multiple Stocks&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Removing-Stocks\"&gt;Removing Stocks&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Change-the-Frequency-of-the-Data\"&gt;Change the Frequency of the Data&lt;/a&gt;\n                    &lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Loading-the-Data\"&gt;Loading the Data&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#load_one_stock\"&gt;load_one_stock&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#load_all\"&gt;load_all&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Special-Methods\"&gt;Special Methods&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Representation\"&gt;Representation&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#String\"&gt;String&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Using-the-in-Keyword\"&gt;Using the in Keyword&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Using-Subscriptation\"&gt;Using Subscriptation&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Iteration\"&gt;Iteration&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Merging\"&gt;Merging&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Merging-With-the-Benchmark\"&gt;Merging With the Benchmark&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Merge-Everything\"&gt;Merge Everything&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Returning-the-Return\"&gt;Returning the Return&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Return-of-A-Single-Stock\"&gt;Return of A Single Stock&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Return-of-All-Stocks\"&gt;Return of All Stocks&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#What-About-the-Whole-Portfolio?\"&gt;What About the Whole Portfolio?&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Calculating-the-Stock-Parameters\"&gt;Calculating the Stock Parameters&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#alpha-and-beta\"&gt;alpha and beta&lt;/a&gt;&lt;/li&gt;\n                    &lt;ol&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#get_stock_params\"&gt;get_stock_params&lt;/a&gt;&lt;/li&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#get_all_stock_params\"&gt;get_all_stock_params&lt;/a&gt;&lt;/li&gt;\n                    &lt;/ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Summary!\"&gt;Summary!&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#FFF-Parameters\"&gt;FFF Parameters&lt;/a&gt;&lt;/li&gt;\n                    &lt;ol&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#calculate_fff_params_one\"&gt;calculate_fff_params_one&lt;/a&gt;&lt;/li&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#calculate_fff_params\"&gt;calculate_fff_params&lt;/a&gt;&lt;/li&gt;\n                            &lt;li&gt;&lt;a class=\"\" href=\"#The-Mean-Values\"&gt;The Mean Values&lt;/a&gt;&lt;/li&gt;\n                    &lt;/ol&gt;\n            &lt;/ol&gt;\n    &lt;/ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Model-Class\"&gt;Model Class&lt;/a&gt;&lt;/li&gt;\n    &lt;ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Getting-Started-With-Model\"&gt;Getting Started With Model&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Creating-a-Portfolio\"&gt;Creating a Portfolio&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Adding-a-Portfolio\"&gt;Adding a Portfolio&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Updating-a-Portfolio\"&gt;Updating a Portfolio&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#The-load_portfolio-Function\"&gt;The load_portfolio Function&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;li&gt;&lt;a class=\"\" href=\"#Optimization\"&gt;Optimization&lt;/a&gt;&lt;/li&gt;\n            &lt;ol&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#expected_return_of_stock\"&gt;expected_return_of_stock&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#portfolio_info\"&gt;portfolio_info&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Plotting-the-Portfolio-Frontier\"&gt;Plotting the Portfolio\n                                    Frontier&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a class=\"\" href=\"#Optimization-(at-last!)\"&gt;Optimization (at last!)&lt;/a&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n</code></pre> <pre><code>from pystock.portfolio import Portfolio, Stock\nfrom pystock.models import Model\nfrom pystock.FFF import FamaFrenchFactors\n</code></pre> <pre><code>import warnings\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\n\nwarnings.filterwarnings(\"ignore\")\n</code></pre> <p>This class is used to download and load Fama French factors. Start by creating an instance of the class.</p> <pre><code>fff = FamaFrenchFactors()\n</code></pre> <p>To download the factors, use the <code>download</code> function. It takes the following parameters:</p> <pre><code>frequency : str, optional\n    The frequency of the data. The default is \"D\".\nfactors : int, optional\n    The number of factors. The default is 3. Possible values are 3 and 5\ndirectory : str, optional\n    The directory to save the file. The default is \".\".\noverwrite : bool, optional\n    Whether to overwrite the file if it already exists. The default is False.\n</code></pre> <p><code>factors</code> has two possible values, 3 and 5.</p> <pre><code>file_path = fff.download(frequency=\"M\", factors=5, directory=\".\", overwrite=True)\n</code></pre> <pre>\n<code>Downloading Fama French Factors. This may take about 10 seconds.\nDownload complete. File saved as fff_monthly_5_factors.csv\nUse load() to load the file as a pandas dataframe.\n</code>\n</pre> <p>Once downloaded, the fff can be loaded using the <code>load</code> function. The function takes the following params:</p> <pre><code>directory : str, optional\n    The directory to save the file. The default is \".\".\nfrequency : str, optional\n    The frequency of the data. The default is \"M\".\nfactors : int, optional\n    The number of factors. The default is 3. Possible values are 3 and 5\npreprocess : bool, optional\n    Whether to preprocess the data. The default is True.\n</code></pre> <pre><code>fff5 = fff.load(frequency=\"M\", factors=5, directory=\".\", preprocess=True)\n</code></pre> <pre>\n<code>/media/hari31416/Hari_SSD/Users/harik/Desktop/Finance/pystock_project/pystock/FFF.py:247: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[col] = pd.to_numeric(df[col]) * 0.01\n</code>\n</pre> <pre><code>fff5\n</code></pre> Mkt-RF SMB HML RMW CMA RF 1963-07-31 -0.0039 -0.0041 -0.0097 0.0068 -0.0118 0.0027 1963-08-31 0.0507 -0.0080 0.0180 0.0036 -0.0035 0.0025 1963-09-30 -0.0157 -0.0052 0.0013 -0.0071 0.0029 0.0027 1963-10-31 0.0253 -0.0139 -0.0010 0.0280 -0.0201 0.0029 1963-11-30 -0.0085 -0.0088 0.0175 -0.0051 0.0224 0.0027 ... ... ... ... ... ... ... 2022-07-31 0.0957 0.0187 -0.0410 0.0068 -0.0694 0.0008 2022-08-31 -0.0377 0.0151 0.0031 -0.0480 0.0130 0.0019 2022-09-30 -0.0935 -0.0100 0.0003 -0.0150 -0.0085 0.0019 2022-10-31 0.0783 0.0187 0.0805 0.0307 0.0656 0.0023 2022-11-30 0.0460 -0.0267 0.0139 0.0602 0.0312 0.0029 <p>713 rows \u00d7 6 columns</p> <p>These factors will be used for <code>fff3</code> and <code>fff4</code> models later. For now, we'll have a look at some more things which you can do with the <code>FamaFrenchFactors</code> class.</p> <p>You can change the frequency of the factors using the <code>change_frequency</code> function. It takes just one parameter:</p> <pre><code>frequency : str, optional\n    The frequency of the data. The default is \"D\".\n</code></pre> <pre><code>fff5_quarterly = fff.change_frequency(frequency=\"Q\")\nfff5_quarterly\n</code></pre> Mkt-RF SMB HML RMW CMA RF 1963-09-30 -0.0157 -0.0052 0.0013 -0.0071 0.0029 0.0027 1963-12-31 0.0183 -0.0210 -0.0002 0.0003 -0.0007 0.0029 1964-03-31 0.0141 0.0123 0.0340 -0.0221 0.0322 0.0031 1964-06-30 0.0127 0.0029 0.0062 -0.0028 -0.0017 0.0030 1964-09-30 0.0269 -0.0034 0.0170 -0.0056 0.0062 0.0028 ... ... ... ... ... ... ... 2021-09-30 -0.0437 0.0114 0.0508 -0.0190 0.0214 0.0000 2021-12-31 0.0310 -0.0077 0.0328 0.0492 0.0443 0.0001 2022-03-31 0.0305 -0.0215 -0.0180 -0.0156 0.0317 0.0001 2022-06-30 -0.0843 0.0130 -0.0597 0.0185 -0.0470 0.0006 2022-09-30 -0.0935 -0.0100 0.0003 -0.0150 -0.0085 0.0019 <p>237 rows \u00d7 6 columns</p> <p>The function changes the frequency of data inplace, meaning that if you want to upsample the data (i.e. change frequency from month to day), you will get wrong results. The function uses <code>ffill</code> to fill the missing values so changing frequency from month to day will result in the same value for all the days in the month.</p> <p>In Fama-French model, we'll need the mean of the columns for calculating the expected return of stock. The class provides a function to do this:</p> <pre><code>means = fff.calculate_mean_values()\n</code></pre> <pre><code>means\n</code></pre> <pre>\n<code>const     1.000000\nMkt-RF    0.002920\nSMB       0.004762\nHML       0.001381\nRMW       0.003614\nCMA       0.002217\nRF        0.003654\ndtype: float64</code>\n</pre> <p>Note that there is an extra value named <code>const</code>. This is here because the Fama-French model has a constant term. Using <code>mean</code> in this form makes it easy to calculate the expected return of a stock.</p> <p>Start by loading the <code>Stock</code> class from the <code>pystock</code> module:</p> <pre><code>apple = Stock(\"AAPL\", \"Data/AAPL.csv\")\napple\n</code></pre> <pre>\n<code>Stock(name=AAPL)</code>\n</pre> <p>Let's see what the <code>Stock</code> object has:</p> <pre><code>apple.__dict__\n</code></pre> <pre>\n<code>{'name': 'AAPL',\n 'directory': 'Data/AAPL.csv',\n 'loaded': False,\n 'return_': {},\n 'fff': &lt;pystock.FFF.FamaFrenchFactors at 0x7f173634e850&gt;}</code>\n</pre> <p><code>return_</code> is a dictionary which will contain the return of the stock, it can be a float (if you want mean return) or a <code>pd.Series</code> of floats (if you want to get the return of each day).</p> <p><code>fff</code> is a reference to the <code>FamaFrenchFactors</code> object. We will see later what it is. <code>loaded</code> is a boolean equal to <code>True</code> if the stock data has been loaded, <code>False</code> otherwise. Let's load the data. The <code>load</code> function takes a number of parameters:</p> <pre><code>start_date : str, optional\n    Start date of the data, by default None\nend_date : str, optional\n    End date of the data, by default None\ncolumns : list, optional\n    Columns to keep, by default None which means keep all columns\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\n</code></pre> <p>The function returns a <code>pd.DataFrame</code> with the data. Let's see what the data looks like:</p> <pre><code>start_date = \"2010-01-01\"\nend_date = \"2022-12-20\"\nfrequency = \"D\"\napple.load_data(start_date=start_date, end_date=end_date, frequency=frequency)\napple.__dict__.keys()\n</code></pre> <pre>\n<code>dict_keys(['name', 'directory', 'loaded', 'return_', 'fff', 'data', 'columns', 'start_date', 'end_date', 'frequency'])</code>\n</pre> <p>The <code>Stock</code> object now has some more attributes. <code>data</code> is a <code>pd.DataFrame</code> with the data. <code>start_date</code> and <code>end_date</code> are the start and end dates of the data. <code>columns</code> is a list of the columns of the data. <code>frequency</code> is the frequency of the data.</p> <pre><code>apple.data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2010-01-04 7.622500 7.660714 7.585000 7.643214 6.515212 493729600 2010-01-05 7.664286 7.699643 7.616071 7.656429 6.526478 601904800 2010-01-06 7.656429 7.686786 7.526786 7.534643 6.422666 552160000 2010-01-07 7.562500 7.571429 7.466071 7.520714 6.410790 477131200 2010-01-08 7.510714 7.571429 7.466429 7.570714 6.453411 447610800 <pre><code>apple.loaded\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>As you can see, <code>loaded</code> is now equal to <code>True</code>.</p> <p>Next, we'll calculate various returns using the object. For this, we have the <code>freq_return</code> function having the following parameters:</p> <pre><code>frequency : str, optional\n    Frequency of the data, by default \"M\"\nmean : bool, optional\n    Whether to return the mean of the return, by default True\ncolumn : str, optional\n    Column to calculate the return, by default \"Close\"\n</code></pre> <pre><code>daily_return_series = apple.freq_return(frequency=\"D\", mean=False)\ndaily_return_avg = apple.freq_return(frequency=\"D\", mean=True)\ndisplay(daily_return_series.head())\ndisplay(daily_return_avg)\n</code></pre> <pre>\n<code>Date\n2010-01-05    0.001729\n2010-01-06   -0.015906\n2010-01-07   -0.001849\n2010-01-08    0.006648\n2010-01-09    0.000000\nFreq: D, Name: Close, dtype: float64</code>\n</pre> <pre>\n<code>0.0007156125449657148</code>\n</pre> <pre><code>monthly_return_series = apple.freq_return(frequency=\"M\", mean=False)\nmonthly_return_avg = apple.freq_return(frequency=\"M\", mean=True)\ndisplay(monthly_return_series.head())\ndisplay(monthly_return_avg)\n</code></pre> <pre>\n<code>Date\n2010-02-28    0.065396\n2010-03-31    0.148470\n2010-04-30    0.111021\n2010-05-31   -0.016125\n2010-06-30   -0.020827\nFreq: M, Name: Close, dtype: float64</code>\n</pre> <pre>\n<code>0.02320634467521188</code>\n</pre> <p>These returns are saved in the <code>return_</code> attribute of the object. Note that the key of the dictionary <code>return_</code> is the frequency of the return. So, it will save the mean of the returns as that was what calculated last.</p> <pre><code>apple.return_\n</code></pre> <pre>\n<code>{'D': 0.0007156125449657148, 'M': 0.02320634467521188}</code>\n</pre> <pre><code>apple.frequency\n</code></pre> <pre>\n<code>'D'</code>\n</pre> <pre><code>apple.data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2010-01-04 7.622500 7.660714 7.585000 7.643214 6.515212 493729600 2010-01-05 7.664286 7.699643 7.616071 7.656429 6.526478 601904800 2010-01-06 7.656429 7.686786 7.526786 7.534643 6.422666 552160000 2010-01-07 7.562500 7.571429 7.466071 7.520714 6.410790 477131200 2010-01-08 7.510714 7.571429 7.466429 7.570714 6.453411 447610800 <p>The data was loaded with a frequency of day. Suppose you want to change it to some other frequency. This can be done by the <code>change_frequency</code> function. It takes just one parameter:</p> <pre><code>frequency : str\n        Frequency of the data\n</code></pre> <pre><code>apple.change_frequency(\"M\")\n</code></pre> <pre><code>apple.frequency\n</code></pre> <pre>\n<code>'M'</code>\n</pre> <pre><code>apple.data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2010-01-31 7.181429 7.221429 6.794643 6.859286 5.846978 1245952400 2010-02-28 7.227857 7.327500 7.214286 7.307857 6.229348 507460800 2010-03-31 8.410357 8.450357 8.373571 8.392857 7.154222 430659600 2010-04-30 9.618214 9.663214 9.321429 9.324643 7.948493 542463600 2010-05-31 9.263929 9.264286 9.048214 9.174286 7.820327 815614800 <p>The function changes the frequency of data inplace, meaning that if you want to upsample the data (i.e. change frequency from month to day), you will get wrong results. The function uses <code>ffill</code> to fill the missing values so changing frequency from month to day will result in the same value for all the days in the month.</p> <p>The <code>fff</code> attribute of a <code>Stock</code> object is reference to a <code>FamaFrenchFactors</code> object. This object is used to get the Fama-French factors. See the corresponding section for more details. Here, we'll give a brief overview of how to use it.</p> <p>This is a wrapper function for <code>FamaFrenchFactors.download</code>. It takes the same parameters as <code>FamaFrenchFactors.download</code> (Along with some other params like <code>load</code>) and returns the same thing. It is used to download the data from the Fama-French website. Again, see the corresponding section for more details.</p> <p>The <code>load</code> parameter is used to load the data into the <code>FamaFrenchFactors</code> object. If <code>load</code> is <code>True</code>, then the data is loaded into the <code>fff</code> attribute of the <code>Stock</code> object. If <code>load</code> is <code>False</code>, then the data is not loaded only downloaded. This is useful if you want to download the data and then load it later.</p> <pre><code>fff_data = apple.download_fff(frequency=\"D\", factors=5, directory=\"Data\", load=True)\n</code></pre> <pre>\n<code>Downloading Fama French Factors. This may take about 10 seconds.\nDownload complete. File saved as Data/fff_daily_5_factors.csv\nUse load() to load the file as a pandas dataframe.\n</code>\n</pre> <p>Since we have used <code>load=True</code>, the data is loaded into the <code>fff</code> attribute of the <code>Stock</code> object.</p> <pre><code>apple.fff.data\n</code></pre> Mkt-RF SMB HML RMW CMA RF 1963-07-01 -0.0067 0.0002 -0.0035 0.0003 0.0013 0.00012 1963-07-02 0.0079 -0.0028 0.0028 -0.0008 -0.0021 0.00012 1963-07-03 0.0063 -0.0018 -0.0010 0.0013 -0.0025 0.00012 1963-07-05 0.0040 0.0009 -0.0028 0.0007 -0.0030 0.00012 1963-07-08 -0.0063 0.0007 -0.0020 -0.0027 0.0006 0.00012 ... ... ... ... ... ... ... 2022-11-23 0.0063 -0.0025 -0.0094 -0.0073 -0.0057 0.00014 2022-11-25 -0.0002 0.0027 0.0044 -0.0016 0.0014 0.00014 2022-11-28 -0.0155 -0.0047 -0.0020 0.0032 0.0031 0.00014 2022-11-29 -0.0018 0.0035 0.0103 0.0019 0.0047 0.00014 2022-11-30 0.0312 -0.0014 -0.0207 -0.0078 -0.0142 0.00014 <p>14958 rows \u00d7 6 columns</p> <p>This is a wrapper function for <code>FamaFrenchFactors.load</code>. It takes the same parameters as <code>FamaFrenchFactors.load</code> and returns the same thing. It is used to load the data from local if it exists.</p> <pre><code>apple.load_fff(frequency=\"D\", factors=5, directory=\"Data\")\n</code></pre> Mkt-RF SMB HML RMW CMA RF 1963-07-01 -0.0067 0.0002 -0.0035 0.0003 0.0013 0.00012 1963-07-02 0.0079 -0.0028 0.0028 -0.0008 -0.0021 0.00012 1963-07-03 0.0063 -0.0018 -0.0010 0.0013 -0.0025 0.00012 1963-07-05 0.0040 0.0009 -0.0028 0.0007 -0.0030 0.00012 1963-07-08 -0.0063 0.0007 -0.0020 -0.0027 0.0006 0.00012 ... ... ... ... ... ... ... 2022-11-23 0.0063 -0.0025 -0.0094 -0.0073 -0.0057 0.00014 2022-11-25 -0.0002 0.0027 0.0044 -0.0016 0.0014 0.00014 2022-11-28 -0.0155 -0.0047 -0.0020 0.0032 0.0031 0.00014 2022-11-29 -0.0018 0.0035 0.0103 0.0019 0.0047 0.00014 2022-11-30 0.0312 -0.0014 -0.0207 -0.0078 -0.0142 0.00014 <p>14958 rows \u00d7 6 columns</p> <p>The factors can be calculated using the <code>calculate_fff</code> function. It takes the following parameters:</p> <pre><code>column : str, optional\n    Column to calculate the fama french factors on, by default \"Close\"\nverbose : int, optional\n    Verbosity, by default 1\n</code></pre> <p>The function will throw error if either the <code>Stock</code> or the <code>FamaFrenchFactors</code> object is not loaded. </p> <pre><code>params = apple.calculate_fff(column = \"Close\")\n</code></pre> <pre>\n<code>Fama French Factors Calculated\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.534\nModel:                            OLS   Adj. R-squared:                  0.534\nMethod:                 Least Squares   F-statistic:                     744.8\nDate:                Sun, 01 Jan 2023   Prob (F-statistic):               0.00\nTime:                        19:20:12   Log-Likelihood:                 9671.0\nNo. Observations:                3250   AIC:                        -1.933e+04\nDf Residuals:                    3244   BIC:                        -1.929e+04\nDf Model:                           5                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          0.0004      0.000      1.703      0.089   -5.59e-05       0.001\nMkt-RF         1.1768      0.021     56.919      0.000       1.136       1.217\nSMB           -0.1769      0.039     -4.517      0.000      -0.254      -0.100\nHML           -0.4995      0.037    -13.372      0.000      -0.573      -0.426\nRMW            0.5945      0.052     11.371      0.000       0.492       0.697\nCMA           -0.0151      0.072     -0.209      0.834      -0.157       0.127\n==============================================================================\nOmnibus:                      484.352   Durbin-Watson:                   1.922\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             7608.523\nSkew:                          -0.012   Prob(JB):                         0.00\nKurtosis:                      10.496   Cond. No.                         355.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n</code>\n</pre> <pre><code>params\n</code></pre> <pre>\n<code>const     0.000370\nMkt-RF    1.176796\nSMB      -0.176945\nHML      -0.499524\nRMW       0.594542\nCMA      -0.015124\ndtype: float64</code>\n</pre> <p>The class represents a portfolio which has a list of stocks and a benchmark. You can also provide a weight for each stock. </p> <p>To start, you have to at least provide the directory of the benchmark data as well as its name. You must also provide at least one stock. You can also provide a list of stock names and their directory. The weight can also be provided. If not provided (which defualts to <code>\"equal\"</code>), then the weight will be equal to 1/n where n is the number of stocks. </p> <pre><code>def __init__(self, benchmark_dir, benchmark_name, stocks_dir=None, stocks_name=None, weights=None):\n</code></pre> <pre><code>benchmark_name = \"S&amp;P\"\nbenchmark_dir = \"Data/GSPC.csv\"\n\nportfolio = Portfolio(benchmark_dir=benchmark_dir, benchmark_name=benchmark_name)\nportfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,[])</code>\n</pre> <pre><code>len(portfolio)\n</code></pre> <pre>\n<code>1</code>\n</pre> <p>The representation of portfolio shows the name of benchmark and the stocks in the portfolio. The length of the portfolio is the number of stocks in the portfolio (Including the benchmark).</p> <pre><code>portfolio.benchmark.loaded\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Right now, portfolio has just one unloaded benchmark and no stocks. Let's load the benchmark and add a stock.</p> <p>This can be done by using the <code>load_benchmark</code> function. It takes the following parameters:</p> <pre><code>start_date : str, optional\n    Start date of the data, by default None\nend_date : str, optional\n    End date of the data, by default None\ncolumns : list, optional\n    Columns to keep, by default None which means keep all columns\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\n</code></pre> <pre><code>start_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\nfrequency = \"D\"\nportfolio.load_benchmark(start_date=start_date, end_date=end_date, frequency=frequency)\n</code></pre> <pre><code>portfolio.benchmark.loaded\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>portfolio.benchmark.data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2012-01-03 1258.859985 1284.619995 1258.859985 1277.060059 1277.060059 3943710000 2012-01-04 1277.030029 1278.729980 1268.099976 1277.300049 1277.300049 3592580000 2012-01-05 1277.300049 1283.050049 1265.260010 1281.060059 1281.060059 4315950000 2012-01-06 1280.930054 1281.839966 1273.339966 1277.810059 1277.810059 3656830000 2012-01-07 1280.930054 1281.839966 1273.339966 1277.810059 1277.810059 3656830000 <p>Alternatively, you can use the <code>Stock.load_data</code> function to load the benchmark data since benchmark is just a <code>Stock</code> object.</p> <p>You can also change the benchmark by using the <code>change_benchmark</code> function. It takes the following parameters:</p> <pre><code>benchmark_dir : str\n    Directory of the benchmark\nbenchmark_name : str\n    Name of the benchmark\nload : bool, optional\n    Load the data, by default True\nuse_prev : bool, optional\n    Use the values of start_date, end_date, columns, frequency, rename_cols from the previous benchmark, by default True\nstart_date : str, optional\n    Start date, by default None\nend_date : str, optional\n    End date, by default None\ncolumns : list, optional\n    Columns to keep, by default None\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\n</code></pre> <pre><code>dji_name = \"Dow_Jones\"\ndji_dir = \"Data/DJI.csv\"\n\nportfolio.change_benchmark(benchmark_dir=dji_dir, benchmark_name=dji_name, load=True, use_prev=False)\n</code></pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,[])</code>\n</pre> <pre><code>portfolio.benchmark.loaded\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>The class provides a function <code>add_stocks</code> to add a stock. It takes the following parameters:</p> <pre><code>stock_dirs : list\n    List of stock directories\nstock_names : list, optional\n    List of stock names, by default None\nload_data : bool, optional\n    Whether to load the data, by default True\nstart_date : str, optional\n    Start date, by default None\nend_date : str, optional\n    End date, by default None\ncolumns : list, optional\n    Columns to keep, by default None\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\noverwrite : bool, optional\n    Whether to overwrite existing stocks, by default False\n</code></pre> <p>The quickest way to add a single or a number of stock is by passing the <code>stock_dirs</code> and <code>stock_names</code> parameter. Let's see this in action:</p> <pre><code>stock_names = [\"AAPL\"]\nstock_dirs = [\"Data/AAPL.csv\"]\n\nportfolio.add_stocks(stock_dirs = stock_dirs, stock_names = stock_names, load_data=False, frequency=frequency, start_date=start_date, end_date=end_date)\n</code></pre> <p>If we want to add a single stock, give the name and directory of stock inside a list. This is what we have done here.</p> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL'])</code>\n</pre> <p>Another way is to first create the <code>Stock</code> object and then add it using the same method.</p> <pre><code>google = Stock(\"GOOG\", \"Data/GOOG.csv\")\nportfolio.add_stocks(stocks=[google], load_data=False, frequency=frequency, start_date=start_date, end_date=end_date)\n</code></pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'GOOG'])</code>\n</pre> <p>Now, our portfolio has one benchmark and two stock.</p> <pre><code>portfolio.weights\n</code></pre> <pre>\n<code>array([0.5, 0.5])</code>\n</pre> <p>You can see that the <code>weights</code> has been adjusted.</p> <p>For this, just pass a list of stock directories and names. The <code>weights</code> will be adjusted accordingly. Or you can pass a list of <code>Stock</code> objects.</p> <pre><code>stock_names = [\"TSLA\", \"MSFT\"]\nstock_dirs = [\"Data/TSLA.csv\", \"Data/MSFT.csv\"]\n\nportfolio.add_stocks(stock_dirs = stock_dirs, stock_names = stock_names, load_data=False, frequency=frequency, start_date=start_date, end_date=end_date)\n</code></pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'GOOG', 'TSLA', 'MSFT'])</code>\n</pre> <p>Another thing to note is that two <code>Stocks</code> are considered equal if they have the same name. You can not have two stocks with the same name in the portfolio. If you try to add a stock with the same name as an existing stock, then the existing stock will be overwritten or the command will be ignored depending on the value of <code>overwrite</code> parameter.</p> <pre><code>google = Stock(\"GOOG\", \"Data/GOOG.csv\")\n\nportfolio.add_stocks(stocks=[google], load_data=False, frequency=frequency, start_date=start_date, end_date=end_date, overwrite=False)\n</code></pre> <pre>\n<code>Stock GOOG already exists\nYou have not specified overwrite=True. Skipping...\n</code>\n</pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'GOOG', 'TSLA', 'MSFT'])</code>\n</pre> <pre><code>google = Stock(\"GOOG\", \"Data/GOOG.csv\")\n\nportfolio.add_stocks(stocks=[google], load_data=False, frequency=frequency, start_date=start_date, end_date=end_date, overwrite=True)\n</code></pre> <pre>\n<code>Stock GOOG already exists\nOverwriting...\n</code>\n</pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'TSLA', 'MSFT', 'GOOG'])</code>\n</pre> <p>To remove a <code>Stock</code> from <code>Portfolio</code>, use the <code>remove_stock</code> function. It takes the following parameters:</p> <pre><code>names : list\n    A list names of the stock to remove\n</code></pre> <pre><code>portfolio.remove_stocks([\"GOOG\"])\n</code></pre> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'TSLA', 'MSFT'])</code>\n</pre> <p>To change the frequency of the portfolio, use the <code>change_benchmark_frequency</code> function. It takes the following parameters:</p> <pre><code>frequency : str\n    Frequency of the data\nchange_stocks : bool, optional\n    Whether to change the frequency of the stock data, by default True\n</code></pre> <pre><code>portfolio.benchmark.frequency\n</code></pre> <pre>\n<code>'D'</code>\n</pre> <p>However, you can change the frequency only if you have loaded the data. If you have not loaded the data, then the function will throw an error.</p> <pre><code>portfolio.change_benchmark_frequency(\"M\")\n</code></pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[21], line 1\n----&gt; 1 portfolio.change_benchmark_frequency(\"M\")\n\nFile /media/hari31416/Hari_SSD/Users/harik/Desktop/Finance/pystock_project/pystock/portfolio.py:769, in Portfolio.change_benchmark_frequency(self, frequency, change_stocks)\n    767 if change_stocks:\n    768     for stock in self.stocks:\n--&gt; 769         stock.change_frequency(frequency)\n\nFile /media/hari31416/Hari_SSD/Users/harik/Desktop/Finance/pystock_project/pystock/portfolio.py:178, in Stock.change_frequency(self, frequency)\n    169 \"\"\"\n    170 Changes the frequency of the data.\n    171 \n   (...)\n    175     Frequency of the data\n    176 \"\"\"\n    177 self.frequency = frequency\n--&gt; 178 self.data = self.data.asfreq(frequency, \"ffill\").dropna()\n\nAttributeError: 'Stock' object has no attribute 'data'</pre> <p>Loading data will be covered in the next section. For now, as benchmark is already loaded, we will change the frequency of the benchmark.</p> <pre><code>portfolio.change_benchmark_frequency(\"M\", change_stocks=False)\n</code></pre> <pre><code>portfolio.benchmark.frequency\n</code></pre> <pre>\n<code>'M'</code>\n</pre> <p>Although you can get away with changing the frequency of the benchmark only, it is recommended to change the frequency of the stock data as well.</p> <p>Many times, when we try to run some function, you will get an exception telling that \"'Stock' object has no attribute 'data'\". This happens because the <code>Stock</code> is not loaded yet as you can check by using the <code>loaded</code> attribute of the <code>Stock</code> object.</p> <pre><code>for stock, name in portfolio:\n    print(name, stock.loaded)\n</code></pre> <pre>\n<code>Dow_Jones True\nAAPL False\nTSLA False\nMSFT False\n</code>\n</pre> <p>We see that no stock data is loaded. Let's load the data.</p> <p>ou can use the <code>Portfolio</code> as an iterator. Some more details about these special methods will be covered later.</p> <p>There are mainly three functions to load data. We already discussed the <code>load_benchmark</code> function. Other two are discussed below.</p> <p>As the name suggests, this loads data of one stock specified by the <code>name</code> parameter. The function is built on <code>Stock.load_data</code> function. It takes the following parameters:</p> <pre><code>name : str\n    Name of the stock\nstart_date : str, optional\n    Start date, by default None\nend_date : str, optional\n    End date, by default None\ncolumns : list, optional\n    Columns to keep, by default None\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\noverwrite : bool, optional\n    Whether to overwrite existing data, by default False\n</code></pre> <pre><code>apple_data = portfolio.load_one_stock(\"AAPL\", frequency=frequency, start_date=start_date, end_date=end_date)\n</code></pre> <pre><code>for stock, name in portfolio:\n    print(name, stock.loaded)\n</code></pre> <pre>\n<code>Dow_Jones True\nAAPL True\nTSLA False\nMSFT False\n</code>\n</pre> <p>The data of <code>APPL</code> is now loaded. We get some more attributes by loading the data. See the <code>Stock</code> class for more details.</p> <p>As the name suggests, this loads data of all the stocks in the portfolio. It takes the following parameters:</p> <pre><code>start_date : str, optional\n    Start date, by default None\nend_date : str, optional\n    End date, by default None\ncolumns : list, optional\n    Columns to keep, by default None\nfrequency : str, optional\n    Frequency of the data, by default \"D\"\nrename_cols : list, optional\n    Columns to rename, by default None\noverwrite : bool, optional\n    Whether to overwrite existing data, by default False\n</code></pre> <p>Previously, we just loaded the apple data, now we'll load all the data.</p> <pre><code>portfolio.load_all(frequency=frequency, start_date=start_date, end_date=end_date)\n</code></pre> <pre><code>for stock, name in portfolio:\n    print(name, stock.loaded)\n</code></pre> <pre>\n<code>Dow_Jones True\nAAPL True\nTSLA True\nMSFT True\n</code>\n</pre> <p>Let's see the data of these stocks.</p> <pre><code>portfolio[\"AAPL\"].data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2012-01-03 14.621429 14.732143 14.607143 14.686786 12.519279 302220800 2012-01-04 14.642857 14.810000 14.617143 14.765714 12.586560 260022000 2012-01-05 14.819643 14.948214 14.738214 14.929643 12.726295 271269600 2012-01-06 14.991786 15.098214 14.972143 15.085714 12.859330 318292800 2012-01-07 14.991786 15.098214 14.972143 15.085714 12.859330 318292800 <pre><code>portfolio[\"TSLA\"].data.head()\n</code></pre> Open High Low Close Adj Close Volume Date 2012-01-03 1.929333 1.966667 1.843333 1.872000 1.872000 13921500 2012-01-04 1.880667 1.911333 1.833333 1.847333 1.847333 9451500 2012-01-05 1.850667 1.862000 1.790000 1.808000 1.808000 15082500 2012-01-06 1.813333 1.852667 1.760667 1.794000 1.794000 14794500 2012-01-07 1.813333 1.852667 1.760667 1.794000 1.794000 14794500 <p>The <code>Portfolio</code> object has implemented the <code>__repr__</code> method which lets it represent the object in understandable manner.</p> <pre><code>portfolio\n</code></pre> <pre>\n<code>Portfolio(Dow_Jones,['AAPL', 'TSLA', 'MSFT'])</code>\n</pre> <p>You can see that the represenation of <code>Portfolio</code> has the name of the benchmark and the list of the stocks. This lets us have a \"peek\" at the portfolio!</p> <p>You can \"print\" the <code>Portfolio</code> and it will give a peek of the portfolio:</p> <pre><code>print(portfolio)\n</code></pre> <pre>\n<code>Portfolio with benchmark Dow_Jones and stocks ['AAPL', 'TSLA', 'MSFT']\n</code>\n</pre> <p>The <code>Portfolio</code> class implements the <code>__contains__</code> special method. This makes it easy to use the <code>in</code> keyword to check if a <code>Stock</code> is in the <code>Portfolio</code>. Use the stock name or the <code>Stock</code> object.</p> <pre><code>\"AAPL\" in portfolio, \"TCS\" in portfolio\n</code></pre> <pre>\n<code>(True, False)</code>\n</pre> <pre><code>portfolio.stocks[0] in portfolio\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>portfolio.benchmark in portfolio\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>You can use the name of the stock to get the <code>Stock</code> from the <code>Portfolio</code> object:</p> <pre><code>portfolio[\"AAPL\"]\n</code></pre> <pre>\n<code>Stock(name=AAPL)</code>\n</pre> <pre><code>portfolio[\"Dow_Jones\"]\n</code></pre> <pre>\n<code>Stock(name=Dow_Jones)</code>\n</pre> <p>You can iterate over the <code>Portfolio</code>.</p> <pre><code>for stock, name in portfolio:\n    print(stock.name, name)\n</code></pre> <pre>\n<code>Dow_Jones Dow_Jones\nAAPL AAPL\nTSLA TSLA\nMSFT MSFT\n</code>\n</pre> <p>The <code>Portfolio</code> iterator yields the <code>Stock</code> and name of the stock. Note that the first entry is that of the benchmark.</p> <p>You can use the <code>list</code> constructor to create a list of stock and names:</p> <pre><code>list(portfolio)\n</code></pre> <pre>\n<code>[(Stock(name=Dow_Jones), 'Dow_Jones'),\n (Stock(name=AAPL), 'AAPL'),\n (Stock(name=TSLA), 'TSLA'),\n (Stock(name=MSFT), 'MSFT')]</code>\n</pre> <p>Merging is necessary for calculating various stock parameters used in the portfolio optimization models. For this reason, we have a couple of methods.</p> <p>This is necessary for calculating \\(\\alpha\\) and \\(\\beta\\) parameters. This is realized by using the function <code>merge_stock_with_benchmark</code></p> <pre><code>merged = portfolio.merge_stock_with_benchmark(\"AAPL\")\n</code></pre> <pre><code>merged.head()\n</code></pre> Dow_Jones_Open Dow_Jones_High Dow_Jones_Low Dow_Jones_Close Dow_Jones_Adj Close Dow_Jones_Volume AAPL_Open AAPL_High AAPL_Low AAPL_Close AAPL_Adj Close AAPL_Volume Date 2012-01-31 12632.900391 12632.900391 12632.900391 12632.900391 12632.900391 0 16.271070 16.365713 16.181070 16.302856 13.896848 391683600 2012-02-29 12952.099609 12952.099609 12952.099609 12952.099609 12952.099609 0 19.341429 19.557501 19.132143 19.372856 16.513771 952011200 2012-03-31 13212.000000 13212.000000 13212.000000 13212.000000 13212.000000 0 21.741785 21.805714 21.355000 21.412500 18.252399 731038000 2012-04-30 13213.599609 13213.599609 13213.599609 13213.599609 13213.599609 0 21.350000 21.371429 20.821428 20.856428 17.778395 506144800 2012-05-31 12393.500000 12393.500000 12393.500000 12393.500000 12393.500000 0 20.740713 20.767857 20.409286 20.633215 17.588120 491674400 <p>When merging, it is recommended that you use just those columns which will be required later. Usually the column \"Close\" is the only one which is useful so it is good idea to use just this column while calling <code>load_all</code> method.</p> <p>Use the <code>merge_all</code> function for this. This merges all the stocks with benchmark. Note that all stocks must be loaded.</p> <pre><code>merged_all = portfolio.merge_all()\n</code></pre> <pre><code>merged_all.columns\n</code></pre> <pre>\n<code>Index(['Dow_Jones_Open', 'Dow_Jones_High', 'Dow_Jones_Low', 'Dow_Jones_Close',\n       'Dow_Jones_Adj Close', 'Dow_Jones_Volume', 'AAPL_Open', 'AAPL_High',\n       'AAPL_Low', 'AAPL_Close', 'AAPL_Adj Close', 'AAPL_Volume', 'TSLA_Open',\n       'TSLA_High', 'TSLA_Low', 'TSLA_Close', 'TSLA_Adj Close', 'TSLA_Volume',\n       'MSFT_Open', 'MSFT_High', 'MSFT_Low', 'MSFT_Close', 'MSFT_Adj Close',\n       'MSFT_Volume'],\n      dtype='object')</code>\n</pre> <p>Since we used all the columns while loading, after the <code>merge_all</code>, you get huge number of columns.</p> <p>Return of a stock is its one of the most important feature. The <code>Portfolio</code> class provides a number of way to get this.</p> <p>Of course, you can get the return by calling the methods inbuilt in the <code>Stock</code> object. Here, we'll discuss methods of the <code>Portfolio</code> object. </p> <p>Both of these methods as well as most of the method discussed below takes a parameter <code>column</code> dictating which column to use while calculating the corresponding values. The default is \"Close\" and you should not change this. An exception is when you want to use the \"Adj. Close\". However, in that case too, it is recommended that you change the column name from \"Adj. Close\" to \"Close\" while loading the data.</p> <p>This can be determined using the <code>get_stock_return</code> method. As usualy, pass the name of the stock. The method also taked a <code>frequency</code> parameter.</p> <pre><code>apple_return, apple_std = portfolio.get_stock_return(\"AAPL\")\n</code></pre> <pre><code>apple_return, apple_std\n</code></pre> <pre>\n<code>(0.02034460996923982, 0.08107760447739829)</code>\n</pre> <p>The methods in this object are implemented to give an average return. If you want to get a series of return, use the methods of the <code>Stock</code> object.</p> <p>Use the <code>get_all_stock_returns</code> function!</p> <pre><code>monthly_returns = portfolio.get_all_stock_returns()\nmonthly_returns\n</code></pre> Stock Monthly_Mean_Return Monthly_Return_STD 0 AAPL 0.020345 0.081078 1 TSLA 0.050261 0.182803 2 MSFT 0.018516 0.060729 <p>Well, you can use the <code>portfolio_return</code> method to get this. The function gives a weighted return. You can also specify the <code>weights</code>.</p> <pre><code>portfolio_return_equal, _ = portfolio.portfolio_return()\nportfolio_return_equal\n</code></pre> <pre>\n<code>0.029707288531672652</code>\n</pre> <pre><code>portfolio_return_just_apple, _ = portfolio.portfolio_return(weights=[1,0,0])\nportfolio_return_just_apple\n</code></pre> <pre>\n<code>0.02034460996923982</code>\n</pre> <p>These two parameters are required for the CAPM and SIM models. There are two methods for calculating this:</p> <p>This function returns the parameters for one stock identified by the name of the stock.</p> <pre><code>tesla_alpha, tesla_beta = portfolio.get_stock_params(\"TSLA\")\n</code></pre> <pre><code>print(tesla_alpha, tesla_beta)\n</code></pre> <pre>\n<code>0.04086664252883307 1.713736456801432\n</code>\n</pre> <p>This returns parameters for all the stocks in the portfolio.</p> <pre><code>alpha_beta_all = portfolio.get_all_stock_params(return_dict=False, column=\"Close\")\n</code></pre> <pre><code>alpha_beta_all\n</code></pre> Stock Alpha Beta 0 AAPL 0.013671 0.976056 1 TSLA 0.040867 1.713736 2 MSFT 0.013301 0.858644 <p>After using <code>get_all_stock_params</code> method, the <code>alpha</code> and <code>beta</code> of a stock can also be accessed thorugh the attribute of that stock.</p> <pre><code>for stock in portfolio.stocks:\n    print(stock.name, stock.alpha, stock.beta)\n</code></pre> <pre>\n<code>AAPL 0.013670770282234219 0.9760561904155619\nTSLA 0.04086664252883307 1.713736456801432\nMSFT 0.013301247231778873 0.8586435486025358\n</code>\n</pre> <p>The parameters can also be accessed directly from the <code>Portfolio</code>:</p> <pre><code>portfolio.alphas, portfolio.betas\n</code></pre> <pre>\n<code>([0.013670770282234219, 0.04086664252883307, 0.013301247231778873],\n [0.9760561904155619, 1.713736456801432, 0.8586435486025358])</code>\n</pre> <p><code>Portfolio</code> object has a <code>summary</code> method which gives summary of the portfolio. The method requires <code>frequency</code>, <code>weights</code> and <code>column</code>:</p> <pre><code>portfolio.summary()\n</code></pre> <pre>\n<code>Portfolio Summary\n*****************\n\nPortfolio with benchmark Dow_Jones and stocks ['AAPL', 'TSLA', 'MSFT']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+-----------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |     Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+-----------+----------+----------|\n|  0 | AAPL    |             0.0203446 |            0.0810776 | 0.0136708 | 0.976056 | 0.333333 |\n|  1 | TSLA    |             0.0502608 |            0.182803  | 0.0408666 | 1.71374  | 0.333333 |\n|  2 | MSFT    |             0.0185164 |            0.0607293 | 0.0133012 | 0.858644 | 0.333333 |\n+----+---------+-----------------------+----------------------+-----------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+\n|      |       AAPL |       TSLA |       MSFT |\n|------+------------+------------+------------|\n| AAPL | 0.00657358 | 0.00564335 | 0.00248329 |\n| TSLA | 0.00564335 | 0.033417   | 0.00397697 |\n| MSFT | 0.00248329 | 0.00397697 | 0.00368805 |\n+------+------------+------------+------------+\nPortfolio Return: 0.029707288531672652\nPortfolio Volatility: 0.18991518028969553\n</code>\n</pre> <p>If you are feeling lazy and don't want to call a couple of methods to calculate the <code>return</code>, <code>alpha</code> and <code>beta</code>, you can just vcall the <code>summary</code> method and it calculates all the values under the hood!</p> <p>The calculation of FFF parameters, however, is not included in the <code>summary</code> method. The reason is that calculations of FFF parameters are a bit involved and unless you want to optimize portfolio using the <code>fff3</code> or <code>fff5</code> model, you don't even need to do the calculations of FFF parameters.</p> <p>To use the Fama\u2013French three-factor model or five factor model, you need the three or five parameters. As usual, we have two methods to do this:</p> <p>This calculates the FFF params for the given stock. You can pass the name of the stock or the stock itself. The function uses the <code>Stock.load_fff</code> method to load the FFF data. See the corresponding section for more detail.</p> <pre><code>apple_fff5 = portfolio.calculate_fff_params_one(\"AAPL\", frequency=\"M\", factors=5, directory=\"Data\")\n</code></pre> <pre><code>apple_fff5\n</code></pre> <pre>\n<code>const     0.005514\nMkt-RF    1.197614\nSMB      -0.258640\nHML      -0.513560\nRMW       0.750830\nCMA      -0.181558\nrf        1.000000\ndtype: float64</code>\n</pre> <p>You already know what this method does!</p> <pre><code>all_ff5 = portfolio.calculate_fff_params(frequency=\"M\", factors=5, directory=\"Data\", verbose=0)\n</code></pre> <pre>\n<code>Done. Here are the parameters\n+-------------+------------+-------------+\n|        AAPL |       TSLA |        MSFT |\n|-------------+------------+-------------|\n|  0.00551378 |  0.0341999 |  0.00794491 |\n|  1.19761    |  1.87135   |  0.993504   |\n| -0.25864    | -0.379263  | -0.787259   |\n| -0.51356    | -0.610234  |  0.0173204  |\n|  0.75083    | -1.45574   | -0.100924   |\n| -0.181558   | -0.497976  | -0.529687   |\n|  1          |  1         |  1          |\n+-------------+------------+-------------+\n</code>\n</pre> <p>One you have calculated the fff parameters, you can access this with the <code>params</code> attribute of <code>Stock</code> object.</p> <pre><code>portfolio[\"AAPL\"].params\n</code></pre> <pre>\n<code>const     0.005514\nMkt-RF    1.197614\nSMB      -0.258640\nHML      -0.513560\nRMW       0.750830\nCMA      -0.181558\nrf        1.000000\ndtype: float64</code>\n</pre> <p>Or use the <code>stock_params</code> attribute of the <code>Portfolio</code> object:</p> <pre><code>portfolio.stock_params\n</code></pre> <pre>\n<code>{'AAPL': const     0.005514\n Mkt-RF    1.197614\n SMB      -0.258640\n HML      -0.513560\n RMW       0.750830\n CMA      -0.181558\n rf        1.000000\n dtype: float64,\n 'TSLA': const     0.034200\n Mkt-RF    1.871348\n SMB      -0.379263\n HML      -0.610234\n RMW      -1.455743\n CMA      -0.497976\n rf        1.000000\n dtype: float64,\n 'MSFT': const     0.007945\n Mkt-RF    0.993504\n SMB      -0.787259\n HML       0.017320\n RMW      -0.100924\n CMA      -0.529687\n rf        1.000000\n dtype: float64}</code>\n</pre> <p>These values are required while calculating the expected stock return using <code>fff3</code> or <code>fff5</code> method. If you have called <code>calculate_fff_params_one</code> or <code>calculate_fff_params</code> method, yoy don't need to do anything else. The mean values have been calculated and can be accessed by <code>mean_values</code> attribute. If you have not called at least one of these methods, well, call it!</p> <pre><code>portfolio.mean_values\n</code></pre> <pre>\n<code>const     1.000000\nMkt-RF    0.005592\nSMB       0.002236\nHML       0.003101\nRMW       0.002819\nCMA       0.002955\nRF        0.003621\ndtype: float64</code>\n</pre> <p>This class has methods to optimize the portfolio. The class is build on top of the <code>Portfolio</code> class. Let's get started!</p> <p>Let's instantiate the model:</p> <pre><code>model = Model(\"M\")\n</code></pre> <p>The only parameters which the <code>Model</code> expects are the <code>frequency</code> and <code>risk_free_rate</code>.</p> <p>The easiest way to get started with <code>Model</code> is by using the <code>create_portfolio</code> method. This method creates a portfolio by using the <code>benchmark_dir</code>, <code>benchmark_name</code>, <code>stock_dirs</code>, and <code>stock_names</code>. The method accepts some other parameters which are necessary to create a <code>Portfolio</code>.</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\", \"Data/TSLA.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\", \"TSLA\"]\n\nfrequency = \"M\"\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\n\nportfolio = model.create_portfolio(\n    benchmark_dir=benchmark_dir,\n    benchmark_name=benchmark_name,\n    stock_dirs=stock_dirs,\n    stock_names=stock_names,\n    frequency=frequency,\n    start_date=start_date,\n    end_date=end_date\n)\n</code></pre> <pre>\n<code>Loading benchmark...\nLoading stocks...\nCalculating other results...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG', 'TSLA']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  |     0.25 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 |     0.25 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  |     0.25 |\n|  3 | TSLA    |             0.0502608 |            0.182803  | 0.0336704  | 1.72526  |     0.25 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |       TSLA |\n|------+------------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 | 0.00566592 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 | 0.00399494 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 | 0.00347788 |\n| TSLA | 0.00566592 | 0.00399494 | 0.00347788 | 0.033417   |\n+------+------------+------------+------------+------------+\nPortfolio Return: 0.02731678889316875\nPortfolio Volatility: 0.15603147059665842\n</code>\n</pre> <p>The <code>create_portfolio</code> method returns the <code>Portfolio</code> object. It does all the work of loading the data, merging the data and calculating the parameters. If your goal is to optimize portfolio using <code>capm</code> or <code>sim</code> model, you don't need to do anything else. Just call the <code>optimize_portfolio</code> method.</p> <p>This method, by default, loads just the \"Adj. Close\" column and renames it to \"Close\" column.</p> <p>Though this method is enough for many works, it is not recommended way to use the module. You should create a <code>Portfolio</code> object and then use other method to add it to the <code>Model</code> object.</p> <p>Start by creating a <code>Portfolio</code> object. Then, use the <code>add_portfolio</code> method to add it to the <code>Model</code> object.</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\", \"Data/TSLA.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\", \"TSLA\"]\n\nfrequency = \"M\"\npt = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\npt.load_benchmark(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\npt.load_all(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\n</code></pre> <p>Let's print the portfolio summary:</p> <pre><code>pt.summary()\n</code></pre> <pre>\n<code>Portfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG', 'TSLA']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  |     0.25 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 |     0.25 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  |     0.25 |\n|  3 | TSLA    |             0.0502608 |            0.182803  | 0.0336704  | 1.72526  |     0.25 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |       TSLA |\n|------+------------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 | 0.00566592 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 | 0.00399494 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 | 0.00347788 |\n| TSLA | 0.00566592 | 0.00399494 | 0.00347788 | 0.033417   |\n+------+------------+------------+------------+------------+\nPortfolio Return: 0.02731678889316875\nPortfolio Volatility: 0.15603147059665842\n</code>\n</pre> <p>Note that you need to calculate the FFF parameters explicitly if you want to use the FFF models. Let's do that:</p> <pre><code>pt.calculate_fff_params(frequency=\"M\", factors=5, directory=\"Data\", verbose=0)\n</code></pre> <pre>\n<code>Done. Here are the parameters\n+-------------+-------------+-------------+------------+\n|        AAPL |        MSFT |        GOOG |       TSLA |\n|-------------+-------------+-------------+------------|\n|  0.00682682 |  0.00970946 |  0.00699103 |  0.0341999 |\n|  1.19736    |  0.994033   |  1.01023    |  1.87135   |\n| -0.249423   | -0.776582   | -0.572982   | -0.379263  |\n| -0.512566   |  0.0184882  |  0.199086   | -0.610234  |\n|  0.749702   | -0.103125   | -0.107732   | -1.45574   |\n| -0.201821   | -0.548657   | -0.867854   | -0.497976  |\n|  1          |  1          |  1          |  1         |\n+-------------+-------------+-------------+------------+\n</code>\n</pre> <p>Great! Now you can optimize the portfolio. But there is another method which we need to discuss.</p> <p>The <code>Model</code> object accepts just one <code>Portfolio</code>. You can update the portfolio with another one:</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\"]\n\nfrequency = \"M\"\npt2 = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\npt2.load_benchmark(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\npt2.load_all(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\n</code></pre> <pre><code>model.portfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,['AAPL', 'MSFT', 'GOOG', 'TSLA'])</code>\n</pre> <pre><code>model.update_portfolio(pt2, weights=\"equal\")\n</code></pre> <pre>\n<code>Adding portfolio...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  | 0.333333 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 | 0.333333 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  | 0.333333 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |\n|------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 |\n+------+------------+------------+------------+\nPortfolio Return: 0.019668774918203367\nPortfolio Volatility: 0.15155859087536744\n</code>\n</pre> <pre><code>model.portfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,['AAPL', 'MSFT', 'GOOG'])</code>\n</pre> <p>The function calls the <code>Portfolio.summary()</code> method to make the model ready for optimization.</p> <p>Suppose yoy created a <code>Portfolio</code> but have not loaded the data yet. You then add this to the <code>Model</code> by setting the <code>portfolio</code> attribute. You can use <code>Model.portfolio</code> attribute to load the data of benchmark and stocks, or, you can use the <code>load_portfolio</code> method which does all this.</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\"]\n\nfrequency = \"M\"\npt2 = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\n\nmodel = Model(\"M\")\n\nmodel.portfolio = pt2\n</code></pre> <pre><code>model.portfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,['AAPL', 'MSFT', 'GOOG'])</code>\n</pre> <pre><code>model.load_portfolio(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\n</code></pre> <pre>\n<code>Loading benchmark...\nLoading stocks...\nCalculating other results...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  | 0.333333 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 | 0.333333 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  | 0.333333 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |\n|------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 |\n+------+------------+------------+------------+\nPortfolio Return: 0.019668774918203367\nPortfolio Volatility: 0.15155859087536744\n</code>\n</pre> <p>Before optimizing the portfolio, suppose you want to try some <code>weights</code> and see how the return and risk is changing. Or you just want to see expected return of a stock based on its calculated parameters. For this the <code>Model</code> has some methods. Let's create a model:</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\", \"Data/TSLA.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\", \"TSLA\"]\n\nfrequency = \"M\"\npt = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\npt.load_benchmark(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\npt.load_all(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\n</code></pre> <pre><code>model = Model()\nmodel.add_portfolio(pt, weights=\"equal\")\n</code></pre> <pre>\n<code>Adding portfolio...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG', 'TSLA']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  |     0.25 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 |     0.25 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  |     0.25 |\n|  3 | TSLA    |             0.0502608 |            0.182803  | 0.0336704  | 1.72526  |     0.25 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |       TSLA |\n|------+------------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 | 0.00566592 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 | 0.00399494 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 | 0.00347788 |\n| TSLA | 0.00566592 | 0.00399494 | 0.00347788 | 0.033417   |\n+------+------------+------------+------------+------------+\nPortfolio Return: 0.02731678889316875\nPortfolio Volatility: 0.15603147059665842\n</code>\n</pre> <p>We won't calculate the FFF parameters just yet.</p> <p>This function returns what the name says:</p> <pre><code>exp_return = model.expected_return_of_stock(pt[\"AAPL\"], model=\"capm\")\nexp_return\n</code></pre> <pre>\n<code>Warning. FFF params have not been calculated. Using ff3 or ff5 model will result in error.\n</code>\n</pre> <pre>\n<code>1.1054838377097305</code>\n</pre> <pre><code>exp_return = model.expected_return_of_stock(pt[\"AAPL\"], model=\"sim\")\nexp_return\n</code></pre> <pre>\n<code>Warning. FFF params have not been calculated. Using ff3 or ff5 model will result in error.\n</code>\n</pre> <pre>\n<code>1.115282131986719</code>\n</pre> <p>Returns by the <code>capm</code> and <code>sim</code> models are almost same. Let's try FFF models. As the warning message says, we have to first do the FFF calculations.</p> <pre><code>pt.calculate_fff_params(frequency=\"M\", factors=5, directory=\"Data\", verbose=0)\n</code></pre> <pre>\n<code>Done. Here are the parameters\n+-------------+-------------+-------------+------------+\n|        AAPL |        MSFT |        GOOG |       TSLA |\n|-------------+-------------+-------------+------------|\n|  0.00682682 |  0.00970946 |  0.00699103 |  0.0341999 |\n|  1.19736    |  0.994033   |  1.01023    |  1.87135   |\n| -0.249423   | -0.776582   | -0.572982   | -0.379263  |\n| -0.512566   |  0.0184882  |  0.199086   | -0.610234  |\n|  0.749702   | -0.103125   | -0.107732   | -1.45574   |\n| -0.201821   | -0.548657   | -0.867854   | -0.497976  |\n|  1          |  1          |  1          |  1         |\n+-------------+-------------+-------------+------------+\n</code>\n</pre> <pre><code>exp_return = model.expected_return_of_stock(pt[\"AAPL\"], model=\"fff5\")\nexp_return\n</code></pre> <pre>\n<code>1.65139661893182</code>\n</pre> <pre><code>exp_return = model.expected_return_of_stock(pt[\"AAPL\"], model=\"fff3\")\nexp_return\n</code></pre> <pre>\n<code>1.499680184234527</code>\n</pre> <p>So, the FFF models predict higher returns!</p> <p>This method returns the expected value and risk of portfolio given the <code>weights</code> and <code>model</code>:</p> <pre><code>model.portfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,['AAPL', 'MSFT', 'GOOG', 'TSLA'])</code>\n</pre> <pre><code>weights = \"equal\"\nmodel_ = \"capm\"\nexp_return, variance, _ = model.portfolio_info(weights=weights, model=model_)\nprint(f\"Expected Return: {exp_return:.2f}%\")\nprint(f\"Expected Variance: {variance:.2f}\")\n</code></pre> <pre>\n<code>Expected Return: 1.11%\nExpected Variance: 0.55\n</code>\n</pre> <pre><code>weights = \"equal\"\nmodel_ = \"fff5\"\nexp_return, variance, _ = model.portfolio_info(weights=weights, model=model_)\nprint(f\"Expected Return: {exp_return:.2f}%\")\nprint(f\"Expected Variance: {variance:.2f}\")\n</code></pre> <pre>\n<code>Expected Return: 2.11%\nExpected Variance: 0.55\n</code>\n</pre> <pre><code>weights = [0.2, 0.2, 0.2, 0.4]\nmodel_ = \"fff5\"\nexp_return, variance, _ = model.portfolio_info(weights=weights, model=model_)\nprint(f\"Expected Return: {exp_return:.2f}%\")\nprint(f\"Expected Variance: {variance:.2f}\")\n</code></pre> <pre>\n<code>Expected Return: 2.49%\nExpected Variance: 0.86\n</code>\n</pre> <p>If you have just two stocks in your portfolio, you can use the <code>portfolio_frontier</code> method to plot the portfolio frontier with a model.</p> <pre><code>pt.remove_stocks([\"TSLA\", \"MSFT\"])\n</code></pre> <pre><code>model.portfolio\n</code></pre> <pre>\n<code>Portfolio(S&amp;P,['AAPL', 'GOOG'])</code>\n</pre> <p>As you have deleted two stocks, you need to call <code>summary</code> again to recalculate the params.</p> <pre><code>pt.summary()\n</code></pre> <pre>\n<code>Portfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'GOOG']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+---------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |    Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+---------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897 |      0.5 |\n|  1 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298 |      0.5 |\n+----+---------+-----------------------+----------------------+------------+---------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+\n|      |       AAPL |       GOOG |\n|------+------------+------------|\n| AAPL | 0.00662438 | 0.00215109 |\n| GOOG | 0.00215109 | 0.00416849 |\n+------+------------+------------+\nPortfolio Return: 0.019379990857807596\nPortfolio Volatility: 0.19101971223336575\n</code>\n</pre> <p>You will also need to delete the series of calculted FFF params for these stocks.</p> <pre><code>del pt.stock_params[\"MSFT\"]\ndel pt.stock_params[\"TSLA\"]\n</code></pre> <pre><code>model.portfolio.stock_params\n</code></pre> <pre>\n<code>{'AAPL': const     0.006827\n Mkt-RF    1.197356\n SMB      -0.249423\n HML      -0.512566\n RMW       0.749702\n CMA      -0.201821\n rf        1.000000\n dtype: float64,\n 'GOOG': const     0.006991\n Mkt-RF    1.010230\n SMB      -0.572982\n HML       0.199086\n RMW      -0.107732\n CMA      -0.867854\n rf        1.000000\n dtype: float64}</code>\n</pre> <pre><code>model.portfolio_frontier(model=\"capm\")\n</code></pre> <pre><code>model.portfolio_frontier(model=\"sim\")\n</code></pre> <pre><code>model.portfolio_frontier(model=\"fff3\")\n</code></pre> <pre><code>model.portfolio_frontier(model=\"fff5\")\n</code></pre> <p>The <code>fff3</code> is coming out to be very different.</p> <p>Okay, let's optimize the following <code>Portfolio</code>:</p> <pre><code>benchmark_dir = \"Data/GSPC.csv\"\nbenchmark_name = \"S&amp;P\"\n\nstock_dirs = [\"Data/AAPL.csv\", \"Data/MSFT.csv\", \"Data/GOOG.csv\", \"Data/TSLA.csv\"]\nstock_names = [\"AAPL\", \"MSFT\", \"GOOG\", \"TSLA\"]\n\nfrequency = \"M\"\npt = Portfolio(benchmark_dir, benchmark_name, stock_dirs, stock_names)\nstart_date = \"2012-01-01\"\nend_date = \"2022-12-20\"\npt.load_benchmark(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\npt.load_all(\n    columns=[\"Adj Close\"],\n    rename_cols=[\"Close\"],\n    start_date=start_date,\n    end_date=end_date,\n    frequency=frequency,\n)\n</code></pre> <pre><code>model = Model()\nmodel.add_portfolio(pt, weights=\"equal\")\n</code></pre> <pre>\n<code>Adding portfolio...\nPortfolio Summary\n*****************\n\nPortfolio with benchmark S&amp;P and stocks ['AAPL', 'MSFT', 'GOOG', 'TSLA']\nHere are the summary of stocks in the portfolio\n+----+---------+-----------------------+----------------------+------------+----------+----------+\n|    | Stock   |   Monthly_Mean_Return |   Monthly_Return_STD |      Alpha |     Beta |   Weight |\n|----+---------+-----------------------+----------------------+------------+----------+----------|\n|  0 | AAPL    |             0.0216164 |            0.0813903 | 0.00979829 | 1.22897  |     0.25 |\n|  1 | MSFT    |             0.0202463 |            0.0607759 | 0.010973   | 0.964346 |     0.25 |\n|  2 | GOOG    |             0.0171436 |            0.0645638 | 0.00711404 | 1.04298  |     0.25 |\n|  3 | TSLA    |             0.0502608 |            0.182803  | 0.0336704  | 1.72526  |     0.25 |\n+----+---------+-----------------------+----------------------+------------+----------+----------+\nThe covariance matrix is as follows\n+------+------------+------------+------------+------------+\n|      |       AAPL |       MSFT |       GOOG |       TSLA |\n|------+------------+------------+------------+------------|\n| AAPL | 0.00662438 | 0.00252134 | 0.00215109 | 0.00566592 |\n| MSFT | 0.00252134 | 0.00369371 | 0.00230756 | 0.00399494 |\n| GOOG | 0.00215109 | 0.00230756 | 0.00416849 | 0.00347788 |\n| TSLA | 0.00566592 | 0.00399494 | 0.00347788 | 0.033417   |\n+------+------------+------------+------------+------------+\nPortfolio Return: 0.02731678889316875\nPortfolio Volatility: 0.15603147059665842\n</code>\n</pre> <pre><code>pt.calculate_fff_params(frequency=\"M\", factors=5, directory=\"Data\", verbose=0)\n</code></pre> <pre>\n<code>Done. Here are the parameters\n+-------------+-------------+-------------+------------+\n|        AAPL |        MSFT |        GOOG |       TSLA |\n|-------------+-------------+-------------+------------|\n|  0.00682682 |  0.00970946 |  0.00699103 |  0.0341999 |\n|  1.19736    |  0.994033   |  1.01023    |  1.87135   |\n| -0.249423   | -0.776582   | -0.572982   | -0.379263  |\n| -0.512566   |  0.0184882  |  0.199086   | -0.610234  |\n|  0.749702   | -0.103125   | -0.107732   | -1.45574   |\n| -0.201821   | -0.548657   | -0.867854   | -0.497976  |\n|  1          |  1          |  1          |  1         |\n+-------------+-------------+-------------+------------+\n</code>\n</pre> <p>All set! All you need now is to call <code>optimize_portfolio</code> with <code>model</code>, <code>risk</code> and <code>can_short</code> parameter. You may call the <code>portfolio_info</code> first with default parameters. This will give you an idea about how much risk to consider.</p> <pre><code>model.portfolio_info()\n</code></pre> <pre>\n<code>(1.112657603301926, 0.550881209951722, 0.742213722556867)</code>\n</pre> <p>It seems that the variance of the <code>Portfolio</code> with \"equal\" <code>weights</code> is 0.551. Let's see what is the maximum return at that risk.</p> <pre><code>def get_return(risk, can_short):\n    models = [\"capm\", \"sim\", \"fff3\", \"fff5\"]\n    for m in models:\n        print(f\"Optimizing for -&gt; {m.upper()}\")\n        _ = model.optimize_portfolio(m, risk=risk, can_short=can_short)\n        print()\n</code></pre> <pre><code>risk = 0.5\ncan_short = False\nget_return(risk, can_short)\n</code></pre> <pre>\n<code>Optimizing for -&gt; CAPM\nOptimized successfully.\nExpected return: 1.1155%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: 47.20%\nMSFT: 0.00%\nGOOG: 36.08%\nTSLA: 16.73%\n\nOptimizing for -&gt; SIM\nOptimized successfully.\nExpected return: 1.1283%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: 46.20%\nMSFT: 0.00%\nGOOG: 36.81%\nTSLA: 17.00%\n\nOptimizing for -&gt; FFF3\nOptimized successfully.\nExpected return: 2.3360%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 53.08%\nGOOG: 23.86%\nTSLA: 23.06%\n\nOptimizing for -&gt; FFF5\nOptimized successfully.\nExpected return: 2.0628%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: 15.42%\nMSFT: 53.74%\nGOOG: 9.06%\nTSLA: 21.78%\n\n</code>\n</pre> <p>So, FFF3 model gives the best return of 2.336% for the weights:</p> <pre><code>AAPL: 0.00%\nMSFT: 53.08%\nGOOG: 23.86%\nTSLA: 23.06%\n</code></pre> <p>Let's allow shorting:</p> <pre><code>risk = 0.5\ncan_short = True\nget_return(risk, can_short)\n</code></pre> <pre>\n<code>Optimizing for -&gt; CAPM\nOptimized successfully.\nExpected return: 1.1165%\nVariance: 0.5001%\nExpected weights:\n--------------------\nAAPL: 48.81%\nMSFT: -8.60%\nGOOG: 44.26%\nTSLA: 15.53%\n\nOptimizing for -&gt; SIM\nOptimized successfully.\nExpected return: 1.1288%\nVariance: 0.5001%\nExpected weights:\n--------------------\nAAPL: 47.40%\nMSFT: -5.97%\nGOOG: 42.38%\nTSLA: 16.19%\n\nOptimizing for -&gt; FFF3\nOptimized successfully.\nExpected return: 2.3391%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: -5.51%\nMSFT: 56.67%\nGOOG: 25.98%\nTSLA: 22.86%\n\nOptimizing for -&gt; FFF5\nOptimized successfully.\nExpected return: 2.0628%\nVariance: 0.5000%\nExpected weights:\n--------------------\nAAPL: 15.42%\nMSFT: 53.74%\nGOOG: 9.06%\nTSLA: 21.78%\n\n</code>\n</pre> <p>Very little increase in maximum return in observed (2.339%) for</p> <pre><code>AAPL: -5.51%\nMSFT: 56.67%\nGOOG: 25.98%\nTSLA: 22.86%\n</code></pre> <p>Let's increase the risk to 1:</p> <pre><code>risk = 1\ncan_short = False\nget_return(risk, can_short)\n</code></pre> <pre>\n<code>Optimizing for -&gt; CAPM\nOptimized successfully.\nExpected return: 1.2233%\nVariance: 1.0000%\nExpected weights:\n--------------------\nAAPL: 62.21%\nMSFT: 0.00%\nGOOG: 0.00%\nTSLA: 37.79%\n\nOptimizing for -&gt; SIM\nOptimized successfully.\nExpected return: 1.2421%\nVariance: 1.0001%\nExpected weights:\n--------------------\nAAPL: 61.20%\nMSFT: 0.00%\nGOOG: 0.74%\nTSLA: 38.06%\n\nOptimizing for -&gt; FFF3\nOptimized successfully.\nExpected return: 3.0121%\nVariance: 1.0000%\nExpected weights:\n--------------------\nAAPL: 0.00%\nMSFT: 47.74%\nGOOG: 6.33%\nTSLA: 45.92%\n\nOptimizing for -&gt; FFF5\nOptimized successfully.\nExpected return: 2.6580%\nVariance: 1.0000%\nExpected weights:\n--------------------\nAAPL: 10.72%\nMSFT: 44.08%\nGOOG: 0.00%\nTSLA: 45.20%\n\n</code>\n</pre> <p>Maximum return is increased (at it should be). The new maximum return is 3.0121% for</p> <pre><code>AAPL: 0.00%\nMSFT: 47.74%\nGOOG: 6.33%\nTSLA: 45.92%\n</code></pre> <pre><code>risk = 1\ncan_short = True\nget_return(risk, can_short)\n</code></pre> <pre>\n<code>Optimizing for -&gt; CAPM\nOptimized successfully.\nExpected return: 1.2434%\nVariance: 1.0001%\nExpected weights:\n--------------------\nAAPL: 76.10%\nMSFT: -57.41%\nGOOG: 49.23%\nTSLA: 32.08%\n\nOptimizing for -&gt; SIM\nOptimized successfully.\nExpected return: 1.2591%\nVariance: 0.9999%\nExpected weights:\n--------------------\nAAPL: 73.48%\nMSFT: -52.53%\nGOOG: 45.76%\nTSLA: 33.30%\n\nOptimizing for -&gt; FFF3\nOptimized successfully.\nExpected return: 3.0453%\nVariance: 0.9999%\nExpected weights:\n--------------------\nAAPL: -24.65%\nMSFT: 63.64%\nGOOG: 15.33%\nTSLA: 45.68%\n\nOptimizing for -&gt; FFF5\nOptimized successfully.\nExpected return: 2.6661%\nVariance: 1.0000%\nExpected weights:\n--------------------\nAAPL: 14.17%\nMSFT: 58.19%\nGOOG: -16.04%\nTSLA: 43.68%\n\n</code>\n</pre> <p>Allowing for short does not have very large effect.</p> <p>At last, we'll consider a very small risk.</p> <pre><code>risk = 0.1\ncan_short = False\nget_return(risk, can_short)\n</code></pre> <pre>\n<code>Optimizing for -&gt; CAPM\nOptimization failed. Positive directional derivative for linesearch\nHere are the last results:\nExpected return: 0.9828%\nVariance: 0.2992%\nExpected weights:\n--------------------\nAAPL: 14.90%\nMSFT: 47.07%\nGOOG: 38.03%\nTSLA: 0.00%\n\nOptimizing for -&gt; SIM\nOptimization failed. Positive directional derivative for linesearch\nHere are the last results:\nExpected return: 0.9921%\nVariance: 0.2992%\nExpected weights:\n--------------------\nAAPL: 14.90%\nMSFT: 47.07%\nGOOG: 38.03%\nTSLA: 0.00%\n\nOptimizing for -&gt; FFF3\nOptimization failed. Positive directional derivative for linesearch\nHere are the last results:\nExpected return: 1.6268%\nVariance: 0.2992%\nExpected weights:\n--------------------\nAAPL: 14.90%\nMSFT: 47.07%\nGOOG: 38.03%\nTSLA: 0.00%\n\nOptimizing for -&gt; FFF5\nOptimization failed. Positive directional derivative for linesearch\nHere are the last results:\nExpected return: 1.4503%\nVariance: 0.2992%\nExpected weights:\n--------------------\nAAPL: 14.90%\nMSFT: 47.07%\nGOOG: 38.03%\nTSLA: 0.00%\n\n</code>\n</pre> <p>The model can not optimize for this low risk. The best result is is:</p> <pre><code>Expected return: 1.6268%\nVariance: 0.2992%\nExpected weights:\nAAPL: 14.90%\nMSFT: 47.07%\nGOOG: 38.03%\nTSLA: 0.00%\n</code></pre>"},{"location":"Notes/Finance/Working_With_pystock/#imports","title":"Imports","text":""},{"location":"Notes/Finance/Working_With_pystock/#the-famafrenchfactors-class","title":"The <code>FamaFrenchFactors</code> class","text":""},{"location":"Notes/Finance/Working_With_pystock/#working-with-the-fama-french-factors","title":"Working with the Fama-French Factors","text":""},{"location":"Notes/Finance/Working_With_pystock/#downloading-fff","title":"Downloading FFF","text":""},{"location":"Notes/Finance/Working_With_pystock/#load-function","title":"<code>load</code> function","text":""},{"location":"Notes/Finance/Working_With_pystock/#some-more-functions","title":"Some More Functions","text":""},{"location":"Notes/Finance/Working_With_pystock/#changing-the-frequncy","title":"Changing the Frequncy","text":""},{"location":"Notes/Finance/Working_With_pystock/#calculating-mean-returns","title":"Calculating Mean \"Returns\"","text":""},{"location":"Notes/Finance/Working_With_pystock/#the-stock-class","title":"The <code>Stock</code> class","text":""},{"location":"Notes/Finance/Working_With_pystock/#creating-a-stock-object","title":"Creating a <code>Stock</code> object","text":""},{"location":"Notes/Finance/Working_With_pystock/#load_data-function","title":"<code>load_data</code> function","text":""},{"location":"Notes/Finance/Working_With_pystock/#working-with-returns","title":"Working With Returns","text":""},{"location":"Notes/Finance/Working_With_pystock/#changing-the-frequency-of-the-data","title":"Changing the frequency of the data","text":""},{"location":"Notes/Finance/Working_With_pystock/#stock-object-with-famafrenchfactors","title":"<code>Stock</code> object with <code>FamaFrenchFactors</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#download_data-function","title":"<code>download_data</code> function","text":""},{"location":"Notes/Finance/Working_With_pystock/#load_fff-function","title":"<code>load_fff</code> function","text":""},{"location":"Notes/Finance/Working_With_pystock/#calculating-fam-french-factors","title":"Calculating Fam-French Factors","text":""},{"location":"Notes/Finance/Working_With_pystock/#portfolio-class","title":"<code>Portfolio</code> class","text":""},{"location":"Notes/Finance/Working_With_pystock/#getting-started-with-portfolio","title":"Getting Started with <code>Portfolio</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#customizing-the-portfolio","title":"Customizing the <code>Portfolio</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#loading-the-benchmark","title":"Loading The Benchmark","text":""},{"location":"Notes/Finance/Working_With_pystock/#changing-the-benchmark","title":"Changing The Benchmark","text":""},{"location":"Notes/Finance/Working_With_pystock/#adding-a-stock","title":"Adding A Stock","text":""},{"location":"Notes/Finance/Working_With_pystock/#quick-way","title":"Quick Way","text":""},{"location":"Notes/Finance/Working_With_pystock/#using-stock-object","title":"Using <code>Stock</code> Object","text":""},{"location":"Notes/Finance/Working_With_pystock/#adding-multiple-stocks","title":"Adding Multiple Stocks","text":""},{"location":"Notes/Finance/Working_With_pystock/#removing-stocks","title":"Removing Stocks","text":""},{"location":"Notes/Finance/Working_With_pystock/#change-the-frequency-of-the-data","title":"Change the Frequency of the Data","text":""},{"location":"Notes/Finance/Working_With_pystock/#loading-the-data","title":"Loading the Data","text":""},{"location":"Notes/Finance/Working_With_pystock/#load_one_stock","title":"<code>load_one_stock</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#load_all","title":"<code>load_all</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#special-methods","title":"Special Methods","text":""},{"location":"Notes/Finance/Working_With_pystock/#representation","title":"Representation","text":""},{"location":"Notes/Finance/Working_With_pystock/#string","title":"String","text":""},{"location":"Notes/Finance/Working_With_pystock/#using-the-in-keyword","title":"Using the <code>in</code> Keyword","text":""},{"location":"Notes/Finance/Working_With_pystock/#using-subscriptation","title":"Using Subscriptation","text":""},{"location":"Notes/Finance/Working_With_pystock/#iteration","title":"Iteration","text":""},{"location":"Notes/Finance/Working_With_pystock/#merging","title":"Merging","text":""},{"location":"Notes/Finance/Working_With_pystock/#merging-with-the-benchmark","title":"Merging With the Benchmark","text":""},{"location":"Notes/Finance/Working_With_pystock/#merge-everything","title":"Merge Everything","text":""},{"location":"Notes/Finance/Working_With_pystock/#returning-the-return","title":"Returning the Return","text":""},{"location":"Notes/Finance/Working_With_pystock/#return-of-a-single-stock","title":"Return of A Single Stock","text":""},{"location":"Notes/Finance/Working_With_pystock/#return-of-all-stocks","title":"Return of All Stocks","text":""},{"location":"Notes/Finance/Working_With_pystock/#what-about-the-whole-portfolio","title":"What About the Whole Portfolio?","text":""},{"location":"Notes/Finance/Working_With_pystock/#calculating-the-stock-parameters","title":"Calculating the Stock Parameters","text":""},{"location":"Notes/Finance/Working_With_pystock/#alpha-and-beta","title":"alpha and beta","text":""},{"location":"Notes/Finance/Working_With_pystock/#get_stock_params","title":"<code>get_stock_params</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#get_all_stock_params","title":"<code>get_all_stock_params</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#summary","title":"Summary!","text":""},{"location":"Notes/Finance/Working_With_pystock/#fff-parameters","title":"FFF Parameters","text":""},{"location":"Notes/Finance/Working_With_pystock/#calculate_fff_params_one","title":"<code>calculate_fff_params_one</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#calculate_fff_params","title":"<code>calculate_fff_params</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#the-mean-values","title":"The Mean Values","text":""},{"location":"Notes/Finance/Working_With_pystock/#model-class","title":"<code>Model</code> Class","text":""},{"location":"Notes/Finance/Working_With_pystock/#getting-started-with-model","title":"Getting Started With <code>Model</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#creating-a-portfolio","title":"Creating a Portfolio","text":""},{"location":"Notes/Finance/Working_With_pystock/#adding-a-portfolio","title":"Adding a Portfolio","text":""},{"location":"Notes/Finance/Working_With_pystock/#updating-a-portfolio","title":"Updating a Portfolio","text":""},{"location":"Notes/Finance/Working_With_pystock/#the-load_portfolio-function","title":"The <code>load_portfolio</code> Function","text":""},{"location":"Notes/Finance/Working_With_pystock/#optimization","title":"Optimization","text":""},{"location":"Notes/Finance/Working_With_pystock/#expected_return_of_stock","title":"<code>expected_return_of_stock</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#portfolio_info","title":"<code>portfolio_info</code>","text":""},{"location":"Notes/Finance/Working_With_pystock/#plotting-the-portfolio-frontier","title":"Plotting the Portfolio Frontier","text":""},{"location":"Notes/Finance/Working_With_pystock/#optimization-at-last","title":"Optimization (at last!)","text":""},{"location":"Notes/ML/Clustering/","title":"Clustering","text":"<p>The KMeans algorithm clusters data by trying to separate samples in n groups of equal variance, minimizing a criterion known as the inertia or within-cluster sum-of-squares. This algorithm requires the number of clusters to be specified.</p> <p>The k-means algorithm divides a set of \\(N\\) samples \\(X\\) into \\(K\\) disjoint clusters \\(C\\), each described by the mean \\(\\mu_j\\) of the samples in the cluster. The means are commonly called the cluster \u201ccentroids\u201d. The K-means algorithm aims to choose centroids that minimise the inertia, or within-cluster sum-of-squares criterion: \\(\\(\\sum_{i=0}^{n}\\min_{\\mu_j \\in C}(||x_i - \\mu_j||^2)\\)\\)</p> <p>K-means is often referred to as Lloyd\u2019s algorithm. In basic terms, the algorithm has three steps. The first step chooses the initial centroids, with the most basic method being to choose \\(k\\) samples from the dataset \\(X\\). After initialization, K-means consists of looping between the two other steps. The first step assigns each sample to its nearest centroid. The second step creates new centroids by taking the mean value of all of the samples assigned to each previous centroid. The difference between the old and the new centroids are computed and the algorithm repeats these last two steps until this value is less than a threshold. In other words, it repeats until the centroids do not move significantly.</p> <p>Given enough time, K-means will always converge, however this may be to a local minimum. This is highly dependent on the initialization of the centroids. As a result, the computation is often done several times, with different initializations of the centroids. One method to help address this issue is the k-means++ initialization scheme, which has been implemented in scikit-learn (use the <code>init='k-means++'</code> parameter). This initializes the centroids to be (generally) distant from each other, leading to probably better results than random initialization, as shown in the reference.</p> <p>The algorithm supports sample weights, which can be given by a parameter sample_weight. This allows to assign more weight to some samples when computing cluster centers and values of inertia. For example, assigning a weight of 2 to a sample is equivalent to adding a duplicate of that sample to the dataset \\(X\\).</p> <p>See the paper for more details.</p> <p>The <code>MiniBatchKMeans</code> is a variant of the <code>KMeans</code> algorithm which uses mini-batches to reduce the computation time, while still attempting to optimise the same objective function. Mini-batches are subsets of the input data, randomly sampled in each training iteration. These mini-batches drastically reduce the amount of computation required to converge to a local solution. In contrast to other algorithms that reduce the convergence time of k-means, mini-batch k-means produces results that are generally only slightly worse than the standard algorithm.</p> <p>The algorithm iterates between two major steps, similar to vanilla k-means. In the first step, \\(b\\) samples are drawn randomly from the dataset, to form a mini-batch. These are then assigned to the nearest centroid. In the second step, the centroids are updated. In contrast to k-means, this is done on a per-sample basis. For each sample in the mini-batch, the assigned centroid is updated by taking the streaming average of the sample and all previous samples assigned to that centroid. This has the effect of decreasing the rate of change for a centroid over time. These steps are performed until convergence or a predetermined number of iterations is reached.</p> <p><code>MiniBatchKMeans</code> converges faster than <code>KMeans</code>, but the quality of the results is reduced.</p> <p></p> <p><code>AffinityPropagation</code> creates clusters by sending messages between pairs of samples until convergence. A dataset is then described using a small number of exemplars, which are identified as those most representative of other samples. The messages sent between pairs represent the suitability for one sample to be the exemplar of the other, which is updated in response to the values from other pairs. This updating happens iteratively until convergence, at which point the final exemplars are chosen, and hence the final clustering is given.</p> <p>Affinity Propagation can be interesting as it chooses the number of clusters based on the data provided. For this purpose, the two important parameters are the preference, which controls how many exemplars are used, and the damping factor which damps the responsibility and availability messages to avoid numerical oscillations when updating these messages.</p> <p>The main drawback of Affinity Propagation is its complexity. The algorithm has a time complexity of the order \\(O(N^2 T)\\), where \\(N\\) is the number of samples and \\(T\\) is the number of iterations until convergence. Further, the memory complexity is of the order \\(O(N^2)\\) if a dense similarity matrix is used, but reducible if a sparse similarity matrix is used. This makes Affinity Propagation most appropriate for small to medium sized datasets.</p> <p>Hierarchical clustering is a general family of clustering algorithms that build nested clusters by merging or splitting them successively. This hierarchy of clusters is represented as a tree (or dendrogram). The root of the tree is the unique cluster that gathers all the samples, the leaves being the clusters with only one sample.</p> <p>The <code>AgglomerativeClustering</code> object performs a hierarchical clustering using a bottom up approach: each observation starts in its own cluster, and clusters are successively merged together. The linkage criteria determines the metric used for the merge strategy:</p> <ul> <li><p>Ward minimizes the sum of squared differences within all clusters. It is a variance-minimizing approach and in this sense is similar to the k-means objective function but tackled with an agglomerative hierarchical approach.</p></li> <li><p>Maximum or complete linkage minimizes the maximum distance between observations of pairs of clusters.</p></li> <li><p>Average linkage minimizes the average of the distances between all observations of pairs of clusters.</p></li> <li><p>Single linkage minimizes the distance between the closest observations of pairs of clusters.</p></li> </ul> <p></p> <p>Agglomerative cluster has a \u201crich get richer\u201d behavior that leads to uneven cluster sizes. In this regard, single linkage is the worst strategy, and Ward gives the most regular sizes. However, the affinity (or distance used in clustering) cannot be varied with Ward, thus for non Euclidean metrics, average linkage is a good alternative. Single linkage, while not robust to noisy data, can be computed very efficiently and can therefore be useful to provide hierarchical clustering of larger datasets. Single linkage can also perform well on non-globular data.</p> <p>It\u2019s possible to visualize the tree representing the hierarchical merging of clusters as a dendrogram. Visual inspection can often be useful for understanding the structure of the data, though more so in the case of small sample sizes.</p> <p></p> <p>An interesting aspect of <code>AgglomerativeClustering</code> is that connectivity constraints can be added to this algorithm (only adjacent clusters can be merged together), through a connectivity matrix that defines for each sample the neighboring samples following a given structure of the data. For instance, in the swiss-roll example below, the connectivity constraints forbid the merging of points that are not adjacent on the swiss roll, and thus avoid forming clusters that extend across overlapping folds of the roll.</p> <p> </p> <p>Single, average and complete linkage can be used with a variety of distances (or affinities), in particular Euclidean distance (l2), Manhattan distance (or Cityblock, or l1), cosine distance, or any precomputed affinity matrix.</p> <ul> <li><p>l1 distance is often good for sparse features, or sparse noise: i.e. many of the features are zero, as in text mining using occurrences of rare words.</p></li> <li><p>cosine distance is interesting because it is invariant to global scalings of the signal.</p></li> </ul> <p> </p> <p>The <code>DBSCAN</code> algorithm views clusters as areas of high density separated by areas of low density. Due to this rather generic view, clusters found by DBSCAN can be any shape, as opposed to k-means which assumes that clusters are convex shaped. The central component to the DBSCAN is the concept of core samples, which are samples that are in areas of high density. A cluster is therefore a set of core samples, each close to each other (measured by some distance measure) and a set of non-core samples that are close to a core sample (but are not themselves core samples). There are two parameters to the algorithm, <code>min_samples</code> and <code>eps</code>, which define formally what we mean when we say dense. Higher <code>min_samples</code> or lower <code>eps</code> indicate higher density necessary to form a cluster.</p> <p>More formally, we define a core sample as being a sample in the dataset such that there exist <code>min_samples</code> other samples within a distance of <code>eps</code>, which are defined as neighbors of the core sample. This tells us that the core sample is in a dense area of the vector space. A cluster is a set of core samples that can be built by recursively taking a core sample, finding all of its neighbors that are core samples, finding all of their neighbors that are core samples, and so on. A cluster also has a set of non-core samples, which are samples that are neighbors of a core sample in the cluster but are not themselves core samples. Intuitively, these samples are on the fringes of a cluster.</p> <p>Any core sample is part of a cluster, by definition. Any sample that is not a core sample, and is at least <code>eps</code> in distance from any core sample, is considered an outlier by the algorithm.</p> <p>While the parameter <code>min_samples</code> primarily controls how tolerant the algorithm is towards noise (on noisy and large data sets it may be desirable to increase this parameter), the parameter <code>eps</code> is crucial to choose appropriately for the data set and distance function and usually cannot be left at the default value. It controls the local neighborhood of the points. When chosen too small, most data will not be clustered at all (and labeled as <code>-1</code>for \u201cnoise\u201d). When chosen too large, it causes close clusters to be merged into one cluster, and eventually the entire data set to be returned as a single cluster. </p> <p>The DBSCAN algorithm is deterministic, always generating the same clusters when given the same data in the same order. However, the results can differ when data is provided in a different order. First, even though the core samples will always be assigned to the same clusters, the labels of those clusters will depend on the order in which those samples are encountered in the data. Second and more importantly, the clusters to which non-core samples are assigned can differ depending on the data order. This would happen when a non-core sample has a distance lower than <code>eps</code> to two core samples in different clusters. By the triangular inequality, those two core samples must be more distant than <code>eps</code> from each other, or they would be in the same cluster. The non-core sample is assigned to whichever cluster is generated first in a pass through the data, and so the results will depend on the data ordering.</p> <p>The current implementation uses ball trees and kd-trees to determine the neighborhood of points, which avoids calculating the full distance matrix.</p> <p>Given the knowledge of the ground truth class assignments <code>labels_true</code> and our clustering algorithm assignments of the same samples <code>labels_pred</code>, the (adjusted or unadjusted) Rand index is a function that measures the similarity of the two assignments, ignoring permutations:</p> <pre><code>from sklearn import metrics\nlabels_true = [0, 0, 0, 1, 1, 1]\nlabels_pred = [0, 0, 1, 1, 2, 2]\nmetrics.rand_score(labels_true, labels_pred)\n</code></pre> <pre>\n<code>0.6666666666666666</code>\n</pre> <p>The Rand index does not ensure to obtain a value close to 0.0 for a random labelling. The adjusted Rand index corrects for chance and will give such a baseline.</p> <p>As with all clustering metrics, one can permute 0 and 1 in the predicted labels, rename 2 to 3, and get the same score:</p> <pre><code>labels_pred = [1, 1, 0, 0, 3, 3]\nprint(metrics.rand_score(labels_true, labels_pred))\n\nmetrics.adjusted_rand_score(labels_true, labels_pred)\n</code></pre> <pre>\n<code>0.6666666666666666\n</code>\n</pre> <pre>\n<code>0.24242424242424243</code>\n</pre> <p>Furthermore, both <code>rand_score</code> and <code>adjusted_rand_score</code> are symmetric: swapping the argument does not change the scores.</p> <p>Given the knowledge of the ground truth class assignments <code>labels_true</code> and our clustering algorithm assignments of the same samples <code>labels_pred</code>, the Mutual Information is a function that measures the agreement of the two assignments, ignoring permutations. Two different normalized versions of this measure are available, Normalized Mutual Information (NMI) and Adjusted Mutual Information (AMI). NMI is often used in the literature, while AMI was proposed more recently and is normalized against chance:</p> <pre><code>from sklearn import metrics\nlabels_true = [0, 0, 0, 1, 1, 1]\nlabels_pred = [0, 0, 1, 1, 2, 2]\n\nmetrics.adjusted_mutual_info_score(labels_true, labels_pred) \n</code></pre> <pre>\n<code>0.2987924581708901</code>\n</pre> <pre><code>labels_pred = [1, 1, 0, 0, 3, 3]\nmetrics.adjusted_mutual_info_score(labels_true, labels_pred)  \n</code></pre> <pre>\n<code>0.2987924581708901</code>\n</pre> <p>If the ground truth labels are not known, evaluation must be performed using the model itself. The Silhouette Coefficient is an example of such an evaluation, where a higher Silhouette Coefficient score relates to a model with better defined clusters. The Silhouette Coefficient is defined for each sample and is composed of two scores:</p> <ul> <li><p>a: The mean distance between a sample and all other points in the same class.</p></li> <li><p>b: The mean distance between a sample and all other points in the next nearest cluster.</p></li> </ul> <p>The Silhouette Coefficient s for a single sample is then given as: \\(\\(s = \\frac{b - a}{max(a, b)}\\)\\) The Silhouette Coefficient for a set of samples is given as the mean of the Silhouette Coefficient for each sample.</p> <pre><code>from sklearn import metrics\nfrom sklearn import datasets\nX, y = datasets.load_iris(return_X_y=True)\nimport numpy as np\nfrom sklearn.cluster import KMeans\nkmeans_model = KMeans(n_clusters=3, random_state=1).fit(X)\nlabels = kmeans_model.labels_\nmetrics.silhouette_score(X, labels, metric='euclidean')\n</code></pre> <pre>\n<code>0.5528190123564095</code>\n</pre> <p>Here are some of the parameters of the <code>KMeans</code> algorithm: * n_clusters: int, default=8</p> <pre><code>The number of clusters to form as well as the number of centroids to generate.\n</code></pre> <ul> <li> <p>init: {\u2018k-means++\u2019, \u2018random\u2019}, callable or array-like of shape (n_clusters, n_features), default=\u2019k-means++\u2019</p> <p>Method for initialization, defaults to \u2018k-means++\u2019: * \u2018k-means++\u2019: Selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes for more details. * \u2018random\u2019: Initialize the centroids randomly. * If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers. * If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization. * n_init: int, default=10</p> <p>Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia. * max_iter: int, default=300</p> <p>Maximum number of iterations of the k-means algorithm for a single run. * tol: float, default=1e-4</p> <p>Relative tolerance with regards to inertia to declare convergence. * algorithm: {\u201clloyd\u201d, \u201celkan\u201d, \u201cauto\u201d, \u201cfull\u201d}, default=\u201dlloyd\u201d</p> <p>K-means algorithm to use. The classical EM-style algorithm is \"lloyd\". The \"elkan\" variation can be more efficient on some datasets with well-defined clusters, by using the triangle inequality. However it\u2019s more memory intensive due to the allocation of an extra array of shape (n_samples, n_clusters).</p> <p>\"auto\" and \"full\" are deprecated and they will be removed in Scikit-Learn 1.3. They are both aliases for \"lloyd\"</p> </li> </ul> <ul> <li> <p>cluster_centers_: array, [n_clusters, n_features]</p> <p>Coordinates of cluster centers * labels_: array, [n_samples]</p> <p>Labels of each point * inertia_: float</p> <p>The final value of the inertia criterion associated with the chosen clustering.</p> </li> </ul> <ul> <li> <p>damping: float, default=0.5</p> <p>Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values. * convergence_iter: int, default=15</p> <p>Number of iterations with no change in the number of estimated clusters to consider the algorithm converged. * max_iter: int, default=200</p> <p>Maximum number of iterations to perform. * preference: array-like of shape (n_samples,) or float, default=None</p> <p>Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, ie of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities. * affinity: {\u201ceuclidean\u201d, \u201cprecomputed\u201d}, default=\u201deuclidean\u201d</p> <p>Which affinity to use. At the moment \u2018precomputed\u2019 and euclidean are supported. \u2018euclidean\u2019 uses the negative squared euclidean distance between points.</p> </li> </ul> <ul> <li> <p>cluster_centers_indices_: ndarray of shape (n_clusters,)</p> <p>Indices of cluster centers. * cluster_centers_: ndarray of shape (n_clusters, n_features)</p> <p>Coordinates of cluster centers. * labels_: ndarray of shape (n_samples,)</p> <p>Labels of each point * affinity_matrix_: ndarray of shape (n_samples, n_samples)</p> <p>Stores the affinity matrix used to generate the clustering.</p> </li> </ul> n_clusters: int or None, default=2<p>The number of clusters to find. It must be <code>None</code> if <code>distance_threshold</code> is not <code>None</code>.</p> affinity: str or callable, default=\u2019euclidean\u2019 <p><p>Metric used to compute the linkage. Can be \u201ceuclidean\u201d, \u201cl1\u201d, \u201cl2\u201d, \u201cmanhattan\u201d, \u201ccosine\u201d, or \u201cprecomputed\u201d. If linkage is \u201cward\u201d, only \u201ceuclidean\u201d is accepted. If \u201cprecomputed\u201d, a distance matrix (instead of a similarity matrix) is needed as input for the fit method.</p> </p> memory: str or object with the joblib.Memory interface, default=None <p><p>Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.</p> </p> connectivity: array-like or callable, default=None <p><p>Connectivity matrix. Defines for each sample the neighboring samples following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from <code>kneighbors_graph</code>. Default is <code>None</code>, i.e, the hierarchical clustering algorithm is unstructured.</p> </p> compute_full_tree: \u2018auto\u2019 or bool, default=\u2019auto\u2019 <p><p>Stop early the construction of the tree at <code>n_clusters</code>. This is useful to decrease computation time if the number of clusters is not small compared to the number of samples. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be <code>True</code> if <code>distance_threshold</code> is not <code>None</code>. By default <code>compute_full_tree</code> is \u201cauto\u201d, which is equivalent to <code>True</code> when <code>distance_threshold</code> is not <code>None</code> or that <code>n_clusters</code> is inferior to the maximum between 100 or <code>0.02 * n_samples</code>. Otherwise, \u201cauto\u201d is equivalent to <code>False</code>.</p> </p> linkage: {\u2018ward\u2019, \u2018complete\u2019, \u2018average\u2019, \u2018single\u2019}, default=\u2019ward\u2019 <p><p>Which linkage criterion to use. The linkage criterion determines which distance to use between sets of observation. The algorithm will merge the pairs of cluster that minimize this criterion.</p> <ul> <li><p>\u2018ward\u2019 minimizes the variance of the clusters being merged.</p></li> <li><p>\u2018average\u2019 uses the average of the distances of each observation of the two sets.</p></li> <li><p>\u2018complete\u2019 or \u2018maximum\u2019 linkage uses the maximum distances between all observations of the two sets.</p></li> <li><p>\u2018single\u2019 uses the minimum of the distances between all observations of the two sets.</p></li> </ul> distance_threshold: float, default=None <p><p>The linkage distance threshold above which, clusters will not be merged. If not <code>None</code>, <code>n_clusters</code> must be <code>None</code> and <code>compute_full_tree</code> must be <code>True</code>.</p> </p> compute_distances: bool, default=False <p><p>Computes distances between clusters even if <code>distance_threshold</code> is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.</p> </p> <ul> <li> <p>n_clusters_: int</p> <p>The number of clusters found by the algorithm. * labels_: ndarray of shape (n_samples,)</p> <p>Labels of each point * n_leaves_: int</p> <p>Number of leaves in the tree. * n_connected_components_: int</p> <p>The estimated number of connected components in the graph. * children_: ndarray of shape (n_nodes-1, 2)</p> </li> </ul> <p>The children of each non-leaf node. Values less than <code>n_samples</code> correspond to leaves of the tree which are the original samples. A node <code>i</code> greater than or equal to <code>n_samples</code> is a non-leaf node and has children <code>children_[i - n_samples]</code>. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node <code>n_samples + i</code>. * distances_: ndarray of shape (n_nodes-1,)</p> <p>Distances between nodes in the corresponding place in <code>children_</code>. Only computed if <code>distance_threshold</code> is used or <code>compute_distances</code> is set to <code>True</code>.</p> eps: float, default=0.5<p>The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.</p> min_samples: int, default=5<p>The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.</p> metric: str, or callable, default=\u2019euclidean\u2019<p>The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by <code>sklearn.metrics.pairwise_distances</code> for its metric parameter. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.  metric_params: dict, default=None<p>Additional keyword arguments for the metric function.</p> algorithm: {\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019<p>The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. See NearestNeighbors module documentation for details.</p> leaf_size: int, default=30<p>Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.</p> p: float, default=None<p>The power of the Minkowski metric to be used to calculate distance between points. If None, then <code>p=2</code> (equivalent to the Euclidean distance).</p> <ul> <li> <p>core_sample_indices_: ndarray of shape (n_core_samples,)</p> <p>Indices of core samples.</p> </li> <li> <p>components_: ndarray of shape (n_core_samples, n_features)</p> <p>Copy of each core sample found by training.</p> </li> <li> <p>labels_: ndarray of shape (n_samples)</p> <p>Cluster labels for each point in the dataset given to fit(). Noisy samples are given the label -1.</p> </li> </ul>"},{"location":"Notes/ML/Clustering/#clustering","title":"Clustering","text":""},{"location":"Notes/ML/Clustering/#k-means","title":"K-Means","text":""},{"location":"Notes/ML/Clustering/#the-algorithm","title":"The Algorithm","text":""},{"location":"Notes/ML/Clustering/#mini-batch-k-means","title":"Mini Batch K-Means","text":""},{"location":"Notes/ML/Clustering/#affinity-propagation","title":"Affinity Propagation","text":""},{"location":"Notes/ML/Clustering/#hierarchical-clustering","title":"Hierarchical clustering","text":""},{"location":"Notes/ML/Clustering/#different-linkage-type-ward-complete-average-and-single-linkage","title":"Different linkage type: Ward, complete, average, and single linkage","text":""},{"location":"Notes/ML/Clustering/#visualization-of-cluster-hierarchy","title":"Visualization of cluster hierarchy","text":""},{"location":"Notes/ML/Clustering/#adding-connectivity-constraints","title":"Adding connectivity constraints","text":""},{"location":"Notes/ML/Clustering/#varying-the-metric","title":"Varying the metric","text":""},{"location":"Notes/ML/Clustering/#dbscan","title":"DBSCAN","text":""},{"location":"Notes/ML/Clustering/#implementation","title":"Implementation","text":""},{"location":"Notes/ML/Clustering/#clustering-performance-evaluation","title":"Clustering performance evaluation","text":""},{"location":"Notes/ML/Clustering/#rand-index","title":"Rand index","text":""},{"location":"Notes/ML/Clustering/#mutual-information-based-scores","title":"Mutual Information based scores","text":""},{"location":"Notes/ML/Clustering/#silhouette-coefficient","title":"Silhouette Coefficient","text":""},{"location":"Notes/ML/Clustering/#algorithms","title":"Algorithms","text":""},{"location":"Notes/ML/Clustering/#kmeans","title":"<code>KMeans</code>","text":""},{"location":"Notes/ML/Clustering/#parameters-of-kmeans","title":"Parameters of <code>KMeans</code>","text":""},{"location":"Notes/ML/Clustering/#attributes-of-kmeans","title":"Attributes of <code>KMeans</code>","text":""},{"location":"Notes/ML/Clustering/#affinitypropagation","title":"<code>AffinityPropagation</code>","text":""},{"location":"Notes/ML/Clustering/#parameters-of-affinitypropagation","title":"Parameters of <code>AffinityPropagation</code>","text":""},{"location":"Notes/ML/Clustering/#attributes-of-affinitypropagation","title":"Attributes of <code>AffinityPropagation</code>","text":""},{"location":"Notes/ML/Clustering/#agglomerativeclustering","title":"<code>AgglomerativeClustering</code>","text":""},{"location":"Notes/ML/Clustering/#parameters-of-agglomerativeclustering","title":"Parameters of <code>AgglomerativeClustering</code>","text":""},{"location":"Notes/ML/Clustering/#attributes-of-agglomerativeclustering","title":"Attributes of <code>AgglomerativeClustering</code>","text":""},{"location":"Notes/ML/Clustering/#dbscan_1","title":"<code>DBSCAN</code>","text":""},{"location":"Notes/ML/Clustering/#parameters-of-dbscan","title":"Parameters of <code>DBSCAN</code>","text":""},{"location":"Notes/ML/Clustering/#attributes-of-dbscan","title":"Attributes of <code>DBSCAN</code>","text":""},{"location":"Notes/ML/Decision_Trees/","title":"Decision Trees","text":"<p>Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation.</p> <p>For instance, in the example below, decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model.</p> <p></p> <p>Some advantages of decision trees are:</p> <ul> <li><p>Simple to understand and to interpret. Trees can be visualized.</p></li> <li><p>Requires little data preparation. Other techniques often require data normalization, dummy variables need to be created and blank values to be removed. Note however that this module does not support missing values.</p></li> <li><p>The cost of using the tree (i.e., predicting data) is logarithmic in the number of data points used to train the tree.</p></li> <li><p>Able to handle both numerical and categorical data. However scikit-learn implementation does not support categorical variables for now. Other techniques are usually specialized in analyzing datasets that have only one type of variable. <li><p>Able to handle multi-output problems.</p></li> <li><p>Uses a white box model. If a given situation is observable in a model, the explanation for the condition is easily explained by boolean logic. By contrast, in a black box model (e.g., in an artificial neural network), results may be more difficult to interpret.</p></li> <li><p>Possible to validate a model using statistical tests. That makes it possible to account for the reliability of the model.</p></li> <li><p>Performs well even if its assumptions are somewhat violated by the true model from which the data were generated.</p></li> <p>The disadvantages of decision trees include:</p> <ul> <li><p>Decision-tree learners can create over-complex trees that do not generalize the data well. This is called overfitting. Mechanisms such as pruning, setting the minimum number of samples required at a leaf node or setting the maximum depth of the tree are necessary to avoid this problem.</p></li> <li><p>Decision trees can be unstable because small variations in the data might result in a completely different tree being generated. This problem is mitigated by using decision trees within an ensemble.</p></li> <li><p>Predictions of decision trees are neither smooth nor continuous, but piecewise constant approximations as seen in the above figure. Therefore, they are not good at extrapolation.</p></li> <li><p>The problem of learning an optimal decision tree is known to be NP-complete under several aspects of optimality and even for simple concepts. Consequently, practical decision-tree learning algorithms are based on heuristic algorithms such as the greedy algorithm where locally optimal decisions are made at each node. Such algorithms cannot guarantee to return the globally optimal decision tree.  This can be mitigated by training multiple trees in an ensemble learner, where the features and samples are randomly sampled with replacement.</p></li> <li><p>There are concepts that are hard to learn because decision trees do not express them easily, such as XOR, parity or multiplexer problems.</p></li> <li><p>Decision tree learners create biased trees if some classes dominate. It is therefore recommended to balance the dataset prior to fitting with the decision tree.</p></li> </ul> <p><code>DecisionTreeClassifier</code> is a class capable of performing multi-class classification on a dataset.</p> <pre><code>from sklearn.datasets import load_iris\nfrom sklearn import tree\niris = load_iris()\nX, y = iris.data, iris.target\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n</code></pre> <p>Once trained, you can plot the tree with the <code>plot_tree</code> function:</p> <pre><code>import matplotlib.pyplot as plt\nplt.rcdefaults()\nplt.figure(figsize=(10,10))\ntree.plot_tree(clf, filled=True);\n</code></pre> <p>We can also export the tree in <code>Graphviz</code> format using the <code>export_graphviz</code> exporter.</p> <pre><code>import graphviz \ndot_data = tree.export_graphviz(clf, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph.render(\"iris\") \n</code></pre> <pre>\n<code>'iris.pdf'</code>\n</pre> <pre><code>dot_data = tree.export_graphviz(clf, out_file=None, \n                     feature_names=iris.feature_names,  \n                     class_names=iris.target_names,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph \n</code></pre> Tree 0 petal width (cm) \u2264 0.8 gini = 0.667 samples = 150 value = [50, 50, 50] class = setosa 1 gini = 0.0 samples = 50 value = [50, 0, 0] class = setosa 0-&gt;1 True 2 petal width (cm) \u2264 1.75 gini = 0.5 samples = 100 value = [0, 50, 50] class = versicolor 0-&gt;2 False 3 petal length (cm) \u2264 4.95 gini = 0.168 samples = 54 value = [0, 49, 5] class = versicolor 2-&gt;3 12 petal length (cm) \u2264 4.85 gini = 0.043 samples = 46 value = [0, 1, 45] class = virginica 2-&gt;12 4 petal width (cm) \u2264 1.65 gini = 0.041 samples = 48 value = [0, 47, 1] class = versicolor 3-&gt;4 7 petal width (cm) \u2264 1.55 gini = 0.444 samples = 6 value = [0, 2, 4] class = virginica 3-&gt;7 5 gini = 0.0 samples = 47 value = [0, 47, 0] class = versicolor 4-&gt;5 6 gini = 0.0 samples = 1 value = [0, 0, 1] class = virginica 4-&gt;6 8 gini = 0.0 samples = 3 value = [0, 0, 3] class = virginica 7-&gt;8 9 petal length (cm) \u2264 5.45 gini = 0.444 samples = 3 value = [0, 2, 1] class = versicolor 7-&gt;9 10 gini = 0.0 samples = 2 value = [0, 2, 0] class = versicolor 9-&gt;10 11 gini = 0.0 samples = 1 value = [0, 0, 1] class = virginica 9-&gt;11 13 sepal width (cm) \u2264 3.1 gini = 0.444 samples = 3 value = [0, 1, 2] class = virginica 12-&gt;13 16 gini = 0.0 samples = 43 value = [0, 0, 43] class = virginica 12-&gt;16 14 gini = 0.0 samples = 2 value = [0, 0, 2] class = virginica 13-&gt;14 15 gini = 0.0 samples = 1 value = [0, 1, 0] class = versicolor 13-&gt;15 <p>Alternatively, the tree can also be exported in textual format with the function export_text</p> <pre><code>r = tree.export_text(clf, feature_names=iris.feature_names)\nprint(r)\n</code></pre> <pre>\n<code>|--- petal width (cm) &lt;= 0.80\n|   |--- class: 0\n|--- petal width (cm) &gt;  0.80\n|   |--- petal width (cm) &lt;= 1.75\n|   |   |--- petal length (cm) &lt;= 4.95\n|   |   |   |--- petal width (cm) &lt;= 1.65\n|   |   |   |   |--- class: 1\n|   |   |   |--- petal width (cm) &gt;  1.65\n|   |   |   |   |--- class: 2\n|   |   |--- petal length (cm) &gt;  4.95\n|   |   |   |--- petal width (cm) &lt;= 1.55\n|   |   |   |   |--- class: 2\n|   |   |   |--- petal width (cm) &gt;  1.55\n|   |   |   |   |--- petal length (cm) &lt;= 5.45\n|   |   |   |   |   |--- class: 1\n|   |   |   |   |--- petal length (cm) &gt;  5.45\n|   |   |   |   |   |--- class: 2\n|   |--- petal width (cm) &gt;  1.75\n|   |   |--- petal length (cm) &lt;= 4.85\n|   |   |   |--- sepal width (cm) &lt;= 3.10\n|   |   |   |   |--- class: 2\n|   |   |   |--- sepal width (cm) &gt;  3.10\n|   |   |   |   |--- class: 1\n|   |   |--- petal length (cm) &gt;  4.85\n|   |   |   |--- class: 2\n\n</code>\n</pre> <p>Decision trees can also be applied to regression problems, using the <code>DecisionTreeRegressor</code> class.</p> <p>In general, the run time cost to construct a balanced binary tree is \\(O(n_{samples}n_{features}\\log(n_{samples}))\\) and query time \\(O(\\log(n_{samples}))\\). Although the tree construction algorithm attempts to generate balanced trees, they will not always be balanced. Assuming that the subtrees remain approximately balanced, the cost at each node consists of searching through \\(O(n_{features})\\) to find the feature that offers the largest reduction in the impurity criterion, e.g. log loss (which is equivalent to an information gain). This has a cost of \\(O(n_{features}n_{samples}\\log(n_{samples}))\\) at each node, leading to a total cost over the entire trees (by summing the cost at each node) of \\(O(n_{features}n_{samples}^{2}\\log(n_{samples}))\\).</p> <p>ID3 (Iterative Dichotomiser 3) was developed in 1986 by Ross Quinlan. The algorithm creates a multiway tree, finding for each node (i.e. in a greedy manner) the categorical feature that will yield the largest information gain for categorical targets. Trees are grown to their maximum size and then a pruning step is usually applied to improve the ability of the tree to generalize to unseen data.</p> <p>C4.5 is the successor to ID3 and removed the restriction that features must be categorical by dynamically defining a discrete attribute (based on numerical variables) that partitions the continuous attribute value into a discrete set of intervals. C4.5 converts the trained trees (i.e. the output of the ID3 algorithm) into sets of if-then rules. These accuracy of each rule is then evaluated to determine the order in which they should be applied. Pruning is done by removing a rule\u2019s precondition if the accuracy of the rule improves without it.</p> <p>C5.0 is Quinlan\u2019s latest version release under a proprietary license. It uses less memory and builds smaller rulesets than C4.5 while being more accurate.</p> <p>CART (Classification and Regression Trees) is very similar to C4.5, but it differs in that it supports numerical target variables (regression) and does not compute rule sets. CART constructs binary trees using the feature and threshold that yield the largest information gain at each node.</p> <p>scikit-learn uses an optimized version of the CART algorithm.</p> <p>Here are some parameters of the DecisionTreeClassifier: * criterion: {\u201cgini\u201d, \u201centropy\u201d, \u201clog_loss\u201d}, default=\u201dgini\u201d</p> <pre><code>The function to measure the quality of a split. Supported criteria are \u201cgini\u201d for the Gini impurity and \u201clog_loss\u201d and \u201centropy\u201d both for the Shannon information gain\n</code></pre> <ul> <li> <p>splitter: {\u201cbest\u201d, \u201crandom\u201d}, default=\u201dbest\u201d</p> <p>The strategy to choose the best split. Supported strategies are \u201cbest\u201d to choose the best split and \u201crandom\u201d to choose at random. * max_depth: int, default=None</p> <p>The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than <code>min_samples_split</code> samples. * min_samples_split: int, default=2</p> <p>The minimum number of samples required to split an internal node:</p> <ul> <li> <p>If int, then consider <code>min_samples_split</code> as the minimum number.</p> </li> <li> <p>If float, then <code>min_samples_split</code> is a fraction and ceil(<code>min_samples_split</code> * n_samples) are the minimum number of samples for each split.</p> </li> <li>max_features: int, float or {\u201cauto\u201d, \u201csqrt\u201d, \u201clog2\u201d}, default=None</li> </ul> <p>The number of features to consider when looking for the best split:</p> <ul> <li> <p>If int, then consider <code>max_features</code> features at each split.</p> </li> <li> <p>If float, then <code>max_features</code> is a fraction and <code>int(max_features * n_features)</code> features are considered at each split.</p> </li> <li> <p>If \u201cauto\u201d, then <code>max_features=sqrt(n_features)</code>.</p> </li> <li> <p>If \u201csqrt\u201d, then <code>max_features=sqrt(n_features)</code>.</p> </li> <li> <p>If \u201clog2\u201d, then <code>max_features=log2(n_features)</code>.</p> </li> <li> <p>If None, then <code>max_features=n_features</code>.</p> </li> <li>max_leaf_nodes: int, default=None</li> </ul> <p>Grow a tree with <code>max_leaf_nodes</code> in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes. * min_impurity_split: float, default=0</p> <p>Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf. * class_weight: dict, list of dicts, \u201cbalanced\u201d, or None, default=None</p> <p>Weights associated with classes in the form <code>{class_label: weight}</code>. If not given, all classes are supposed to have weight one. The \u201cbalanced\u201d mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data.</p> </li> </ul> <p>Here are some attributes of the DecisionTreeClassifier: * classes_: array of shape = [n_classes] or a list of string labels</p> <pre><code>The classes labels (single output problem), or list of class labels (multi-output problem).\n</code></pre> <ul> <li> <p>feature_importances_: array of shape = [n_features]</p> <p>The feature importances. The higher, the more important the feature. * max_features_: int</p> <p>The inferred value of max_features. * n_classes_: int</p> <p>The number of classes.</p> </li> </ul> <p>The parameters of the <code>DecisionTreeRegressor</code> are the same as the <code>DecisionTreeClassifier</code> with some changes: * criterion: {\u201csquared_error\u201d, \u201cfriedman_mse\u201d, \u201cabsolute_error\u201d, \u201cpoisson\u201d}, default=\u201dsquared_error\u201d</p> <pre><code>\u201csquared_error\u201d for the mean squared error, which is equal to variance reduction as feature selection criterion and minimizes the L2 loss using the mean of each terminal node, \u201cfriedman_mse\u201d, which uses mean squared error with Friedman\u2019s improvement score for potential splits, \u201cabsolute_error\u201d for the mean absolute error, which minimizes the L1 loss using the median of each terminal node, and \u201cpoisson\u201d which uses reduction in Poisson deviance to find splits.\n</code></pre> <p>Same as the <code>DecisionTreeClassifier</code> except the <code>classes_</code> attribute.</p>"},{"location":"Notes/ML/Decision_Trees/#decision-trees","title":"Decision Trees","text":""},{"location":"Notes/ML/Decision_Trees/#classification","title":"Classification","text":""},{"location":"Notes/ML/Decision_Trees/#regression","title":"Regression","text":""},{"location":"Notes/ML/Decision_Trees/#complexity","title":"Complexity","text":""},{"location":"Notes/ML/Decision_Trees/#tree-algorithms","title":"Tree Algorithms","text":""},{"location":"Notes/ML/Decision_Trees/#id3","title":"ID3","text":""},{"location":"Notes/ML/Decision_Trees/#c45","title":"C4.5","text":""},{"location":"Notes/ML/Decision_Trees/#c50","title":"C5.0","text":""},{"location":"Notes/ML/Decision_Trees/#cart","title":"CART","text":""},{"location":"Notes/ML/Decision_Trees/#decisiontreeclassifier","title":"DecisionTreeClassifier","text":""},{"location":"Notes/ML/Decision_Trees/#parameters-of-decisiontreeclassifier","title":"Parameters of DecisionTreeClassifier","text":""},{"location":"Notes/ML/Decision_Trees/#attributes-of-decisiontreeclassifier","title":"Attributes of DecisionTreeClassifier","text":""},{"location":"Notes/ML/Decision_Trees/#decisiontreeregressor","title":"DecisionTreeRegressor","text":""},{"location":"Notes/ML/Decision_Trees/#parameters-of-decisiontreeregressor","title":"Parameters of DecisionTreeRegressor","text":""},{"location":"Notes/ML/Decision_Trees/#attributes-of-decisiontreeregressor","title":"Attributes of DecisionTreeRegressor","text":""},{"location":"Notes/ML/Ensemble_Learning/","title":"Ensemble Learning","text":"<p>The goal of ensemble methods is to combine the predictions of several base estimators built with a given learning algorithm in order to improve generalizability / robustness over a single estimator.</p> <p>Two families of ensemble methods are usually distinguished:</p> <ul> <li> <p>In averaging methods, the driving principle is to build several estimators independently and then to average their predictions. On average, the combined estimator is usually better than any of the single base estimator because its variance is reduced.</p> <p>Examples: Bagging methods, Forests of randomized trees etc.</p> </li> <li> <p>By contrast, in boosting methods, base estimators are built sequentially and one tries to reduce the bias of the combined estimator. The motivation is to combine several weak models to produce a powerful ensemble.</p> <p>Examples: AdaBoost, Gradient Tree Boosting</p> </li> </ul> <p>In ensemble algorithms, bagging methods form a class of algorithms which build several instances of a black-box estimator on random subsets of the original training set and then aggregate their individual predictions to form a final prediction. These methods are used as a way to reduce the variance of a base estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.</p> <p>As they provide a way to reduce overfitting, bagging methods work best with strong and complex models (e.g., fully developed decision trees), in contrast with boosting methods which usually work best with weak models (e.g., shallow decision trees).</p> <p>Bagging methods come in many flavours but mostly differ from each other by the way they draw random subsets of the training set:</p> <ul> <li> <p>When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting.</p> </li> <li> <p>When samples are drawn with replacement, then the method is known as Bagging.</p> </li> <li> <p>When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces.</p> </li> <li> <p>Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches.</p> </li> </ul> <p>In scikit-learn, bagging methods are offered as a unified <code>BaggingClassifier</code> meta-estimator (resp. <code>BaggingRegressor</code>), taking as input a user-specified base estimator along with parameters specifying the strategy to draw random subsets. In particular, <code>max_samples</code> and <code>max_features</code> control the size of the subsets (in terms of samples and features), while <code>bootstrap</code> and <code>bootstrap_features</code> control whether samples and features are drawn with or without replacement. When using a subset of the available samples the generalization accuracy can be estimated with the out-of-bag samples by setting <code>oob_score=True</code>.</p> <pre><code>from sklearn.ensemble import BaggingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nbagging = BaggingClassifier(KNeighborsClassifier(),\n                            max_samples=0.5, max_features=0.5)\n</code></pre> <p>For details see the papers:</p> <p>1</p> <p>2</p> <p>3</p> <p>4</p> <p>The <code>sklearn.ensemble</code> module includes two averaging algorithms based on randomized decision trees: the RandomForest algorithm and the Extra-Trees method. Both algorithms are perturb-and-combine techniques specifically designed for trees. The prediction of the ensemble is given as the averaged prediction of the individual classifiers.</p> <p>In random forests, each tree in the ensemble is built from a sample drawn with replacement (i.e., a bootstrap sample) from the training set. Furthermore, when splitting each node during the construction of a tree, the best split is found either from all input features or a random subset of size <code>max_features</code>.</p> <p>The purpose of these two sources of randomness is to decrease the variance of the forest estimator. The injected randomness in forests yield decision trees with somewhat decoupled prediction errors. By taking an average of those predictions, some errors can cancel out. Random forests achieve a reduced variance by combining diverse trees, sometimes at the cost of a slight increase in bias.</p> <p>For details, see the paper.</p> <p>In scikit-learn, the <code>RandomForestClassifier</code> and <code>RandomForestRegressor</code> estimators are available.</p> <p>In extremely randomized trees, randomness goes one step further in the way splits are computed. As in random forests, a random subset of candidate features is used, but instead of looking for the most discriminative thresholds, thresholds are drawn at random for each candidate feature and the best of these randomly-generated thresholds is picked as the splitting rule. This usually allows to reduce the variance of the model a bit more, at the expense of a slightly greater increase in bias.</p> <pre><code>from sklearn.model_selection import cross_val_score\nfrom sklearn.datasets import make_blobs\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nX, y = make_blobs(n_samples=10000, n_features=10, centers=100,\n    random_state=0)\n\nclf = DecisionTreeClassifier(max_depth=None, min_samples_split=2,\n    random_state=0)\nscores = cross_val_score(clf, X, y, cv=5)\nscores.mean()\n</code></pre> <pre>\n<code>0.9823000000000001</code>\n</pre> <pre><code>clf = RandomForestClassifier(n_estimators=10, max_depth=None,\n    min_samples_split=2, random_state=0)\nscores = cross_val_score(clf, X, y, cv=5)\nscores.mean()\n</code></pre> <pre>\n<code>0.9997</code>\n</pre> <pre><code>clf = ExtraTreesClassifier(n_estimators=10, max_depth=None,\n    min_samples_split=2, random_state=0)\nscores = cross_val_score(clf, X, y, cv=5)\nscores.mean()\n</code></pre> <pre>\n<code>1.0</code>\n</pre> <p>The main parameters to adjust when using these methods is <code>n_estimators</code> and <code>max_features</code>. The former is the number of trees in the forest. The larger the better, but also the longer it will take to compute. In addition, note that results will stop getting significantly better beyond a critical number of trees. The latter is the size of the random subsets of features to consider when splitting a node. The lower the greater the reduction of variance, but also the greater the increase in bias. Empirical good default values are <code>max_features=1.0</code>or equivalently <code>max_features=None</code> (always considering all features instead of a random subset) for regression problems, and <code>max_features=\"sqrt\"</code> (using a random subset of size <code>sqrt(n_features)</code>) for classification tasks (where n_features is the number of features in the data). The default value of <code>max_features=1.0</code> is equivalent to bagged trees and more randomness can be achieved by setting smaller values.</p> <p>Good results are often achieved when setting <code>max_depth=None</code> in combination with <code>min_samples_split=2</code> (i.e., when fully developing the trees). When using bootstrap sampling the generalization error can be estimated on the left out or out-of-bag samples. This can be enabled by setting <code>oob_score=True</code>.</p> <p>The size of the model with the default parameters is \\(O( M * N * log (N) )\\), where \\(M\\) is the number of trees and \\(N\\) is the number of samples.</p> <p>If <code>n_jobs=k</code> then computations are partitioned into <code>k</code> jobs, and run on <code>k</code> cores of the machine. If <code>n_jobs=-1</code> then all cores available on the machine are used. Note that because of inter-process communication overhead, the speedup might not be linear (i.e., using <code>k</code> jobs will unfortunately not be <code>k</code> times as fast). </p> <p>The relative rank (i.e. depth) of a feature used as a decision node in a tree can be used to assess the relative importance of that feature with respect to the predictability of the target variable. Features used at the top of the tree contribute to the final prediction decision of a larger fraction of the input samples. The expected fraction of the samples they contribute to can thus be used as an estimate of the relative importance of the features. In scikit-learn, the fraction of samples a feature contributes to is combined with the decrease in impurity from splitting them to create a normalized estimate of the predictive power of that feature.</p> <p>In practice those estimates are stored as an attribute named <code>feature_importances_</code> on the fitted model. This is an array with shape <code>(n_features,)</code> whose values are positive and sum to 1.0. The higher the value, the more important is the contribution of the matching feature to the prediction function.</p> <p>You can have a look at this paper for more details.</p> <p>The idea behind the <code>VotingClassifier</code> is to combine conceptually different machine learning classifiers and use a majority vote or the average predicted probabilities (soft vote) to predict the class labels. Such a classifier can be useful for a set of equally well performing model in order to balance out their individual weaknesses.</p> <p>In majority voting, the predicted class label for a particular sample is the class label that represents the majority (mode) of the class labels predicted by each individual classifier. This can be done by using <code>voting='hard'</code> in the <code>VotingClassifier</code> constructor.</p> <pre><code>from sklearn import datasets\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\n\niris = datasets.load_iris()\nX, y = iris.data[:, 1:3], iris.target\n\nclf1 = LogisticRegression(random_state=1)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=1)\nclf3 = GaussianNB()\n\neclf = VotingClassifier(\n    estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    voting='hard')\n\nfor clf, label in zip([clf1, clf2, clf3, eclf], ['Logistic Regression', 'Random Forest', 'naive Bayes', 'Ensemble']):\n    scores = cross_val_score(clf, X, y, scoring='accuracy', cv=5)\n    print(\"Accuracy: %0.2f (+/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))\n</code></pre> <pre>\n<code>Accuracy: 0.95 (+/- 0.04) [Logistic Regression]\nAccuracy: 0.94 (+/- 0.04) [Random Forest]\nAccuracy: 0.91 (+/- 0.04) [naive Bayes]\nAccuracy: 0.95 (+/- 0.04) [Ensemble]\n</code>\n</pre> <p>In contrast to majority voting (hard voting), soft voting returns the class label as argmax of the sum of predicted probabilities.</p> <p>Specific weights can be assigned to each classifier via the weights parameter. When weights are provided, the predicted class probabilities for each classifier are collected, multiplied by the classifier weight, and averaged. The final class label is then derived from the class label with the highest average probability.</p> <pre><code>from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom itertools import product\nfrom sklearn.ensemble import VotingClassifier\n\n# Loading some example data\niris = datasets.load_iris()\nX = iris.data[:, [0, 2]]\ny = iris.target\n\n# Training classifiers\nclf1 = DecisionTreeClassifier(max_depth=4)\nclf2 = KNeighborsClassifier(n_neighbors=7)\nclf3 = SVC(kernel='rbf', probability=True)\neclf = VotingClassifier(estimators=[('dt', clf1), ('knn', clf2), ('svc', clf3)],\n                        voting='soft', weights=[2, 1, 2])\n\nfor clf, label in zip([clf1, clf2, clf3, eclf], ['Decision Tree', 'Neighnours', 'SVM', 'Ensemble']):\n    scores = cross_val_score(clf, X, y, scoring='accuracy', cv=5)\n    print(\"Accuracy: %0.2f (+/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))\n</code></pre> <pre>\n<code>Accuracy: 0.95 (+/- 0.03) [Decision Tree]\nAccuracy: 0.94 (+/- 0.04) [Neighnours]\nAccuracy: 0.95 (+/- 0.03) [SVM]\nAccuracy: 0.93 (+/- 0.07) [Ensemble]\n</code>\n</pre> <p>The <code>VotingClassifier</code> can also be used together with <code>GridSearchCV</code> in order to tune the hyperparameters of the individual estimators:</p> <pre><code>from sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nclf1 = LogisticRegression(random_state=1)\nclf2 = RandomForestClassifier(random_state=1)\nclf3 = GaussianNB()\neclf = VotingClassifier(\n    estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    voting='soft'\n)\n\nparams = {'lr__C': [1.0, 100.0], 'rf__n_estimators': [20, 200]}\n\ngrid = GridSearchCV(estimator=eclf, param_grid=params, cv=5)\ngrid = grid.fit(iris.data, iris.target)\n</code></pre> <p>The idea behind the <code>VotingRegressor</code> is to combine conceptually different machine learning regressors and return the average predicted values. Such a regressor can be useful for a set of equally well performing models in order to balance out their individual weaknesses.</p> <pre><code>from sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import VotingRegressor\n\n# Loading some example data\nX, y = load_diabetes(return_X_y=True)\n\n# Training classifiers\nreg1 = GradientBoostingRegressor(random_state=1)\nreg2 = RandomForestRegressor(random_state=1)\nreg3 = LinearRegression()\nereg = VotingRegressor(estimators=[('gb', reg1), ('rf', reg2), ('lr', reg3)])\nereg = ereg.fit(X, y)\n</code></pre> <p></p> <p>Stacked generalization is a method for combining estimators to reduce their biases. More precisely, the predictions of each individual estimator are stacked together and used as input to a final estimator to compute the prediction. This final estimator is trained through cross-validation.</p> <p>The <code>StackingClassifier</code> and <code>StackingRegressor</code> provide such strategies which can be applied to classification and regression problems.</p> <p>The <code>estimators</code> parameter corresponds to the list of the estimators which are stacked together in parallel on the input data. It should be given as a list of names and estimators:</p> <pre><code>from sklearn.linear_model import RidgeCV, LassoCV\nfrom sklearn.neighbors import KNeighborsRegressor\nestimators = [('ridge', RidgeCV()),\n              ('lasso', LassoCV(random_state=42)),\n              ('knr', KNeighborsRegressor(n_neighbors=20,\n                                          metric='euclidean'))]\n</code></pre> <p>The <code>final_estimator</code> will use the predictions of the estimators as input. It needs to be a classifier or a regressor when using <code>StackingClassifier</code> or <code>StackingRegressor</code>, respectively:</p> <pre><code>from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import StackingRegressor\nfinal_estimator = GradientBoostingRegressor(\n    n_estimators=25, subsample=0.5, min_samples_leaf=25, max_features=1,\n    random_state=42)\nreg = StackingRegressor(\n    estimators=estimators,\n    final_estimator=final_estimator)\n</code></pre> <pre><code>from sklearn.datasets import load_diabetes\nX, y = load_diabetes(return_X_y=True)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    random_state=42)\nreg.fit(X_train, y_train)\n</code></pre> <pre>StackingRegressor(estimators=[('ridge', RidgeCV()),\n                              ('lasso', LassoCV(random_state=42)),\n                              ('knr',\n                               KNeighborsRegressor(metric='euclidean',\n                                                   n_neighbors=20))],\n                  final_estimator=GradientBoostingRegressor(max_features=1,\n                                                            min_samples_leaf=25,\n                                                            n_estimators=25,\n                                                            random_state=42,\n                                                            subsample=0.5))</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. <p>StackingRegressor<pre>StackingRegressor(estimators=[('ridge', RidgeCV()),\n                              ('lasso', LassoCV(random_state=42)),\n                              ('knr',\n                               KNeighborsRegressor(metric='euclidean',\n                                                   n_neighbors=20))],\n                  final_estimator=GradientBoostingRegressor(max_features=1,\n                                                            min_samples_leaf=25,\n                                                            n_estimators=25,\n                                                            random_state=42,\n                                                            subsample=0.5))</pre> <p>ridge RidgeCV<pre>RidgeCV()</pre> <p></p> lassoLassoCV<pre>LassoCV(random_state=42)</pre> knrKNeighborsRegressor<pre>KNeighborsRegressor(metric='euclidean', n_neighbors=20)</pre> <p></p> final_estimatorGradientBoostingRegressor<pre>GradientBoostingRegressor(max_features=1, min_samples_leaf=25, n_estimators=25,\n                          random_state=42, subsample=0.5)</pre> <p> </p> <p> </p> <p>During training, the estimators are fitted on the whole training data <code>X_train</code>. They will be used when calling predict or <code>predict_proba</code>. To generalize and avoid over-fitting, the <code>final_estimator</code> is trained on out-samples using sklearn.<code>model_selection.cross_val_predict</code> internally.</p> <p>For <code>StackingClassifier</code>, note that the output of the estimators is controlled by the parameter <code>stack_method</code> and it is called by each estimator. This parameter is either a string, being estimator method names, or <code>'auto'</code> which will automatically identify an available method depending on the availability, tested in the order of preference: <code>predict_proba</code>, <code>decision_function</code> and <code>predict</code>.</p> <p>Note that it is also possible to get the output of the stacked <code>estimators</code> using the <code>transform</code> method:</p> <pre><code>reg.transform(X_test[:5])\n</code></pre> <pre>\n<code>array([[142.36209608, 138.30724927, 146.1       ],\n       [179.700576  , 182.89812552, 151.75      ],\n       [139.89817956, 132.46803343, 158.25      ],\n       [286.95180286, 292.65695767, 225.4       ],\n       [126.88317154, 124.1215975 , 164.65      ]])</code>\n</pre> <p>In practice, a stacking predictor predicts as good as the best predictor of the base layer and even sometimes outperforms it by combining the different strengths of the these predictors. However, training a stacking predictor is computationally expensive.</p> <p>Multiple stacking layers can be achieved by assigning <code>final_estimator</code> to a <code>StackingClassifier</code> or <code>StackingRegressor</code>:</p> <pre><code>final_layer_rfr = RandomForestRegressor(\n    n_estimators=10, max_features=1, max_leaf_nodes=5,random_state=42)\nfinal_layer_gbr = GradientBoostingRegressor(\n    n_estimators=10, max_features=1, max_leaf_nodes=5,random_state=42)\nfinal_layer = StackingRegressor(\n    estimators=[('rf', final_layer_rfr),\n                ('gbrt', final_layer_gbr)],\n    final_estimator=RidgeCV()\n    )\nmulti_layer_regressor = StackingRegressor(\n    estimators=[('ridge', RidgeCV()),\n                ('lasso', LassoCV(random_state=42)),\n                ('knr', KNeighborsRegressor(n_neighbors=20,\n                                            metric='euclidean'))],\n    final_estimator=final_layer\n)\nmulti_layer_regressor \n</code></pre> <pre>StackingRegressor(estimators=[('ridge', RidgeCV()),\n                              ('lasso', LassoCV(random_state=42)),\n                              ('knr',\n                               KNeighborsRegressor(metric='euclidean',\n                                                   n_neighbors=20))],\n                  final_estimator=StackingRegressor(estimators=[('rf',\n                                                                 RandomForestRegressor(max_features=1,\n                                                                                       max_leaf_nodes=5,\n                                                                                       n_estimators=10,\n                                                                                       random_state=42)),\n                                                                ('gbrt',\n                                                                 GradientBoostingRegressor(max_features=1,\n                                                                                           max_leaf_nodes=5,\n                                                                                           n_estimators=10,\n                                                                                           random_state=42))],\n                                                    final_estimator=RidgeCV()))</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org. <p>StackingRegressor<pre>StackingRegressor(estimators=[('ridge', RidgeCV()),\n                              ('lasso', LassoCV(random_state=42)),\n                              ('knr',\n                               KNeighborsRegressor(metric='euclidean',\n                                                   n_neighbors=20))],\n                  final_estimator=StackingRegressor(estimators=[('rf',\n                                                                 RandomForestRegressor(max_features=1,\n                                                                                       max_leaf_nodes=5,\n                                                                                       n_estimators=10,\n                                                                                       random_state=42)),\n                                                                ('gbrt',\n                                                                 GradientBoostingRegressor(max_features=1,\n                                                                                           max_leaf_nodes=5,\n                                                                                           n_estimators=10,\n                                                                                           random_state=42))],\n                                                    final_estimator=RidgeCV()))</pre> <p>ridge RidgeCV<pre>RidgeCV()</pre> <p></p> lassoLassoCV<pre>LassoCV(random_state=42)</pre> knrKNeighborsRegressor<pre>KNeighborsRegressor(metric='euclidean', n_neighbors=20)</pre> <p></p> final_estimatorrfRandomForestRegressor<pre>RandomForestRegressor(max_features=1, max_leaf_nodes=5, n_estimators=10,\n                      random_state=42)</pre>gbrtGradientBoostingRegressor<pre>GradientBoostingRegressor(max_features=1, max_leaf_nodes=5, n_estimators=10,\n                          random_state=42)</pre>final_estimatorRidgeCV<pre>RidgeCV()</pre> <p> </p> <p> </p> <pre><code>multi_layer_regressor.fit(X_train, y_train)\n\nprint('R2 score: {:.2f}'\n      .format(multi_layer_regressor.score(X_test, y_test)))\n</code></pre> <pre>\n<code>R2 score: 0.53\n</code>\n</pre> <p>The module sklearn.ensemble includes the popular boosting algorithm <code>AdaBoost</code>.</p> <p>The core principle of AdaBoost is to fit a sequence of weak learners (i.e., models that are only slightly better than random guessing, such as small decision trees) on repeatedly modified versions of the data. The predictions from all of them are then combined through a weighted majority vote (or sum) to produce the final prediction. The data modifications at each so-called boosting iteration consist of applying weights \\(w_1, w_2, \\ldots, w_N\\)  to each of the training samples. Initially, those weights are all set to \\(1/N\\), so that the first step simply trains a weak learner on the original data. For each successive iteration, the sample weights are individually modified and the learning algorithm is reapplied to the reweighted data. At a given step, those training examples that were incorrectly predicted by the boosted model induced at the previous step have their weights increased, whereas the weights are decreased for those that were predicted correctly. As iterations proceed, examples that are difficult to predict receive ever-increasing influence. Each subsequent weak learner is thereby forced to concentrate on the examples that are missed by the previous ones in the sequence.</p> <p></p> <p>AdaBoost can be used both for classification and regression problems:</p> <ul> <li> <p>For multi-class classification, <code>AdaBoostClassifier</code> implements AdaBoost-SAMME and AdaBoost-SAMME.R.     The paper can be found here.</p> </li> <li> <p>For regression, <code>AdaBoostRegressor</code> implements AdaBoost.R2.     The paper can be found here.</p> </li> </ul> <p>The number of weak learners is controlled by the parameter <code>n_estimators</code>. The <code>learning_rate</code> parameter controls the contribution of the weak learners in the final combination. By default, weak learners are decision stumps. Different weak learners can be specified through the <code>base_estimator</code> parameter. The main parameters to tune to obtain good results are <code>n_estimators</code> and the complexity of the base estimators (e.g., its depth <code>max_depth</code> or minimum required number of samples to consider a split <code>min_samples_split</code>).</p> <p>Gradient Tree Boosting or Gradient Boosted Decision Trees (GBDT) is a generalization of boosting to arbitrary differentiable loss function. GBDT is an accurate and effective off-the-shelf procedure that can be used for both regression and classification problems in a variety of areas.</p> <p>The module <code>sklearn.ensemble</code> provides methods for both classification and regression via gradient boosted decision trees.</p> <p>The number of weak learners (i.e. regression trees) is controlled by the parameter <code>n_estimators</code>; The size of each tree can be controlled either by setting the tree depth via <code>max_depth</code> or by setting the number of leaf nodes via <code>max_leaf_nodes</code>. The <code>learning_rate</code> is a hyper-parameter in the range (0.0, 1.0] that controls overfitting via shrinkage.</p> <pre><code>import numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.datasets import make_friedman1\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nX, y = make_friedman1(n_samples=1200, random_state=0, noise=1.0)\nX_train, X_test = X[:200], X[200:]\ny_train, y_test = y[:200], y[200:]\nest = GradientBoostingRegressor(\n    n_estimators=100, learning_rate=0.1, max_depth=1, random_state=0,\n    loss='squared_error'\n).fit(X_train, y_train)\nmean_squared_error(y_test, est.predict(X_test))\n</code></pre> <pre>\n<code>5.009154859960321</code>\n</pre> <p>Both <code>GradientBoostingRegressor</code> and <code>GradientBoostingClassifier</code> support <code>warm_start=True</code> which allows you to add more estimators to an already fitted model.</p> <pre><code>_ = est.set_params(n_estimators=200, warm_start=True)  # set warm_start and new nr of trees\n_ = est.fit(X_train, y_train) # fit additional 100 trees to est\nmean_squared_error(y_test, est.predict(X_test))\n</code></pre> <pre>\n<code>3.840234741105356</code>\n</pre> <p>The size of the trees can be controlled either by setting the tree depth via <code>max_depth</code> or by setting the number of leaf nodes via <code>max_leaf_nodes</code>.</p> <p>If you specify <code>max_depth=h</code> then complete binary trees of depth <code>h</code> will be grown. Such trees will have (at most) <code>2**h</code> leaf nodes and <code>2**h - 1</code> split nodes.</p> <p>Alternatively, you can control the tree size by specifying the number of leaf nodes via the parameter <code>max_leaf_nodes</code>. In this case, trees will be grown using best-first search where nodes with the highest improvement in impurity will be expanded first. A tree with <code>max_leaf_nodes=k</code> has k<code>- 1</code> split nodes and thus can model interactions of up to order <code>max_leaf_nodes - 1</code> .</p> <p>Usually <code>max_leaf_nodes=k</code> gives comparable results to <code>max_depth=k-1</code> but is significantly faster to train at the expense of a slightly higher training error.</p> <p>The following loss functions are supported and can be specified using the parameter <code>loss</code>:</p> <ol> <li> <p>Regression</p> <ul> <li> <p>Squared error (<code>'squared_error'</code>): The natural choice for regression due to its superior computational properties. The initial model is given by the mean of the target values.</p> </li> <li> <p>Least absolute deviation (<code>'lad'</code>): A robust loss function for regression. The initial model is given by the median of the target values.</p> </li> <li> <p>Huber (<code>'huber'</code>): Another robust loss function that combines least squares and least absolute deviation; use <code>alpha</code> to control the sensitivity with regards to outliers.</p> </li> <li> <p>Quantile (<code>'quantile'</code>): A loss function for quantile regression. Use <code>0 &lt; alpha &lt; 1</code> to specify the quantile. This loss function can be used to create prediction intervals</p> </li> </ul> </li> </ol> <ol> <li> <p>Classification</p> <ul> <li> <p>Binary log-loss (<code>'log-loss'</code>): The binomial negative log-likelihood loss function for binary classification. It provides probability estimates. The initial model is given by the log odds-ratio.</p> </li> <li> <p>Multi-class log-loss (<code>'log-loss'</code>): The multinomial negative log-likelihood loss function for multi-class classification with <code>n_classes</code> mutually exclusive classes. It provides probability estimates. The initial model is given by the prior probability of each class. At each iteration <code>n_classes</code> regression trees have to be constructed which makes GBRT rather inefficient for data sets with a large number of classes.</p> </li> <li> <p>Exponential loss (<code>'exponential'</code>): The same loss function as <code>AdaBoostClassifier</code>. Less robust to mislabeled examples than <code>'log-loss'</code>; can only be used for binary classification.</p> </li> </ul> </li> </ol> <p>Scikit-learn provides a histogram-based gradient boosting method called <code>HistGradientBoostingRegressor</code> or <code>HistGradientBoostingClassifier</code> based on LightGBM.</p> <p>These histogram-based estimators can be orders of magnitude faster than GradientBoostingClassifier and GradientBoostingRegressor when the number of samples is larger than tens of thousands of samples.</p> <p>They also have built-in support for missing values, which avoids the need for an imputer.</p> <p>These fast estimators first bin the input samples X into integer-valued bins (typically 256 bins) which tremendously reduces the number of splitting points to consider, and allows the algorithm to leverage integer-based data structures (histograms) instead of relying on sorted continuous values when building the trees. The API of these estimators is slightly different, and some of the features from <code>GradientBoostingClassifier</code> and <code>GradientBoostingRegressor</code> are not yet supported, for instance some loss functions.</p> <p>The <code>n_estimators</code> parameters is changed with <code>max_iter</code> while most of the other parameters are the same as <code>GradientBoostingClassifier</code> and <code>GradientBoostingRegressor</code>.</p> <pre><code>from sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.datasets import make_hastie_10_2\n\nX, y = make_hastie_10_2(random_state=0)\nX_train, X_test = X[:2000], X[2000:]\ny_train, y_test = y[:2000], y[2000:]\n\nclf = HistGradientBoostingClassifier(max_iter=100).fit(X_train, y_train)\nclf.score(X_test, y_test)\n</code></pre> <pre>\n<code>0.8965</code>\n</pre> <pre><code>clf = RandomForestClassifier(n_estimators=100).fit(X_train, y_train)\nclf.score(X_test, y_test)\n</code></pre> <pre>\n<code>0.8715</code>\n</pre> <p>Available losses for regression are \u2018squared_error\u2019, \u2018absolute_error\u2019, which is less sensitive to outliers, and \u2018poisson\u2019, which is well suited to model counts and frequencies. For classification, \u2018log_loss\u2019 is the only option. For binary classification it uses the binary log loss, also kown as binomial deviance or binary cross-entropy. For <code>n_classes &gt;= 3</code>, it uses the multi-class log loss function, with multinomial deviance and categorical cross-entropy as alternative names. The appropriate loss version is selected based on <code>y</code> passed to <code>fit</code>.</p> <p>The size of the trees can be controlled through the <code>max_leaf_nodes</code>, <code>max_depth</code>, and <code>min_samples_leaf</code> parameters.</p> <p>The number of bins used to bin the data is controlled with the <code>max_bins</code> parameter. Using less bins acts as a form of regularization. It is generally recommended to use as many bins as possible, which is the default.</p> <p><code>HistGradientBoostingClassifier</code> and <code>HistGradientBoostingRegressor</code> have built-in support for missing values (NaNs).</p> <p>During training, the tree grower learns at each split point whether samples with missing values should go to the left or right child, based on the potential gain. When predicting, samples with missing values are assigned to the left or right child consequently.</p> <pre><code>X = np.array([0, np.nan, 1, 2, np.nan]).reshape(-1, 1)\ny = [0, 1, 0, 0, 1]\ngbdt = HistGradientBoostingClassifier(min_samples_leaf=1,\n                                      max_depth=2,\n                                      learning_rate=1,\n                                      max_iter=1).fit(X, y)\ngbdt.predict(X)\n</code></pre> <pre>\n<code>array([0, 1, 0, 0, 1])</code>\n</pre> <p>If no missing values were encountered for a given feature during training, then samples with missing values are mapped to whichever child has the most samples.</p> <p><code>HistGradientBoostingClassifier</code> and <code>HistGradientBoostingRegressor</code> sample support weights during fit.</p> <p>The following toy example demonstrates how the model ignores the samples with zero sample weights:</p> <pre><code>X = [[1, 0],\n     [1, 0],\n     [1, 0],\n     [0, 1]]\ny = [0, 0, 1, 0]\n# ignore the first 2 training samples by setting their weight to 0\nsample_weight = [0, 0, 1, 1]\ngb = HistGradientBoostingClassifier(min_samples_leaf=1)\ngb.fit(X, y, sample_weight=sample_weight)\n\nprint(gb.predict([[1, 0]]))\n\ngb.predict_proba([[1, 0]])[0, 1]\n</code></pre> <pre>\n<code>[1]\n</code>\n</pre> <pre>\n<code>0.9990209190235209</code>\n</pre> <p>As you can see, the <code>[1, 0]</code> is comfortably classified as 1 since the first two samples are ignored due to their sample weights.</p> <p>Implementation detail: taking sample weights into account amounts to multiplying the gradients (and the hessians) by the sample weights</p> <p>Depending on the problem at hand, you may have prior knowledge indicating that a given feature should in general have a positive (or negative) effect on the target value. For example, all else being equal, a higher credit score should increase the probability of getting approved for a loan. Monotonic constraints allow you to incorporate such prior knowledge into the model.</p> <p>A positive monotonic constraint is a constraint of the form: \\(\\(x_1 \\leq x_1' \\implies F(x_1, x_2) \\leq F(x_1', x_2)\\)\\) where  is the predictor with two features.</p> <p>Similarly, a negative monotonic constraint is of the form: \\(\\(x_1 \\leq x_1' \\implies F(x_1, x_2) \\geq F(x_1', x_2)\\)\\)</p> <p>You can specify a monotonic constraint on each feature using the <code>monotonic_cst</code> parameter. For each feature, a value of 0 indicates no constraint, while -1 and 1 indicate a negative and positive constraint, respectively:</p> <pre><code>from sklearn.ensemble import HistGradientBoostingRegressor\n\n# positive, negative, and no constraint on the 3 features\ngbdt = HistGradientBoostingRegressor(monotonic_cst=[1, -1, 0])\n</code></pre> <p>In a binary classification context, imposing a monotonic constraint means that the feature is supposed to have a positive / negative effect on the probability to belong to the positive class. Monotonic constraints are not supported for multiclass context.</p> <p>Here are some of the parameters of the <code>BaggingClassifier</code>: * base_estimator: object, default=None</p> <pre><code>The base estimator to fit on random subsets of the dataset. If None, then the base estimator is a `DecisionTreeClassifier`.\n</code></pre> <ul> <li> <p>n_estimators: int, default=10</p> <p>The number of base estimators in the ensemble. * max_samples: int or float, default=1.0</p> <p>The number of samples to draw from X to train each base estimator (with replacement by default).</p> <ul> <li> <p>If int, then draw <code>max_samples</code> samples.</p> </li> <li> <p>If float, then draw <code>max_samples * X.shape[0]</code> samples.</p> </li> <li>max_features: int or float, default=1.0</li> </ul> <p>The number of features to draw from X to train each base estimator (with replacement by default).</p> <ul> <li> <p>If int, then draw <code>max_features</code> features.</p> </li> <li> <p>If float, then draw <code>max_features * X.shape[1]</code> features.</p> </li> <li>bootstrap: boolean, default=True</li> </ul> <p>If True, bootstrap samples are used to train each base estimator. * bootstrap_features: boolean, default=False</p> <p>If True, bootstrap samples are used to train each base estimator. * oob_score: boolean, default=False</p> <p>If True, the base estimators are trained on the out-of-bag samples. Only available if <code>bootstrap=True</code>. * warm_start: boolean, default=False</p> <p>When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new ensemble.</p> </li> </ul> <p>Here are some of the attributes of the <code>BaggingClassifier</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li> <p>base_estimator_: estimator</p> <p>The base estimator from which the ensemble is grown. * n_features_: int</p> <p>The number of features when <code>fit</code> is performed. * n_classes_: int</p> <p>The number of classes when <code>fit</code> is performed. * classes_: ndarray of shape (n_classes,)</p> <p>The classes labels. * estimators_samples_: array-like of shape [n_estimators, n_samples]</p> <p>The subset of drawn samples (i.e., the training samples) for each base estimator. * estimators_features_: array-like of shape [n_estimators, n_features]</p> <p>The subset of drawn features for each base estimator. * oob_score_: float</p> <p>Score of the training dataset obtained using an out-of-bag estimate.    </p> </li> </ul> <p>Same as <code>BaggingClassifier</code>.</p> <p>Same as <code>BaggingClassifier</code> but excluding the classes related attributes.</p> <p>Here are some of the parameters of the <code>RandomForestClassifier</code>: * n_estimators: int, default=10</p> <pre><code>The number of trees in the forest.\n</code></pre> <ul> <li> <p>criterion: {\u201cgini\u201d, \u201centropy\u201d, \u201clog_loss\u201d}, default=\u201dgini\u201d</p> <p>The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain. * max_depth: int or None, default=None</p> <p>The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples. * max_leaf_nodes: int or None, default=None</p> <p>Grow trees with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes. * splitter: {\u201cbest\u201d, \u201crandom\u201d}, default=\u201dbest\u201d</p> <p>The strategy used to choose the best split. Valid options are \u201cbest\u201d to choose the best split and \u201crandom\u201d to choose at random. * min_samples_split: int, default=2</p> <p>The minimum number of samples required to split an internal node. - If int, then consider <code>min_samples_split</code> as the minimum number.</p> <ul> <li>If float, then <code>min_samples_split</code> is a fraction and <code>ceil(min_samples_split * n_samples)</code> are the minimum number of samples for each split.</li> <li>min_samples_leaf: int, default=1</li> </ul> <p>The minimum number of samples required to be at a leaf node. - If int, then consider <code>min_samples_leaf</code> as the minimum number.</p> <ul> <li>If float, then <code>min_samples_leaf</code> is a fraction and <code>ceil(min_samples_leaf * n_samples)</code> are the minimum number of samples for each node.</li> <li>min_weight_fraction_leaf: float, default=0.0</li> </ul> <p>The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. * max_features: \u201csqrt\u201d, \u201clog2\u201d, None}, int or float, default=\u201dsqrt\u201d</p> <p>The number of features to consider when looking for the best split: - If int, then consider <code>max_features</code> features at each split. - If float, then <code>max_features</code> is a fraction and <code>int(max_features * n_features)</code> features are considered at each split. - If \u201cauto\u201d, then <code>max_features=sqrt(n_features)</code>. - If \u201csqrt\u201d, then <code>max_features=sqrt(n_features)</code>. - If \u201clog2\u201d, then <code>max_features=log2(n_features)</code>. - If None, then <code>max_features=n_features</code>. * max_leaf_nodes: int or None, default=None</p> <p>Grow trees with <code>max_leaf_nodes</code> in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes. * bootstrap: boolean, default=True</p> <p>Whether bootstrap samples are used when building trees. * oob_score: boolean, default=False</p> <p>Whether to use out-of-bag samples to estimate the generalization accuracy. Only available if bootstrap=True. * warm_start: boolean, default=False</p> <p>When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new ensemble. * class_weight: dict, list of dicts, \u201cbalanced\u201d, or None, default=None</p> <p>Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y. - For multi-output, the weights are assigned to the first output of each base learner. - If \u201cbalanced\u201d, then classes are reweighted such that they sum to n_samples. - If a dict or list of dicts, then the weights are assigned to the keys. - If None, then all classes are supposed to have weight one. * max_sample_count: int, default=None</p> <p>If bootstrap is True, the number of samples to draw from X to train each base estimator.</p> <ul> <li> <p>If None (default), then draw X.shape[0] samples.</p> </li> <li> <p>If int, then draw max_samples samples.</p> </li> </ul> </li> <li> <p>If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].</p> </li> </ul> <p>Here are some of the attributes of the <code>RandomForestClassifier</code>: * n_estimators_: int</p> <pre><code>The number of trees in the forest.\n</code></pre> <ul> <li> <p>estimators_: list of estimators</p> <p>The collection of fitted base estimators. * classes_: ndarray of shape (n_classes,)</p> <p>The classes labels. * base_estimator_: estimator</p> <p>The base estimator from which the ensemble is grown. * oob_score_: float</p> <p>Score of the training dataset obtained using an out-of-bag estimate. * feature_importances_: ndarray of shape (n_features,)</p> <p>The feature importances attribute of the forest.</p> </li> </ul> <p>Same as <code>RandomForestClassifier</code> but with following exception/addition: * criterion: {\u201csquared_error\u201d, \u201cabsolute_error\u201d, \u201cpoisson\u201d}, default=\u201dsquared_error\u201d</p> <pre><code>The function to measure the quality of a split. Supported criteria are \u201csquared_error\u201d for the mean squared error, which is equal to variance reduction as feature selection criterion, \u201cabsolute_error\u201d for the mean absolute error, and \u201cpoisson\u201d which uses reduction in Poisson deviance to find splits. Training using \u201cabsolute_error\u201d is significantly slower than when using \u201csquared_error\u201d.\n</code></pre> <p>Same as <code>RandomForestClassifier</code> excluding the class related attributes.</p> <p>Same as <code>RandomForestClassifier</code>.</p> <p>Same as <code>RandomForestClassifier</code>.</p> <p>Same as <code>RandomForestRegressor</code>. But the <code>criterion</code> parameter does not support \u201cpoisson\u201d.</p> <p>Same as <code>RandomForestRegressor</code>.</p> <p>Here are some of the parameters of the <code>VotingClassifier</code>: * voting: {\u201chard\u201d, \u201csoft\u201d}, default=\u201dhard\u201d</p> <pre><code>If \u201chard\u201d, uses predicted class labels for majority voting.\nIf \u201csoft\u201d, predicts the class label that is most common in the majority class subset.\n</code></pre> <ul> <li> <p>estimators: tuples or list of estimator</p> <p>The base estimators for the voting classifier. If list of tuples, the weights of the estimators are used for voting. If list of estimators, the estimators are used for voting. * weights: array-like of shape (n_classifiers,), default=None</p> <p>Sequence of weights (float or int) to weight the occurrences of predicted class labels (hard voting) or class probabilities before averaging (soft voting). Uses uniform weights if None. * n_jobs: int, default=1</p> <p>The number of jobs to run in parallel for both <code>fit</code> and <code>predict</code>. If -1, then the number of jobs is set to the number of cores. * flatten_transform: boolean, default=True</p> <p>Affects shape of transform output only when voting=\u2019soft\u2019 If voting=\u2019soft\u2019 and flatten_transform=True, transform method returns matrix with shape (n_samples, n_classifiers * n_classes). If flatten_transform=False, it returns (n_classifiers, n_samples, n_classes).</p> </li> </ul> <p>Here are some of the attributes of the <code>VotingClassifier</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li> <p>named_estimators: dict of estimators</p> <pre><code>A dictionary mapping the names of the estimators to the fitted estimators.\n</code></pre> <ul> <li>le_: LabelEncoder</li> </ul> <p>The LabelEncoder used to encode the class labels. * classes_: ndarray of shape (n_classes,)</p> <p>The classes labels.</p> </li> </ul> <p>Here are some of the parameters of the <code>VotingRegressor</code>: * estimators: tuples or list of estimator</p> <pre><code>The base estimators for the voting classifier. If list of tuples, the weights of the estimators are used for voting. If list of estimators, the estimators are used for voting.\n</code></pre> <ul> <li> <p>weights: array-like of shape (n_classifiers,), default=None</p> <p>Sequence of weights (float or int) to weight the occurrences of predicted class labels (hard voting) or class probabilities before averaging (soft voting). Uses uniform weights if None. * n_jobs: int, default=1</p> <p>The number of jobs to run in parallel for both <code>fit</code> and <code>predict</code>. If -1, then the number of jobs is set to the number of cores.</p> </li> </ul> <p>Here are some of the attributes of the <code>VotingRegressor</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li>named_estimators: dict of estimators<pre><code>A dictionary mapping the names of the estimators to the fitted estimators.\n</code></pre> </li> </ul> <p>Here are some of the parameters of the <code>StackingClassifier</code>: * estimators: list of estimators</p> <pre><code>Base estimators which will be stacked together. Each element of the list is defined as a tuple of string (i.e. name) and an estimator instance. An estimator can be set to \u2018drop\u2019 using set_params.\n</code></pre> <ul> <li> <p>final_estimator: estimator, default=None</p> <p>The final estimator to be used in the StackingClassifier.  The default classifier is a LogisticRegression. * cv: int, cross-validation generator or an iterable, default=None</p> <p>Determines the cross-validation splitting strategy. Possible inputs for cv are: * None, to use the default 5-fold cross-validation, * integer, to specify the number of folds. * An object to be used as a cross-validation generator. * An iterable yielding train, test splits. * An iterable yielding (train, test) splits. * A mapping from output names to (train, test) splits. * A callable, which returns a training and test set.</p> <p>If \u201cprefit\u201d is passed, it is assumed that all estimators have been fitted already. The final_estimator_ is trained on the estimators predictions on the full training set and are not cross validated predictions. Please note that if the models have been trained on the same data to train the stacking model, there is a very high risk of overfitting. * stack_method: {\u2018auto\u2019, \u2018predict_proba\u2019, \u2018decision_function\u2019, \u2018predict\u2019}, default=\u2019auto\u2019</p> <p>The method used to combine the predictions of the base estimators. If \u201cpredict\u201d, the mean of the predicted values of the base estimators is used. If \u201cpredict_proba\u201d, the mean of the predicted probabilities of the base estimators is used. If \u201cdecision_function\u201d, the mean of the predicted decision function of the base estimators is used. * passthrough: boolean, default=False</p> <p>When False, only the predictions of estimators will be used as training data for final_estimator. When True, the final_estimator is trained on the predictions as well as the original training data.</p> </li> </ul> <p>Here are some of the attributes of the <code>StackingClassifier</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li> <p>named_estimators: dict of estimators</p> <pre><code>A dictionary mapping the names of the estimators to the fitted estimators.\n</code></pre> <ul> <li>classes_: ndarray of shape (n_classes,)</li> </ul> <p>The classes labels. * final_estimator_: estimator</p> <p>TThe classifier which predicts given the output of <code>estimators_</code>. * stack_method_: list ot str</p> <p>The method used by each base estimator.</p> </li> </ul> <p>Same as <code>StackingClassifier</code> except for the <code>stack_method</code> parameter.</p> <p>Same as <code>StackingClassifier</code> except for the class related attributes.</p> <p>Here are some of the parameters of the <code>AdaBoostClassifier</code>: * base_estimator: estimator, default=None</p> <pre><code>The base estimator to fit on random subsets of the dataset. If None, then the base estimator is a decision tree.\n</code></pre> <ul> <li> <p>n_estimators: int, default=50</p> <p>The maximum number of estimators at which boosting is terminated. * learning_rate: float, default=1.</p> <p>Weight applied to each classifier at each boosting iteration. A higher learning rate increases the contribution of each classifier.of each classifier by <code>learning_rate</code>. There is a trade-off between <code>learning_rate</code> and <code>n_estimators</code>. * algorithm: {\u2018SAMME\u2019, \u2018SAMME.R\u2019}, default=\u2019SAMME.R\u2019</p> <p>If \u2018SAMME.R\u2019 then use the SAMME.R real boosting algorithm. <code>base_estimator</code> must support calculation of class probabilities. If \u2018SAMME\u2019 then use the SAMME discrete boosting algorithm. The SAMME.R algorithm typically converges faster than SAMME, achieving a lower test error with fewer boosting iterations.</p> </li> </ul> <p>Here are some of the attributes of the <code>AdaBoostClassifier</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li> <p>base_estimator_: estimator</p> <p>The base estimator from which the boosted ensemble is built. * classes_: ndarray of shape (n_classes,)</p> <p>The classes labels. * n_classes_: int</p> <p>The number of classes. * estimator_weights_: ndarray of shape (n_estimators,)</p> <p>The weights for each estimator in the boosted ensemble. * estimator_errors_: ndarray of shape (n_estimators,)</p> <p>The classifier loss functions for each estimator in the boosted ensemble. * feature_importances_: ndarray of shape (n_features,)</p> </li> </ul> <p>The impurity-based feature importances.</p> <p>Same as <code>AdaBoostClassifier</code> except for the <code>loss</code> parameter. * loss: {\u2018linear\u2019, \u2018square\u2019, \u2018exponential\u2019}, default=\u2019linear\u2019</p> <pre><code>The loss function to be used. \u2018linear\u2019, \u2018square\u2019, and \u2018exponential\u2019 perform linear, squared, and exponential loss, respectively.\n</code></pre> <p>Same as <code>AdaBoostClassifier</code> except for the class related attributes.</p> <p>Here are some of the parameters of the <code>GradientBoostingClassifier</code>: * loss:{\u2018log_loss\u2019, \u2018deviance\u2019, \u2018exponential\u2019}, default=\u2019log_loss\u2019</p> <pre><code>The loss function to be optimized. \u2018log_loss\u2019 refers to binomial and multinomial deviance, the same as used in logistic regression. It is a good choice for classification with probabilistic outputs. For loss \u2018exponential\u2019, gradient boosting recovers the AdaBoost algorithm.\n</code></pre> <ul> <li> <p>learning_rate: float, default=0.1</p> <p>Learning rate shrinks the contribution of each tree by <code>learning_rate</code>. There is a trade-off between <code>learning_rate</code> and <code>n_estimators</code>. * n_estimators: int, default=100</p> <p>The maximum number of estimators at which boosting is terminated. * subsample: float, default=1.0</p> <p>The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0, the model will randomly sample this fraction of samples when fitting each base learters. If greater than 1.0, it will use the entire dataset for fitting each base learters. * criterion: {\u2018friedman_mse\u2019, \u2018mse\u2019, \u2018mae\u2019}, default=\u2019friedman_mse\u2019</p> <p>The function to measure the quality of a split. Supported criteria are \u2018friedman_mse\u2019, \u2018mse\u2019, and \u2018mae\u2019. The best split is the one that minimizes the criterion function. * init: estimator or \u2018zero\u2019, default=None</p> </li> </ul> <p>An estimator object that is used to compute the initial predictions. <code>init</code> has to provide <code>fit</code> and <code>predict_proba</code>. If \u2018zero\u2019, the initial raw predictions are set to zero. By default, a <code>DummyEstimator</code> predicting the classes priors is used. * validation_fraction: float, default=0.1</p> <pre><code>The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if validation_fraction &gt; 0.\n</code></pre> <p>Plus other parameters of the <code>RandomForestClassifier</code> like <code>max_depth</code>, <code>min_samples_split</code>, <code>min_samples_leaf</code>, <code>min_weight_fraction_leaf</code>, <code>max_features</code>, <code>max_leaf_nodes</code>, <code>min_impurity_decrease</code>, <code>min_impurity_split</code>, <code>bootstrap</code>, <code>oob_score</code>, <code>n_jobs</code>, <code>random_state</code>, <code>verbose</code>, <code>warm_start</code>, <code>class_weight</code></p> <p>Here are some of the attributes of the <code>GradientBoostingClassifier</code>: * estimators_: list of estimators</p> <pre><code>The collection of fitted base estimators.\n</code></pre> <ul> <li> <p>n_estimators_: int</p> <p>The number of estimators in the fitted ensemble. * feature_importances_: ndarray of shape (n_features,)</p> <p>The impurity-based feature importances. * oob_improvement_: ndarray of shape (n_estimators,)</p> <p>The improvement in loss (= deviance) on the out-of-bag samples relative to the previous iteration. <code>oob_improvement_[0]</code> is the improvement in loss of the first stage over the <code>init</code> estimator. Only available if <code>subsample &lt; 1.0</code> * train_score_: ndarray of shape (n_estimators,)</p> <p>The i-th score train_score_[i] is the deviance (= loss) of the model at iteration i on the in-bag sample. If subsample == 1 this is the deviance on the training data. * classes_: ndarray of shape (n_classes,)</p> <p>The classes labels.</p> </li> </ul> <p>Same as <code>GradientBoostingClassifier</code> except for the <code>loss</code> parameter. * loss: \u2018squared_error\u2019, \u2018absolute_error\u2019, \u2018huber\u2019, \u2018quantile\u2019}, default=\u2019squared_error\u2019</p> <pre><code>Loss function to be optimized. \u2018squared_error\u2019 refers to the squared error for regression. \u2018absolute_error\u2019 refers to the absolute error of regression and is a robust loss function. \u2018huber\u2019 is a combination of the two. \u2018quantile\u2019 allows quantile regression (use `alpha` to specify the quantile).\n</code></pre> <p>Same as <code>GradientBoostingClassifier</code> except for the class related attributes.</p> <p>HHere are some of the parameters of the <code>HistGradientBoostingClassifier</code>: * loss: {\u2018log_loss\u2019, \u2018auto\u2019, \u2018binary_crossentropy\u2019, \u2018categorical_crossentropy\u2019}, default=\u2019log_loss\u2019</p> <pre><code> The loss function to use in the boosting process.\n\nFor binary classification problems, \u2018log_loss\u2019 is also known as logistic loss, binomial deviance or binary crossentropy. Internally, the model fits one tree per boosting iteration and uses the logistic sigmoid function (expit) as inverse link function to compute the predicted positive class probability.\n\nFor multiclass classification problems, \u2018log_loss\u2019 is also known as multinomial deviance or categorical crossentropy. Internally, the model fits one tree per boosting iteration and per class and uses the softmax function as inverse link function to compute the predicted probabilities of the classes.\n</code></pre> <ul> <li> <p>learning_rate: float, default=0.1</p> <p>The learning rate, also known as shrinkage. This is used as a multiplicative factor for the leaves values. Use 1 for no shrinkage. * max_iter: int, default=100</p> <p>The maximum number of iterations of the boosting process, i.e. the maximum number of trees for binary classification. For multiclass classification, n_classes trees per iteration are built. * l2_regularization: float, default=0.0</p> <p>L2 regularization parameter. The larger this is, the more regularization, the less regularization, the more sparsity. * monotonic_cst: array-like of int of shape (n_features), default=Nonearray-like of int of shape (n_features), default=None</p> <p>Indicates the monotonic constraint to enforce on each feature. -1, 1 and 0 respectively correspond to a negative constraint, positive constraint and no constraint. * early_stopping: bool, default=False</p> <p>If \u2018auto\u2019, early stopping is enabled if the sample size is larger than 10000. If True, early stopping is enabled, otherwise early stopping is disabled. * validation_fraction: float, default=0.1</p> <p>The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if validation_fraction &gt; 0. * scoring: str, default=None</p> <p>A string or a callable to evaluate the predictions on the test set. If \u2018None\u2019, the score method of the estimator is used. If a callable is given, it is called with two arguments and must return a scalar value.</p> </li> </ul> <p>Plus Other parameters from the <code>GradientBoostingClassifier</code> like <code>max_depth</code>, <code>min_samples_split</code>, <code>min_samples_leaf</code>, <code>min_weight_fraction_leaf</code>, <code>max_features</code>, <code>max_leaf_nodes</code>, <code>min_impurity_decrease</code>, <code>min_impurity_split</code>, <code>bootstrap</code>, <code>oob_score</code>, <code>n_jobs</code>, <code>random_state</code>, <code>verbose</code>, <code>warm_start</code>, <code>class_weight</code></p> <p>Here are some of the attributes of the <code>HistGradientBoostingClassifier</code>: * classes_: ndarray of shape (n_classes,)</p> <pre><code> The classes labels.\n</code></pre> <ul> <li> <p>do_early_stopping_: bool</p> <p>Whether early stopping is performed. * n_iter_: int</p> <p>The number of boosting iterations computed. * train_score_: ndarray of shape (n_iter,)</p> <p>The scores at each iteration on the training data. The first entry is the score of the ensemble before the first iteration. Scores are computed according to the scoring parameter. If <code>scoring</code> is not \u2018loss\u2019, scores are computed on a subset of at most 10 000 samples. Empty if no early stopping. * validation_score_: ndarray of shape (n_iter,)</p> <p>The scores at each iteration on the held-out validation data. The first entry is the score of the ensemble before the first iteration. Scores are computed according to the <code>scoring</code> parameter. Empty if no early stopping or if <code>validation_fraction</code> is None. * n_trees_per_iteration_: int</p> <p>The number of tree that are built at each iteration. This is equal to 1 for binary classification, and to <code>n_classes</code> for multiclass classification.</p> </li> </ul> <p>Same as <code>HistGradientBoostingClassifier</code> except for the <code>loss</code> parameter. * loss: {\u2018squared_error\u2019, \u2018absolute_error\u2019, \u2018poisson\u2019, \u2018quantile\u2019}, default=\u2019squared_error\u2019</p> <pre><code>The loss function to use in the boosting process. Note that the \u201csquared error\u201d and \u201cpoisson\u201d losses actually implement \u201chalf least squares loss\u201d and \u201chalf poisson deviance\u201d to simplify the computation of the gradient. Furthermore, \u201cpoisson\u201d loss internally uses a log-link and requires `y &gt;= 0`. \u201cquantile\u201d uses the pinball loss.\n</code></pre> <ul> <li> <p>quantile: float, default=None</p> <p>The quantile used to compute the quantile loss. Must be between 0 and 1. Only used if loss is \u2018quantile\u2019.</p> </li> </ul> <p>Same as <code>HistGradientBoostingClassifier</code> except for the class related attributes.</p>"},{"location":"Notes/ML/Ensemble_Learning/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Ensemble-Learning\"&gt;Ensemble Learning&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Average Ensemble Methods</li> <ol><li>Bagging meta-estimator</li> <li>Forests of randomized trees</li> <ol><li>Random Forest</li> <li>Extremely Randomized Trees</li> <li>Parameters</li> <li>Time Complexity</li> <li>Parallelization</li> <li>Feature Importance</li> </ol><li>Voting Classifier</li> <ol><li>Majority Class Labels (Hard Voting)</li> <li>Weighted Average Probabilities (Soft Voting)</li> <li>Using the VotingClassifier with GridSearchCV</li> </ol><li>Voting Regressor</li> <li>Stacked generalization</li> </ol> <p><li>Boosting Methods</li></p> <ol><li>AdaBoost</li> <li>Gradient Tree Boosting</li> <ol><li>Controlling the Tree Size</li> <li>Loss Functions</li> </ol><li>Histogram-Based Gradient Boosting</li> <ol><li>Missing values support</li> <li>Sample weight support</li> <li>Monotonic Constraints</li> </ol><li>Algorithms</li> <ol><li>BaggingClassifier</li> <ol><li>Parameters of the BaggingClassifier</li> <li>Attributes of the BaggingClassifier</li> </ol><li>BaggingRegressor</li> <ol><li>Parameters of the BaggingRegressor</li> <li>Attributes of the BaggingRegressor</li> </ol><li>RandomForestClassifier</li> <ol><li>Parameters of the RandomForestClassifier</li> <li>Attributes of the RandomForestClassifier</li> </ol><li>RandomForestRegressor</li> <ol><li>Parameters of the RandomForestRegressor</li> <li>Attributes of the RandomForestRegressor</li> </ol><li>ExtraTreesClassifier</li> <ol><li>Parameters of the ExtraTreesClassifier</li> <li>Attributes of the ExtraTreesClassifier</li> </ol><li>ExtraTreesRegressor</li> <ol><li>Parameters of the ExtraTreesRegressor</li> <li>Attributes of the ExtraTreesRegressor</li> </ol><li>VotingClassifier</li> <ol><li>Parameters of the VotingClassifier</li> <li>Attributes of the VotingClassifier</li> </ol><li>VotingRegressor</li> <ol><li>Parameters of the VotingRegressor</li> <li>Attributes of the VotingRegressor</li> </ol><li>StackingClassifier</li> <ol><li>Parameters of the StackingClassifier</li> <li>Attributes of the StackingClassifier</li> </ol><li>StackingRegressor</li> <ol><li>Parameters of the StackingRegressor</li> <li>Attributes of the StackingRegressor</li> </ol><li>AdaBoostClassifier</li> <ol><li>Parameters of the AdaBoostClassifier</li> <li>Attributes of the AdaBoostClassifier</li> </ol><li>AdaBoostRegressor</li> <ol><li>Parameters of the AdaBoostRegressor</li> <li>Attributes of the AdaBoostRegressor</li> </ol><li>GradientBoostingClassifier</li> <ol><li>Attributes of the GradientBoostingClassifier</li> </ol><li>GradientBoostingRegressor</li> <ol><li>Parameters of the GradientBoostingRegressor</li> <li>Attributes of the GradientBoostingRegressor</li> </ol><li>HistGradientBoostingClassifier</li> <ol><li>Parameters of the HistGradientBoostingClassifier</li> <li>Attributes of the HistGradientBoostingClassifier</li> </ol><li>HistGradientBoostingRegressor</li> <ol><li>Parameters of the HistGradientBoostingRegressor</li> <li>Attributes of the HistGradientBoostingRegressor</li> </ol> </ol> </ol>"},{"location":"Notes/ML/Ensemble_Learning/#ensemble-learning","title":"Ensemble Learning","text":""},{"location":"Notes/ML/Ensemble_Learning/#average-ensemble-methods","title":"Average Ensemble Methods","text":""},{"location":"Notes/ML/Ensemble_Learning/#bagging-meta-estimator","title":"Bagging meta-estimator","text":""},{"location":"Notes/ML/Ensemble_Learning/#forests-of-randomized-trees","title":"Forests of randomized trees","text":""},{"location":"Notes/ML/Ensemble_Learning/#random-forest","title":"Random Forest","text":""},{"location":"Notes/ML/Ensemble_Learning/#extremely-randomized-trees","title":"Extremely Randomized Trees","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters","title":"Parameters","text":""},{"location":"Notes/ML/Ensemble_Learning/#time-complexity","title":"Time Complexity","text":""},{"location":"Notes/ML/Ensemble_Learning/#parallelization","title":"Parallelization","text":""},{"location":"Notes/ML/Ensemble_Learning/#feature-importance","title":"Feature Importance","text":""},{"location":"Notes/ML/Ensemble_Learning/#voting-classifier","title":"Voting Classifier","text":""},{"location":"Notes/ML/Ensemble_Learning/#majority-class-labels-hard-voting","title":"Majority Class Labels (Hard Voting)","text":""},{"location":"Notes/ML/Ensemble_Learning/#weighted-average-probabilities-soft-voting","title":"Weighted Average Probabilities (Soft Voting)","text":""},{"location":"Notes/ML/Ensemble_Learning/#using-the-votingclassifier-with-gridsearchcv","title":"Using the <code>VotingClassifier</code> with <code>GridSearchCV</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#voting-regressor","title":"Voting Regressor","text":""},{"location":"Notes/ML/Ensemble_Learning/#stacked-generalization","title":"Stacked generalization","text":""},{"location":"Notes/ML/Ensemble_Learning/#boosting-methods","title":"Boosting Methods","text":""},{"location":"Notes/ML/Ensemble_Learning/#adaboost","title":"AdaBoost","text":""},{"location":"Notes/ML/Ensemble_Learning/#gradient-tree-boosting","title":"Gradient Tree Boosting","text":""},{"location":"Notes/ML/Ensemble_Learning/#controlling-the-tree-size","title":"Controlling the Tree Size","text":""},{"location":"Notes/ML/Ensemble_Learning/#loss-functions","title":"Loss Functions","text":""},{"location":"Notes/ML/Ensemble_Learning/#histogram-based-gradient-boosting","title":"Histogram-Based Gradient Boosting","text":""},{"location":"Notes/ML/Ensemble_Learning/#missing-values-support","title":"Missing values support","text":""},{"location":"Notes/ML/Ensemble_Learning/#sample-weight-support","title":"Sample weight support","text":""},{"location":"Notes/ML/Ensemble_Learning/#monotonic-constraints","title":"Monotonic Constraints","text":""},{"location":"Notes/ML/Ensemble_Learning/#algorithms","title":"Algorithms","text":""},{"location":"Notes/ML/Ensemble_Learning/#baggingclassifier","title":"<code>BaggingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-baggingclassifier","title":"Parameters of the <code>BaggingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-baggingclassifier","title":"Attributes of the <code>BaggingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#baggingregressor","title":"<code>BaggingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-baggingregressor","title":"Parameters of the <code>BaggingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-baggingregressor","title":"Attributes of the <code>BaggingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#randomforestclassifier","title":"<code>RandomForestClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-randomforestclassifier","title":"Parameters of the <code>RandomForestClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-randomforestclassifier","title":"Attributes of the <code>RandomForestClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#randomforestregressor","title":"<code>RandomForestRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-randomforestregressor","title":"Parameters of the <code>RandomForestRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-randomforestregressor","title":"Attributes of the <code>RandomForestRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#extratreesclassifier","title":"<code>ExtraTreesClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-extratreesclassifier","title":"Parameters of the <code>ExtraTreesClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-extratreesclassifier","title":"Attributes of the <code>ExtraTreesClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#extratreesregressor","title":"<code>ExtraTreesRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-extratreesregressor","title":"Parameters of the <code>ExtraTreesRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-extratreesregressor","title":"Attributes of the <code>ExtraTreesRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#votingclassifier","title":"<code>VotingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-votingclassifier","title":"Parameters of the <code>VotingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-votingclassifier","title":"Attributes of the <code>VotingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#votingregressor","title":"<code>VotingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-votingregressor","title":"Parameters of the <code>VotingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-votingregressor","title":"Attributes of the <code>VotingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#stackingclassifier","title":"<code>StackingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-stackingclassifier","title":"Parameters of the <code>StackingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-stackingclassifier","title":"Attributes of the <code>StackingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#stackingregressor","title":"<code>StackingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-stackingregressor","title":"Parameters of the <code>StackingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-stackingregressor","title":"Attributes of the <code>StackingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#adaboostclassifier","title":"<code>AdaBoostClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-adaboostclassifier","title":"Parameters of the <code>AdaBoostClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-adaboostclassifier","title":"Attributes of the <code>AdaBoostClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#adaboostregressor","title":"<code>AdaBoostRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-adaboostregressor","title":"Parameters of the <code>AdaBoostRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-adaboostregressor","title":"Attributes of the <code>AdaBoostRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#gradientboostingclassifier","title":"<code>GradientBoostingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-gradientboostingclassifier","title":"Attributes of the <code>GradientBoostingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#gradientboostingregressor","title":"<code>GradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-gradientboostingregressor","title":"Parameters of the <code>GradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-gradientboostingregressor","title":"Attributes of the <code>GradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#histgradientboostingclassifier","title":"<code>HistGradientBoostingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-histgradientboostingclassifier","title":"Parameters of the <code>HistGradientBoostingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-histgradientboostingclassifier","title":"Attributes of the <code>HistGradientBoostingClassifier</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#histgradientboostingregressor","title":"<code>HistGradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#parameters-of-the-histgradientboostingregressor","title":"Parameters of the <code>HistGradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Ensemble_Learning/#attributes-of-the-histgradientboostingregressor","title":"Attributes of the <code>HistGradientBoostingRegressor</code>","text":""},{"location":"Notes/ML/Feature_Selection/","title":"Feature Selection","text":"<p>Sklearn has a number of tools for feature selection available in the module <code>feature_selection</code>.</p> <p><code>VarianceThreshold</code> is a simple baseline approach to feature selection. It removes all features whose variance doesn\u2019t meet some threshold. By default, it removes all zero-variance features, i.e. features that have the same value in all samples.</p> <p>As an example, suppose that we have a dataset with boolean features, and we want to remove all features that are either one or zero (on or off) in more than 80% of the samples. Boolean features are Bernoulli random variables, and the variance of such variables is given by \\(\\(\\mathrm{Var}[X] = p(1 - p)\\)\\)</p> <p>So, we can set a threshold of <code>0.8*(1-0.8)</code>:</p> <pre><code>from sklearn.feature_selection import VarianceThreshold\nX = [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 1], [0, 1, 0], [0, 1, 1]]\nsel = VarianceThreshold(threshold=(.8 * (1 - .8)))\nsel.fit_transform(X)\n</code></pre> <pre>\n<code>array([[0, 1],\n       [1, 0],\n       [0, 0],\n       [1, 1],\n       [1, 0],\n       [1, 1]])</code>\n</pre> <p>Univariate feature selection works by selecting the best features based on univariate statistical tests. It can be seen as a preprocessing step to an estimator. Scikit-learn exposes feature selection routines as objects that implement the <code>transform</code> method:</p> <ul> <li> <p><code>SelectKBest</code> removes all but the  highest scoring features</p> </li> <li> <p><code>SelectPercentile</code> removes all but a user-specified highest scoring percentage of features</p> </li> <li> <p>using common univariate statistical tests for each feature: false positive rate SelectFpr, false discovery rate SelectFdr, or family wise error SelectFwe.</p> </li> <li> <p><code>GenericUnivariateSelect</code> allows to perform univariate feature selection with a configurable strategy. This allows to select the best univariate selection strategy with hyper-parameter search estimator.</p> </li> </ul> <pre><code>from sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nX, y = load_iris(return_X_y=True)\nprint(X.shape)\n\nX_new = SelectKBest(chi2, k=2).fit_transform(X, y)\nX_new.shape\n</code></pre> <pre>\n<code>(150, 4)\n</code>\n</pre> <pre>\n<code>(150, 2)</code>\n</pre> <p>These objects take as input a scoring function that returns univariate scores and p-values (or only scores for <code>SelectKBest</code> and <code>SelectPercentile</code>):</p> <ul> <li> <p>For regression: f_regression, mutual_info_regression</p> </li> <li> <p>For classification: chi2, f_classif, mutual_info_classif</p> </li> </ul> <p>Given an external estimator that assigns weights to features (e.g., the coefficients of a linear model), the goal of recursive feature elimination (<code>RFE</code>) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and the importance of each feature is obtained either through any specific attribute (such as <code>coef_</code>, <code>feature_importances_</code>) or callable. Then, the least important features are pruned from current set of features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached.</p> <p><code>RFECV</code> performs <code>RFE</code> in a cross-validation loop to find the optimal number of features.</p> <pre><code>from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nX, y = load_iris(return_X_y=True)\nprint(X.shape)\nrfe = RFE(estimator=LogisticRegression(max_iter=1000), n_features_to_select=2, step=1)\nrfe.fit(X, y)\nprint(rfe.support_) \nprint(rfe.ranking_)\nX_new = rfe.transform(X)\nX_new.shape\n</code></pre> <pre>\n<code>(150, 4)\n[False False  True  True]\n[3 2 1 1]\n</code>\n</pre> <pre>\n<code>(150, 2)</code>\n</pre> <p><code>SelectFromModel</code> is a meta-transformer that can be used alongside any estimator that assigns importance to each feature through a specific attribute (such as <code>coef_</code>, <code>feature_importances_</code>) or via an <code>importance_getter</code> callable after fitting. The features are considered unimportant and removed if the corresponding importance of the feature values are below the provided threshold parameter. Apart from specifying the threshold numerically, there are built-in heuristics for finding a threshold using a string argument. Available heuristics are \u201cmean\u201d, \u201cmedian\u201d and float multiples of these like \u201c0.1*mean\u201d. In combination with the threshold criteria, one can use the <code>max_features</code> parameter to set a limit on the number of features to select.</p> <pre><code>from sklearn.svm import LinearSVC\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectFromModel\nX, y = load_iris(return_X_y=True)\nprint(X.shape)\n\nlsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nX_new = model.transform(X)\nX_new.shape\n</code></pre> <pre>\n<code>(150, 4)\n</code>\n</pre> <pre>\n<code>(150, 3)</code>\n</pre> <p>With SVMs and logistic-regression, the parameter C controls the sparsity: the smaller C the fewer features selected. With Lasso, the higher the alpha parameter, the fewer features selected.</p> <pre><code>from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectFromModel\nX, y = load_iris(return_X_y=True)\nprint(X.shape)\n\nclf = ExtraTreesClassifier(n_estimators=50)\nclf = clf.fit(X, y)\nprint(clf.feature_importances_)  \n\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\nX_new.shape \n</code></pre> <pre>\n<code>(150, 4)\n[0.10769421 0.07282498 0.37546013 0.44402068]\n</code>\n</pre> <pre>\n<code>(150, 2)</code>\n</pre> <p>Sequential Feature Selection (SFS) is available in the <code>SequentialFeatureSelector</code> transformer. SFS can be either forward or backward.</p> <p>Forward-SFS is a greedy procedure that iteratively finds the best new feature to add to the set of selected features. Concretely, we initially start with zero feature and find the one feature that maximizes a cross-validated score when an estimator is trained on this single feature. Once that first feature is selected, we repeat the procedure by adding a new feature to the set of selected features. The procedure stops when the desired number of selected features is reached, as determined by the <code>n_features_to_select</code> parameter.</p> <p>Backward-SFS follows the same idea but works in the opposite direction: instead of starting with no feature and greedily adding features, we start with all the features and greedily remove features from the set. The <code>direction</code> parameter controls whether forward or backward SFS is used.</p> <p>In general, forward and backward selection do not yield equivalent results. Also, one may be much faster than the other depending on the requested number of selected features: if we have 10 features and ask for 7 selected features, forward selection would need to perform 7 iterations while backward selection would only need to perform 3.</p> <p>SFS differs from <code>RFE</code> and <code>SelectFromModel</code> in that it does not require the underlying model to expose a <code>coef_</code> or <code>feature_importances_</code> attribute. It may however be slower considering that more models need to be evaluated, compared to the other approaches. For example in backward selection, the iteration going from m features to m - 1 features using k-fold cross-validation requires fitting m * k models, while <code>RFE</code> would require only a single fit, and <code>SelectFromModel</code> always just does a single fit and requires no iterations.</p> <p>Feature selection is usually used as a pre-processing step before doing the actual learning. The recommended way to do this in scikit-learn is to use a <code>Pipeline</code>:</p> <pre><code>from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([\n  ('feature_selection', SelectFromModel(LinearSVC(penalty=\"l1\"))),\n  ('classification', RandomForestClassifier())\n])\nclf\n</code></pre> <pre>\n<code>Pipeline(steps=[('feature_selection',\n                 SelectFromModel(estimator=LinearSVC(penalty='l1'))),\n                ('classification', RandomForestClassifier())])</code>\n</pre> <ul> <li>threshold: float, (default=0.0)</li> </ul> <p>Features with a training-set variance lower than this threshold will be removed. The default is to keep all features with non-zero variance, i.e. remove the features that have the same value in all samples.</p> <ul> <li> <p>variances_: array-like, shape (n_features,)</p> <p>The variance of each feature in the training set.</p> </li> </ul> <ul> <li> <p>score_func: callable, defualt=f_classif</p> <p>Function taking two arrays X and y, and returning a pair of arrays (scores, pvalues) or a single array with scores. Default is f_classif. The default function only works with classification tasks. * k: int or \"all\", default=10</p> <p>Number of top features to select. The \u201call\u201d option bypasses selection, for use in a parameter search.</p> </li> </ul> <ul> <li> <p>scores_: array-like, shape (n_features,)</p> <p>The scores associated with each feature. * pvalues_: array-like, shape (n_features,)</p> <p>The p-values associated with each feature.</p> </li> </ul> <ul> <li> <p>score_func: callable, default=f_classif</p> <p>Function taking two arrays X and y, and returning a pair of arrays (scores, pvalues) or a single array with scores. Default is f_classif. The default function only works with classification tasks. * percentile: int, default=10</p> <p>Percentile of features to keep.</p> </li> </ul> <p>Available callable score functions are: * For regression: f_regression, mutual_info_regression</p> <ul> <li>For classification: chi2, f_classif, mutual_info_classif</li> </ul> <ul> <li> <p>scores_: array-like, shape (n_features,)</p> <p>The scores associated with each feature. * pvalues_: array-like, shape (n_features,)</p> <p>The p-values associated with each feature.</p> </li> </ul> <ul> <li> <p>estimator: estimator object.</p> <p>A supervised learning estimator with a <code>fit</code> method that provides information about feature importance (e.g. <code>coef_</code>, <code>feature_importances_</code>). * n_features_to_select: int or float default=None</p> <p>The number of features to select. If None, half of the features are selected. If integer, the parameter is the absolute number of features to select. If float between 0 and 1, it is the fraction of features to select. * step: int or float, default=1</p> <p>If greater than or equal to 1, then <code>step</code> corresponds to the (integer) number of features to remove at each iteration. If within (0.0, 1.0), then <code>step</code> corresponds to the percentage (rounded down) of features to remove at each iteration.</p> </li> </ul> <ul> <li> <p>classes_: array-like, shape (n_classes,)</p> <p>Classes labels available when <code>estimator</code> is a classifier. * estimator_: estimator object.</p> <p>The underlying estimator. * n_features_: int</p> <p>The number of features. * ranking_: array-like, shape (n_features,)</p> <p>The feature ranking, such that <code>ranking_[i]</code>corresponds to the ranking position of the i-th feature. Selected (i.e., estimated best) features are assigned rank 1. * support_: array-like, shape (n_features,)</p> <p>The mask of selected features.</p> </li> </ul> <ul> <li> <p>estimator: estimator object.</p> <p>The base estimator from which the transformer is built. This can be both a fitted (if <code>prefit</code> is set to <code>True</code>) or a non-fitted estimator. The estimator should have a <code>feature_importances_</code> or coef_ <code>attribute</code> after fitting. Otherwise, the <code>importance_getter</code> parameter should be used. * threshold : str or float, default=None</p> <p>The threshold value to use for feature selection. Features whose importance is greater or equal are kept while the others are discarded. If \u201cmedian\u201d (resp. \u201cmean\u201d), then the threshold value is the median (resp. the mean) of the feature importances. A scaling factor (e.g., \u201c1.25mean\u201d) may also be used. If None and if the estimator has a parameter penalty set to l1, either explicitly or implicitly (e.g, Lasso), the threshold used is 1e-5. Otherwise, \u201cmean\u201d is used by default. * prefit*: bool, default=False</p> <p>Whether a prefit model is expected to be passed into the constructor directly or not. If <code>True</code>, <code>estimator</code> must be a fitted estimator. If Fal<code>se,</code>estimator<code>is fitted and updated by calling</code>fit<code>and</code>partial_fit`, respectively. * norm_order: non-zero int, inf, -inf, default=1</p> <p>Order of the norm used to filter the vectors of coefficients below threshold in the case where the <code>coef_</code> attribute of the estimator is of dimension 2. * max_features :int, callable, default=None</p> <p>The maximum number of features to select.</p> <p>If an integer, then it specifies the maximum number of features to allow.</p> <p>If a callable, then it specifies how to calculate the maximum number of features allowed by using the output of <code>max_feaures(X)</code>.</p> <p>If <code>None</code>, then all features are kept. To only select based on <code>max_features</code>, set <code>threshold=-np.inf</code> * importance_getter: str or callable, default=\u2019auto\u2019</p> <p>If \u2018auto\u2019, uses the feature importance either through a coef_ attribute or feature_importances_ attribute of estimator.</p> <p>Also accepts a string that specifies an attribute name/path for extracting feature importance (implemented with attrgetter).</p> </li> </ul> <ul> <li> <p>estimator_: estimator object.</p> <p>The base estimator from which the transformer is built. This attribute exist only when <code>fit</code> has been called.</p> <ul> <li> <p>If <code>prefit=True</code>, it is a deep copy of estimator.</p> </li> <li> <p>If <code>prefit=False</code>, it is a clone of estimator and fit on the data passed to <code>fit</code> or <code>partial_fit</code>.</p> </li> <li>max_features_: int </li> </ul> <p>Maximum number of features calculated during fit. Only defined if the max_features is not None.</p> <ul> <li> <p>If <code>max_features</code> is an int, then <code>max_features_ = max_features</code>.</p> </li> <li> <p>If <code>max_features</code> is a callable, then <code>max_features_ = max_features(X)</code>.</p> </li> <li>threshold_ float</li> </ul> <p>Threshold value used for feature selection.</p> </li> </ul> <ul> <li> <p>estimator: estimator instance</p> <p>An unfitted estimator.</p> </li> <li> <p>n_features_to_select: \u201cauto\u201d, int or float, default=\u2019warn\u2019</p> <p>If \"auto\", the behaviour depends on the <code>tol</code> parameter:</p> <ul> <li> <p>if <code>tol</code> is not None, then features are selected until the score improvement does not exceed <code>tol</code>.</p> </li> <li> <p>otherwise, half of the features are selected.</p> </li> </ul> <p>If integer, the parameter is the absolute number of features to select. If float between 0 and 1, it is the fraction of features to select. * tol: float, default=None</p> </li> </ul> <p>If the score is not incremented by at least tol between two consecutive feature additions or removals, stop adding or removing. tol is enabled only when <code>n_features_to_select</code> is \"auto\". * direction: {\u2018forward\u2019, \u2018backward\u2019}, default=\u2019forward\u2019</p> <pre><code>If \u2018forward\u2019, features are added. If \u2018backward\u2019, features are removed.\n</code></pre> <ul> <li> <p>scoring:  str, callable, list/tuple or dict, default=None</p> <p>A single str or a callable to evaluate the predictions on the test set.</p> <p>If None, the estimator\u2019s score method is used. * cv: int, cross-validation generator or an iterable, default=None</p> <ul> <li> <p>Determines the cross-validation splitting strategy. Possible inputs for <code>cv</code> are:</p> </li> <li> <p><code>None</code>, to use the default 5-fold cross validation,</p> </li> <li> <p>integer, to specify the number of folds in a <code>(Stratified)KFold</code>,</p> </li> <li> <p>CV splitter,</p> </li> <li> <p>An iterable yielding (train, test) splits as arrays of indices.</p> </li> <li>n_jobs</li> </ul> </li> </ul> <ul> <li>n_features_: int</li> </ul> <p>Number of features seen during fit. Only defined if the underlying estimator exposes such an attribute when fit. * n_features_to_select_: int</p> <p>The number of features that were selected. * support_: array-like, shape (n_features,)</p> <p>The mask of selected features.</p>"},{"location":"Notes/ML/Feature_Selection/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Feature-Selection\"&gt;Feature Selection&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Removing features with low variance</li> <li>Univariate feature selection</li> <li>Recursive feature elimination</li> <li>Feature selection using SelectFromModel</li> <ol><li>Example 1: SVC Based</li> <li>Example 2: Tree Based</li> </ol><li>Sequential Feature Selection</li> <ol><li>Forward SFS</li> <li>Backward SFS</li> </ol><li>Feature selection as part of a pipeline</li> </ol> <p><li>Classes</li></p> <ol><li>VarianceThreshold</li> <ol><li>Parameters of VarianceThreshold</li> <li>Attributes of VarianceThreshold</li> </ol><li>SelectKBest</li> <ol><li>Parameters of SelectKBest</li> <li>Attributes of SelectKBest</li> </ol><li>SelectPercentile</li> <ol><li>Parameters of SelectPercentile</li> <li>Attributes of SelectPercentile</li> </ol><li>RFE</li> <ol><li>Parameters of RFE</li> <li>Attributes of RFE</li> </ol><li>SelectFromModel</li> <ol><li>Parameters of SelectFromModel</li> <li>Attributes of SelectFromModel</li> </ol><li>SequentialFeatureSelector</li> <ol><li>Parameters of SequentialFeatureSelector</li> <li>Attributes of SequentialFeatureSelector</li> </ol> </ol>"},{"location":"Notes/ML/Feature_Selection/#feature-selection","title":"Feature Selection","text":""},{"location":"Notes/ML/Feature_Selection/#removing-features-with-low-variance","title":"Removing features with low variance","text":""},{"location":"Notes/ML/Feature_Selection/#univariate-feature-selection","title":"Univariate feature selection","text":""},{"location":"Notes/ML/Feature_Selection/#recursive-feature-elimination","title":"Recursive feature elimination","text":""},{"location":"Notes/ML/Feature_Selection/#feature-selection-using-selectfrommodel","title":"Feature selection using SelectFromModel","text":""},{"location":"Notes/ML/Feature_Selection/#example-1-svc-based","title":"Example 1: SVC Based","text":""},{"location":"Notes/ML/Feature_Selection/#example-2-tree-based","title":"Example 2: Tree Based","text":""},{"location":"Notes/ML/Feature_Selection/#sequential-feature-selection","title":"Sequential Feature Selection","text":""},{"location":"Notes/ML/Feature_Selection/#forward-sfs","title":"Forward SFS","text":""},{"location":"Notes/ML/Feature_Selection/#backward-sfs","title":"Backward SFS","text":""},{"location":"Notes/ML/Feature_Selection/#feature-selection-as-part-of-a-pipeline","title":"Feature selection as part of a pipeline","text":""},{"location":"Notes/ML/Feature_Selection/#classes","title":"Classes","text":""},{"location":"Notes/ML/Feature_Selection/#variancethreshold","title":"<code>VarianceThreshold</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-variancethreshold","title":"Parameters of <code>VarianceThreshold</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-variancethreshold","title":"Attributes of <code>VarianceThreshold</code>","text":""},{"location":"Notes/ML/Feature_Selection/#selectkbest","title":"<code>SelectKBest</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-selectkbest","title":"Parameters of <code>SelectKBest</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-selectkbest","title":"Attributes of <code>SelectKBest</code>","text":""},{"location":"Notes/ML/Feature_Selection/#selectpercentile","title":"<code>SelectPercentile</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-selectpercentile","title":"Parameters of <code>SelectPercentile</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-selectpercentile","title":"Attributes of <code>SelectPercentile</code>","text":""},{"location":"Notes/ML/Feature_Selection/#rfe","title":"<code>RFE</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-rfe","title":"Parameters of <code>RFE</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-rfe","title":"Attributes of <code>RFE</code>","text":""},{"location":"Notes/ML/Feature_Selection/#selectfrommodel","title":"<code>SelectFromModel</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-selectfrommodel","title":"Parameters of <code>SelectFromModel</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-selectfrommodel","title":"Attributes of <code>SelectFromModel</code>","text":""},{"location":"Notes/ML/Feature_Selection/#sequentialfeatureselector","title":"<code>SequentialFeatureSelector</code>","text":""},{"location":"Notes/ML/Feature_Selection/#parameters-of-sequentialfeatureselector","title":"Parameters of <code>SequentialFeatureSelector</code>","text":""},{"location":"Notes/ML/Feature_Selection/#attributes-of-sequentialfeatureselector","title":"Attributes of <code>SequentialFeatureSelector</code>","text":""},{"location":"Notes/ML/Linear_Regression/","title":"Linear Regression","text":"<p>Regression is based on the method of least squares or the method of minimum mean square error. The ideas around least squares or averaging errors have evolved over nearly three centuries. The first known publication of a \u2018Method of Averages\u2019 was by the German astronomer Tobias Mayer in 1750. Pierre-Simon Laplace published in 1788 a similar method. The first publication of the method of least squares was by the French mathematician Adrien-Marie Legendre in 1805.</p> <p>As a historical aside, it is very likely that the German physicist and mathematician Carl Friedrich Gauss developed the method of least-squares as early as 1795, but he did not publish this method until 1809. Legendre firmly opposed any notion that Gauss had used the method earlier than the 1805 publishing date.</p> <p>Francis Galton, a cousin of Charles Darwin, coined the term regression in 1886. Galton was interested in determining which traits of plants and animals, including humans, could be said to be inherited. While Galton invented a modern form of regression, it was Karl Pearson who put regression and multiple regression on a firm mathematical footing. He created the world\u2019s first university statistics department at UCL. Pearson\u2019s 1898 publication proposed a method of regression as we understand it today.</p> <p>Numerous others have expanded the theory of regression over the last century since Pearson\u2019s pivotal paper. Notably, Joseph Berkson published the logistic regression method in 1944, one of the first classification algorithms. In recent times the explosion of interest in machine learning (ML) has lead to a rapid increase in the numbers and types of regression models.</p> <p>source</p> <p>The linear model is given by: $$ \\hat{y}(w, x) = w_0 + w_1 x_1 + ... + w_p x_p $$</p> <p>In scikit-learn, the linear model is represented by the LinearRegression class. Across the module, we designate the vector \\(w = (w_1, ..., w_p)\\) as <code>coef_</code> and \\(w_0\\) as <code>intercept_</code>.</p> <p><code>LinearRegression</code> fits a linear model with coefficients \\(w = (w_1, ..., w_p)\\) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation. Mathematically it solves a problem of the form: \\(\\(\\min_{w} || X w - y||_2^2\\)\\)</p> <p><code>LinearRegression</code> will take in its <code>fit</code> method arrays X, y and will store the coefficients \\(w\\) of the linear model in its <code>coef_</code> member.</p> <pre><code>from sklearn import linear_model\nimport numpy as np\nreg = linear_model.LinearRegression()\nreg.fit([[0, 0], [1, 1], [2, 2]], [0, 1, 2])\n\nreg.coef_\n</code></pre> <pre>\n<code>array([0.5, 0.5])</code>\n</pre> <p>The coefficient estimates for Ordinary Least Squares rely on the independence of the features. When features are correlated and the columns of the design matrix \\(X\\) have an approximately linear dependence, the design matrix becomes close to singular and as a result, the least-squares estimate becomes highly sensitive to random errors in the observed target, producing a large variance.</p> <p>It is possible to constrain all the coefficients to be non-negative, which may be useful when they represent some physical or naturally non-negative quantities. <code>LinearRegression</code> accepts a boolean <code>positive</code> parameter: when set to True Non-Negative Least Squares are then applied.</p> <p>The least squares solution is computed using the singular value decomposition of \\(X\\). If \\(X\\) is a matrix of shape <code>(n_samples, n_features)</code> this method has a cost of \\(O(n_{\\text{samples}} n_{\\text{features}}^2)\\) , assuming that \\(n_{\\text{samples}} \\geq n_{\\text{features}}\\).</p> <p>Here are the parameters of the <code>LinearRegression</code> class takes: * fit_intercept: boolean, optional, default True</p> <pre><code>Whether to calculate the intercept for this model.\n</code></pre> <ul> <li> <p>normalize: boolean, optional, default False</p> <p>This parameter is ignored when fit_intercept is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm.  * copy_X: boolean, optional, default True * n_jobs: integer, optional, default 1 * positive: boolean, optional, default False</p> <p>When set to True, forces the coefficients to be positive. This option is only supported for dense arrays.</p> </li> </ul> <p>Here are the attributes of the <code>LinearRegression</code> class:</p> <ul> <li> <p>coef_: array, shape (n_features, ) or (n_targets, n_features)</p> <p>Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features. The intercept is not included. * intercept_: array, shape (n_targets, ) or (n_targets, n_features) * rank_: Rank of matrix <code>X</code>. Only available when <code>X</code> is dense.</p> </li> </ul> <pre><code>from sklearn.datasets import make_regression\nn_samples = int(1e2)\nX, y = make_regression(n_samples=n_samples, n_features=1,noise=10, random_state=42)\nreg.fit(X, y)\n</code></pre> <pre>\n<code>LinearRegression()</code>\n</pre> <pre><code>reg.coef_, reg.intercept_\n</code></pre> <pre>\n<code>(array([44.43716999]), 1.1651153205269726)</code>\n</pre> <pre><code>plt.rcdefaults()\n</code></pre> <pre><code>import matplotlib.pyplot as plt\n\nplt.scatter(X, y, color='red', marker='o', s=30, label='data')\ny_line = reg.coef_ * X + reg.intercept_\nplt.plot(X, y_line, color='blue', linewidth=2, label='regression line')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(loc='upper left')\nplt.show()\n</code></pre> <p>Ridge regression addresses some of the problems of Ordinary Least Squares by imposing a penalty on the size of the coefficients. The ridge coefficients minimize a penalized residual sum of squares:\\(\\(\\min_{w} || X w - y||_2^2 + \\alpha ||w||_2^2\\)\\)</p> <p>The complexity parameter \\(\\alpha \\geq 0\\) controls the amount of shrinkage: the larger the value of , the greater the amount of shrinkage and thus the coefficients become more robust to collinearity.</p> <p>For details, follow the paper.</p> <p></p> <pre><code>from sklearn import linear_model\nridge = linear_model.Ridge(alpha=10)\nridge.fit(X, y)\n</code></pre> <pre>\n<code>Ridge(alpha=10)</code>\n</pre> <pre><code>alphas = np.logspace(-3, 2, 100)\nw = []\nfor a in alphas:\n    ridge = linear_model.Ridge(alpha=a)\n    ridge.fit(X, y)\n    w.append(ridge.coef_[0])\n\nplt.plot(alphas, w, '-', )\nplt.xlabel('alpha')\nplt.ylabel('weights')\nplt.show()\n</code></pre> <p>We can see that increasing the value of \\(\\alpha\\) increases the amount of shrinkage and thus the coefficients become smaller.</p> <p>The ridge has the same time complexity as the ordinary least squares. That is, the complexity of the ridge is \\(O(n_{\\text{samples}} n_{\\text{features}}^2)\\) assuming that \\(n_{\\text{samples}} \\geq n_{\\text{features}}\\).</p> <p>Here are some of the parameters of the <code>Ridge</code> class: * alpha: float, optional, default 1.0</p> <pre><code>Constant that multiplies the L2 term, controlling regularization strength. alpha must be a non-negative float i.e. in `[0, inf)`.\nWhen `alpha = 0`, the objective is equivalent to ordinary least squares, solved by the `LinearRegression` object.\n</code></pre> <ul> <li> <p>fit_intercept: boolean, optional, default True</p> <p>Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered). * normalize: boolean, optional, default False</p> <p>This parameter is ignored when fit_intercept is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm.</p> </li> <li> <p>solver: {\"auto\", \"svd\", \"cholesky\", \"lsqr\", \"sparse_cg\", \"sag\", \"saga\", \"lbfgs\"}, default=\"auto\"</p> <p>Solver to use in the computational routines: * \"auto\" chooses the solver automatically based on the type of data. * \"svd\" uses a Singular Value Decomposition to solve the problem. * \"cholesky\" uses the conjugate gradient solver as found in <code>scipy.sparse.linalg.cg</code>. As an iterative algorithm, this solver is more appropriate than \"cholesky\" for large-scale data (possibility to set <code>tol</code> and <code>max_iter</code>). * \"lsqr\" uses the standard <code>scipy.sparse.linalg.lsqr</code> function to solve the problem. * \"sparse_cg\" uses a conjugate gradient solver to solve the problem. * \"saga\" uses a Stochastic Average Gradient descent, and \"saga\" uses its improved, unbiased version named SAGA. Both methods also use an iterative procedure, and are often faster than other solvers when both n_samples and n_features are large. Note that \"sag\" and \"saga\" fast convergence is only guaranteed on features with approximately the same scale. * \"lbfgs\" uses L-BFGS-B algorithm implemented in <code>scipy.optimize.minimize</code>. It can be used only when <code>positive</code> is True.</p> </li> </ul> <p>Here are the attributes of the <code>Ridge</code> class:</p> <ul> <li> <p>coef_: array, shape (n_features, ) or (n_targets, n_features)</p> <p>Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features. The intercept is not included. * intercept_: array, shape (n_targets, ) or (n_targets, n_features) * n_iter_: None or ndarray of shape (n_targets,)</p> <p>Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return None.</p> </li> </ul> <p>RidgeCV implements ridge regression with built-in cross-validation of the alpha parameter. The object works in the same way as GridSearchCV except that it defaults to Leave-One-Out Cross-Validation.</p> <pre><code>reg = linear_model.RidgeCV(alphas=np.logspace(-6, 6, 13))\nreg.fit([[0, 0], [0, 0], [1, 1]], [0, .1, 1])\nreg.alpha_\n</code></pre> <pre>\n<code>0.01</code>\n</pre> <p>Specifying the value of the <code>cv</code> attribute will trigger the use of cross-validation with <code>GridSearchCV</code>, for example <code>cv=10</code> for 10-fold cross-validation, rather than Leave-One-Out Cross-Validation.</p> <p>The Lasso is a linear model that estimates sparse coefficients. It is useful in some contexts due to its tendency to prefer solutions with fewer non-zero coefficients, effectively reducing the number of features upon which the given solution is dependent.</p> <p>Mathematically, it consists of a linear model with an added regularization term. The objective function to minimize is:</p> <p>\\(\\(\\min_{w} { \\frac{1}{2n_{\\text{samples}}} ||X w - y||_2 ^ 2 + \\alpha ||w||_1}\\)\\) The lasso estimate thus solves the minimization of the least-squares penalty with \\(\\alpha ||w||_1\\) added, where \\(\\alpha\\) is a constant and \\(||w||_1\\) is the norm of the coefficient vector.</p> <p>The implementation in the class Lasso uses coordinate descent as the algorithm to fit the coefficients.</p> <p>For details, se the paper and the paper.</p> <p>Lasso has the same time complexity as the ordinary least squares. That is, the complexity of the lasso is \\(O(n_{\\text{samples}} n_{\\text{features}}^2)\\) assuming that \\(n_{\\text{samples}} \\geq n_{\\text{features}}\\).</p> <p><code>Lasso</code> has the same parameters as the <code>Ridge</code> class with the following exceptions: * It does not have the <code>solver</code> parameter. There are some extra parameters for the Lasso: * warm_start: bool, default=False</p> <pre><code>When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution.\n</code></pre> <ul> <li>selection: {\u2018cyclic\u2019, \u2018random\u2019}, default=\u2019cyclic\u2019</li> </ul> <p>If set to \u2018random\u2019, a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to \u2018random\u2019) often leads to significantly faster convergence especially when tol is higher than 1e-4.</p> <p><code>Lasso</code> has the same attributes as the <code>Ridge</code> class.</p> <p>Same as <code>RidgeCV</code>, <code>LassoCV</code> uses cross-validation to find the best regularization parameter for lasso.</p> <pre><code>from sklearn.linear_model import LassoCV\nfrom sklearn.datasets import make_regression\nX, y = make_regression(noise=4, random_state=0)\nreg = LassoCV(cv=5, random_state=0).fit(X, y)\nreg.score(X, y)\n</code></pre> <pre>\n<code>0.9993566905623871</code>\n</pre> <p>ElasticNet is a linear regression model trained with both \\(l_1\\) and \\(l_2\\)-norm regularization of the coefficients. This combination allows for learning a sparse model where few of the weights are non-zero like Lasso, while still maintaining the regularization properties of Ridge. We control the convex combination of \\(l_1\\) and \\(l_2\\) using the <code>l1_ratio</code> parameter.</p> <p>Elastic-net is useful when there are multiple features that are correlated with one another. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both.</p> <p>The objective function to minimize is in this case $$ \\min_{w} { \\frac{1}{2n_{\\text{samples}}} ||X w - y||_2 ^ 2 + \\alpha \\rho ||w||_1 + \\frac{\\alpha(1-\\rho)}{2} ||w||_2 ^ 2} $$</p> <p>The <code>ElasticNet</code> class uses the parameters <code>alpha</code> (\\(\\alpha\\)) and <code>l1_ratio</code> (\\(\\rho\\)) to fit the coefficients. <code>lq_ratio</code> determines what proportion of the penalty is composed of the L2 penalty</p> <p></p> <p>For details, follow the paper and the paper.</p> <p>The <code>ElasticNet</code> class has the same parameters as <code>Lasso</code> but with the following additions: * l1_ratio: float, default=0.5</p> <pre><code>The `ElasticNet` mixing parameter, with 0 &lt;= l1_ratio &lt;= 1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1 it is an L1 penalty. For 0 &lt; l1_ratio &lt; 1, the penalty is a combination of L1 and L2.\n</code></pre> <ul> <li> <p>precompute: bool or array-like of shape (n_features, n_features), default=False</p> <p>Whether to use a precomputed Gram matrix to speed up calculations. The Gram matrix can also be passed as argument. For sparse input this option is always False to preserve sparsity.</p> </li> </ul> <p>It has the same attributes as the <code>Lasso</code> class.</p> <p>Least-angle regression (LARS) is a regression algorithm for high-dimensional data, developed by Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani. LARS is similar to forward stepwise regression. At each step, it finds the feature most correlated with the target. When there are multiple features having equal correlation, instead of continuing along the same feature, it proceeds in a direction equiangular between the features.</p> <p>The advantages of LARS are:</p> <ul> <li> <p>It is numerically efficient in contexts where the number of features is significantly greater than the number of samples.</p> </li> <li> <p>It is computationally just as fast as forward selection and has the same order of complexity as ordinary least squares.</p> </li> <li> <p>It produces a full piecewise linear solution path, which is useful in cross-validation or similar attempts to tune the model.</p> </li> <li> <p>If two features are almost equally correlated with the target, then their coefficients should increase at approximately the same rate. The algorithm thus behaves as intuition would expect, and also is more stable.</p> </li> <li> <p>It is easily modified to produce solutions for other estimators, like the Lasso.</p> </li> </ul> <p>The disadvantages of the LARS method include:</p> <ul> <li>Because LARS is based upon an iterative refitting of the residuals, it would appear to be especially sensitive to the effects of noise. This problem is discussed in detail by Weisberg in the discussion section of the Efron et al. (2004) Annals of Statistics article.</li> </ul> <p>The <code>LassoLars</code> is a lasso model implemented using the LARS algorithm.</p> <pre><code>from sklearn import linear_model\nreg = linear_model.Lars(n_nonzero_coefs=1, normalize=False)\nreg.fit([[-1, 1], [0, 0], [1, 1]], [-1.1111, 0, -1.1111])\n\nprint(reg.coef_)\n</code></pre> <pre>\n<code>[ 0.     -1.1111]\n</code>\n</pre> <p>One common pattern within machine learning is to use linear models trained on nonlinear functions of the data. This approach maintains the generally fast performance of linear methods, while allowing them to fit a much wider range of data.</p> <p>For example, a simple linear regression can be extended by constructing polynomial features from the coefficients. In the standard linear regression case, you might have a model that looks like this for two-dimensional data: $$ \\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2 $$</p> <p>If we want to fit a paraboloid to the data instead of a plane, we can combine the features in second-order polynomials, so that the model looks like this: $$ \\hat{y}(w, x) = w_0 + w_1 x_1 + w_2 x_2 + w_3 x_1 x_2 + w_4 x_1^2 + w_5 x_2^2 $$</p> <p>This can be fitted by a linear model by using the following features: \\(\\(z = [x_1, x_2, x_1 x_2, x_1^2, x_2^2]\\)\\) Using above features, we can fit a model like this: \\(\\(\\hat{y}(w, z) = w_0 + w_1 z_1 + w_2 z_2 + w_3 z_3 + w_4 z_4 + w_5 z_5\\)\\)</p> <p>We see that the resulting polynomial regression is in the same class of linear models we considered above (i.e. the model is linear in \\(w\\)) and can be solved by the same techniques. By considering linear fits within a higher-dimensional space built with these basis functions, the model has the flexibility to fit a much broader range of data.</p> <p></p> <p>The features can be created using the <code>PolynomialFeatures</code> class.</p> <pre><code>from sklearn.preprocessing import PolynomialFeatures\nimport numpy as np\nX = np.arange(6).reshape(3, 2)\nprint(X)\n\npoly = PolynomialFeatures(degree=2)\npoly.fit_transform(X)\n</code></pre> <pre>\n<code>[[0 1]\n [2 3]\n [4 5]]\n</code>\n</pre> <pre>\n<code>array([[ 1.,  0.,  1.,  0.,  0.,  1.],\n       [ 1.,  2.,  3.,  4.,  6.,  9.],\n       [ 1.,  4.,  5., 16., 20., 25.]])</code>\n</pre>"},{"location":"Notes/ML/Linear_Regression/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#History\"&gt;History&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Linear Regression in Scikit-Learn</li> <ol><li>Ordinary Least Squares</li> <ol><li>Non-Negative Least Squares</li> <li>Ordinary Least Squares Complexity</li> <li>Ordinary Least Squares Parameters</li> <li>Ordingary Least Squares Attributes</li> </ol><li>Ridge</li> <ol><li>Ridge Complexity</li> <li>Ridge Parameters</li> <li>Ridge Attributes</li> </ol><li>Lasso</li> <ol><li>Lasso Complexity</li> <li>Lasso Parameters</li> <li>Lasso Attributes</li> </ol><li>Elastic Net</li> <ol><li>Elastic Net Parameters</li> <li>Elastic Net Attributes</li> </ol><li>Least Angle Regression</li> <li>Polynomial Regression</li> </ol>"},{"location":"Notes/ML/Linear_Regression/#history","title":"History","text":""},{"location":"Notes/ML/Linear_Regression/#linear-regression-in-scikit-learn","title":"Linear Regression in Scikit-Learn","text":""},{"location":"Notes/ML/Linear_Regression/#ordinary-least-squares","title":"Ordinary Least Squares","text":""},{"location":"Notes/ML/Linear_Regression/#non-negative-least-squares","title":"Non-Negative Least Squares","text":""},{"location":"Notes/ML/Linear_Regression/#ordinary-least-squares-complexity","title":"Ordinary Least Squares Complexity","text":""},{"location":"Notes/ML/Linear_Regression/#ordinary-least-squares-parameters","title":"Ordinary Least Squares Parameters","text":""},{"location":"Notes/ML/Linear_Regression/#ordingary-least-squares-attributes","title":"Ordingary Least Squares Attributes","text":""},{"location":"Notes/ML/Linear_Regression/#ridge","title":"Ridge","text":""},{"location":"Notes/ML/Linear_Regression/#ridge-complexity","title":"Ridge Complexity","text":""},{"location":"Notes/ML/Linear_Regression/#ridge-parameters","title":"Ridge Parameters","text":""},{"location":"Notes/ML/Linear_Regression/#ridge-attributes","title":"Ridge Attributes","text":""},{"location":"Notes/ML/Linear_Regression/#lasso","title":"Lasso","text":""},{"location":"Notes/ML/Linear_Regression/#lasso-complexity","title":"Lasso Complexity","text":""},{"location":"Notes/ML/Linear_Regression/#lasso-parameters","title":"Lasso Parameters","text":""},{"location":"Notes/ML/Linear_Regression/#lasso-attributes","title":"Lasso Attributes","text":""},{"location":"Notes/ML/Linear_Regression/#elastic-net","title":"Elastic Net","text":""},{"location":"Notes/ML/Linear_Regression/#elastic-net-parameters","title":"Elastic Net Parameters","text":""},{"location":"Notes/ML/Linear_Regression/#elastic-net-attributes","title":"Elastic Net Attributes","text":""},{"location":"Notes/ML/Linear_Regression/#least-angle-regression","title":"Least Angle Regression","text":""},{"location":"Notes/ML/Linear_Regression/#polynomial-regression","title":"Polynomial Regression","text":""},{"location":"Notes/ML/Logistic_Regression/","title":"Logistic Regression","text":"<p>Logistic regression, despite its name, is a linear model for classification rather than regression. Logistic regression is also known in the literature as logit regression, maximum-entropy classification (MaxEnt) or the log-linear classifier. In this model, the probabilities describing the possible outcomes of a single trial are modeled using a logistic function.</p> <p>Logistic function is defined as: $$ f(x) = \\frac{1}{1+e^{-x}} $$</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nplt.rcdefaults()\n</code></pre> <pre><code>x = np.arange(-5, 5, 0.1)\ny = 1 / (1 + np.exp(-x))\nplt.plot(x, y)\nplt.show()\n</code></pre> <p>Logistic regression is implemented in <code>LogisticRegression</code>. This implementation can fit binary, One-vs-Rest, or multinomial logistic regression with optional \\(l_1, l_2\\) or Elastic-Net regularization.</p> <p>As an optimization problem, binary class \\(l_2\\) penalized logistic regression minimizes the following cost function: $$ \\min_{w, c} \\frac{1}{2}w^T w + C \\sum_{i=1}^n \\log(\\exp(- y_i (X_i^T w + c)) + 1) . $$ Similarly, for \\(l_1\\) regularization, the cost function is: $$ \\min_{w, c} |w|1 + C \\sum{i=1}^n \\log(\\exp(- y_i (X_i^T w + c)) + 1). $$ while the elastic net equivalent is: $$ \\min_{w, c} \\frac{1 - \\rho}{2}w^T w + \\rho |w|1 + C \\sum{i=1}^n \\log(\\exp(- y_i (X_i^T w + c)) + 1), $$</p> <p>Note that, in this notation, it\u2019s assumed that the target \\(y_i\\) takes values in the set \\(\\{-1, 1\\}\\) at trial \\(i\\).</p> <p>The solvers implemented in the class LogisticRegression are \u201cliblinear\u201d, \u201cnewton-cg\u201d, \u201clbfgs\u201d, \u201csag\u201d and \u201csaga\u201d:</p> <p>The solver \u201cliblinear\u201d uses a coordinate descent (CD) algorithm, and relies on the C++ LIBLINEAR library, which is shipped with scikit-learn. However, the CD algorithm implemented in liblinear cannot learn a true multinomial (multiclass) model; instead, the optimization problem is decomposed in a \u201cone-vs-rest\u201d fashion so separate binary classifiers are trained for all classes. This happens under the hood, so LogisticRegression instances using this solver behave as multiclass classifiers. </p> <p>The \u201clbfgs\u201d, \u201csag\u201d and \u201cnewton-cg\u201d solvers only support \\(l_1\\) regularization or no regularization, and are found to converge faster for some high-dimensional data. Setting multi_class to \u201cmultinomial\u201d with these solvers learns a true multinomial logistic regression model, which means that its probability estimates should be better calibrated than the default \u201cone-vs-rest\u201d setting.</p> <p>The \u201csag\u201d solver uses Stochastic Average Gradient descent. It is faster than other solvers for large datasets, when both the number of samples and the number of features are large.</p> <p>The \u201csaga\u201d solver is a variant of \u201csag\u201d that also supports the non-smooth <code>penalty=\"l1\"</code>. This is therefore the solver of choice for sparse multinomial logistic regression. It is also the only solver that supports <code>penalty=\"elasticnet\"</code>.</p> <p>The \u201clbfgs\u201d is an optimization algorithm that approximates the Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno algorithm, which belongs to quasi-Newton methods. The \u201clbfgs\u201d solver is recommended for use for small data-sets but for larger datasets its performance suffers.</p> <p>The following table summarizes the penalties supported by each solver:</p> <p>Solvers</p> <p>Penalties</p> <p>\u2018liblinear\u2019</p> <p>\u2018lbfgs\u2019</p> <p>\u2018newton-cg\u2019</p> <p>\u2018sag\u2019</p> <p>\u2018saga\u2019</p> <p>Multinomial + L2 penalty</p> <p>no</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>OVR + L2 penalty</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>Multinomial + L1 penalty</p> <p>no</p> <p>no</p> <p>no</p> <p>no</p> <p>yes</p> <p>OVR + L1 penalty</p> <p>yes</p> <p>no</p> <p>no</p> <p>no</p> <p>yes</p> <p>Elastic-Net</p> <p>no</p> <p>no</p> <p>no</p> <p>no</p> <p>yes</p> <p>No penalty (\u2018none\u2019)</p> <p>no</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>Behaviors</p> <p>Penalize the intercept (bad)</p> <p>yes</p> <p>no</p> <p>no</p> <p>no</p> <p>no</p> <p>Faster for large datasets</p> <p>no</p> <p>no</p> <p>no</p> <p>yes</p> <p>yes</p> <p>Robust to unscaled datasets</p> <p>yes</p> <p>yes</p> <p>yes</p> <p>no</p> <p>no</p> <p>For more informations, see the paper.</p> <p>For comparision of performance of different solvers, see the article. </p> <p>Here are some of the parameters taken by the <code>LogisticRegression</code> class: * penalty: {\u2018l1\u2019, \u2018l2\u2019, \u2018elasticnet\u2019, \u2018none\u2019}, default=\u2019l2\u2019</p> <pre><code>Specify the norm of the penalty:\n\n* 'none': no penalty is added;\n\n* 'l2': add a L2 penalty term and it is the default choice;\n\n* 'l1': add a L1 penalty term;\n\n* 'elasticnet': both L1 and L2 penalty terms are added.\n</code></pre> <ul> <li> <p>tol: float, default=1e-4</p> <p>Tolerance for stopping criteria. * C: float, default=1.0</p> <p>Inverse of regularization strength; must be positive. Regularization is applied when C is greater than 0. * fit_intercept: bool, default=True</p> <p>Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered). * intercept_scaling: float, default=1.0</p> <p>When self.fit_intercept is True, instance vector y becomes y = intercept_scaling * y + intercept. Must be positive. * class_weight: {dict, \u2018balanced\u2019}, default=None</p> <p>Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y. The \u201cbalanced\u201d mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)). * solver: {\u2018newton-cg\u2019, \u2018lbfgs\u2019, \u2018liblinear\u2019, \u2018sag\u2019, \u2018saga\u2019}, default=\u2019lbfgs\u2019</p> <p>Algorithm to use in the optimization problem.  max_iter*: int, default=100</p> <p>Maximum number of iterations for the solver.   multi_class*: {\u2018ovr\u2019, \u2018multinomial\u2019}, default=\u2019ovr\u2019</p> <p>If the option chosen is \u2018ovr\u2019, then a binary problem is fit for each label. For \u2018multinomial\u2019 the loss minimised is the multinomial loss fit across the entire probability distribution, even when the data is binary. \u2018multinomial\u2019 is unavailable when solver=\u2019liblinear\u2019. \u2018auto\u2019 selects \u2018ovr\u2019 if the data is binary, or if solver=\u2019liblinear\u2019, and otherwise selects \u2018multinomial\u2019. * warm_start: bool, default=False</p> <p>When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. * l1_ratio: float, default=None</p> <p>The Elastic Net mixing parameter, with 0 &lt;= l1_ratio &lt;= 1. l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1.</p> </li> </ul> <p>The choice of the algorithm depends on the penalty chosen: Supported penalties by solver: * \u2018newton-cg\u2019 - [\u2018l2\u2019, \u2018none\u2019] * \u2018lbfgs\u2019 - [\u2018l2\u2019, \u2018none\u2019]</p> <ul> <li> <p>\u2018liblinear\u2019 - [\u2018l1\u2019, \u2018l2\u2019]</p> </li> <li> <p>\u2018sag\u2019 - [\u2018l2\u2019, \u2018none\u2019]</p> </li> <li> <p>\u2018saga\u2019 - [\u2018elasticnet\u2019, \u2018l1\u2019, \u2018l2\u2019, \u2018none\u2019]</p> </li> </ul> <p>The class has the following attributes: * classes_: array of shape (n_classes,)</p> <pre><code>A list of class labels known to the classifier.\n</code></pre> <ul> <li> <p>coef_: array, shape (1, n_features) or (n_classes, n_features)</p> <p>Coefficient of the features in the decision function.</p> <p><code>coef_</code> is of shape (1, n_features) when the given problem is binary. In particular, when <code>multi_class='multinomial'</code>, <code>coef_</code> corresponds to outcome 1 (True) and -<code>coef_</code> corresponds to outcome 0 (False). * intercept_: array, shape (1,) or (n_classes,)</p> <p>Intercept (a.k.a. bias) added to the decision function.</p> <p>If <code>fit_intercept</code> is set to False, the intercept is set to zero. <code>intercept_</code> is of shape (1,) when the given problem is binary. In particular, when <code>multi_class='multinomial'</code>, <code>intercept_</code> corresponds to outcome 1 (True) and -<code>intercept_</code> corresponds to outcome 0 (False).</p> </li> </ul>"},{"location":"Notes/ML/Logistic_Regression/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Logistic-Regression-in-Scikit-Learn\"&gt;Logistic Regression in Scikit-Learn&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Logistic Function</li> <li>LogisticRegression Class</li> <li>Solvers</li> <li>Parameters</li> <li>Attributes</li> </ol>"},{"location":"Notes/ML/Logistic_Regression/#logistic-regression-in-scikit-learn","title":"Logistic Regression in Scikit-Learn","text":""},{"location":"Notes/ML/Logistic_Regression/#logistic-function","title":"Logistic Function","text":""},{"location":"Notes/ML/Logistic_Regression/#logisticregression-class","title":"<code>LogisticRegression</code> Class","text":""},{"location":"Notes/ML/Logistic_Regression/#solvers","title":"Solvers","text":""},{"location":"Notes/ML/Logistic_Regression/#parameters","title":"Parameters","text":""},{"location":"Notes/ML/Logistic_Regression/#attributes","title":"Attributes","text":""},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/","title":"Multiclass Multioutput Algorithm","text":"<p>scikit-learn provides two modules to deal with  multiclass, multilabel, and multioutput classification and regression: <code>sklearn.multiclass</code> and <code>sklearn.multioutput</code>.</p> <p>The modules above implement meta-estimators, which require a base estimator to be provided in their constructor. Meta-estimators extend the functionality of the base estimator to support multi-learning problems, which is accomplished by transforming the multi-learning problem into a set of simpler problems, then fitting one estimator per problem.</p> <p></p> <p>Number of targets</p> <p>Target cardinality</p> <p>Valid  type_of_target <p>Multiclass classification</p> <p>1</p> <p>&gt;2</p> <p>\u2018multiclass\u2019</p> <p>Multilabel classification</p> <p>&gt;1</p> <p>2 (0 or 1)</p> <p>\u2018multilabel-indicator\u2019</p> <p>Multiclass-multioutput classification</p> <p>&gt;1</p> <p>&gt;2</p> <p>\u2018multiclass-multioutput\u2019</p> <p>Multioutput regression</p> <p>&gt;1</p> <p>Continuous</p> <p>\u2018continuous-multioutput\u2019</p> <p>A lot of scikit-learn estimators already have multi-class support built in and we don't need meta-estimators for them. Furthermor, a lot od estimators also support multi-label classification and multi-output regression.</p> <p>Multiclass classification is a classification task with more than two classes. Each sample can only be labeled as one class.</p> <p>For example, classification using features extracted from a set of images of fruit, where each image may either be of an orange, an apple, or a pear. Each image is one sample and is labeled as one of the 3 possible classes. Multiclass classification makes the assumption that each sample is assigned to one and only one label - one sample cannot, for example, be both a pear and an apple.</p> <p>While all scikit-learn classifiers are capable of multiclass classification, the meta-estimators offered by sklearn.multiclass permit changing the way they handle more than two classes because this may have an effect on classifier performance.</p> <p>Multilabel classification (closely related to multioutput classification) is a classification task labeling each sample with <code>m</code> labels from <code>n_classes</code> possible classes, where <code>m</code> can be 0 to <code>n_classes</code> inclusive. This can be thought of as predicting properties of a sample that are not mutually exclusive. Formally, a binary output is assigned to each class, for every sample. Positive classes are indicated with 1 and negative classes with 0 or -1. It is thus comparable to running <code>n_classes</code> binary classification tasks, for example with MultiOutputClassifier. This approach treats each label independently whereas multilabel classifiers may treat the multiple classes simultaneously, accounting for correlated behavior among them.</p> <p>For example, prediction of the topics relevant to a text document or video. The document or video may be about one of \u2018religion\u2019, \u2018politics\u2019, \u2018finance\u2019 or \u2018education\u2019, several of the topic classes or all of the topic classes.</p> <p>Multiclass-multioutput classification (also known as multitask classification) is a classification task which labels each sample with a set of non-binary properties. Both the number of properties and the number of classes per property is greater than 2. A single estimator thus handles several joint classification tasks. This is both a generalization of the multilabel classification task, which only considers binary attributes, as well as a generalization of the multiclass classification task, where only one property is considered.</p> <p>For example, classification of the properties \u201ctype of fruit\u201d and \u201ccolour\u201d for a set of images of fruit. The property \u201ctype of fruit\u201d has the possible classes: \u201capple\u201d, \u201cpear\u201d and \u201corange\u201d. The property \u201ccolour\u201d has the possible classes: \u201cgreen\u201d, \u201cred\u201d, \u201cyellow\u201d and \u201corange\u201d. Each sample is an image of a fruit, a label is output for both properties and each label is one of the possible classes of the corresponding property.</p> <p>Multioutput regression predicts multiple numerical properties for each sample. Each property is a numerical variable and the number of properties to be predicted for each sample is greater than or equal to 2. Some estimators that support multioutput regression are faster than just running <code>n_output</code> estimators.</p> <p>For example, prediction of both wind speed and wind direction, in degrees, using data obtained at a certain location. Each sample would be data obtained at one location and both wind speed and direction would be output for each sample.</p>"},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Multiclass-and-multioutput-algorithms\"&gt;Multiclass and multioutput algorithms&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Multiclass classification</li> <li>Multilabel classification</li> <li>Multiclass-multioutput classification</li> <li>Multioutput regression</li> </ol>"},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#multiclass-and-multioutput-algorithms","title":"Multiclass and multioutput algorithms","text":""},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#multiclass-classification","title":"Multiclass classification","text":""},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#multilabel-classification","title":"Multilabel classification","text":""},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#multiclass-multioutput-classification","title":"Multiclass-multioutput classification","text":""},{"location":"Notes/ML/Multiclass_Multioutput_Algorithm/#multioutput-regression","title":"Multioutput regression","text":""},{"location":"Notes/ML/Nearest_Neighbors/","title":"Nearest Neighbors","text":"<p>The principle behind nearest neighbor methods is to find a predefined number of training samples closest in distance to the new point, and predict the label from these. The number of samples can be a user-defined constant (k-nearest neighbor learning), or vary based on the local density of points (radius-based neighbor learning). The distance can, in general, be any metric measure: standard Euclidean distance is the most common choice. Neighbors-based methods are known as non-generalizing machine learning methods, since they simply \u201cremember\u201d all of its training data.</p> <p>Despite its simplicity, nearest neighbors has been successful in a large number of classification and regression problems, including handwritten digits and satellite image scenes. Being a non-parametric method, it is often successful in classification situations where the decision boundary is very irregular.</p> <p>Scikit-learn provides a number of nearest neighbors algorithms in the modeule <code>neighbors</code>.</p> <p><code>NearestNeighbors</code> implements unsupervised nearest neighbors learning. It acts as a uniform interface to three different nearest neighbors algorithms: <code>BallTree</code>, <code>KDTree</code>, and a brute-force algorithm based on routines in <code>sklearn.metrics.pairwise</code>. The choice of neighbors search algorithm is controlled through the keyword <code>algorithm</code>, which must be one of <code>['auto', 'ball_tree', 'kd_tree', 'brute']</code>. When the default value <code>'auto'</code> is passed, the algorithm attempts to determine the best approach from the training data.</p> <p>Fast computation of nearest neighbors is an active area of research in machine learning. The most naive neighbor search implementation involves the brute-force computation of distances between all pairs of points in the dataset: for \\(N\\) samples in \\(D\\) dimensions, this approach scales as \\(O[D N^2]\\). Efficient brute-force neighbors searches can be very competitive for small data samples. However, as the number of samples \\(N\\) grows, the brute-force approach quickly becomes infeasible. In the classes within sklearn.neighbors, brute-force neighbors searches are specified using the keyword <code>algorithm = 'brute'</code>.</p> <p>To address the computational inefficiencies of the brute-force approach, a variety of tree-based data structures have been invented. In general, these structures attempt to reduce the required number of distance calculations by efficiently encoding aggregate distance information for the sample. The basic idea is that if point \\(A\\) is very distant from point \\(B\\), and point \\(B\\) is very close to point \\(C\\), then we know that points \\(A\\) and \\(B\\) are very distant, without having to explicitly calculate their distance. In this way, the computational cost of a nearest neighbors search can be reduced to \\(O[D N \\log(N)]\\) or better. This is a significant improvement over brute-force for large \\(N\\).</p> <p>Though the KD tree approach is very fast for low-dimensional (\\(D &lt; 20\\)) neighbors searches, it becomes inefficient as \\(D\\) grows very large: this is one manifestation of the so-called \u201ccurse of dimensionality\u201d. In scikit-learn, KD tree neighbors searches are specified using the keyword <code>algorithm = 'kd_tree'</code>, and are computed using the class <code>KDTree</code>.</p> <p>See the paper for more details.</p> <p>To address the inefficiencies of KD Trees in higher dimensions, the ball tree data structure was developed. Where KD trees partition data along Cartesian axes, ball trees partition data in a series of nesting hyper-spheres. This makes tree construction more costly than that of the KD tree, but results in a data structure which can be very efficient on highly structured data, even in very high dimensions.</p> <p>With this setup, a single distance calculation between a test point and the centroid is sufficient to determine a lower and upper bound on the distance to all points within the node. Because of the spherical geometry of the ball tree nodes, it can out-perform a KD-tree in high dimensions, though the actual performance is highly dependent on the structure of the training data. In scikit-learn, ball-tree-based neighbors searches are specified using the keyword <code>algorithm = 'ball_tree'</code>, and are computed using the class <code>BallTree</code>.</p> <p>See the paper for more details.</p> <p>scikit-learn implements two different nearest neighbors classifiers: <code>KNeighborsClassifier</code> implements learning based on the \\(k\\) nearest neighbors of each query point, where \\(k\\) is an integer value specified by the user. <code>RadiusNeighborsClassifier</code> implements learning based on the number of neighbors within a fixed radius \\(r\\) of each training point, where \\(r\\) is a floating-point value specified by the user.</p> <p>The \\(k\\)-neighbors classification in <code>KNeighborsClassifier</code> is the most commonly used technique. The optimal choice of the value \\(k\\) is highly data-dependent: in general a larger \\(k\\) suppresses the effects of noise, but makes the classification boundaries less distinct.</p> <p>In cases where the data is not uniformly sampled, radius-based neighbors classification in <code>RadiusNeighborsClassifier</code> can be a better choice. The user specifies a fixed radius \\(r\\), such that points in sparser neighborhoods use fewer nearest neighbors for the classification. For high-dimensional parameter spaces, this method becomes less effective due to the so-called \u201ccurse of dimensionality\u201d.</p> <p>The basic nearest neighbors classification uses uniform weights: that is, the value assigned to a query point is computed from a simple majority vote of the nearest neighbors. Under some circumstances, it is better to weight the neighbors such that nearer neighbors contribute more to the fit. This can be accomplished through the <code>weights</code> keyword. The default value, <code>weights = 'uniform'</code>, assigns uniform weights to each neighbor. <code>weights = 'distance'</code> assigns weights proportional to the inverse of the distance from the query point. Alternatively, a user-defined function of the distance can be supplied to compute the weights.</p> <p></p> <p></p> <p>Neighbors-based regression can be used in cases where the data labels are continuous rather than discrete variables. The label assigned to a query point is computed based on the mean of the labels of its nearest neighbors.</p> <p>Same as with classification, scikit-learn implements two different nearest neighbors classifiers: <code>KNeighborsRegressor</code> implements learning based on the \\(k\\) nearest neighbors of each query point, where \\(k\\) is an integer value specified by the user. <code>RadiusNeighborsRegressor</code> implements learning based on the number of neighbors within a fixed radius \\(r\\) of each training point, where \\(r\\) is a floating-point value specified by the user.</p> <p>Also, similar to the classification algorithms, user can provide the <code>weights</code> keyword to control the weights assigned to each neighbor.</p> <p></p> <p>Here are some of the parameters of the <code>KNeighborsClassifier</code> class:</p> <ul> <li> <p>n_neighbors: int, optional (default=5)</p> <p>The number of neighbors to use for classification * weights: {\u2018uniform\u2019, \u2018distance\u2019} or callable, default=\u2019uniform\u2019</p> <p>Weight function used in prediction. Possible values:</p> <ul> <li>'uniform' : uniform weights. All points in each neighborhood are weighted equally.</li> <li>'distance' : weight points by the inverse of their distance. In this case, closer neighbors of a query point will have a greater influence over the predicted outcome.</li> <li>[callable] : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights.</li> <li>algorithm: {\u2018auto\u2019, \u2018ball_tree\u2019, \u2018kd_tree\u2019, \u2018brute\u2019}, default=\u2019auto\u2019</li> </ul> <p>Algorithm used to compute the nearest neighbors:</p> <ul> <li>\u2018ball_tree\u2019 will use <code>BallTree</code></li> <li>\u2018kd_tree\u2019 will use a <code>KDTree</code></li> <li>\u2018brute\u2019 will use a brute-force search.</li> <li>\u2018auto\u2019 will will attempt to decide the most appropriate algorithm based on the values passed to fit method.</li> <li>leaf_size: int, optional (default=30)</li> </ul> <p>Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem. * p: int, optional (default=2)</p> <p>Power parameter for the Minkowski metric. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used. * metric: string or callable, default=\u2019minkowski\u2019</p> <p>The distance metric to use for the tree. The default metric is minkowski, and with p=2 is equivalent to the standard Euclidean metric. See the documentation of the <code>DistanceMetric</code> class for a list of available metrics.</p> </li> </ul> <p>Here are some of the attributes of the <code>KNeighborsClassifier</code> class:</p> <ul> <li> <p>classes_: array of shape (n_classes,)</p> <p>The classes labels. * effective_metric_: string</p> <p>The effective distance metric used for the training data.</p> </li> </ul> <p>The class also has a method called <code>kneighbors</code> which Find the K-neighbors of a point. It returns indices of and distances to the neighbors of each point.</p> <p>The parameters of the <code>RadiusNeighborsClassifier</code> class are similar to those of the <code>KNeighborsClassifier</code> class with the exceptions that the <code>RadiusNeighborsClassifier</code> class uses the keyword <code>radius</code> instead of <code>n_neighbors</code>. The <code>radius</code> keywords accepts a floating-point value representing the radius of the neighborhood. Default value is 1.0.</p> <p>Same as with the <code>KNeighborsClassifier</code>.</p> <p>Same as with the <code>KNeighborsClassifier</code>.</p> <p>Same as with the <code>KNeighborsClassifier</code> but it does not have the <code>classes_</code> attribute, obviusly.</p> <p>Same as with the <code>RadiusNeighborsClassifier</code>.</p> <p>Same as with the <code>RadiusNeighborsClassifier</code> but it does not have the <code>classes_</code> attribute.</p>"},{"location":"Notes/ML/Nearest_Neighbors/#nearest-neighbors","title":"Nearest Neighbors","text":""},{"location":"Notes/ML/Nearest_Neighbors/#nearest-neighbor-algorithms","title":"Nearest Neighbor Algorithms","text":""},{"location":"Notes/ML/Nearest_Neighbors/#brute-force","title":"Brute Force","text":""},{"location":"Notes/ML/Nearest_Neighbors/#kdtree","title":"KDTree","text":""},{"location":"Notes/ML/Nearest_Neighbors/#ball-tree","title":"Ball Tree","text":""},{"location":"Notes/ML/Nearest_Neighbors/#supervised-nearest-neighbors","title":"Supervised Nearest Neighbors","text":""},{"location":"Notes/ML/Nearest_Neighbors/#nearest-neighbors-classification","title":"Nearest Neighbors Classification","text":""},{"location":"Notes/ML/Nearest_Neighbors/#nearest-neighbors-regression","title":"Nearest Neighbors Regression","text":""},{"location":"Notes/ML/Nearest_Neighbors/#kneighborsclassifier","title":"KNeighborsClassifier","text":""},{"location":"Notes/ML/Nearest_Neighbors/#parameters-of-kneighborsclassifier","title":"Parameters of <code>KNeighborsClassifier</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#attributes-of-kneighborsclassifier","title":"Attributes of <code>KNeighborsClassifier</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#radiusneighborsclassifier","title":"RadiusNeighborsClassifier","text":""},{"location":"Notes/ML/Nearest_Neighbors/#parameters-of-radiusneighborsclassifier","title":"Parameters of <code>RadiusNeighborsClassifier</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#attributes-of-radiusneighborsclassifier","title":"Attributes of <code>RadiusNeighborsClassifier</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#kneighborsregressor","title":"KNeighborsRegressor","text":""},{"location":"Notes/ML/Nearest_Neighbors/#parameters-of-kneighborsregressor","title":"Parameters of <code>KNeighborsRegressor</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#attributes-of-kneighborsregressor","title":"Attributes of <code>KNeighborsRegressor</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#radiusneighborsregressor","title":"RadiusNeighborsRegressor","text":""},{"location":"Notes/ML/Nearest_Neighbors/#parameters-of-radiusneighborsregressor","title":"Parameters of <code>RadiusNeighborsRegressor</code>","text":""},{"location":"Notes/ML/Nearest_Neighbors/#attributes-of-radiusneighborsregressor","title":"Attributes of <code>RadiusNeighborsRegressor</code>","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/","title":"Stochastic Gradient Descent","text":"<p>Stochastic Gradient Descent (SGD) is a simple yet very efficient approach to fitting linear classifiers and regressors under convex loss functions such as (linear) Support Vector Machines and Logistic Regression. </p> <p>SGD has been successfully applied to large-scale and sparse machine learning problems often encountered in text classification and natural language processing. Given that the data is sparse, the classifiers in this module easily scale to problems with more than \\(10^5\\) training examples and more than \\(10^5\\) features.</p> <p>Strictly speaking, SGD is merely an optimization technique and does not correspond to a specific family of machine learning models. It is only a way to train a model. Often, an instance of <code>SGDClassifier</code> or <code>SGDRegressor</code> will have an equivalent estimator in the scikit-learn API, potentially using a different optimization technique. For example, using <code>SGDClassifier(loss='log_loss')</code> results in logistic regression, i.e. a model equivalent to <code>LogisticRegression</code> which is fitted via SGD instead of being fitted by one of the other solvers in <code>LogisticRegression</code>. Similarly,<code>SGDRegressor(loss='squared_error', penalty='l2')</code> and <code>Ridge</code> solve the same optimization problem, via different means.</p> <p>The advantages of Stochastic Gradient Descent are: * Efficiency.</p> <ul> <li>Ease of implementation (lots of opportunities for code tuning).</li> </ul> <p>The disadvantages of Stochastic Gradient Descent include:</p> <ul> <li> <p>SGD requires a number of hyperparameters such as the regularization parameter and the number of iterations.</p> </li> <li> <p>SGD is sensitive to feature scaling.</p> </li> </ul> <p>The class SGDClassifier implements a plain stochastic gradient descent learning routine which supports different loss functions and penalties for classification.</p> <pre><code>from sklearn.linear_model import SGDClassifier\nX = [[0., 0.], [1., 1.]]\ny = [0, 1]\nclf = SGDClassifier(loss=\"hinge\", penalty=\"l2\", max_iter=10)\nclf.fit(X, y)\nprint(clf.predict([[2., 2.]]))\n</code></pre> <pre>\n<code>[1]\n</code>\n</pre> <p>SGD fits a linear model to the training data.</p> <pre><code>clf.coef_, clf.intercept_\n</code></pre> <pre>\n<code>(array([[9.85221675, 9.85221675]]), array([-9.99002993]))</code>\n</pre> <p>The signed distance to the hyperplane (computed as the dot product between the coefficients and the input sample, plus the intercept) is given by <code>SGDClassifier.decision_function</code>:</p> <pre><code>clf.decision_function([[2., 2.]])\n</code></pre> <pre>\n<code>array([29.41883706])</code>\n</pre> <p>The concrete loss function can be set via the loss parameter. <code>SGDClassifier</code> supports the following loss functions:</p> <ul> <li> <p><code>loss=\"hinge\"</code>: (soft-margin) linear Support Vector Machine,</p> </li> <li> <p><code>loss=\"modified_huber\"</code>: smoothed hinge loss,</p> </li> <li> <p><code>loss=\"log\"</code>: logistic regression,</p> </li> </ul> <p>and all regression losses. In this case the target is encoded as -1 or 1, and the problem is treated as a regression problem. The predicted class then correspond to the sign of the predicted target.</p> <p>The first two loss functions are lazy, they only update the model parameters if an example violates the margin constraint, which makes training very efficient and may result in sparser models (i.e. with more zero coefficients), even when L2 penalty is used.</p> <p>Using <code>loss=\"log\"</code> or <code>loss=\"modified_huber\"</code> enables the <code>predict_proba</code> method, which gives a vector of probability estimates \\(P(y|x)\\) per sample \\(x\\):</p> <pre><code>clf = SGDClassifier(loss=\"log\", max_iter=10).fit(X, y)\nclf.predict_proba([[1., 1.]])\n</code></pre> <pre>\n<code>array([[0.00416343, 0.99583657]])</code>\n</pre> <p>The concrete penalty can be set via the penalty parameter. SGD supports the following penalties:</p> <ul> <li> <p>penalty=\"l2\": L2 norm penalty on <code>coef_</code>.</p> </li> <li> <p>penalty=\"l1\": L1 norm penalty on <code>coef_</code>.</p> </li> <li> <p>penalty=\"elasticnet\": Convex combination of L2 and L1; <code>(1 - l1_ratio) * L2 + l1_ratio * L1.</code></p> </li> </ul> <p>SGDClassifier supports multi-class classification by combining multiple binary classifiers in a \u201cone versus all\u201d (OVA) scheme. For each of the \\(K\\) classes, a binary classifier is learned that discriminates between that and all other \\(K-1\\) classes. At testing time, we compute the confidence score (i.e. the signed distances to the hyperplane) for each classifier and choose the class with the highest confidence. </p> <p>The Figure below illustrates the OVA approach on the iris dataset. The dashed lines represent the three OVA classifiers; the background colors show the decision surface induced by the three classifiers.</p> <p></p> <p>In the case of multi-class classification <code>coef_</code> is a two-dimensional array of shape (n_classes, n_features) and <code>intercept_</code> is a one-dimensional array of shape (n_classes,). The i-th row of <code>coef_</code> holds the weight vector of the OVA classifier for the i-th class; classes are indexed in ascending order. Note that, in principle, since they allow to create a probability model, loss=\"log_loss\" and loss=\"modified_huber\" are more suitable for one-vs-all classification.</p> <p>Here are some of the parameters of SGDClassifier: * loss : {\u2018hinge\u2019, \u2018log_loss\u2019, \u2018log\u2019, \u2018modified_huber\u2019, \u2018squared_hinge\u2019, \u2018perceptron\u2019, \u2018squared_error\u2019, \u2018huber\u2019, \u2018epsilon_insensitive\u2019, \u2018squared_epsilon_insensitive\u2019}, default=\u2019hinge\u2019</p> <pre><code>The loss function to be used.\n\n* \u2018hinge\u2019 gives a linear SVM.\n\n* \u2018log_loss\u2019 gives logistic regression, a probabilistic classifier.\n\n* \u2018modified_huber\u2019 is another smooth loss that brings tolerance to\noutliers as well as probability estimates.\n\n* \u2018squared_hinge\u2019 is like hinge but is quadratically penalized.\n\n* \u2018perceptron\u2019 is the linear loss used by the perceptron algorithm.\n\n* The other losses, \u2018squared_error\u2019, \u2018huber\u2019, \u2018epsilon_insensitive\u2019 and \u2018squared_epsilon_insensitive\u2019 are designed for regression but can be useful in classification as well.\n</code></pre> <ul> <li> <p>penalty : {\u2018l2\u2019, \u2018l1\u2019, \u2018elasticnet\u2019}, default=\u2019l2\u2019</p> <p>The penalty (aka regularization term) to be used.</p> <ul> <li> <p>\u2018l2\u2019 is the standard regularizer used in ridge regression.</p> </li> <li> <p>\u2018l1\u2019 is the standard regularizer used in lasso regression.</p> </li> <li> <p>\u2018elasticnet\u2019 is a combination of L1 and L2 regularization that is also known as the elastic net.</p> </li> <li>l_1_ratio : float, optional, default=0.15</li> </ul> <p>The Elastic Net mixing parameter, with 0 &lt;= l1_ratio &lt;= 1. l1_ratio=0 corresponds to L2 penalty, l1_ratio=1 to L1. * fit_intercept : bool, optional, default=True</p> <p>Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered). * max_iter : int, optional, default=1000</p> <p>Maximum number of iterations for the solver. The solver iterates until convergence (determined by \u2018tol\u2019) or this number of iterations.</p> <p>Maximum number of iterations for conjugate gradient solver. * tol : float, optional, default=1e-3</p> <p>Tolerance for stopping criteria. * shuffle : bool, optional, default=True</p> <p>Whether or not the training data should be shuffled before each epoch. * epsilon : float, optional, default=0.1</p> <p>Epsilon in the epsilon-insensitive loss functions; only if loss is \u2018huber\u2019, \u2018epsilon_insensitive\u2019, or \u2018squared_epsilon_insensitive\u2019. For \u2018huber\u2019, determines the threshold at which it becomes less important to get the prediction exactly right. For epsilon-insensitive, any differences between the current prediction and the correct label are ignored if they are less than this threshold. Values must be in the range [0.0, inf).</p> </li> <li> <p>alpha : float, optional, default=0.0001</p> <p>Constant that multiplies the regularization term. The higher the value, the stronger the regularization. Also used to compute the learning rate when set to learning_rate is set to \u2018optimal\u2019. Values must be in the range [0.0, inf).</p> </li> <li> <p>learning_rate : {\u2018constant\u2019, \u2018optimal\u2019, \u2018invscaling\u2019, \u2018adaptive\u2019}, optional, default=\u2019constant\u2019</p> <p>The learning rate schedule. * \u2018constant\u2019: eta = eta0</p> <ul> <li> <p>\u2018optimal\u2019: eta = 1.0 / (alpha * (t + t0)) where t0 is chosen by a heuristic proposed by Leon Bottou.</p> </li> <li> <p>\u2018invscaling\u2019: eta = eta0 / pow(t, power_t)</p> </li> <li> <p>\u2018adaptive\u2019: eta = eta0, as long as the training keeps decreasing. Each time n_iter_no_change consecutive epochs fail to decrease the training loss by tol or fail to increase validation score by tol if early_stopping is True, the current learning rate is divided by 5.</p> </li> <li>eta0 : float, optional, default=0.0</li> </ul> <p>The initial learning rate for the \u2018constant\u2019 or \u2018invscaling\u2019 schedules. The default value is 0.0. * power_t : float, optional, default=0.5</p> <p>The exponent for inverse scaling learning rate. It is used only when learning_rate is set to \u2018invscaling\u2019.</p> </li> <li> <p>early_stopping : bool, optional, default=False</p> <p>Whether to use early stopping to terminate training when validation score is not improving. If set to true, it will automatically set aside 10% of training data as validation and terminate training when validation score is not improving by at least tol for n_iter_no_change consecutive epochs.</p> </li> <li> <p>n_iter_no_change : int, optional, default=5</p> <p>Number of iterations with no improvement after which training will be terminated.</p> </li> <li> <p>class_weight : dict, {class_label: weight}, optional, default=None</p> <p>Weights associated with classes. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y. The \u2018balanced\u2019 mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data. For multi-output, the weights are normalized separately for each column. * warm_start : bool, optional, default=False</p> <p>When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution.</p> </li> </ul> <ul> <li> <p>coef_ : array, shape (1, n_features) or (n_classes, n_features)</p> <p>Weights assigned to the features. * intercept_ : array, shape (1,) or (n_classes,)</p> <p>Constant bias assigned to the samples. * n_iter_ : int</p> <pre><code>Number of iterations run.\n</code></pre> <ul> <li>classes_ : array of shape (n_classes,)</li> </ul> <p>The classes labels.</p> </li> </ul> <pre><code>import numpy as np\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nX = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\nY = np.array([1, 1, 2, 2])\nclf = make_pipeline(StandardScaler(),\n                    SGDClassifier(max_iter=1000, tol=1e-3))\nclf.fit(X, Y)\n\n\nprint(clf.predict([[-0.8, -1]]))\n</code></pre> <pre>\n<code>[1]\n</code>\n</pre> <p>The class <code>SGDRegressor</code> implements a plain stochastic gradient descent learning routine which supports different loss functions and penalties to fit linear regression models. <code>SGDRegressor</code> is well suited for regression problems with a large number of training samples.</p> <p>The concrete loss function can be set via the loss parameter. <code>SGDRegressor</code> supports the following loss functions:</p> <ul> <li> <p>loss=\"squared_error\": Ordinary least squares,</p> </li> <li> <p>loss=\"huber\": Huber loss for robust regression,</p> </li> <li> <p>loss=\"epsilon_insensitive\": linear Support Vector Regression.</p> </li> </ul> <p>The <code>SGDRegressor</code> class has the same parameters as the <code>SGDClassifier</code> class. Only the <code>loss</code> parameter is different.</p> <p>The <code>SGDRegressor</code> class has the same attributes as the <code>SGDClassifier</code> class except for the <code>classes_</code> attribute.</p> <pre><code>import numpy as np\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nn_samples, n_features = 10, 5\nrng = np.random.RandomState(0)\ny = rng.randn(n_samples)\nX = rng.randn(n_samples, n_features)\n# Always scale the input. The most convenient way is to use a pipeline.\nreg = make_pipeline(StandardScaler(),\n                    SGDRegressor(max_iter=1000, tol=1e-3))\nreg.fit(X, y)\n</code></pre> <pre>\n<code>Pipeline(steps=[('standardscaler', StandardScaler()),\n                ('sgdregressor', SGDRegressor())])</code>\n</pre> <p>The major advantage of SGD is its efficiency, which is basically linear in the number of training examples. If X is a matrix of size (n, p) training has a cost of \\(O(k n \\bar p)\\) , where k is the number of iterations (epochs) and  \\(\\bar{p}\\) is the average number of non-zero attributes per sample</p> <p>The classes <code>SGDClassifier</code> and <code>SGDRegressor</code> provide two criteria to stop the algorithm when a given level of convergence is reached:</p> <ul> <li> <p>With <code>early_stopping=True</code>, the input data is split into a training set and a validation set. The model is then fitted on the training set, and the stopping criterion is based on the prediction score (using the score method) computed on the validation set. The size of the validation set can be changed with the parameter <code>validation_fraction</code>.</p> </li> <li> <p>With <code>early_stopping=False</code>, the model is fitted on the entire input data and the stopping criterion is based on the objective function computed on the training data.</p> </li> </ul> <p>In both cases, the criterion is evaluated once by epoch, and the algorithm stops when the criterion does not improve <code>n_iter_no_change</code> times in a row. The improvement is evaluated with absolute tolerance <code>tol</code>, and the algorithm stops in any case after a maximum number of iteration <code>max_iter</code>.</p> <p>Given a set of training examples \\((x_1, y_1), \\ldots, (x_n, y_n)\\), our goal is to find a linear model \\(f(x) = w^T x + b\\) which minimizes the following loss function: $$ E(w,b) = \\frac{1}{n}\\sum_{i=1}^{n} L(y_i, f(x_i)) + \\alpha R(w) $$ where \\(L\\) is a loss function that measures model (mis)fit and \\(R\\) is a regularization term (aka penalty) that penalizes model complexity; \\(\\alpha\\) is a non-negative hyperparameter that controls the regularization strength.</p> <p>The choice of \\(L\\) determines which loss function is used. The choice of \\(R\\) determines the regularization term.</p> <p>Stochastic gradient descent is an optimization method for unconstrained optimization problems. In contrast to (batch) gradient descent, SGD approximates the true gradient of \\(E(w,b)\\) by considering a single training example at a time.</p> <p>The class <code>SGDClassifier</code> implements a first-order SGD learning routine. The algorithm iterates over the training examples and for each example updates the model parameters according to the update rule given by: \\(\\(w \\leftarrow w - \\eta \\left[\\alpha \\frac{\\partial R(w)}{\\partial w} + \\frac{\\partial L(w^T x_i + b, y_i)}{\\partial w}\\right]\\)\\)</p> <p>where \\(\\eta\\) is the learning rate which controls the step-size in the parameter space. The intercept \\(b\\) is updated similarly but without regularization. The learning rate can be sheduled over the training epochs.</p>"},{"location":"Notes/ML/Stochastic_Gradient_Descent/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Stochastic-Gradient-Descent\"&gt;Stochastic Gradient Descent&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>SGDClassifier</li> <ol><li>Loss functions</li> <li>Penalties</li> <li>Multi-class classification</li> <li>Parameters of SGDClassifier</li> <li>Attributes of SGDClassifier</li> </ol><li>SGDRegressor</li> <ol><li>Parameters of SGDRegressor</li> <li>Attributes of SGDRegressor</li> </ol><li>More Informations on SGD</li> <ol><li>Time Complexity</li> <li>Stopping Criterion</li> <li>Mathematical Details</li> </ol> </ol>"},{"location":"Notes/ML/Stochastic_Gradient_Descent/#stochastic-gradient-descent","title":"Stochastic Gradient Descent","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#sgdclassifier","title":"SGDClassifier","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#loss-functions","title":"Loss functions","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#penalties","title":"Penalties","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#multi-class-classification","title":"Multi-class classification","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#parameters-of-sgdclassifier","title":"Parameters of SGDClassifier","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#attributes-of-sgdclassifier","title":"Attributes of SGDClassifier","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#sgdregressor","title":"SGDRegressor","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#parameters-of-sgdregressor","title":"Parameters of SGDRegressor","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#attributes-of-sgdregressor","title":"Attributes of SGDRegressor","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#more-informations-on-sgd","title":"More Informations on SGD","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#time-complexity","title":"Time Complexity","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#stopping-criterion","title":"Stopping Criterion","text":""},{"location":"Notes/ML/Stochastic_Gradient_Descent/#mathematical-details","title":"Mathematical Details","text":""},{"location":"Notes/ML/Support_Vector_Machine/","title":"Support Vector Machine","text":"<p>Support vector machines (SVMs) are a set of supervised learning methods used for classification, regression and outliers detection.</p> <p>The advantages of support vector machines are:</p> <ul> <li> <p>Effective in high dimensional spaces.</p> </li> <li> <p>Still effective in cases where number of dimensions is greater than the number of samples.</p> </li> <li> <p>Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient.</p> </li> <li> <p>Versatile: different Kernel functions can be specified for the decision function. Common kernels are provided, but it is also possible to specify custom kernels.</p> </li> </ul> <p>The disadvantages of support vector machines include:</p> <ul> <li> <p>If the number of features is much greater than the number of samples, avoid over-fitting in choosing Kernel functions and regularization term is crucial.</p> </li> <li> <p>SVMs do not directly provide probability estimates, these are calculated using an expensive five-fold cross-validation (see Scores and probabilities, below).</p> </li> </ul> <p>A support vector machine constructs a hyper-plane or set of hyper-planes in a high or infinite dimensional space, which can be used for classification, regression or other tasks. Intuitively, a good separation is achieved by the hyper-plane that has the largest distance to the nearest training data points of any class (so-called functional margin), since in general the larger the margin the lower the generalization error of the classifier. The figure below shows the decision function for a linearly separable problem, with three samples on the margin boundaries, called \u201csupport vectors\u201d.</p> <p></p> <p>In general, when the problem isn\u2019t linearly separable, the support vectors are the samples within the margin boundaries.</p> <p>Given training vectors \\(x_i \\in \\mathbb{R}^p\\) , i=1,\u2026, n, in two classes, and a vector \\(y \\in \\{1, -1\\}^n\\), our goal is to find \\(w \\in \\mathbb{R}^p\\) and \\(b \\in \\mathbb{R}\\) such that the prediction given by \\(\\text{sign} (w^T\\phi(x) + b)\\) is correct for most samples.</p> <p>SVC solves the following primal problem: $$ \\begin{align}\\begin{aligned}\\min_ {w, b, \\zeta} \\frac{1}{2} w^T w + C \\sum_{i=1}^{n} \\zeta_i\\\\begin{split}\\textrm {subject to } &amp; y_i (w^T \\phi (x_i) + b) \\geq 1 - \\zeta_i,\\ &amp; \\zeta_i \\geq 0, i=1, ..., n\\end{split}\\end{aligned}\\end{align} $$</p> <p>Intuitively, we\u2019re trying to maximize the margin (by minimizing \\(||w||^2 = w^Tw\\)), while incurring a penalty when a sample is misclassified or within the margin boundary. Ideally, the value \\(y_i (w^T \\phi (x_i) + b)\\) would be \\(\\ge 1\\) for all samples, which indicates a perfect prediction. But problems are usually not always perfectly separable with a hyperplane, so we allow some samples to be at a distance \\(\\zeta_i\\) from their correct margin boundary. The penalty term <code>C</code> controls the strength of this penalty, and as a result, acts as an inverse regularization parameter.</p> <p>The same problem can also be written as: \\(\\(\\begin{align*}\\begin{aligned}\\min_{\\alpha} \\frac{1}{2} \\alpha^T Q \\alpha - e^T \\alpha\\\\\\begin{split} \\textrm {subject to } &amp; y^T \\alpha = 0\\\\ &amp; 0 \\leq \\alpha_i \\leq C, i=1, ..., n\\end{split}\\end{aligned}\\end{align*}\\)\\)</p> <p>where \\(e\\) is the vector of all ones, and \\(Q\\) is an \\(n\\) by \\(n\\) positive semidefinite matrix,\\(Q_{ij} \\equiv y_i y_j K(x_i, x_j)\\) , where \\(K(x_i, x_j) = \\phi (x_i)^T \\phi (x_j)\\) is the kernel. The terms \\(\\alpha_i\\) are called the dual coefficients, and they are upper-bounded by C. This dual representation highlights the fact that training vectors are implicitly mapped into a higher (maybe infinite) dimensional space by the function \\(\\phi\\).</p> <p>Once the optimization problem is solved, the output of decision_function for a given sample \\(x\\) becomes: \\(\\(\\sum_{i\\in SV} y_i \\alpha_i K(x_i, x) + b,\\)\\) and the predicted class correspond to its sign. We only need to sum over the support vectors (i.e. the samples that lie within the margin) because the dual coefficients \\(\\alpha_i\\) are zero for the other samples.</p> <p>These parameters can be accessed through the attributes <code>dual_coef_</code> which holds the product \\(y_i \\alpha_i\\), <code>support_vectors_</code> which holds the support vectors, and <code>intercept_</code> which holds the independent term b.</p> <p>The primal problem can be equivalently formulated as \\(\\(\\min_ {w, b} \\frac{1}{2} w^T w + C \\sum_{i=1}^{n}\\max(0, 1 - y_i (w^T \\phi(x_i) + b)),\\)\\) where we make use of the hinge loss. This is the form that is directly optimized by <code>LinearSVC</code>, but unlike the dual form, this one does not involve inner products between samples, so the famous kernel trick cannot be applied. This is why only the linear kernel is supported by <code>LinearSVC</code>.</p> <p>Given training vectors \\(x_i \\in \\mathbb{R}^p\\), i=1,\u2026, n, and a vector \\(y \\in \\mathbb{R}^n\\) \\(\\epsilon\\)-SVR solves the following primal problem: $$ \\begin{align}\\begin{aligned}\\min_ {w, b, \\zeta, \\zeta^} \\frac{1}{2} w^T w + C \\sum_{i=1}^{n} (\\zeta_i + \\zeta_i^)\\\\begin{split}\\textrm {subject to } &amp; y_i - w^T \\phi (x_i) - b \\leq \\varepsilon + \\zeta_i,\\                       &amp; w^T \\phi (x_i) + b - y_i \\leq \\varepsilon + \\zeta_i^,\\                       &amp; \\zeta_i, \\zeta_i^ \\geq 0, i=1, ..., n\\end{split}\\end{aligned}\\end{align} $$</p> <p>Here, we are penalizing samples whose prediction is at least \\(\\epsilon\\) away from their true target. These samples penalize the objective by \\(\\zeta_i\\) or \\(\\zeta_i^*\\) , depending on whether their predictions lie above or below the \\(\\epsilon\\) tube.</p> <p>The dual problem is: $$ \\begin{align}\\begin{aligned}\\min_{\\alpha, \\alpha^} \\frac{1}{2} (\\alpha - \\alpha^)^T Q (\\alpha - \\alpha^) + \\varepsilon e^T (\\alpha + \\alpha^) - y^T (\\alpha - \\alpha^)\\\\begin{split} \\textrm {subject to } &amp; e^T (\\alpha - \\alpha^) = 0\\ &amp; 0 \\leq \\alpha_i, \\alpha_i^ \\leq C, i=1, ..., n\\end{split}\\end{aligned}\\end{align*} $$</p> <p>where \\(e\\) is the vector of all ones, \\(Q\\) is an \\(n\\) by \\(n\\) positive semidefinite matrix, \\(Q_{ij} \\equiv K(x_i, x_j) = \\phi (x_i)^T \\phi (x_j)\\) is the kernel. Here training vectors are implicitly mapped into a higher (maybe infinite) dimensional space by the function \\(\\phi\\).</p> <p>The prediction is: $$ \\sum_{i \\in SV}(\\alpha_i - \\alpha_i^*) K(x_i, x) + b $$ These parameters can be accessed through the attributes <code>dual_coef_</code> which holds the difference \\(\\alpha_i - \\alpha_i^*\\) , <code>support_vectors_</code> which holds the support vectors, and <code>intercept_</code> which holds the independent term \\(b\\).</p> <p>The primal problem can equivalenty be written as: \\(\\(\\min_ {w, b} \\frac{1}{2} w^T w + C \\sum_{i=1}\\max(0, |y_i - (w^T \\phi(x_i) + b)| - \\varepsilon),\\)\\) where we make use of the epsilon-insensitive loss, i.e. errors of less than \\(\\epsilon\\) are ignored. This is the form that is directly optimized by <code>LinearSVR</code>.</p> <p><code>SVC</code>, <code>NuSVC</code> and <code>LinearSVC</code> are classes capable of performing binary and multi-class classification on a dataset. <code>SVC</code> and <code>NuSVC</code> are similar methods, but accept slightly different sets of parameters and have different mathematical formulations (see section Mathematical formulation). On the other hand, <code>LinearSVC</code> is another (faster) implementation of Support Vector Classification for the case of a linear kernel.</p> <p><code>SVC</code> and <code>NuSVC</code> implement the \u201cone-versus-one\u201d approach for multi-class classification. In total, n_classes * (n_classes - 1) / 2 classifiers are constructed and each one trains data from two classes. To provide a consistent interface with other classifiers, the decision_function_shape option allows to monotonically transform the results of the \u201cone-versus-one\u201d classifiers to a \u201cone-vs-rest\u201d decision function of shape (n_samples, n_classes).</p> <p>On the other hand, <code>LinearSVC</code> implements \u201cone-vs-the-rest\u201d multi-class strategy, thus training n_classes models.</p> <p>The method of Support Vector Classification can be extended to solve regression problems. This method is called Support Vector Regression.</p> <p>The model produced by support vector classification (as described above) depends only on a subset of the training data, because the cost function for building the model does not care about training points that lie beyond the margin. Analogously, the model produced by Support Vector Regression depends only on a subset of the training data, because the cost function ignores samples whose prediction is close to their target.</p> <p>There are three different implementations of Support Vector Regression: <code>SVR</code>, <code>NuSVR</code> and <code>LinearSVR</code>. <code>LinearSVR</code> provides a faster implementation than <code>SVR</code> but only considers the linear kernel, while <code>NuSVR</code> implements a slightly different formulation than <code>SVR</code> and <code>LinearSVR</code>.</p> <p>Support Vector Machines are powerful tools, but their compute and storage requirements increase rapidly with the number of training vectors. The core of an SVM is a quadratic programming problem (QP), separating support vectors from the rest of the training data. The QP solver used by the libsvm-based implementation scales between \\(O(n_{features} \\times n_{samples}^2)\\)  and \\(O(n_{features} \\times n_{samples}^3)\\)  depending on how efficiently the libsvm cache is used in practice (dataset dependent). If the data is very sparse  should be replaced by the average number of non-zero features in a sample vector.</p> <p>For the linear case, the algorithm used in <code>LinearSVC</code> by the liblinear implementation is much more efficient than its libsvm-based <code>SVC</code> counterpart and can scale almost linearly to millions of samples and/or features.</p> <p>Kernels are used to transform the training vectors into a higher dimensional space. The kernel function is used to compute the dot product between two vectors. Here are some of the kernels implemented in scikit-learn: * Linear: \\(K(x, y) = x^T y\\) * Polynomial: \\(K(x, y) = (\\gamma x^T y + r)^{d}\\) * rbf: \\(K(x, y) = exp(-\\gamma \\|x - y\\|^2)\\) * sigmoid: \\(K(x, y) = \\frac{1}{1 + exp(-\\gamma x^T y +r)}\\)</p> <p>Here, d is specified by the <code>degree</code> parameter, \\(\\gamma\\) is specified by the <code>gamma</code> parameter, and \\(r\\) is specified by the <code>coef0</code> parameter.</p> <p>The parameter <code>C</code>, common to all SVM kernels, trades off misclassification of training examples against simplicity of the decision surface. A low <code>C</code> makes the decision surface smooth, while a high <code>C</code> aims at classifying all training examples correctly. <code>gamma</code> defines how much influence a single training example has. The larger <code>gamma</code> is, the closer other examples must be to be affected.</p> <p>Proper choice of <code>C</code> and <code>gamma</code> is critical to the SVM\u2019s performance.</p> <p>You can use your own defined kernels by passing a function to the kernel parameter.</p> <p>Your kernel must take as arguments two matrices of shape <code>(n_samples_1, n_features)</code>, <code>(n_samples_2, n_features)</code> and return a kernel matrix of shape <code>(n_samples_1, n_samples_2)</code>.</p> <pre><code>import numpy as np\nfrom sklearn import svm\ndef my_kernel(X, Y):\n    return np.dot(X, Y.T)\n\nclf = svm.SVC(kernel=my_kernel)\n</code></pre> <p>Here are some of the parameters of the <code>SVC</code> class: * C: float, optional (default=1.0)</p> <pre><code>Regularization parameter. The strength of the regularization is inversely proportional to C. Must be strictly positive. The penalty is a squared l2 penalty.\n</code></pre> <ul> <li> <p>kernel: {\u2018linear\u2019, \u2018poly\u2019, \u2018rbf\u2019, \u2018sigmoid\u2019, \u2018precomputed\u2019} or callable, (default='rbf')</p> <p>Specifies the kernel type to be used in the algorithm. It must be one of \u2018linear\u2019, \u2018poly\u2019, \u2018rbf\u2019, \u2018sigmoid\u2019, \u2018precomputed\u2019 or a callable. If none is given, \u2018rbf\u2019 will be used. If a callable is given it is used to precompute the kernel matrix. * degree: int, optional (default=3)</p> <p>Degree of the polynomial kernel function (\u2018poly\u2019). Ignored by all other kernels. * gamma: float, optional (default=\u2019auto\u2019)</p> <p>Kernel coefficient for \u2018rbf\u2019, \u2018poly\u2019 and \u2018sigmoid\u2019.  * if gamma='scale' (default) is passed then it uses 1 / (n_features * X.var()) as value of gamma,</p> <ul> <li>if \u2018auto\u2019, uses 1 / n_features.</li> <li>coef0: float, optional (default=0.0)</li> </ul> <p>Independent term in kernel function. It is only significant in \u2018poly\u2019 and \u2018sigmoid\u2019. * probability: boolean, optional (default=False)</p> </li> </ul> <p>Whether to enable probability estimates. This must be enabled prior to calling fit, will slow down that method as it internally uses 5-fold cross-validation, and predict_proba may be inconsistent with predict. * tol: float, optional (default=1e-3)</p> <pre><code>Tolerance for stopping criterion.\n</code></pre> <ul> <li> <p>cache_size: float, optional (default=200.0)</p> <p>Specify the size of the kernel cache (in MB).  * class_weight: {dict, \u2018balanced\u2019}, optional (default=None)</p> <p>Set the parameter C of class i to class_weight[i]C for SVC. If not given, all classes are supposed to have weight one. The \u2018balanced\u2019 mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as <code>n_samples / (n_classes * np.bincount(y))</code> verbose: int, optional (default=0)</p> <p>Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context. * max_iter: int, optional (default=-1)</p> <p>Hard limit on iterations within solver, or -1 for no limit. * decision_function_shape: [\u2018ovo\u2019, \u2018ovr\u2019], optional (default=\u2019ovr\u2019)</p> <p>Whether to return a one-vs-rest (\u2018ovr\u2019) decision function of shape (n_samples, n_classes) or one-vs-one (\u2018ovo\u2019) decision function of shape (n_samples, n_classes * (n_classes - 1) / 2).</p> <p>However, note that internally, one-vs-one (\u2018ovo\u2019) is always used as a multi-class strategy to train models; an ovr matrix is only constructed from the ovo matrix. The parameter is ignored for binary classification.</p> </li> </ul> <p>Here are some of the attributes of the <code>SVC</code> class: * support_: array-like, shape = [n_SV, n_features]</p> <pre><code>Support vectors.\n</code></pre> <ul> <li> <p>support_vectors_: array-like, shape = [n_SV, n_features]</p> <p>Support vectors. * class_weight_: array-like, shape = [n_classes]</p> <p>Multipliers of parameter C for each class. Computed based on the <code>class_weight</code> parameter. * classes_: array-like, shape = [n_classes]</p> <p>The classes labels. * coef_: ndarray of shape (n_classes * (n_classes - 1) / 2, n_features)</p> <p>Weights assigned to the features when <code>kernel=\"linear\"</code>.</p> </li> <li> <p>dual_coef_: ndarray of shape (n_classes -1, n_SV)</p> <p>Coefficients of the support vectors in the decision function. * intercept_: ndarray of shape (n_classes * (n_classes - 1) / 2,)</p> <p>Constants in decision function. * probA_: ndarray of shape (n_classes * (n_classes - 1) / 2)</p> <p>Parameter learned in Platt scaling when probability=True.</p> </li> </ul> <p>The <code>SVR</code> class has the same parameters as the <code>SVC</code> class.</p> <p>The <code>SVR</code> class has the same attributes as the <code>SVC</code> class.</p> <p>Here are some of the parameters of the <code>LinearSVC</code> class: * penalty: {\u2018l1\u2019, \u2018l2\u2019}, optional (default=\u2019l2\u2019)</p> <pre><code>Specifies the norm used in the penalization. The \u2018l2\u2019 penalty is the standard used in SVC. The \u2018l1\u2019 leads to coef_ vectors that are sparse.\n</code></pre> <ul> <li> <p>loss: {\u2018hinge\u2019, \u2018squared_hinge\u2019}, optional (default=\u2019squared_hinge\u2019)</p> <p>Specifies the loss function. \u2018hinge\u2019 is the standard SVM loss (used e.g. by the SVC class) while \u2018squared_hinge\u2019 is the square of the hinge loss. The combination of <code>penalty='l1'</code> and <code>loss='hinge'</code> is not supported. * dual: boolean, optional (default=True)</p> <pre><code>Whether to fit the classifier dual or primal. Prefer dual=False when n_samples &gt; n_features.\n</code></pre> </li> </ul> <p>Other parameters are the same as for the <code>SVC</code> class.</p> <p>Same as for the <code>SVC</code> class.</p> <p>The <code>LinearSVR</code> and the <code>SVR</code> clases have a lot of parameters in common. There are, however, some differences: * epsilon: float, optional (default=0.0)</p> <pre><code>Epsilon parameter in the epsilon-insensitive loss function.\n</code></pre> <ul> <li> <p>loss: {\u2018epsilon_insensitive\u2019, \u2018squared_epsilon_insensitive\u2019}, optional (default=\u2019epsilon_insensitive\u2019)</p> <p>Specifies the loss function. The epsilon-insensitive loss (standard SVR) is the L1 loss, while the squared epsilon-insensitive loss (\u2018squared_epsilon_insensitive\u2019) is the L2 loss.</p> </li> </ul> <p>Same as for the <code>SVR</code> class.</p> <p>Same as SVC with some differences as: * nu: float, optional (default=0.5)</p> <p>An upper bound on the fraction of margin errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1].</p> <p>Same as for the <code>SVC</code> class.</p> <p>Same as <code>NuSVC</code>.</p> <p>Same as for the <code>NuSVC</code> class.</p>"},{"location":"Notes/ML/Support_Vector_Machine/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Support-Vector-Machine\"&gt;Support Vector Machine&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Mathematical Formulation</li> <ol><li>SVC</li> <li>LinearSVC</li> <li>SVR</li> <li>LinearSVR</li> </ol><li>Classifier</li> <ol><li>Multi-class classification</li> </ol><li>Regression</li> <ol><li>Complexity</li> </ol><li>Kernel</li> <ol><li>Parameters of Kernel</li> <li>Using Python functions as kernels</li> </ol><li>SVC</li> <ol><li>Parameters of SVC</li> <li>Attributes of SVC</li> </ol><li>SVR</li> <ol><li>Parameters of SVR</li> <li>Attributes of SVR</li> </ol><li>LinearSVC</li> <ol><li>Attributes of LinearSVC</li> </ol><li>LinearSVR</li> <ol><li>Parameters of LinearSVR</li> <li>Attributes of LinearSVR</li> </ol><li>NuSVC</li> <ol><li>Parameters of NuSVC</li> <li>Attributes of NuSVC</li> </ol><li>NuSVR</li> <ol><li>Parameters of NuSVR</li> <li>Attributes of NuSVR</li> </ol> </ol>"},{"location":"Notes/ML/Support_Vector_Machine/#support-vector-machine","title":"Support Vector Machine","text":""},{"location":"Notes/ML/Support_Vector_Machine/#mathematical-formulation","title":"Mathematical Formulation","text":""},{"location":"Notes/ML/Support_Vector_Machine/#svc","title":"SVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#linearsvc","title":"LinearSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#svr","title":"SVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#linearsvr","title":"LinearSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#classifier","title":"Classifier","text":""},{"location":"Notes/ML/Support_Vector_Machine/#multi-class-classification","title":"Multi-class classification","text":""},{"location":"Notes/ML/Support_Vector_Machine/#regression","title":"Regression","text":""},{"location":"Notes/ML/Support_Vector_Machine/#complexity","title":"Complexity","text":""},{"location":"Notes/ML/Support_Vector_Machine/#kernel","title":"Kernel","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-kernel","title":"Parameters of Kernel","text":""},{"location":"Notes/ML/Support_Vector_Machine/#using-python-functions-as-kernels","title":"Using Python functions as kernels","text":""},{"location":"Notes/ML/Support_Vector_Machine/#svc_1","title":"SVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-svc","title":"Parameters of SVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-svc","title":"Attributes of SVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#svr_1","title":"SVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-svr","title":"Parameters of SVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-svr","title":"Attributes of SVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#linearsvc_1","title":"LinearSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-linearsvc","title":"Attributes of LinearSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#linearsvr_1","title":"LinearSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-linearsvr","title":"Parameters of LinearSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-linearsvr","title":"Attributes of LinearSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#nusvc","title":"NuSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-nusvc","title":"Parameters of NuSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-nusvc","title":"Attributes of NuSVC","text":""},{"location":"Notes/ML/Support_Vector_Machine/#nusvr","title":"NuSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#parameters-of-nusvr","title":"Parameters of NuSVR","text":""},{"location":"Notes/ML/Support_Vector_Machine/#attributes-of-nusvr","title":"Attributes of NuSVR","text":""},{"location":"Notes/Python/OOP/","title":"OOP","text":"<p>Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).</p> <p>A common feature of objects is that procedures (or methods) are attached to them and can access and modify the object's data fields. In this brand of OOP, there is usually a special name such as this or self used to refer to the current object. In OOP, computer programs are designed by making them out of objects that interact with one another.[1][2] OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.</p> <p>To understand the need for creating a class let\u2019s consider an example, let\u2019s say you wanted to track the number of dogs that may have different attributes like breed, age. If a list is used, the first element could be the dog\u2019s breed while the second element could represent its age. Let\u2019s suppose there are 100 different dogs, then how would you know which element is supposed to be which? What if you wanted to add other properties to these dogs? This lacks organization and it\u2019s the exact need for classes. </p> <p>In Python * Classes are created by keyword class. * Attributes are the variables that belong to a class. * Attributes are always public and can be accessed using the dot (<code>.</code>) operator. Eg.: <code>Myclass.Myattribute</code></p> <p>The object is an entity that has a state and behavior associated with it. It may be any real-world object like a mouse, keyboard, chair, table, pen, etc. Integers, strings, floating-point numbers, even arrays, and dictionaries, are all objects.</p> <p>In Python, everything is an object. For example, and integer or a string.</p> <pre><code>class Dog:\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n\n    def sit(self):\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        print(f\"{self.name} rolled over!\")\n</code></pre> <pre><code>dog_1 = Dog(\"Rex\", 2, \"German Shepherd\")\n</code></pre> <p>Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides it If we have a method that takes no arguments, then we still have to have one argument.</p> <p>This is special method which runs as soon as the class is called.</p> <p>There are four \"Pillars of Object Oriented Programming\":</p> <ul> <li>Abstraction</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Polymorphism</li> </ul> <p>Abstraction is the process of hiding the internal details of an application from the outer world. Abstraction is used to describe things in simple terms. It\u2019s used to create a boundary between the application and the client programs.</p> <p>For example, take a car. You can start a car by turning the key or pressing the start button. You don\u2019t need to know how the engine is getting started, what all components your car has. The car internal implementation and complex logic is completely hidden from the user.</p> <p>There are two types of abstraction.</p> <ol> <li>Data Abstraction</li> <li>Process Abstraction</li> </ol> <p>When the object data is not visible to the outer world, it creates data abstraction. If needed, access to the Objects\u2019 data is provided through some methods.</p> <p></p> <pre><code>class Average:\n    def __init__(self, nums):\n        self.nums = nums\n\n   def get_average(self):\n        return sum(self.nums) / len(self.nums)\n</code></pre> <pre><code>nums = Average([1, 2, 3, 4, 5])\nprint(nums.average)\n</code></pre> <pre>\n<code>3.0\n</code>\n</pre> <p>We don\u2019t need to provide details about all the functions of an object. When we hide the internal implementation of the different functions involved in a user operation, it creates process abstraction.</p> <p></p> <p>We have to use the <code>abc</code> module to create an abstract class in Python. An abstract class is a class that contains one or more abstract methods. An abstract method is a method that has a declaration but does not have an implementation. Abstract classes cannot be instantiated, and its abstract methods must be implemented by its subclasses. If you try to instantiate an abstract class, you will get a <code>TypeError</code> exception.</p> <pre><code>from abc import ABC, abstractmethod\n\nclass Polygon(ABC):\n\n    @abstractmethod\n    def noofsides(self):\n        pass\n</code></pre> <pre><code>p = Polygon()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 31 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X44sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; p = Polygon()\n\nTypeError: Can't instantiate abstract class Polygon with abstract method noofsides</pre> <pre><code>class Triangle(Polygon):\n\n    # overriding abstract method\n    def noofsides(self):\n        print(\"I have 3 sides\")\n\nclass Pentagon(Polygon):\n\n    # overriding abstract method\n    def noofsides(self):\n        print(\"I have 5 sides\")\n\nclass Hexagon(Polygon):\n\n    # overriding abstract method\n    def noofsides(self):\n        print(\"I have 6 sides\")\n\nclass Quadrilateral(Polygon):\n\n    # overriding abstract method\n    def noofsides(self):\n        print(\"I have 4 sides\")\n\n# Driver code\nR = Triangle()\nR.noofsides()\n\nK = Quadrilateral()\nK.noofsides()\n\nR = Pentagon()\nR.noofsides()\n\nK = Hexagon()\nK.noofsides()\n</code></pre> <pre>\n<code>I have 3 sides\nI have 4 sides\nI have 5 sides\nI have 6 sides\n</code>\n</pre> <p>Abstract classes include attributes in addition to methods, you can require the attributes in concrete classes by defining them with <code>@abstractproperty</code>. </p> <pre><code>import abc\nclass parent(ABC):\n    @abc.abstractproperty\n    def geeks(self):\n        return \"parent class\"\nclass child(parent):\n\n    @property\n    def geeks(self):\n        return \"child class\"\n\n\ntry:\n    r =parent()\n    print( r.geeks)\nexcept Exception as err:\n    print (err)\n\nr = child()\nprint (r.geeks)\n</code></pre> <pre>\n<code>Can't instantiate abstract class parent with abstract method geeks\nchild class\n</code>\n</pre> <p>Encapsulation is a way to restrict the direct access to some components of an object, so users cannot access state values for all of the variables of a particular object. Encapsulation can be used to hide both data members and data functions or methods associated with an instantiated class or object. Encapsulation in programming has a few key benefits. These include: * Hiding data: Users will have no idea how classes are being implemented or stored. All that users will know is that values are being passed and initialized. * More flexibility: Enables you to set variables as red or write-only. Examples include: <code>setName()</code>, <code>setAge()</code> or to set variables as write-only then you only need to omit the get methods like <code>getName()</code>, <code>getAge()</code> etc. * Easy to reuse: With encapsulation, it's easy to change and adapt to new requirements</p> <p>Technically in encapsulation, the variables or data of a class is hidden from any other class and can be accessed only through any member function of its own class in which they are declared. As in encapsulation, the data in a class is hidden from other classes, so it is also known as data-hiding.</p> <p>In Python, we denote private attributes using underscore as the prefix i.e single <code>_</code> or double <code>__</code>. This means that we can not restrict access to methods or variables in python completely. It is just a convention that should be followed by programmers while coding. However, using <code>__</code> prefix in the variable name does a name mangling. This helps to avoid access of the variable outside the class.</p> <pre><code># Creating a base class\nclass Base:\n    def __init__(self):\n\n        # Protected member\n        self._a = 2\n\n# Creating a derived class\nclass Derived(Base):\n    def __init__(self):\n\n        # Calling constructor of\n        # Base class\n        Base.__init__(self)\n        print(\"Calling protected member of base class: \",\n              self._a)\n\n        # Modify the protected variable:\n        self._a = 3\n        print(\"Calling modified protected member outside class: \",\n              self._a)\n\n\nobj1 = Derived()\n\nobj2 = Base()\n\n# Calling protected member\n# Can be accessed but should not be done due to convention\nprint(\"Accessing protected member of obj1: \", obj1._a)\n\n# Accessing the protected variable outside\nprint(\"Accessing protected member of obj2: \", obj2._a)\n</code></pre> <pre>\n<code>Calling protected member of base class:  2\nCalling modified protected member outside class:  3\nAccessing protected member of obj1:  3\nAccessing protected member of obj2:  2\n</code>\n</pre> <pre><code>class Base:\n    def __init__(self):\n        self.a = \"GeeksforGeeks\"\n        self.__c = \"GeeksforGeeks\"\n\n# Creating a derived class\nclass Derived(Base):\n    def __init__(self):\n\n        # Calling constructor of\n        # Base class\n        Base.__init__(self)\n        print(\"Calling private member of base class: \")\n        print(self.__c)\n\n\n# Driver code\nobj1 = Base()\nprint(obj1.a)\n</code></pre> <pre>\n<code>GeeksforGeeks\n</code>\n</pre> <pre><code>print(obj1.__c)\n</code></pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 40 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X64sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; print(obj1.__c)\n\nAttributeError: 'Base' object has no attribute '__c'</pre> <pre><code>d = Derived()\n</code></pre> <pre>\n<code>Calling private member of base class: \n</code>\n</pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 41 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X65sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; d = Derived()\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 41 in Derived.__init__(self)\n     &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X65sZmlsZQ%3D%3D?line=11'&gt;12&lt;/a&gt; Base.__init__(self)\n     &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X65sZmlsZQ%3D%3D?line=12'&gt;13&lt;/a&gt; print(\"Calling private member of base class: \")\n---&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#X65sZmlsZQ%3D%3D?line=13'&gt;14&lt;/a&gt; print(self.__c)\n\nAttributeError: 'Derived' object has no attribute '_Derived__c'</pre> <p>In name mangling process any identifier with two leading underscore and one trailing underscore is textually replaced with <code>_classname__identifier</code> where classname is the name of the current class. It means that any identifier of the form <code>__var</code> (at least two leading underscores or at most one trailing underscore) is replaced with <code>_classname__var</code>, where classname is the current class name with leading underscore(s) stripped. This means that we can still access the attributes by using the following syntax: <code>object._class__variable</code>. For the above example:</p> <pre><code>print(obj1._Base__c)\n</code></pre> <pre>\n<code>GeeksforGeeks\n</code>\n</pre> <p>Unlike other languages, private variables in python are not actually hidden fields meaning that the conventional getter and setter do not work in Python. However, we can still add getter and setter methods to our class to perform some other logic.</p> <p>Getter and setter can also be used with the <code>__</code> varibales to simulate 'kind of' private variables.</p> <pre><code>class Geek:\n    def __init__(self, age = 0):\n         self.__age = age\n\n    # getter method\n    def get_age(self):\n        return self.__age\n\n    # setter method\n    def set_age(self, x):\n        self.__age = x\n\nraj = Geek()\n\n# setting the age using setter\nraj.set_age(21)\n\n# retrieving age using getter\nprint(raj.get_age())\n\nprint(raj.__age)\n</code></pre> <pre>\n<code>21\n</code>\n</pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 47 in &lt;cell line: 21&gt;()\n     &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y104sZmlsZQ%3D%3D?line=17'&gt;18&lt;/a&gt; # retrieving age using getter\n     &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y104sZmlsZQ%3D%3D?line=18'&gt;19&lt;/a&gt; print(raj.get_age())\n---&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y104sZmlsZQ%3D%3D?line=20'&gt;21&lt;/a&gt; print(raj.__age)\n\nAttributeError: 'Geek' object has no attribute '__age'</pre> <p>Inheritance is a \"is a\" relationship. For example: <code>Horse</code> is an <code>Animal</code>.</p> <p>Different kinds of objects often have a certain amount in common with each other. Mountain bikes, road bikes, and tandem bikes, for example, all share the characteristics of bicycles (current speed, current pedal cadence, current gear). Yet each also defines additional features that make them different: tandem bicycles have two seats and two sets of handlebars; road bikes have drop handlebars; some mountain bikes have an additional chain ring, giving them a lower gear ratio.</p> <p>Object-oriented programming allows classes to inherit commonly used state and behavior from other classes. In this example, Bicycle now becomes the superclass of MountainBike, RoadBike, and TandemBike.</p> <p>Technically, every class we create uses inheritance. All Python classes are subclasses of the special class named <code>object</code>. Python supports two type of inheritance 1. Single Inheritance 2. Multiple Inheritance</p> <p>This is when a class inherits from just another class.</p> <pre><code>class Person:\n  def __init__(self, fname, lname):\n    self.firstname = fname\n    self.lastname = lname\n\n  def printname(self):\n    print(self.firstname, self.lastname)\n\n#Use the Person class to create an object, and then execute the printname method:\n\nx = Person(\"John\", \"Doe\")\nx.printname()\n</code></pre> <pre>\n<code>John Doe\n</code>\n</pre> <pre><code>class Student(Person):\n    def __init__(self, fname, lname):\n        Person.__init__(self, fname, lname)\n</code></pre> <pre><code>x = Student(\"Mike\", \"Olsen\")\nx.printname()\n</code></pre> <pre>\n<code>Mike Olsen\n</code>\n</pre> <p>Python also has a <code>super()</code> function that will make the child class inherit all the methods and properties from its parent:</p> <pre><code>class Student(Person):\n    def __init__(self, fname, lname, year):\n        super().__init__(fname, lname)\n        self.graduationyear = year\n\n    def welcome(self):\n        print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)\n\nx = Student(\"Mike\", \"Olsen\", 2019)\n</code></pre> <pre><code>x.printname()\nx.welcome()\n</code></pre> <pre>\n<code>Mike Olsen\nWelcome Mike Olsen to the class of 2019\n</code>\n</pre> <p>Multiple inheritance is a touchy subject. In principle, it's very simple: a subclass that inherits from more than one parent class is able to access functionality from both of them. In practice, this is less useful than it sounds and many expert programmers recommend against using it.</p> <p>The simplest and most useful form of multiple inheritance is called a mixin. A mixin is generally a superclass that is not meant to exist on its own, but is meant to be inherited by some other class to provide extra functionality.</p> <p>The diamond problem occurs when a object inherits from two different superclasses which itself inherits from another base class. This way, instantiating the subclass instantiates the base class two times! </p> <p></p> <pre><code>class BaseClass:\n    num_base_calls = 0\n    def call_me(self):\n        print(\"Calling method on Base Class\")\n        self.num_base_calls += 1\n\n\nclass LeftSubclass(BaseClass):\n    num_left_calls = 0\n    def call_me(self):\n        BaseClass.call_me(self)\n        print(\"Calling method on Left Subclass\")\n        self.num_left_calls += 1\n\n\nclass RightSubclass(BaseClass):\n    num_right_calls = 0\n    def call_me(self):\n        BaseClass.call_me(self)\n        print(\"Calling method on Right Subclass\")\n        self.num_right_calls += 1\n\n\nclass Subclass(LeftSubclass, RightSubclass):\n    num_sub_calls = 0\n    def call_me(self):\n        LeftSubclass.call_me(self)\n        RightSubclass.call_me(self)\n        print(\"Calling method on Subclass\")\n        self.num_sub_calls += 1\n</code></pre> <pre><code>s = Subclass()\ns.call_me()\n</code></pre> <pre>\n<code>Calling method on Base Class\nCalling method on Left Subclass\nCalling method on Base Class\nCalling method on Right Subclass\nCalling method on Subclass\n</code>\n</pre> <pre><code>print(s.num_sub_calls,s.num_left_calls,s.num_right_calls,s.num_base_calls)\n</code></pre> <pre>\n<code>1 1 1 2\n</code>\n</pre> <p>However, the <code>super</code> keyword can be used to mitigate this problem. Indeed, <code>super</code> was originally developed to make complicated forms of multiple inheritance possible.</p> <pre><code>class BaseClass:\n    num_base_calls = 0\n    def call_me(self):\n        print(\"Calling method on Base Class\")\n        self.num_base_calls += 1\n\n\nclass LeftSubclass(BaseClass):\n    num_left_calls = 0\n    def call_me(self):\n        super().call_me()\n        print(\"Calling method on Left Subclass\")\n        self.num_left_calls += 1\n\n\nclass RightSubclass(BaseClass):\n    num_right_calls = 0\n    def call_me(self):\n        super().call_me()\n        print(\"Calling method on Right Subclass\")\n        self.num_right_calls += 1\n\n\nclass Subclass(LeftSubclass, RightSubclass):\n    num_sub_calls = 0\n    def call_me(self):\n        super().call_me()\n        print(\"Calling method on Subclass\")\n        self.num_sub_calls += 1\n</code></pre> <pre><code>s = Subclass()\ns.call_me()\n</code></pre> <pre>\n<code>Calling method on Base Class\nCalling method on Right Subclass\nCalling method on Left Subclass\nCalling method on Subclass\n</code>\n</pre> <pre><code>print(s.num_sub_calls,s.num_left_calls,s.num_right_calls,s.num_base_calls)\n</code></pre> <pre>\n<code>1 1 1 1\n</code>\n</pre> <p>Polymorphism is a fancy name describing a simple concept: different behaviors happen depending on which subclass is being used, without having to explicitly know what the subclass actually is. As an example, imagine a program that plays audio files.</p> <p>We can use inheritance with polymorphism to simplify the design. Each type of file can be represented by a different subclass of <code>AudioFile</code>, for example, <code>WavFile</code>, <code>MP3File</code>. Each of these would have a <code>play()</code> method, but that method would be implemented differently for each file to ensure the correct extraction procedure is followed. The media player object would never need to know which subclass of <code>AudioFile</code> it is referring to; it just calls <code>play()</code> and polymorphically lets the object take care of the actual details of playing.</p> <pre><code>class AudioFile:\n    def __init__(self, filename):\n        if not filename.endswith(self.ext):\n            raise Exception(\"Invalid file format\")\n        self.filename = filename\n\n\nclass MP3File(AudioFile):\n    ext = \"mp3\"\n    def play(self):\n        print(\"playing {} as mp3\".format(self.filename))\n\n\nclass WavFile(AudioFile):\n    ext = \"wav\"\n    def play(self):\n        print(\"playing {} as wav\".format(self.filename))\n\n\nclass OggFile(AudioFile):\n    ext = \"ogg\"\n    def play(self):\n        print(\"playing {} as ogg\".format(self.filename))\n</code></pre> <pre><code>ogg = OggFile(\"myfile.ogg\")\nogg.play()\n</code></pre> <pre>\n<code>playing myfile.ogg as ogg\n</code>\n</pre> <pre><code>mp3 = MP3File(\"myfile.mp3\")\nmp3.play()\n</code></pre> <pre>\n<code>playing myfile.mp3 as mp3\n</code>\n</pre> <pre><code>not_an_mp3 = MP3File(\"myfile.ogg\")\n</code></pre> <pre>\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 79 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y155sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; not_an_mp3 = MP3File(\"myfile.ogg\")\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 79 in AudioFile.__init__(self, filename)\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y155sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def __init__(self, filename):\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y155sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     if not filename.endswith(self.ext):\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y155sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt;         raise Exception(\"Invalid file format\")\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y155sZmlsZQ%3D%3D?line=4'&gt;5&lt;/a&gt;     self.filename = filename\n\nException: Invalid file format</pre> <p>Some advantages of polymorphism are: - It helps programmers reuse code and classes once written, tested, and implemented.</p> <ul> <li> <p>A single variable name can be used to store variables of multiple data types (float, double, long, int, etc).</p> </li> <li> <p>It helps compose powerful, complex abstractions from simpler ones.</p> </li> </ul> <p>Whenever an object is bound with its functionality at the compile time, this is known as the compile-time polymorphism. At compile-time, java knows which method to call by checking the method signatures. So this is called compile-time polymorphism or static or early binding. Compile-time polymorphism is achieved through method overloading. Method Overloading says you can have more than one function with the same name in one class having a different prototype.</p> <p>This type of polymorphism is also known as static binding or early binding. This can not be done in Python.</p> <pre><code>class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, x: int, y: int) -&gt; int:\n        return x + y\n\n    def add(self, nums: list) -&gt; int:\n        return sum(nums)\n</code></pre> <pre><code>c = Calculator()\nprint(c.add(1, 2))\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 84 in &lt;cell line: 2&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y164sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; c = Calculator()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y164sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; print(c.add(1, 2))\n\nTypeError: add() takes 2 positional arguments but 3 were given</pre> <p>However, we can do this using Multiple Dispatch Decorator (<code>multipledispatch</code>).</p> <p>Whenever an object is bound with the functionality at run time, this is known as runtime polymorphism. The runtime polymorphism can be achieved by method overriding. In any object-oriented programming language, Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class.</p> <pre><code>class Parent():\n\n    # Constructor\n    def __init__(self):\n        self.value = \"Inside Parent\"\n\n    # Parent's show method\n    def show(self):\n        print(self.value)\n\n# Defining child class\nclass Child(Parent):\n\n    # Constructor\n    def __init__(self):\n        self.value = \"Inside Child\"\n\n    # Child's show method\n    def show(self):\n        print(self.value)\n\n\n# Driver's code\nobj1 = Parent()\nobj2 = Child()\n\nobj1.show()\nobj2.show()\n</code></pre> <pre>\n<code>Inside Parent\nInside Child\n</code>\n</pre> <p>If it walks like a duck, and it quacks like a duck, then it must be a duck.</p> <p>Duck Typing is a term commonly related to dynamically typed programming languages and polymorphism. The idea behind this principle is that the code itself does not care about whether an object is a duck, but instead it does only care about whether it quacks.</p> <p>Duck Typing refers to the principle of not constraining or binding the code to specific data types.</p> <pre><code>class Duck: \n\n    def __init__(self, name):\n        self.name = name\n    def quack(self):\n        print('Quack!')\nclass Car: \n\n    def __init__(self, model):\n        self.model = model\n\n    def quack(self):\n        print('I can quack, too!')\n</code></pre> <p>Since Python is a dynamically typed language, we don\u2019t have to specify the data type of the input arguments in a function.</p> <pre><code>def quacks(obj):\n    obj.quack()\n</code></pre> <p>Now if we call the same function twice with a different object, the action taken will be dependent to the data type of the input object.</p> <pre><code>dona = Duck('Dona')\ncar = Car('Audi')\n\nquacks(dona)\nquacks(car)\n</code></pre> <pre>\n<code>Quack!\nI can quack, too!\n</code>\n</pre> <p>If the object does not support a specified operation it will automatically raise an exception.</p> <pre><code>a = 5\nquacks(a)\n</code></pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 100 in &lt;cell line: 2&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y215sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; a = 5\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y215sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; quacks(a)\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb Cell 100 in quacks(obj)\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y215sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; def quacks(obj):\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/OOP.ipynb#Y215sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt;     obj.quack()\n\nAttributeError: 'int' object has no attribute 'quack'</pre> <p>Of course, just because an object satisfies a particular interface (by providing required methods or attributes) does not mean it will simply work in all situations. It has to fulfill that interface in a way that makes sense in the overall system. Just because an object provides a play() method does not mean it will automatically work with a media player.</p> <pre><code>from collections.abc import Container\n\nContainer.__abstractmethods__\n</code></pre> <pre>\n<code>frozenset({'__contains__'})</code>\n</pre> <p>Now, any class which implements a <code>__contains__</code> method automatically becomes a subclass of the <code>Container</code> object we don't have to use inheritance to make this happen. This is becuase of Duck Typing.</p> <pre><code>class OddContainer:\n    def __contains__(self, x):\n        if not isinstance(x, int) or not x % 2:\n            return False\n        return True\n\nodd_container = OddContainer()\nisinstance(odd_container, Container), issubclass(OddContainer, Container)\n</code></pre> <pre>\n<code>(True, True)</code>\n</pre> <pre><code>dir(odd_container)\n</code></pre> <pre>\n<code>['__class__',\n '__contains__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__']</code>\n</pre> <p>We see that the <code>odd_container</code> objec gets all the methods of the <code>Container</code> class.</p> <p>Composition is an object oriented design concept that models a has a relationship. In composition, a class known as composite contains an object of another class known to as component. In other words, a composite class has a component of another class. The composite class doesn\u2019t inherit the component class interface, but it can leverage its implementation.</p> <p>The composition relation between two classes is considered loosely coupled. That means that changes to the component class rarely affect the composite class, and changes to the composite class never affect the component class. This provides better adaptability to change and allows applications to introduce new requirements without affecting existing code.</p> <pre><code>class Card:\n    def __init__(self):\n        pass\n    def __str__(self):\n        return \"This is a card\"\n</code></pre> <pre><code>class Deck:\n    def __init__(self, num_cards):\n        self.num_cards = num_cards\n        self.cards = [Card for I in range(self.num_cards)]\n</code></pre> <pre><code>d = Deck(2)\n</code></pre> <pre><code>d.cards\n</code></pre> <pre>\n<code>[__main__.Card, __main__.Card]</code>\n</pre> <p>Abstraction is the concept of object-oriented programming that \"shows\" only essential attributes and \"hides\" unnecessary information. The main purpose of abstraction is hiding the unnecessary details from the users. Abstraction is selecting data from a larger pool to show only relevant details of the object to the user. It helps in reducing programming complexity and efforts. </p> <p>Encapsulation is a process of wrapping the data and the code, that operate on the data into a single entity. You can assume it as a protective wrapper that stops random access of code defined outside that wrapper.</p> AbstractionEncapsulationAbstraction is the process or method of gaining the information.While encapsulation is the process or method to contain the information.In abstraction, problems are solved at the design or interface level.While in encapsulation, problems are solved at the implementation level.Abstraction is the method of hiding the unwanted information.Whereas encapsulation is a method to hide the data in a single entity or unit along with a method to protect information from outside.We can implement abstraction using abstract class and interfaces.Whereas encapsulation can be implemented using by access modifier i.e. private, protected and public.In abstraction, implementation complexities are hidden using abstract classes and interfaces.While in encapsulation, the data is hidden using methods of getters and setters.The objects that help to perform abstraction are encapsulated.Whereas the objects that result in encapsulation need not be abstracted.Abstraction provides access to specific part of data.Encapsulation hides data and the user can not access same directly (data hiding.Abstraction focus is on \u201cwhat\u201d should be done.Encapsulation focus is on \u201cHow\u201d it should be done."},{"location":"Notes/Python/OOP/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Python-OOP\"&gt;Python OOP&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Class</li> <li>Objects</li> <ol><li>The self</li> <li>The __init__ method</li> </ol> </ol> <p><li>OOP Concepts</li></p> <ol><li>Abstraction</li> <ol><li>Data Abstraction</li> <li>Process Abstraction</li> <li>Abstract Class in Python</li> </ol><li>Encapsulation</li> <ol><li>Encapsulation in Python</li> <li>Getter and Setter</li> </ol><li>Inheritance</li> <ol><li>Inheritance in Python</li> <ol><li>Single Inheritance</li> <ol><li>The super() Keyword</li> </ol><li>Multiple inheritance</li> <ol><li>The Diamond Problem</li> </ol> </ol> </ol><li>Polymorphism</li> <ol><li>Compile Time Polymorphism and Method Overloading</li> <li>Run-Time Polymorphism and Method Overriding</li> </ol><li>Some More Concepts</li> <ol><li>Duck Typing</li> <li>Composition</li> <li>Difference between Abstraction and Encapsulation</li> </ol> </ol>"},{"location":"Notes/Python/OOP/#python-oop","title":"Python OOP","text":""},{"location":"Notes/Python/OOP/#class","title":"Class","text":""},{"location":"Notes/Python/OOP/#objects","title":"Objects","text":""},{"location":"Notes/Python/OOP/#the-self","title":"The self","text":""},{"location":"Notes/Python/OOP/#the-__init__-method","title":"The <code>__init__</code> method","text":""},{"location":"Notes/Python/OOP/#oop-concepts","title":"OOP Concepts","text":""},{"location":"Notes/Python/OOP/#abstraction","title":"Abstraction","text":""},{"location":"Notes/Python/OOP/#data-abstraction","title":"Data Abstraction","text":""},{"location":"Notes/Python/OOP/#process-abstraction","title":"Process Abstraction","text":""},{"location":"Notes/Python/OOP/#abstract-class-in-python","title":"Abstract Class in Python","text":""},{"location":"Notes/Python/OOP/#encapsulation","title":"Encapsulation","text":""},{"location":"Notes/Python/OOP/#encapsulation-in-python","title":"Encapsulation in Python","text":""},{"location":"Notes/Python/OOP/#getter-and-setter","title":"Getter and Setter","text":""},{"location":"Notes/Python/OOP/#inheritance","title":"Inheritance","text":""},{"location":"Notes/Python/OOP/#inheritance-in-python","title":"Inheritance in Python","text":""},{"location":"Notes/Python/OOP/#single-inheritance","title":"Single Inheritance","text":""},{"location":"Notes/Python/OOP/#the-super-keyword","title":"The <code>super()</code> Keyword","text":""},{"location":"Notes/Python/OOP/#multiple-inheritance","title":"Multiple inheritance","text":""},{"location":"Notes/Python/OOP/#the-diamond-problem","title":"The Diamond Problem","text":""},{"location":"Notes/Python/OOP/#polymorphism","title":"Polymorphism","text":""},{"location":"Notes/Python/OOP/#compile-time-polymorphism-and-method-overloading","title":"Compile Time Polymorphism and Method Overloading","text":""},{"location":"Notes/Python/OOP/#run-time-polymorphism-and-method-overriding","title":"Run-Time Polymorphism and Method Overriding","text":""},{"location":"Notes/Python/OOP/#some-more-concepts","title":"Some More Concepts","text":""},{"location":"Notes/Python/OOP/#duck-typing","title":"Duck Typing","text":""},{"location":"Notes/Python/OOP/#composition","title":"Composition","text":""},{"location":"Notes/Python/OOP/#difference-between-abstraction-and-encapsulation","title":"Difference between Abstraction and Encapsulation","text":""},{"location":"Notes/Python/Programming_Language_Terms/","title":"Programming Language Terms","text":"<p>The language processor that reads the complete source program written in high-level language as a whole in one go and translates it into an equivalent program in machine language is called a Compiler.  Example: C, C++, C#, Java.   </p> <p>In a compiler, the source code is translated to object code successfully if it is free of errors. The compiler specifies the errors at the end of the compilation with line numbers when there are any errors in the source code. The errors must be removed before the compiler can successfully recompile the source code again</p> <p></p> <p>The translation of a single statement of the source program into machine code is done by a language processor and executes immediately before moving on to the next line is called an interpreter. If there is an error in the statement, the interpreter terminates its translating process at that statement and displays an error message. The interpreter moves on to the next line for execution only after the removal of the error. An Interpreter directly executes instructions written in a programming or scripting language without previously converting them to an object code or machine code.            </p> <p>Example: Perl, Python and Matlab.</p> <p></p> CompilerInterpreterA compiler is a program that converts the entire source code of a programming language into executable machine code for a CPU.\u00a0\u00a0 An interpreter takes a source program and runs it line by line, translating each line as it comes to itThe compiler takes a large amount of time to analyze the entire source code but the overall execution time of the program is comparatively faster.\u00a0 An interpreter takes less amount of time to analyze the source code but the overall execution time of the program is slower.The compiler generates the error message only after scanning the whole program, so debugging is comparatively hard as the error can be present anywhere in the program.\u00a0\u00a0Its Debugging is easier as it continues translating the program until the error is met.The compiler requires a lot of memory for generating object codes.It requires less memory than a compiler because no object code is generated.Generates intermediate object code.\u00a0No intermediate object code is generated.For Security purpose compiler is more useful.The interpreter is a little vulnerable in case of security.Examples: C, C++, Java\u00a0\u00a0Examples: Python, Perl, JavaScript, Ruby <p>A high-level programming language is a programming language with strong abstraction from the details of the computer. It is often easier to use than low-level programming languages, but it may execute more slowly and may require more memory to perform the same task. High-level languages are generally portable across many types of computer. Examples of high-level languages include C, C++, Java, Perl, Python, and Ruby.</p> NumberHLLLLL 1. It is programmer friendly language. It is a machine friendly language. 2. High level language is less memory efficient. Low level language is high memory efficient. 3. It is easy to understand. It is tough to understand. 4. Debugging is easy. Debugging is complex comparatively. 5. It is simple to maintain. It is complex to maintain comparatively. 6. It is portable. It is non-portable. 7. It can run on any platform. It is machine-dependent. 8. It needs compiler or interpreter for translation. It needs assembler for translation. 9. It is used widely for programming. It is not commonly used now-a-days in programming. <p>A low-level programming language is a programming language that provides little or no abstraction from a computer's instruction set architecture\u2014commands or functions in the language map that are structurally similar to processor's instructions. Generally, this refers to either machine code or assembly language. Some examples are Machine language and Assembly language.</p> <p>A compiled language is a programming language that is generally compiled and not interpreted. It is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. Types of compiled language \u2013 C, C++, C#, CLEO, COBOL, etc. </p> <p></p> <p>An interpreted language is a programming language that is generally interpreted, without compiling a program into machine instructions. It is one where the instructions are not directly executed by the target machine, but instead, read and executed by some other program. Interpreted language ranges \u2013 JavaScript, Perl, Python, BASIC, etc. </p> <p></p> S.NO.COMPILED LANGUAGEINTERPRETED LANGUAGE1A compiled language is a programming language whose implementations are typically compilers and not interpreters.An interpreted language is a programming language whose implementations execute instructions directly and freely, without previously compiling a program into machine-language instructions.2In this language, once the program is compiled it is expressed in the instructions of the target machine.While in this language, the instructions are not directly executed by the target machine.3There are at least two steps to get from source code to execution.There is only one step to get from source code to execution.4In this language, compiled programs run faster than interpreted programs.While in this language, interpreted programs can be modified while the program is running.5In this language, compilation errors prevent the code from compiling.In this languages, all the debugging occurs at run-time.6The code of compiled language can be executed directly by the computer\u2019s CPU.A program written in an interpreted language is not compiled, it is interpreted.7This language delivers better performance.This language example delivers relatively slower performance.8Example of compiled language \u2013 C, C++, C#, CLEO, COBOL, etc.Example of Interpreted language \u2013 JavaScript, Perl, Python, BASIC, etc. <p>A language is statically typed if the type of a variable is known at compile time. For some languages this means that you as the programmer must specify what type each variable is; other languages (e.g.: Java, C, C++) offer some form of type inference, the capability of the type system to deduce the type of a variable (e.g.: OCaml, Haskell, Scala, Kotlin).</p> <p>The main advantage here is that all kinds of checking can be done by the compiler, and therefore a lot of trivial bugs are caught at a very early stage.</p> <p>Examples: C, C++, Java, Rust, Go, Scala</p> <p>A language is dynamically typed if the type is associated with run-time values, and not named variables/fields/etc. This means that you as a programmer can write a little quicker because you do not have to specify types every time (unless using a statically-typed language with type inference).</p> <p>Examples: Perl, Ruby, Python, PHP, JavaScript, Erlang</p> <p>Most scripting languages have this feature as there is no compiler to do static type-checking anyway, but you may find yourself searching for a bug that is due to the interpreter misinterpreting the type of a variable. Luckily, scripts tend to be small so bugs have not so many places to hide.</p> <p></p> <p>In computer software, a general-purpose programming language (GPL) is a programming language designed to be used for building software in a wide variety of application domains, across a multitude of hardware configurations and operating systems. In theory, a GPL program can run equivalently on a single processor or on a network. The opposite of a general-purpose programming language is a domain-specific programming language, which is designed to be used within a specific area, for example, querying databases. For example, SQL was designed for querying databases.</p> <p>Machine code is set of instructions that directly gets executed by the CPU. Each instruction performs a very unique task, such as load or an logical operation on data in CPU memory. Almost all the high level languages such as C translate the source code into executable machine code with the help of Compilers, loaders and linkers. Every processor or processor family has its own machine code instruction set.</p> <p></p> <p>Bytecode is also binary representation executed by virtual machine (not by CPU directly). The virtual machine (which is written different for different machines) converts binary instruction into a specific machine instruction. One of the language that uses the concept of Bytecode is Java.</p> <p></p> <p>The default implementation of the Python programming language is Cpython. As the name suggests Cpython is written in C language. Cpython compiles the python source code into intermediate bytecode, which is executed by the Cpython virtual machine. CPython is distributed with a large standard library written in a mixture of C and Python. CPython provides the highest level of compatibility with Python packages and C extension modules. All versions of the Python language are implemented in C because CPython is the reference implementation.</p> <p>Jython is an implementation of the Python programming language that can run on the Java platform. Jython programs use Java classes instead of Python modules .Jython compiles into Java byte code, which can then be run by Java virtual machine. Jython enables the use of Java class library functions from the Python program. Jython is slow as compared to Cpython and lacks compatibility with CPython libraries.</p> <p></p> <p>Python is dynamic programming language. Python is said to be slow as the default CPython implementation compiles the python source code in bytecode which is slow as compared to machine code(native code). Here PyPy comes in. PyPy is an implementation of the Python programming language written in Python. The Interpreter is written in RPython (a subset of Python).</p> <p></p>"},{"location":"Notes/Python/Programming_Language_Terms/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Compiler-and-Interpreter\"&gt;Compiler and Interpreter&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Compiler</li> <li>Interpreter</li> </ol> <p><li>High-level and Low-Level Programming Language</li></p> <li>Compiled and Interpreted Programming Language</li> <ol><li>Compiled Language?</li> <li>Interpreted Language</li> </ol> <p><li>Statically and Dynamically typed languages</li></p> <ol><li>Statically typed languages</li> <li>Dynamically typed languages</li> </ol> <p><li>General-purpose programming language</li></p> <li>Various Implementations of Python</li> <ol><li>Machine Code</li> <li>Bytecode</li> <li>Cpython</li> <li>Jython</li> <li>PyPy</li> </ol>"},{"location":"Notes/Python/Programming_Language_Terms/#compiler-and-interpreter","title":"Compiler and Interpreter","text":""},{"location":"Notes/Python/Programming_Language_Terms/#compiler","title":"Compiler","text":""},{"location":"Notes/Python/Programming_Language_Terms/#interpreter","title":"Interpreter","text":""},{"location":"Notes/Python/Programming_Language_Terms/#high-level-and-low-level-programming-language","title":"High-level and Low-Level Programming Language","text":""},{"location":"Notes/Python/Programming_Language_Terms/#compiled-and-interpreted-programming-language","title":"Compiled and Interpreted Programming Language","text":""},{"location":"Notes/Python/Programming_Language_Terms/#compiled-language","title":"Compiled Language?","text":""},{"location":"Notes/Python/Programming_Language_Terms/#interpreted-language","title":"Interpreted Language","text":""},{"location":"Notes/Python/Programming_Language_Terms/#statically-and-dynamically-typed-languages","title":"Statically and Dynamically typed languages","text":""},{"location":"Notes/Python/Programming_Language_Terms/#statically-typed-languages","title":"Statically typed languages","text":""},{"location":"Notes/Python/Programming_Language_Terms/#dynamically-typed-languages","title":"Dynamically typed languages","text":""},{"location":"Notes/Python/Programming_Language_Terms/#general-purpose-programming-language","title":"General-purpose programming language","text":""},{"location":"Notes/Python/Programming_Language_Terms/#various-implementations-of-python","title":"Various Implementations of Python","text":""},{"location":"Notes/Python/Programming_Language_Terms/#machine-code","title":"Machine Code","text":""},{"location":"Notes/Python/Programming_Language_Terms/#bytecode","title":"Bytecode","text":""},{"location":"Notes/Python/Programming_Language_Terms/#cpython","title":"Cpython","text":""},{"location":"Notes/Python/Programming_Language_Terms/#jython","title":"Jython","text":""},{"location":"Notes/Python/Programming_Language_Terms/#pypy","title":"PyPy","text":""},{"location":"Notes/Python/Programming_Paradigms/","title":"Programming Paradigms","text":"<p>The term programming paradigm refers to a style of programming. It does not refer to a specific language, but rather it refers to the way you program. Programming paradigm is an approach to solve problem using some programming language.</p> <p></p> <p>Imperative programming is a programming paradigm of software that uses statements that change a program's state. Imperative programming focuses on describing how a program operates step by step, rather than on high-level descriptions of its expected results.</p> <p>Procedural Programming can be defined as a programming model which is derived from structured programming, based upon the concept of calling procedure. Procedures, also known as routines, subroutines or functions, simply consist of a series of computational steps to be carried out. During a program\u2019s execution, any given procedure might be called at any point, including by other procedures or itself. </p> <p>eg: FORTRAN, COBOL, Pascal</p> <p>Object-oriented programming can be defined as a programming model which is based upon the concept of objects. Objects contain data in the form of attributes and code in the form of methods. In object-oriented programming, computer programs are designed using the concept of objects that interact with the real world.</p> <p>eg: C++, Java, Python</p> Procedural Oriented ProgrammingObject-Oriented ProgrammingIn procedural programming, the program is divided into small parts called functions.In object-oriented programming, the program is divided into small parts called objects.Procedural programming follows a top-down approach.Object-oriented programming follows a bottom-up approach.There is no access specifier in procedural programming.Object-oriented programming has access specifiers like private, public, protected, etc.Adding new data and functions is not easy.Adding new data and function is easy.Procedural programming does not have any proper way of hiding data so it is less secure.Object-oriented programming provides data hiding so it is more secure.In procedural programming, overloading is not possible.Overloading is possible in object-oriented programming.In procedural programming, there is no concept of data hiding and inheritance.In object-oriented programming, the concept of data hiding and inheritance is used.In procedural programming, the function is more important than the data.In object-oriented programming, data is more important than function.Procedural programming is based on the unreal world.Object-oriented programming is based on the real world.Procedural programming is used for designing medium-sized programs.Object-oriented programming is used for designing large and complex programs.Procedural programming uses the concept of procedure abstraction.Object-oriented programming uses the concept of data abstraction.Code reusability absent in procedural programming,Code reusability present in object-oriented programming.Examples: C, FORTRAN, Pascal, Basic, etc.Examples: C++, Java, Python, C#, etc. <p>Benefits</p> <ul><li>We can build the programs from standard working modules that communicate with one another, rather than having to start writing the code from scratch which leads to saving of development time and higher productivity,</li><li>OOP language allows to break the program into the bit-sized problems that can be solved easily (one object at a time).</li><li>The new technology promises greater programmer productivity, better quality of software and lesser maintenance cost.</li><li>OOP systems can be easily upgraded from small to large systems.</li><li>It is possible that multiple instances of objects co-exist without any interference,</li><li>It is very easy to partition the work in a project based on objects.</li><li>It is possible to map the objects in problem domain to those in the program.</li><li>The principle of data hiding helps the programmer to build secure programs which cannot be invaded by the code in other parts of the program.</li><li>By using inheritance, we can eliminate redundant code and extend the use of existing classes.</li><li>Message passing techniques is used for communication between objects which makes the interface descriptions with external systems much simpler.</li><li>The data-centered design approach enables us to capture more details of model in an implementable form.</li></ul> <p>Disadvantages</p> <ul><li>The length of the programmes developed using OOP language is much larger than the procedural approach. Since the programme becomes larger in size, it requires more time to be executed that leads to slower execution of the programme.</li><li>We can not apply OOP everywhere as it is not a universal language. It is applied only when it is required. \u00a0It is not suitable for all types of problems.</li><li>Programmers need to have brilliant designing skill and programming skill along with proper planning because using OOP is little bit tricky.</li><li>OOPs take time to get used to it. \u00a0The thought process involved in object-oriented programming may not be natural for some people.</li><li>Everything is treated as object in OOP so before applying it we need to have excellent thinking in terms of objects.</li></ul> <p>Parallel processing is the processing of program instructions by dividing them among multiple processors. A parallel processing system posses many numbers of processor with the objective of running a program in less time by dividing them. </p> <p>eg: OpenMP, MPI</p> <p>Declarative programming is a non-imperative style of programming in which programs describe their desired results without explicitly listing commands or steps that must be performed. Functional and logical programming languages are characterized by a declarative programming style. </p> <p>It can be termed as abstract model of computation. It would solve logical problems like puzzles, series etc. In logic programming we have a knowledge base which we know before and along with the question and knowledge base which is given to machine, it produces result. In normal programming languages, such concept of knowledge base is not available but while using the concept of artificial intelligence, machine learning we have some models like Perception model which is using the same mechanism. </p> <p>eg: Prolog, Lisp</p> <p>Functional programming is a programming paradigm in which we try to bind everything in pure mathematical functions style. It is a declarative type of programming style. Its main focus is on \u201cwhat to solve\u201d in contrast to an imperative style where the main focus is \u201chow to solve\u201d. It uses expressions instead of statements. An expression is evaluated to produce a value whereas a statement is executed to assign variables. </p> <p>These functions have two main properties. First, they always produce the same output for same arguments irrespective of anything else.  Secondly, they have no side-effects i.e. they do not modify any arguments or local/global variables or input/output streams.</p> <p>There are no \u201cfor\u201d or \u201cwhile\u201d loop in functional languages. Iteration in functional languages is implemented through recursion. Recursive functions repeatedly call themselves, until it reaches the base case. </p> <p>In functional programs variables once defined do not change their value throughout the program. Functional programs do not have assignment statements. If we have to store some value, we define new variables instead. This eliminates any chances of side effects because any variable can be replaced with its actual value at any point of execution. State of any variable is constant at any instant. </p> <p>In functional programming, we can\u2019t modify a variable after it\u2019s been initialized. We can create new variables \u2013 but we can\u2019t modify existing variables, and this really helps to maintain state throughout the runtime of a program. Once we create a variable and set its value, we can have full confidence knowing that the value of that variable will never change.  </p> <p>Advantages</p> <ol><li>Pure functions are easier to understand because they don\u2019t change any states and depend only on the input given to them. Whatever output they produce is the return value they give. Their function signature gives all the information about them i.e. their return type and their arguments.</li><li>The ability of functional programming languages to treat functions as values and pass them to functions as parameters make the code more readable and easily understandable.</li><li>Testing and debugging is easier. Since pure functions take only arguments and produce output, they don\u2019t produce any changes don\u2019t take input or produce some hidden output. They use immutable values, so it becomes easier to check some problems in programs written uses pure functions.</li><li>It is used to implement concurrency/parallelism because pure functions don\u2019t change variables or any other data outside of it.</li><li>It adopts lazy evaluation which avoids repeated evaluation because the value is evaluated and stored only when it is needed.</li></ol> <p>Disadvantages</p> <ol><li>Sometimes writing pure functions can reduce the readability of code.</li><li>Writing programs in recursive style instead of using loops can be bit intimidating.</li><li>Writing pure functions are easy but combining them with the rest of the application and I/O operations is a difficult task.</li><li>Immutable values and recursion can lead to decrease in performance.</li></ol> <p>This programming methodology is based on data and its movement. Program statements are defined by data rather than hard-coding a series of steps. A database program is the heart of a business information system and provides file creation, data entry, update, query and reporting functions. There are several programming languages that are developed mostly for database application. For example SQL. It is applied to streams of structured data, for filtering, transforming, aggregating, or calling other programs.</p>"},{"location":"Notes/Python/Programming_Paradigms/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;li&gt;&lt;a class=\"\" href=\"#Programming-Paradigms\"&gt;Programming Paradigms&lt;/a&gt;&lt;/li&gt;\n</code></pre> <ol><li>Imperative Programming</li> <ol><li>Procedural Programming</li> <li>Object-Oriented Programming</li> <ol><li>Advantages and Disadvantages of OOP</li> </ol><li>Parallel Processing</li> </ol><li>Declarative Programming</li> <ol><li>Logic Programming</li> <li>Functional Programming</li> <ol><li>Pure Functions</li> <li>Recursion</li> <li>Referential Transparency</li> <li>Immutability</li> <li>Advantages and Disadvantages of Functional programming</li> </ol><li>Database Programming</li> </ol> </ol>"},{"location":"Notes/Python/Programming_Paradigms/#programming-paradigms","title":"Programming Paradigms","text":""},{"location":"Notes/Python/Programming_Paradigms/#imperative-programming","title":"Imperative Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#procedural-programming","title":"Procedural Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#object-oriented-programming","title":"Object-Oriented Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#advantages-and-disadvantages-of-oop","title":"Advantages and Disadvantages of OOP","text":""},{"location":"Notes/Python/Programming_Paradigms/#parallel-processing","title":"Parallel Processing","text":""},{"location":"Notes/Python/Programming_Paradigms/#declarative-programming","title":"Declarative Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#logic-programming","title":"Logic Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#functional-programming","title":"Functional Programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#pure-functions","title":"Pure Functions","text":""},{"location":"Notes/Python/Programming_Paradigms/#recursion","title":"Recursion","text":""},{"location":"Notes/Python/Programming_Paradigms/#referential-transparency","title":"Referential Transparency","text":""},{"location":"Notes/Python/Programming_Paradigms/#immutability","title":"Immutability","text":""},{"location":"Notes/Python/Programming_Paradigms/#advantages-and-disadvantages-of-functional-programming","title":"Advantages and Disadvantages of Functional programming","text":""},{"location":"Notes/Python/Programming_Paradigms/#database-programming","title":"Database Programming","text":""},{"location":"Notes/Python/Scope_and_Namespace/","title":"Scope and Namespace","text":"<p>In programming, the scope of a name defines the area of a program in which you can unambiguously access that name, such as variables, functions, objects, and so on. A name will only be visible to and accessible by the code in its scope.</p> <p>Most commonly, there are two general scopes:</p> <ol> <li> <p>Global scope: The names that you define in this scope are available to all your code.</p> </li> <li> <p>Local scope: The names that you define in this scope are only available or visible to the code within the scope.</p> </li> </ol> <p>In Python, the names in your programs will have the scope of the block of code in which you define them. When you can access the value of a given name from someplace in your code, you\u2019ll say that the name is in scope. If you can\u2019t access the name, then you\u2019ll say that the name is out of scope.</p> <p>Variables in Python come into existence when you first assign them a value. On the other hand, functions and classes are available after you define them using def or class, respectively. Finally, modules exist after you import them. </p> Operation Statement Assignments <code>x = value</code> Import operations <code>import module</code> or <code>from module import name</code> Function definitions <code>def my_func(): ...</code> Argument definitions in the context of functions <code>def my_func(arg1, arg2,... argN): ...</code> Class definitions <code>class MyClass: ...</code> <p>Python uses the location of the name assignment or definition to associate it with a particular scope. In other words, where you assign or define a name in your code determines the scope or visibility of that name.</p> <p>For example, if you assign a value to a name inside a function, then that name will have a local Python scope. In contrast, if you assign a value to a name outside of all functions\u2014say, at the top level of a module\u2014then that name will have a global Python scope.</p> <p>Python scopes are implemented as dictionaries that map names to objects. These dictionaries are commonly called namespaces. These are the concrete mechanisms that Python uses to store names. They\u2019re stored in a special attribute called <code>.__dict__</code>.</p> <p>Names at the top level of a module are stored in the module\u2019s namespace. In other words, they\u2019re stored in the module\u2019s <code>.__dict__</code> attribute. </p> <pre><code>import sys\nsys.__dict__.keys()\n</code></pre> <pre>\n<code>dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', 'addaudithook', 'audit', 'breakpointhook', '_clear_type_cache', '_current_frames', 'displayhook', 'exc_info', 'excepthook', 'exit', 'getdefaultencoding', 'getdlopenflags', 'getallocatedblocks', 'getfilesystemencoding', 'getfilesystemencodeerrors', 'getrefcount', 'getrecursionlimit', 'getsizeof', '_getframe', 'intern', 'is_finalizing', 'setswitchinterval', 'getswitchinterval', 'setdlopenflags', 'setprofile', 'getprofile', 'setrecursionlimit', 'settrace', 'gettrace', 'call_tracing', '_debugmallocstats', 'set_coroutine_origin_tracking_depth', 'get_coroutine_origin_tracking_depth', 'set_asyncgen_hooks', 'get_asyncgen_hooks', 'unraisablehook', 'modules', 'stderr', '__stderr__', '__displayhook__', '__excepthook__', '__breakpointhook__', '__unraisablehook__', 'version', 'hexversion', '_git', '_framework', 'api_version', 'copyright', 'platform', 'maxsize', 'float_info', 'int_info', 'hash_info', 'maxunicode', 'builtin_module_names', 'byteorder', 'abiflags', 'version_info', 'implementation', 'flags', 'float_repr_style', 'thread_info', 'meta_path', 'path_importer_cache', 'path_hooks', 'path', 'executable', '_base_executable', 'prefix', 'base_prefix', 'exec_prefix', 'base_exec_prefix', 'platlibdir', 'pycache_prefix', 'argv', 'warnoptions', '_xoptions', 'dont_write_bytecode', '__stdin__', 'stdin', '__stdout__', 'stdout', '_home', '__interactivehook__', 'ps1', 'ps2', 'ps3', 'last_type', 'last_value', 'last_traceback'])</code>\n</pre> <p>If you want to use the name <code>ps1</code>, which is defined in sys. If you know how <code>.__dict__</code> and namespaces work in Python, then you can reference <code>ps1</code> in at least two different ways:</p> <ol> <li>Using the dot notation on the module\u2019s name in the form module.name</li> <li>Using a subscription operation on <code>.__dict__</code> in the form module <code>__dict__['name']</code></li> </ol> <pre><code>sys.ps1\n</code></pre> <pre>\n<code>'In : '</code>\n</pre> <pre><code>sys.__dict__['ps1']\n</code></pre> <pre>\n<code>'In : '</code>\n</pre> <p>Whenever you use a name, such as a variable or a function name, Python searches through different scope levels (or namespaces) to determine whether the name exists or not. If the name exists, then you\u2019ll always get the first occurrence of it. Otherwise, you\u2019ll get an error. You\u2019ll cover this search mechanism in the next section.</p> <p>Python resolves names using the so-called LEGB rule, which is named after the Python scope for names. The letters in LEGB stand for Local, Enclosing, Global, and Built-in. Here is an overview of what these terms mean:</p> <p>Local (or function) scope is the code block or body of any Python function or lambda expression. This Python scope contains the names that you define inside the function. These names will only be visible from the code of the function. It\u2019s created at function call, not at function definition, so you\u2019ll have as many different local scopes as function calls. This is true even if you call the same function multiple times, or recursively. Each call will result in a new local scope being created.</p> <p>By default, parameters and names that you assign inside a function exist only within the function or local scope associated with the function call. When the function returns, the local scope is destroyed and the names are forgotten. </p> <pre><code>def foo(name):\n    var = \"Hello,\"\n    print(var, name)\nfoo(\"there\")\n</code></pre> <pre>\n<code>Hello, there\n</code>\n</pre> <pre><code>var\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 22 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#X34sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; var\n\nNameError: name 'var' is not defined</pre> <pre><code>name\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 23 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#X61sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; name\n\nNameError: name 'name' is not defined</pre> <p>Since you can\u2019t access local names from statements that are outside the function, different functions can define objects with the same name. You can avoid name collisions in your programs by properly using the local Python scope. This also makes functions more self-contained and creates maintainable program units. Additionally, since you can\u2019t change local names from remote places in your code, your programs will be easier to debug, read, and modify.</p> <p>You can inspect the names and parameters of a function using <code>.__code__</code>, which is an attribute that holds information on the function\u2019s internal code. Take a look at the code below:</p> <pre><code>foo.__code__.co_varnames\n</code></pre> <pre>\n<code>('name', 'var')</code>\n</pre> <pre><code>foo.__code__.co_argcount\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code>foo.__code__.co_consts\n</code></pre> <pre>\n<code>(None, 'Hello,')</code>\n</pre> <pre><code>foo.__code__.co_name\n</code></pre> <pre>\n<code>'foo'</code>\n</pre> <p>Enclosing (or nonlocal) scope is a special scope that only exists for nested functions. If the local scope is an inner or nested function, then the enclosing scope is the scope of the outer or enclosing function. This scope contains the names that you define in the enclosing function. The names in the enclosing scope are visible from the code of the inner and enclosing functions.</p> <pre><code>def outer_func():\n    var = \"Hello\"\n    def inner_func():\n        print(f\"Printing from inner: {var}\")\n    inner_func()\n    print(f\"Printing from outer: {var}\")\nouter_func()\n</code></pre> <pre>\n<code>Printing from inner: Hello\nPrinting from outer: Hello\n</code>\n</pre> <p>When you call <code>outer_func()</code>, you\u2019re also creating a local scope. The local scope of <code>outer_func()</code> is, at the same time, the enclosing scope of <code>inner_func()</code>. From inside <code>inner_func()</code>, this scope is neither the global scope nor the local scope. It\u2019s a special scope known as the enclosing scope.</p> <p>All the names that you create in the enclosing scope are visible from inside <code>inner_func()</code>, except for those created after you call <code>inner_func()</code>.</p> <pre><code>def outer_func():\n    var = \"Hello\"\n    def inner_func():\n        print(f\"Printing from inner: {var}\")\n        print(f\"Printing `another_var` from inner: {another_var}\")\n    inner_func()\n    print(f\"Printing from outer: {var}\")\n    another_var = \"Hmm\"\nouter_func()\n</code></pre> <pre>\n<code>Printing from inner: Hello\n</code>\n</pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 35 in &lt;cell line: 9&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=6'&gt;7&lt;/a&gt;     print(f\"Printing from outer: {var}\")\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=7'&gt;8&lt;/a&gt;     another_var = \"Hmm\"\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=8'&gt;9&lt;/a&gt; outer_func()\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 35 in outer_func()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt;     print(f\"Printing from inner: {var}\")\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=4'&gt;5&lt;/a&gt;     print(f\"Printing `another_var` from inner: {another_var}\")\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=5'&gt;6&lt;/a&gt; inner_func()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=6'&gt;7&lt;/a&gt; print(f\"Printing from outer: {var}\")\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=7'&gt;8&lt;/a&gt; another_var = \"Hmm\"\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 35 in outer_func.&lt;locals&gt;.inner_func()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt; def inner_func():\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt;     print(f\"Printing from inner: {var}\")\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y103sZmlsZQ%3D%3D?line=4'&gt;5&lt;/a&gt;     print(f\"Printing `another_var` from inner: {another_var}\")\n\nNameError: free variable 'another_var' referenced before assignment in enclosing scope</pre> <p>Also, you can\u2019t modify names in the enclosing scope from inside a nested function unless you declare them as nonlocal in the nested function.</p> <pre><code>def outer_func():\n    var = \"Hello\"\n    def inner_func():\n        var = \"There\"\n        print(f\"Printing from inner: {var}\")\n    inner_func()\n    print(f\"Printing from outer: {var}\")\nouter_func()\n</code></pre> <pre>\n<code>Printing from inner: There\nPrinting from outer: Hello\n</code>\n</pre> <p>Pyhton creates a new object containing string \"There\" and a new local name <code>var</code> inside the <code>inner_func</code>.</p> <p>Global (or module) scope is the top-most scope in a Python program, script, or module. This Python scope contains all of the names that you define at the top level of a program or a module. Names in this Python scope are visible from everywhere in your code.</p> <pre><code>global_var = \"Hello\"\nprint(global_var)\n</code></pre> <pre>\n<code>Hello\n</code>\n</pre> <p>Internally, Python turns your program\u2019s main script into a module called <code>__main__</code> to hold the main program\u2019s execution. The namespace of this module is the main global scope of your program.</p> <pre><code>__name__\n</code></pre> <pre>\n<code>'__main__'</code>\n</pre> <p>To inspect the names within your main global scope, you can use <code>dir()</code>. If you call <code>dir()</code> without arguments, then you\u2019ll get the list of names that live in your current global scope. </p> <pre><code>dir()\n</code></pre> <pre>\n<code>['In',\n 'Out',\n '_',\n '__',\n '___',\n '__builtin__',\n '__builtins__',\n '__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '__vsc_ipynb_file__',\n '_dh',\n '_i',\n '_i1',\n '_ih',\n '_ii',\n '_iii',\n '_oh',\n 'exit',\n 'get_ipython',\n 'os',\n 'quit',\n 'sys']</code>\n</pre> <p>Now, if we assign a variable in global scop, it will be added to the above list.</p> <pre><code>var = 1\ndir()\n</code></pre> <pre>\n<code>['In',\n 'Out',\n '_',\n '_1',\n '__',\n '___',\n '__builtin__',\n '__builtins__',\n '__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '__vsc_ipynb_file__',\n '_dh',\n '_i',\n '_i1',\n '_i2',\n '_ih',\n '_ii',\n '_iii',\n '_oh',\n 'exit',\n 'get_ipython',\n 'os',\n 'quit',\n 'sys',\n 'var']</code>\n</pre> <p>You can access or reference the value of any global name from any place in your code. This includes functions and classes.</p> <pre><code>var = 100\ndef foo():\n    return var\nfoo()\n</code></pre> <pre>\n<code>100</code>\n</pre> <p>The function <code>foo</code> can easily access the global variable <code>var</code>. However, you can\u2019t assign global names inside functions unless you explicitly declare them as global names using a global statement.</p> <p>If you try to assign a value to a global name inside a function, then you\u2019ll be creating that name in the function\u2019s local scope, shadowing or overriding the global name. This means that you won\u2019t be able to change most variables that have been defined outside the function from within the function.</p> <pre><code>var = 100 \ndef increment():\n    var = var + 1  # Try to update a global variable\n\nincrement()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 51 in &lt;cell line: 5&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y126sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def increment():\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y126sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     var = var + 1  # Try to update a global variable\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y126sZmlsZQ%3D%3D?line=4'&gt;5&lt;/a&gt; increment()\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 51 in increment()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y126sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def increment():\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y126sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     var = var + 1\n\nUnboundLocalError: local variable 'var' referenced before assignment</pre> <p>Within <code>increment()</code>, you try to increment the global variable, <code>var</code>. Since <code>var</code> isn\u2019t declared global inside <code>increment()</code>, Python creates a new local variable with the same name, <code>var</code>, inside the function. In the process, Python realizes that you\u2019re trying to use the local <code>var</code> before its first assignment <code>(var + 1)</code>, so it raises an <code>UnboundLocalError</code>.</p> <p>Here is a more interesting example:</p> <pre><code>var = 100  # A global variable\ndef func():\n    print(var)  # Reference the global variable, var\n    var = 200   # Define a new local variable using the same name, var\n\nfunc()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 54 in &lt;cell line: 6&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     print(var)  # Reference the global variable, var\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt;     var = 200   # Define a new local variable using the same name, var\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=5'&gt;6&lt;/a&gt; func()\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 54 in func()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def func():\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     print(var)  # Reference the global variable, var\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y132sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt;     var = 200\n\nUnboundLocalError: local variable 'var' referenced before assignment</pre> <p>You likely expect to be able to print the global <code>var</code> and be able to update <code>var</code> later, but again you get an UnboundLocalError. What happens here is that when you run the body of <code>func()</code>, Python decides that <code>var</code> is a local variable because it\u2019s assigned within the function scope. </p> <p>This is a special Python scope that\u2019s created or loaded whenever you run a script or open an interactive session. This scope contains names such as keywords, functions, exceptions, and other attributes that are built into Python. Names in this Python scope are also available from everywhere in your code. It\u2019s automatically loaded by Python when you run a program or script.</p> <pre><code>raise AttributeError(\"Raising an error using built-in scope\")\n</code></pre> <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 30 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#X50sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; raise AttributeError(\"Raising an error using built-in scope\")\n\nAttributeError: Raising an error using built-in scope</pre> <p>The built-in scope is a special Python scope that\u2019s implemented as a standard library module named builtins in Python 3.x. All of Python\u2019s built-in objects live in this module. They\u2019re automatically loaded to the built-in scope when you run the Python interpreter. Python searches builtins last in its LEGB lookup, so you get all the names it defines for free. This means that you can use them without importing any module.</p> <p>Names available in this scope can be seen by using:</p> <pre><code>dir(__builtins__)[20:30]\n</code></pre> <pre>\n<code>['FileNotFoundError',\n 'FloatingPointError',\n 'FutureWarning',\n 'GeneratorExit',\n 'IOError',\n 'ImportError',\n 'ImportWarning',\n 'IndentationError',\n 'IndexError',\n 'InterruptedError']</code>\n</pre> <pre><code>len(dir(__builtins__))\n</code></pre> <pre>\n<code>155</code>\n</pre> <pre><code>import builtins\nprint(len(dir(builtins)))\nprint(builtins.sum([1, 2, 3, 4, 5]))\nprint(builtins.pow(10, 2))\n</code></pre> <pre>\n<code>155\n15\n100\n</code>\n</pre> <p>Even though you can access all of these Python built-in objects for free (without importing anything), you can also explicitly import builtins and access the names using the dot notation.</p> <p>You can override or redefine any built-in name in your global scope. If you do so, then keep in mind that this will affect all your code. For example:</p> <pre><code>print(abs(-15))\nabs = 20\nabs(-15)\n</code></pre> <pre>\n<code>15\n</code>\n</pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 66 in &lt;cell line: 3&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y145sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; print(abs(-15))\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y145sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; abs = 20\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y145sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt; abs(-15)\n\nTypeError: 'int' object is not callable</pre> <p>Here, <code>abs</code> is overwritten by 20 and you are getting a <code>TypeError</code> because abs now holds a reference to an <code>integer</code>, which is not callable.</p> <p>If you\u2019re experimenting with some code and you accidentally re-assign a built-in name at the interactive prompt, then you can either restart your session or run <code>del name</code> to remove the redefinition from your global Python scope. </p> <pre><code>del abs\nabs(-15)\n</code></pre> <pre>\n<code>15</code>\n</pre> <p>As a quick summary, some of the implications of Python scope are shown in the following table:</p> <p>The LEGB rule is a kind of name lookup procedure, which determines the order in which Python looks up names. For example, if you reference a given name, then Python will look that name up sequentially in the local, enclosing, global, and built-in scope. If the name exists, then you\u2019ll get the first occurrence of it. Otherwise, you\u2019ll get an error.</p> Action Global Code Local Code Nested Function Code Access or reference names that live in the global scope Yes Yes Yes Modify or update names that live in the global scope Yes No (unless declared <code>global</code>) No (unless declared <code>global</code>) Access or reference names that live in a local scope No Yes (its own local scope), No (other local scope) Yes (its own local scope), No (other local scope) Override names in the built-in scope Yes Yes (during function execution) Yes (during function execution) Access or reference names that live in their enclosing scope N/A N/A Yes Modify or update names that live in their enclosing scope N/A N/A No (unless declared <code>nonlocal</code>) <p></p> <p>There are two keywords which can be used to modify the defualt behaviour of Python scope: 1. <code>global</code> 2. <code>nonlocal</code></p> <p>When you try to assign a value to a global name inside a function, you create a new local name in the function scope. To modify this behavior, you can use a global statement. With this statement, you can define a list of names that are going to be treated as global names.</p> <p>The statement consists of the <code>global</code> keyword followed by one or more names separated by commas. You can also use multiple <code>global</code> statements with a name (or a list of names). All the names that you list in a <code>global</code> statement will be mapped to the <code>global</code> or module scope in which you define them.</p> <pre><code>counter = 0  # A global name\ndef update_counter():\n    counter = counter + 1  # Fail trying to update counter\nupdate_counter()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nUnboundLocalError                         Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 78 in &lt;cell line: 4&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y163sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def update_counter():\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y163sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     counter = counter + 1  # Fail trying to update counter\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y163sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt; update_counter()\n\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 78 in update_counter()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y163sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt; def update_counter():\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y163sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt;     counter = counter + 1\n\nUnboundLocalError: local variable 'counter' referenced before assignment</pre> <p>As you saw earlier, the above function fails to execute. To make this code to work the way you expect here, you can use the <code>global</code> keyword:</p> <pre><code>counter = 0  # A global name\ndef update_counter():\n    global counter\n    counter = counter + 1  # Fail trying to update counter\nupdate_counter()\ncounter\n</code></pre> <pre>\n<code>1</code>\n</pre> <p>With the statement global <code>counter</code>, you\u2019re telling Python to look in the global scope for the name <code>counter</code>. This way, the expression <code>counter = counter + 1</code> doesn\u2019t create a new name in the function scope, but updates it in the global scope. What Python now does is it maps the name <code>counter</code> in the function scope to the same name in the global or module scope. </p> <p>The use of global is considered bad practice in general. If you find yourself using global to fix problems like the one above, then stop and think if there is a better way to write your code.</p> <p>You can also use a <code>global</code> statement to create lazy global names by declaring them inside a function. </p> <pre><code>def create_lazy_name():\n    global lazy  # Create a global name, lazy\n    lazy = 100\n    return lazy\n\ncreate_lazy_name()\nlazy\n</code></pre> <pre>\n<code>100</code>\n</pre> <p>When you call <code>create_lazy_name()</code>, you\u2019re also creating a global variable called <code>lazy</code>. Notice that after calling the function, the name <code>lazy</code> is available in the global Python scope. If you inspect the global namespace using <code>dir()</code>, then you\u2019ll see that <code>lazy</code> appears last in the list.</p> <pre><code>\"lazy\" in dir()\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>It\u2019s worth noting that you can use global from inside any function or nested function and the names listed will always be mapped to names in the global Python scope.</p> <p>Similarly to global names, nonlocal names can be accessed from inner functions, but not assigned or updated. If you want to modify them, then you need to use a <code>nonlocal</code> statement. </p> <pre><code>def func():\n    var = 100  # A nonlocal variable\n    def nested():\n        nonlocal var  # Declare var as nonlocal\n        var += 100\n\n    nested()\n    print(var)\n\nfunc()\n</code></pre> <pre>\n<code>200\n</code>\n</pre> <p>With the statement nonlocal <code>var</code>, you tell Python that you\u2019ll be modifying <code>var</code> inside <code>nested()</code>. Then, you increment <code>var</code> using an augmented assignment operation. This change is reflected in the nonlocal name var, which now has a value of 200.</p> <p>Unlike <code>global</code>, you can\u2019t use <code>nonlocal</code> outside of a nested or enclosed function. To be more precise, you can\u2019t use a <code>nonlocal</code> statement in either the global scope or in a local scope.</p> <pre><code>nonlocal my_var\n</code></pre> <pre>\n  Input In [19]\n    nonlocal my_var\n    ^\nSyntaxError: nonlocal declaration not allowed at module level\n</pre> <pre><code>def func():\n    nonlocal var  # Try to use nonlocal in a local scope\n    print(var)\n</code></pre> <pre>\n  Input In [20]\n    nonlocal var  # Try to use nonlocal in a local scope\n    ^\nSyntaxError: no binding for nonlocal 'var' found\n</pre> <p>Also, in contrast to <code>global</code>, you can\u2019t use nonlocal to create lazy nonlocal names. Names must already exist in the enclosing Python scope if you want to use them as nonlocal names. This means that you can\u2019t create nonlocal names by declaring them in a nonlocal statement in a nested function.</p> <pre><code>def func():\n    def nested():\n        nonlocal lazy_var\n</code></pre> <pre>\n  Input In [21]\n    nonlocal lazy_var\n    ^\nSyntaxError: no binding for nonlocal 'lazy_var' found\n</pre> <p>You\u2019ll find some Python structures where name resolution seems not to fit into the LEGB rule for Python scopes. These structures include: 1. Comprehensions 2. Exception Blocks 3. Classes and Instances</p> <p>Comprehensions consist of a pair of brackets ([]) or curly braces ({}) containing an expression, followed by one or more <code>for</code> clauses and then zero or one <code>if</code> clause per <code>for</code> clause.</p> <p>The <code>for</code> clause in a comprehension works similarly to a traditional <code>for</code> loop. The loop variable in a comprehension is local to the structure:</p> <pre><code>[item for item in range(5)]\n</code></pre> <pre>\n<code>[0, 1, 2, 3, 4]</code>\n</pre> <pre><code>item\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 101 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y226sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; item\n\nNameError: name 'item' is not defined</pre> <p>Once you run the list comprehension, the variable <code>item</code> is forgotten and you can\u2019t access its value anymore. This is not the case with a traditional <code>for</code> loop:</p> <pre><code>for item in range(5):\n    print(item)\nitem\n</code></pre> <pre>\n<code>0\n1\n2\n3\n4\n</code>\n</pre> <pre>\n<code>4</code>\n</pre> <p>You can freely access the loop variable <code>item</code> once the loop has finished. Here, the loop variable holds the last value processed by the loop, which is 4 in this example.</p> <p>Another atypical case of Python scope that you\u2019ll encounter is the case of the exception variable. The exception variable is a variable that holds a reference to the exception raised by a try statement. In Python 3.x, such variables are local to the except block and are forgotten when the block ends. </p> <pre><code>lst = [1, 2, 3]\ntry:\n    lst[4]\nexcept IndexError as err:\n    print(err)\n\n\nerr\n</code></pre> <pre>\n<code>list index out of range\n</code>\n</pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 107 in &lt;cell line: 8&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y235sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt; except IndexError as err:\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y235sZmlsZQ%3D%3D?line=4'&gt;5&lt;/a&gt;     print(err)\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y235sZmlsZQ%3D%3D?line=7'&gt;8&lt;/a&gt; err\n\nNameError: name 'err' is not defined</pre> <p><code>err</code> holds a reference to the exception raised by the <code>try</code> clause. You can use <code>err</code> only inside the code block of the <code>except</code> clause.</p> <p>To work around this behavior, you can define an auxiliary variable out of the <code>try</code> statement and then assign the exception to that variable inside the <code>except</code> block.</p> <pre><code>lst = [1, 2, 3]\nex = None\ntry:\n    lst[4]\nexcept IndexError as err:\n    ex = err\n    print(err)\n</code></pre> <pre>\n<code>list index out of range\n</code>\n</pre> <pre><code>err\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 111 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y242sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; err\n\nNameError: name 'err' is not defined</pre> <pre><code>ex\n</code></pre> <pre>\n<code>IndexError('list index out of range')</code>\n</pre> <p>When you define a class, you\u2019re creating a new local Python scope. The names assigned at the top level of the class live in this local scope. The names that you assigned inside a class statement don\u2019t clash with names elsewhere. You can say that these names follow the LEGB rule, where the class block represents the L level.</p> <p>Unlike functions, the class local scope isn\u2019t created at call time, but at execution time. Each class object has its own <code>.__dict__</code> attribute that holds the class scope or namespace where all the class attributes live. </p> <pre><code>class A:\n    attr = 100\n\nA.__dict__.keys()\n</code></pre> <pre>\n<code>dict_keys(['__module__', 'attr', '__dict__', '__weakref__', '__doc__'])</code>\n</pre> <p>This dictionary represents the class local scope. The names in this scope are visible to all instances of the class and to the class itself.</p> <p>To get access to a class attribute from outside the class, you need to use the dot notation:</p> <pre><code>class A:\n    attr = 100\n    print(attr)\n</code></pre> <pre>\n<code>100\n</code>\n</pre> <pre><code>A.attr\n</code></pre> <pre>\n<code>100</code>\n</pre> <pre><code>attr\n</code></pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 119 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y253sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; attr\n\nNameError: name 'attr' is not defined</pre> <p>You can also access any class attribute using an instance of the class:</p> <pre><code>obj = A()\nobj.attr\n</code></pre> <pre>\n<code>100</code>\n</pre> <p>There are many built-in functions that are closely related to the concept of Python scope and namespaces. Here, we'll discuss about some of them.</p> <p>In Python, <code>globals()</code> is a built-in function that returns a reference to the current global scope or namespace dictionary. This dictionary always stores the names of the current module. This means that if you call <code>globals()</code> in a given module, then you\u2019ll get a dictionary containing all the names that you\u2019ve defined in that module, right before the call to <code>globals()</code>.</p> <pre><code>globals()\n</code></pre> <pre>\n<code>{'__name__': '__main__',\n '__doc__': 'Automatically created module for IPython interactive environment',\n '__package__': None,\n '__loader__': None,\n '__spec__': None,\n '__builtin__': &lt;module 'builtins' (built-in)&gt;,\n '__builtins__': &lt;module 'builtins' (built-in)&gt;,\n '_ih': ['', 'globals()'],\n '_oh': {},\n '_dh': [PosixPath('/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python')],\n 'In': ['', 'globals()'],\n 'Out': {},\n 'get_ipython': &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x7ff9f8e38bb0&gt;&gt;,\n 'exit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7ff9f8e4b850&gt;,\n 'quit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7ff9f8e4b850&gt;,\n '_': '',\n '__': '',\n '___': '',\n 'os': &lt;module 'os' from '/home/hari31416/anaconda3/envs/data-science/lib/python3.9/os.py'&gt;,\n 'sys': &lt;module 'sys' (built-in)&gt;,\n '__vsc_ipynb_file__': '/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb',\n '_i': '',\n '_ii': '',\n '_iii': '',\n '_i1': 'globals()'}</code>\n</pre> <pre><code>var = 42\nglobals()\n</code></pre> <pre>\n<code>{'__name__': '__main__',\n '__doc__': 'Automatically created module for IPython interactive environment',\n '__package__': None,\n '__loader__': None,\n '__spec__': None,\n '__builtin__': &lt;module 'builtins' (built-in)&gt;,\n '__builtins__': &lt;module 'builtins' (built-in)&gt;,\n '_ih': ['', 'globals()', 'var = 42\\nglobals()'],\n '_oh': {1: {...}},\n '_dh': [PosixPath('/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python')],\n 'In': ['', 'globals()', 'var = 42\\nglobals()'],\n 'Out': {1: {...}},\n 'get_ipython': &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x7ff9f8e38bb0&gt;&gt;,\n 'exit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7ff9f8e4b850&gt;,\n 'quit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7ff9f8e4b850&gt;,\n '_': {...},\n '__': '',\n '___': '',\n 'os': &lt;module 'os' from '/home/hari31416/anaconda3/envs/data-science/lib/python3.9/os.py'&gt;,\n 'sys': &lt;module 'sys' (built-in)&gt;,\n '__vsc_ipynb_file__': '/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb',\n '_i': 'globals()',\n '_ii': '',\n '_iii': '',\n '_i1': 'globals()',\n '_1': {...},\n '_i2': 'var = 42\\nglobals()',\n 'var': 42}</code>\n</pre> <p>An interesting example of how you can use <code>globals()</code> in your code would be to dynamically dispatch functions that live in the global scope. Suppose you want to dynamically dispatch platform-dependent functions. To do this, you can use <code>globals()</code> as follows</p> <pre><code>from sys import platform\n\ndef linux_print():\n    print('Printing from Linux...')\n\ndef win32_print():\n    print('Printing from Windows...')\n\ndef darwin_print():\n    print('Printing from macOS...')\n\nprinter = globals()[platform + '_print']\n\nprinter()\n</code></pre> <pre>\n<code>Printing from Linux...\n</code>\n</pre> <p>Note that you can use the <code>globals()</code> dictionary just like you would use any regular dictionary. For example, you can iterate through it through it using the traditional methods.</p> <p>You can also perform regular subscription operations over <code>globals()</code> by using square brackets like in <code>globals()['name']</code>. </p> <pre><code>globals()['__doc__'] = \"\"\"Docstring for __main__.\"\"\"\n__doc__\n</code></pre> <pre>\n<code>'Docstring for __main__.'</code>\n</pre> <p>Another function related to Python scope and namespaces is <code>locals()</code>. This function updates and returns a dictionary that holds a copy of the current state of the local Python scope or namespace. When you call <code>locals()</code> in a function block, you get all the names assigned in the local or function scope up to the point where you call <code>locals()</code>. </p> <pre><code>def func(arg):\n    var = 100\n    print(locals())\n    another = 200\n\nfunc(300)\n</code></pre> <pre>\n<code>{'arg': 300, 'var': 100}\n</code>\n</pre> <p>If you call <code>locals()</code> in the global Python scope, then you\u2019ll get the same dictionary that you would get if you were to call <code>globals()</code>.</p> <pre><code>locals()\n</code></pre> <pre>\n<code>{'__name__': '__main__',\n '__doc__': 'Automatically created module for IPython interactive environment',\n '__package__': None,\n '__loader__': None,\n '__spec__': None,\n '__builtin__': &lt;module 'builtins' (built-in)&gt;,\n '__builtins__': &lt;module 'builtins' (built-in)&gt;,\n '_ih': ['', 'locals()'],\n '_oh': {},\n '_dh': [PosixPath('/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python')],\n 'In': ['', 'locals()'],\n 'Out': {},\n 'get_ipython': &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x7f7401872bb0&gt;&gt;,\n 'exit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7f7401885850&gt;,\n 'quit': &lt;IPython.core.autocall.ZMQExitAutocall at 0x7f7401885850&gt;,\n '_': '',\n '__': '',\n '___': '',\n 'sys': &lt;module 'sys' (built-in)&gt;,\n 'os': &lt;module 'os' from '/home/hari31416/anaconda3/envs/data-science/lib/python3.9/os.py'&gt;,\n '__vsc_ipynb_file__': '/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb',\n '_i': '',\n '_ii': '',\n '_iii': '',\n '_i1': 'locals()'}</code>\n</pre> <p><code>vars()</code> is a Python built-in function that returns the <code>.__dict__</code> attribute of a module, class, instance, or any other object which has a dictionary attribute. Remember that <code>.__dict__</code> is a special dictionary that Python uses to implement namespaces. </p> <pre><code>import sys\nvars(sys) is sys.__dict__\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>class MyClass:\n    def __init__(self, var):\n        self.var = var\n\nobj = MyClass(100)\nvars(obj)\n</code></pre> <pre>\n<code>{'var': 100}</code>\n</pre> <pre><code>vars(MyClass)\n</code></pre> <pre>\n<code>mappingproxy({'__module__': '__main__',\n              '__init__': &lt;function __main__.MyClass.__init__(self, var)&gt;,\n              '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;,\n              '__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;,\n              '__doc__': None})</code>\n</pre> <p>Without any argument, <code>vars()</code> acts like <code>locals()</code> and returns a dictionary with all the names in the local Python scope:</p> <pre><code>vars() is locals()\n</code></pre> <pre>\n<code>True</code>\n</pre> <p>If you call <code>vars()</code> with an object that doesn\u2019t have a <code>.__dict__</code>, then you\u2019ll get a <code>TypeError</code>.</p> <pre><code>vars(10)\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb Cell 145 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Scope_and_Namespace.ipynb#Y264sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; vars(10)\n\nTypeError: vars() argument must have __dict__ attribute</pre> <p>A namespace is a collection of currently defined symbolic names along with information about the object that each name references. You can think of a namespace as a dictionary in which the keys are the object names and the values are the objects themselves. Each key-value pair maps a name to its corresponding object.</p> <p>In a Python program, there are four types of namespaces: 1. The global namespace 2. The local namespace 3. The enclosing namespace 4. The Build-in namespace</p> <p>)</p> <p>Reference 1</p> <p>Reference 2</p>"},{"location":"Notes/Python/Scope_and_Namespace/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Names-and-Scopes-in-Python\"&gt;Names and Scopes in Python&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Scope Implementation in Python</li> <li>Python Scopes and LEGB Rule</li> <ol><li>Local Scope</li> <li>Enclosing Scope</li> <li>Global Scope</li> <li>Built-in Scope</li> </ol> <p><li>Modifying the Behavior of a Python Scope</li></p> <ol><li>The global Statement</li> <li>The nonlocal Statement</li> </ol> <p><li>Some Unusual Python Scope Behavior</li></p> <ol><li>Comprehension Variables Scope</li> <li>Exception Variables Scope</li> <li>Class and Instance Attributes Scope</li> </ol> <p><li>Scope Related Built-In Functions</li></p> <ol><li>globals()</li> <li>locals()</li> <li>vars()</li> </ol> <p><li>Namespaces</li> </p>"},{"location":"Notes/Python/Scope_and_Namespace/#names-and-scopes-in-python","title":"Names and Scopes in Python","text":""},{"location":"Notes/Python/Scope_and_Namespace/#scope-implementation-in-python","title":"Scope Implementation in Python","text":""},{"location":"Notes/Python/Scope_and_Namespace/#python-scopes-and-legb-rule","title":"Python Scopes and LEGB Rule","text":""},{"location":"Notes/Python/Scope_and_Namespace/#local-scope","title":"Local Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#enclosing-scope","title":"Enclosing Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#global-scope","title":"Global Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#built-in-scope","title":"Built-in Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#modifying-the-behavior-of-a-python-scope","title":"Modifying the Behavior of a Python Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#the-global-statement","title":"The <code>global</code> Statement","text":""},{"location":"Notes/Python/Scope_and_Namespace/#the-nonlocal-statement","title":"The <code>nonlocal</code> Statement","text":""},{"location":"Notes/Python/Scope_and_Namespace/#some-unusual-python-scope-behavior","title":"Some Unusual Python Scope Behavior","text":""},{"location":"Notes/Python/Scope_and_Namespace/#comprehension-variables-scope","title":"Comprehension Variables Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#exception-variables-scope","title":"Exception Variables Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#class-and-instance-attributes-scope","title":"Class and Instance Attributes Scope","text":""},{"location":"Notes/Python/Scope_and_Namespace/#scope-related-built-in-functions","title":"Scope Related Built-In Functions","text":""},{"location":"Notes/Python/Scope_and_Namespace/#globals","title":"<code>globals()</code>","text":""},{"location":"Notes/Python/Scope_and_Namespace/#locals","title":"<code>locals()</code>","text":""},{"location":"Notes/Python/Scope_and_Namespace/#vars","title":"<code>vars()</code>","text":""},{"location":"Notes/Python/Scope_and_Namespace/#namespaces","title":"Namespaces","text":""},{"location":"Notes/Python/Terminology/","title":"Terminology","text":"<p>Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared, but contains no implementation. Abstract classes cannot be instantiated, and require subclasses to provide implementations for the abstract methods. The following Python code uses the abc module and defines an abstract base class:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClassExample(ABC):\n\n    def __init__(self, value):\n        self.value = value\n        super().__init__()\n\n    @abstractmethod\n    def do_something(self):\n        pass\n</code></pre> <p>We will define now a subclass using the previously defined abstract class. You will notice that we haven't implemented the do_something method, even though we are required to implement it, because this method is decorated as an abstract method with the decorator \"abstractmethod\". We get an exception that DoAdd42 can't be instantiated:</p> <pre><code>class DoAdd42(AbstractClassExample):\n    pass\n\nx = DoAdd42(4)\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb Cell 6 in &lt;cell line: 4&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#W4sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; class DoAdd42(AbstractClassExample):\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#W4sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt;     pass\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#W4sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt; x = DoAdd42(4)\n\nTypeError: Can't instantiate abstract class DoAdd42 with abstract method do_something</pre> <p>Here is the correct way to do this:</p> <pre><code>class DoAdd42(AbstractClassExample):\n\n    def do_something(self):\n        return self.value + 42\n\nclass DoMul42(AbstractClassExample):\n\n    def do_something(self):\n        return self.value * 42\n\nx = DoAdd42(10)\ny = DoMul42(10)\n\nprint(x.do_something())\nprint(y.do_something())\n</code></pre> <pre>\n<code>52\n420\n</code>\n</pre> <p>A class that is derived from an abstract class cannot be instantiated unless all of its abstract methods are overridden. An abstract method can have an implementation in the abstract class however, it has to be overridden in the derived class.</p> <pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClassExample(ABC):\n\n    def __init__(self, value):\n        self.value = value\n        super().__init__()\n\n    @abstractmethod\n    def do_something(self):\n        print(\"Not Doing Anything At All\")\n\nclass DoMul42(AbstractClassExample):\n\n    def do_something(self):\n        return self.value * 42\n\nx = DoMul42(10)\n\nprint(x.do_something())\n</code></pre> <pre>\n<code>420\n</code>\n</pre> <p>Like in other cases of \"normal\" inheritance, the abstract method can be invoked with super() call mechanism.</p> <pre><code>from abc import ABC, abstractmethod\n\nclass AbstractClassExample(ABC):\n\n    def __init__(self, value):\n        self.value = value\n        super().__init__()\n\n    @abstractmethod\n    def do_something(self):\n        print(\"Not Doing Anything At All\")\n\nclass DoMul42(AbstractClassExample):\n\n    def do_something(self):\n        super().do_something()\n        return self.value * 42\n\nx = DoMul42(10)\n\nprint(x.do_something())\n</code></pre> <pre>\n<code>Not Doing Anything At All\n420\n</code>\n</pre> <p>Here is the reference.</p> <p>A label associated with a variable, a class attribute or a function parameter or return value, used by convention as a type hint.</p> <p>Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the<code>__annotations__</code> special attribute of modules, classes, and functions, respectively.</p> <p>See Function Annotation, Type Hint.</p> <p>A value passed to a function (or method) when calling the function. There are two kinds of argument:</p> <ul> <li>keyword argument: an argument preceded by an identifier (e.g. name=) in a function call or passed as a value in a dictionary preceded by **. For example, 3 and 5 are both keyword arguments in the following calls to <code>complex()</code>:</li> </ul> <pre><code>complex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n</code></pre> <pre>\n<code>(3+5j)</code>\n</pre> <ul> <li>positional argument: an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an iterable preceded by *. For example, 3 and 5 are both positional arguments in the following calls:</li> </ul> <pre><code>complex(3, 5)\ncomplex(*(3, 5))\n</code></pre> <pre>\n<code>(3+5j)</code>\n</pre> <p>Parameters are defined by the names that appear in a function definition, whereas arguments are the values actually passed to a function when calling it. Parameters define what kind of arguments a function can accept. For example, given the function definition:</p> <pre><code>def func(foo, bar=None, **kwargs):\n    pass\n</code></pre> <p><code>foo</code>, <code>bar</code> and <code>kwargs</code> are parameters of <code>func</code>. However, when calling <code>func</code>, for example:</p> <pre><code>func(42, bar=314, extra='somevar')\n</code></pre> <p>the values <code>42</code>, <code>314</code>, and <code>\"somevar\"</code> are arguments.</p> <p>A value associated with an object which is referenced by name using dotted expressions. For example, if an object <code>o</code> has an attribute <code>a</code> it would be referenced as <code>o.a</code>.</p> <p>Instance attributes are owned by the specific instances of a class. That is, for two different instances, the instance attributes are usually different. </p> <p>Meanwhile, class attributes are attributes which are owned by the class itself. They will be shared by all the instances of the class. Therefore they have the same value for every instance. We define class attributes outside all the methods, usually they are placed at the top, right below the class header.</p> <pre><code>class A:\n    a = \"I am a class attribute!\"\nx = A()\ny = A()\nprint(x.a)\nprint(y.a)\n</code></pre> <pre>\n<code>I am a class attribute!\nI am a class attribute!\n</code>\n</pre> <p>Python source code is compiled into bytecode, the internal representation of a Python program in the CPython interpreter. The bytecode is also cached in .pyc files so that executing the same file is faster the second time (recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a virtual machine that executes the machine code corresponding to each bytecode</p> <p>Byte code is an intermediate code between the source code and machine code. It is a low-level code that is the result of the compilation of a source code which is written in a high-level language. It is processed by a virtual machine like Java Virtual Machine (JVM). Byte code is a non-runnable code after it is translated by an interpreter into machine code then it is understandable by the machine.</p> <p>Machine code is a set of instructions that is directly machine-understandable and it is processed by the Central Processing Unit (CPU). Machine code is in binary (0\u2019s and 1\u2019s) format which is completely different from the byte code and source code. It is regarded as the most lowest-level representation of the source code. Machine code is obtained after compilation or interpretation. It is also called machine language.</p> <p>S.NO. </p><p>Byte\u00a0Code</p><p>\u00a0Machine Code</p>\u00a001.Byte Code consisting of binary, hexadecimal, macro instructions like (new, add, swap, etc) and it is not directly understandable by the CPU. It is designed for efficient execution by software such as a virtual machine.intermediate-level\u00a0Machine code consisting of binary instructions that are directly understandable by the CPU.\u00a002.\u00a0Byte code is considered as the intermediate-level code.\u00a0Machine Code is considered as the low-level code.\u00a003.\u00a0Byte code is a non-runnable code generated after compilation of source code and it relies on an interpreter to get executed.\u00a0Machine code is a set of instructions in machine language or in binary format and it is directly executed by CPU.\u00a004.\u00a0Byte code is executed by the virtual machine then the Central Processing Unit.\u00a0Machine code is not executed by a virtual machine it is directly executed by CPU.\u00a005.\u00a0\u00a0Byte code is less specific towards machine than the machine code.\u00a0Machine code is more specific towards machine than the byte code.\u00a006.\u00a0It is platform-independent as it is dependent on the virtual machine and the system having a virtual machine can be executed irrespective of the platform.\u00a0 It is not platform independent because the object code of one platform can not be run on the same Operating System. Object varies depending upon system architecture and native instructions associated with the machine.\u00a007.\u00a0All the source code need not be converted into byte code for execution by CPU. Some source code written by any specific high-level language is converted into byte code then byte code to object code for execution by CPU.All the source code must be converted into machine code before it is executed by the CPU. <p>Here is the reference webpage.</p> <p>A callable is anything that can be called. The built-in callable (PyCallable_Check in objects.c) checks if the argument is either:</p> <ul> <li>an instance of a class with a <code>__call__</code> method or</li> <li>is of a type that has a non null <code>tp_call</code> (c struct) member which indicates callability otherwise (such as in functions, methods etc.) The method named <code>__call__</code> is the magic method that is called when an instance of a class is called as a function.</li> </ul> <pre><code>class Foo:\n  def __call__(self):\n    print('called')\nfoo = Foo()\nfoo()\n</code></pre> <pre>\n<code>called\n</code>\n</pre> <pre><code>class Foo:\n    pass\nnew_foo = Foo()\nnew_foo()\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb Cell 41 in &lt;cell line: 4&gt;()\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#X63sZmlsZQ%3D%3D?line=1'&gt;2&lt;/a&gt;     pass\n      &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#X63sZmlsZQ%3D%3D?line=2'&gt;3&lt;/a&gt; new_foo = Foo()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#X63sZmlsZQ%3D%3D?line=3'&gt;4&lt;/a&gt; new_foo()\n\nTypeError: 'Foo' object is not callable</pre> <p>A subroutine function which is passed as an argument to be executed at some point in the future.</p> <p>A callback is a function that is passed as an argument to other function. This other function is expected to call this callback function in its definition. The point at which other function calls our callback function depends on the requirement and nature of other function.</p> <p>Callback Functions are generally used with asynchronous functions.</p> <p>For example, Callback Function can be passed to a function to print out the size of file after the function reads given text file.</p> <p>Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state.</p> <pre><code>class Reverse:\n\"\"\"Iterator for looping over a sequence backwards.\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.index = len(data)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index == 0:\n            raise StopIteration\n        self.index = self.index - 1\n        return self.data[self.index]\n</code></pre> <pre><code>rev = Reverse('spam')\niter(rev)\nfor char in rev:\n    print(char)\n</code></pre> <pre>\n<code>m\na\np\ns\n</code>\n</pre> <p>A variable defined in a class and intended to be modified only at class level (i.e., not in an instance of the class). See Attribute for more details.</p> <p>The implicit conversion of an instance of one type to another during an operation which involves two arguments of the same type. For example, <code>int(3.15)</code> converts the floating point number to the integer <code>3</code>, but in <code>3+4.5</code>, each argument is of a different type (one <code>int</code>, one <code>float</code>), and both must be converted to the same type before they can be added or it will raise a <code>TypeError</code>. Without coercion, all arguments of even compatible types would have to be normalized to the same value by the programmer, e.g., <code>float(3)+4.5</code> rather than just <code>3+4.5</code>.</p> <p>An object which controls the environment seen in a with statement by defining <code>__enter__()</code> and <code>__exit__()</code> methods.</p> <p>In any programming language, the usage of resources like file operations or database connections is very common. But these resources are limited in supply. Therefore, the main problem lies in making sure to release these resources after usage. If they are not released then it will lead to resource leakage and may cause the system to either slow down or crash. It would be very helpful if users have a mechanism for the automatic setup and teardown of resources. In Python, it can be achieved by the usage of context managers which facilitate the proper handling of resources.</p> <pre><code>with open(\"test.txt\") as f:  \n    data = f.read()\n</code></pre> <pre><code>class FileManager():\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        self.file.close()\n\nwith FileManager('test.txt', 'w') as f:\n    f.write('Hello World!')\n\nprint(f.closed)\n</code></pre> <pre>\n<code>True\n</code>\n</pre> <p>As the above example shows, when creating context managers using classes, user need to ensure that the class has the methods: <code>__enter__()</code> and <code>__exit__()</code>. The <code>__enter__()</code> returns the resource that needs to be managed and the <code>__exit__()</code> does not return anything but performs the cleanup operations. </p> <p>Here is the reference webpage.</p> <p>A function returning another function, usually applied as a function transformation using the <code>@wrapper</code> syntax. Common examples for decorators are <code>classmethod()</code> and <code>staticmethod()</code>.</p> <p>Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. </p> <pre><code>import time\nimport math\n\ndef calculate_time(func):\n    def decorator(*args, **kwargs):\n        tic = time.time()\n\n        func(*args, **kwargs)\n\n        toc = time.time()\n        print(\"Total time taken in : \", func.__name__, toc - tic)\n\n    return decorator\n\n@calculate_time\ndef factorial(num):\n    print(str(math.factorial(num))[:10])\n\nfactorial(50000)\n</code></pre> <pre>\n<code>3347320509\nTotal time taken in :  factorial 0.8971779346466064\n</code>\n</pre> <p>Any object which defines any of the methods <code>__get__()</code>, <code>__set__()</code>, or <code>__delete__()</code> can be used as a descriptor.</p> <p>There are three protocol in python descriptor for setters, getters and delete method.</p> <ul> <li><code>object.__get__(self, obj, type=None)</code>: This attribute is called when you want to retrieve the information (value = obj.attr), and whatever it returns is what will be given to the code that requested the attribute\u2019s value.</li> <li><code>object.__set__(self, obj, value)</code>: This method is called to set the values of an attribute (obj.attr = 'value'), and it will not return anything to you.</li> <li><code>object.__delete__(self, obj)</code>: This method is called when the attribute is deleted from an object (del obj.attr)</li> </ul> <p>The objects returned from <code>dict.keys()</code>, <code>dict.values()</code>, and <code>dict.items()</code> are called dictionary views. They provide a dynamic view on the dictionary\u2019s entries, which means that when the dictionary changes, the view reflects these changes. To force the dictionary view to become a full list use <code>list(dictview)</code>. </p> <pre><code>dictionary = {'a': 1, 'b': 2, 'c': 3}\ndictionary.keys()\n</code></pre> <pre>\n<code>dict_keys(['a', 'b', 'c'])</code>\n</pre> <pre><code>dictionary.values()\n</code></pre> <pre>\n<code>dict_values([1, 2, 3])</code>\n</pre> <pre><code>dictionary.items()\n</code></pre> <pre>\n<code>dict_items([('a', 1), ('b', 2), ('c', 3)])</code>\n</pre> <p>A string literal which appears as the first expression in a class, function or module. While ignored when the suite is executed, it is recognized by the compiler and put into the <code>__doc__</code>attribute of the enclosing class, function or module. Since it is available via introspection, it is the canonical place for documentation of the object.</p> <pre><code>def area_of_circle(r):\n\"\"\"\n    Calculates the area of a circle given it radius.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the circle.\n\n    Returns\n    -------\n    float\n        The area of the circle.\n    \"\"\"\n    return math.pi * r ** 2\n</code></pre> <p>A programming style which does not look at an object\u2019s type to determine if it has the right interface; instead, the method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be a duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution.</p> <pre><code>class Specialstring:\n    def __len__(self):\n        return 42\n\nstring = Specialstring()\nlen(string)\n</code></pre> <pre>\n<code>42</code>\n</pre> <p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many <code>try</code> and <code>except</code> statements. The technique contrasts with the LBYL (look before you leap) style common to many other languages such as C.</p> <p>Dealing with errors and exceptional situations is a common requirement in programming. You can either prevent errors before they happen or handle errors after they\u2019ve happened. In general, you\u2019ll have two coding styles matching these strategies: look before you leap (LBYL), and easier to ask forgiveness than permission (EAFP), respectively. </p> <p>For example, to handle the missing key error using the EAFP, we can use:</p> <pre><code>data_dict = {'a': 1, 'b': 2, 'c': 3}\ntry:\n     value = data_dict[\"possible_key\"]\nexcept KeyError:\n    print(\"KeyError\")\n</code></pre> <pre>\n<code>KeyError\n</code>\n</pre> <p>The same can be done using the LBYL style as:</p> <pre><code>if \"possible_key\" in data_dict:\n    value = data_dict[\"possible_key\"]\nelse:\n    print(\"KeyError\")\n</code></pre> <pre>\n<code>KeyError\n</code>\n</pre> <p>A piece of syntax which can be evaluated to some value. In other words, an expression is an accumulation of expression elements like literals, names, attribute access, operators or function calls which all return a value. In contrast to many other languages, not all language constructs are expressions. There are also statements which cannot be used as expressions, such as while. Assignments are also statements, not expressions.</p> <p>An expression is a combination of operators and operands that is interpreted to produce some other value. In any programming language, an expression is evaluated as per the precedence of its operators. So that if there is more than one operator in an expression, their precedence decides which operation will be performed first. Some types of expressions in Python are: - Constant expressions, which are expressions that can be evaluated to a constant value. - Arithmetic expressions, which are expressions that can be evaluated to a numeric value. - Relational expressions, which are expressions that can be evaluated to a boolean value.</p> <p>An object exposing a file-oriented API (with methods such as <code>read()</code> or <code>write()</code>) to an underlying resource. Depending on the way it was created, a file object can mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output, in-memory buffers, sockets, pipes, etc.). File objects are also called file-like objects or streams.</p> <p>There are actually three categories of file objects: raw binary files, buffered binary files and text files. Their interfaces are defined in the io module. The canonical way to create a file object is by using the <code>open()</code> function.</p> <p>A series of statements which returns some value to a caller. It can also be passed zero or more arguments which may be used in the execution of the body. A function definition is an executable statement. Its execution binds the function name in the current local namespace to a function object (a wrapper around the executable code for the function). This function object contains a reference to the current global namespace as the global namespace to be used when the function is called.</p> <p>The function definition does not execute the function body; this gets executed only when the function is called. </p> <pre><code>def say_hello(name):\n    print(\"Hello, \" + name)\n</code></pre> <pre><code>say_hello(\"John\")\n</code></pre> <pre>\n<code>Hello, John\n</code>\n</pre> <p>A function which is defined inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its first argument (which is usually called <code>self</code>).</p> <p>An annotation of a function parameter or return value.</p> <p>Function annotations are usually used for type hints: for example, this function is expected to take two <code>int</code> arguments and is also expected to have an <code>int</code> return value:</p> <pre><code>def sum_two_numbers(a: int, b: int) -&gt; int:\n   return a + b\n</code></pre> <p>The process of freeing memory when it is not used anymore. Python performs garbage collection via reference counting and a cyclic garbage collector that is able to detect and break reference cycles. The garbage collector can be controlled using the <code>gc</code> module.</p> <pre><code>import gc\ngc.collect()\n</code></pre> <pre>\n<code>939</code>\n</pre> <p>Python uses two strategies for memory allocation:  - Reference counting - Garbage collection</p> <p>Prior to Python version 2.0, the Python interpreter only used reference counting for memory management. Reference counting works by counting the number of times an object is referenced by other objects in the system. When references to an object are removed, the reference count for an object is decremented. When the reference count becomes zero, the object is deallocated.</p> <pre><code># Literal 9 is an object\nb = 9\n\n# Reference count of object 9 becomes 0.\nb = 4\n</code></pre> <p>The literal value 9 is an object. The reference count of object 9 is incremented to 1 in line 1. In line 2 its reference count becomes zero as it is dereferenced. So garbage collector deallocates the object.</p> <p>A function which returns a generator iterator. It looks like a normal function except that it contains <code>yield</code> expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the <code>next()</code> function.</p> <p>Each <code>yield</code> temporarily suspends processing, remembering the location execution state (including local variables and pending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to functions which start fresh on every invocation).</p> <pre><code>def count_generator(n):\n    for i in range(n):\n        yield i\n</code></pre> <pre><code>count_5 = count_generator(5)\nnext(count_5)\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code>next(count_5)\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code>for _ in range(3):\n    print(next(count_5))\n</code></pre> <pre>\n<code>2\n3\n4\n</code>\n</pre> <p>An expression that returns an iterator. It looks like a normal expression followed by a for clause defining a loop variable, range, and an optional if clause. The combined expression generates values for an enclosing function:</p> <pre><code>sum(i*i for i in range(10))  \n</code></pre> <pre>\n<code>285</code>\n</pre> <p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <code>__hash__()</code> method), and can be compared to other objects (it needs an <code>__eq__()</code> method). Hashable objects which compare equal must have the same hash value.</p> <p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p> <p>Most of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers (such as tuples and frozensets) are only hashable if their elements are hashable. Objects which are instances of user-defined classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from their <code>id()</code>.</p> <pre><code>hash(\"hello\")\n</code></pre> <pre>\n<code>2042602691728599163</code>\n</pre> <pre><code>hash([1, 2,3])\n</code></pre> <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb Cell 120 in &lt;cell line: 1&gt;()\n----&gt; &lt;a href='vscode-notebook-cell:/media/hari31416/Hari_SSD/Users/harik/Desktop/Placement/Notes/Python/Terminology.ipynb#Y242sZmlsZQ%3D%3D?line=0'&gt;1&lt;/a&gt; hash([1, 2,3])\n\nTypeError: unhashable type: 'list'</pre> <p>An Integrated Development and Learning Environment for Python. IDLE is a basic editor and interpreter environment which ships with the standard distribution of Python.</p> <p>An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot be altered. A new object has to be created if a different value has to be stored. They play an important role in places where a constant hash value is needed, for example as a key in a dictionary.</p> <p>Python has an interactive interpreter which means you can enter statements and expressions at the interpreter prompt, immediately execute them and see their results. </p> <p>Python is an interpreted language, as opposed to a compiled one, though the distinction can be blurry because of the presence of the bytecode compiler. This means that source files can be run directly without explicitly creating an executable which is then run. Interpreted languages typically have a shorter development/debug cycle than compiled ones, though their programs generally also run more slowly. </p> <p>An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as <code>list</code>, <code>str</code>, and <code>tuple</code>) and some non-sequence types like <code>dict</code>, file objects, and objects of any classes you define with an <code>__iter__()</code> method or with a <code>__getitem__()</code> method that implements Sequence semantics.</p> <p>Iterables can be used in a <code>for</code> loop and in many other places where a sequence is needed (<code>zip()</code>, <code>map()</code>, \u2026). When an iterable object is passed as an argument to the built-in function <code>iter()</code>, it returns an iterator for the object. This iterator is good for one pass over the set of values. When using iterables, it is usually not necessary to call <code>iter()</code> or deal with iterator objects yourself. The <code>for</code> statement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop. </p> <p>An object representing a stream of data. Repeated calls to the iterator\u2019s <code>__next__()</code> method (or passing it to the built-in function <code>next()</code>) return successive items in the stream. When no more data are available a <code>StopIteration</code> exception is raised instead. At this point, the iterator object is exhausted and any further calls to its <code>__next__()</code> method just raise <code>StopIteration</code> again. Iterators are required to have an <code>__iter__()</code> method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a <code>list</code>) produces a fresh new iterator each time you pass it to the <code>iter()</code> function or use it in a <code>for</code> loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.</p> <p>See EAFP.</p> <p>Magic methods in Python are the special methods that start and end with the double underscores. They are also called dunder methods. Magic methods are not meant to be invoked directly by you, but the invocation happens internally from the class on a certain action. For example, when you add two numbers using the + operator, internally, the <code>__add__()</code> method will be called.</p> <p>Built-in classes in Python define many magic methods. Use the <code>dir()</code> function to see the number of magic methods inherited by a class. For example, the following lists all the attributes and methods defined in the <code>int</code> class.</p> <pre><code>dir(int)\n</code></pre> <pre>\n<code>['__abs__',\n '__add__',\n '__and__',\n '__bool__',\n '__ceil__',\n '__class__',\n '__delattr__',\n '__dir__',\n '__divmod__',\n '__doc__',\n '__eq__',\n '__float__',\n '__floor__',\n '__floordiv__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__index__',\n '__init__',\n '__init_subclass__',\n '__int__',\n '__invert__',\n '__le__',\n '__lshift__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__neg__',\n '__new__',\n '__or__',\n '__pos__',\n '__pow__',\n '__radd__',\n '__rand__',\n '__rdivmod__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rfloordiv__',\n '__rlshift__',\n '__rmod__',\n '__rmul__',\n '__ror__',\n '__round__',\n '__rpow__',\n '__rrshift__',\n '__rshift__',\n '__rsub__',\n '__rtruediv__',\n '__rxor__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__sub__',\n '__subclasshook__',\n '__truediv__',\n '__trunc__',\n '__xor__',\n 'as_integer_ratio',\n 'bit_length',\n 'conjugate',\n 'denominator',\n 'from_bytes',\n 'imag',\n 'numerator',\n 'real',\n 'to_bytes']</code>\n</pre> <p>The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The metaclass is responsible for taking those three arguments and creating the class. Most object oriented programming languages provide a default implementation. What makes Python special is that it is possible to create custom metaclasses. Most users never need this tool, but when the need arises, metaclasses can provide powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks.</p> <p>A <code>function</code> which is defined inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its first argument (which is usually called <code>self</code>). See Function for more information.</p> <p>An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing.</p> <p>Mutable objects can change their value but keep their <code>id()</code>. See also Immutable.</p> <p>The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local, global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support modularity by preventing naming conflicts. For instance, the functions <code>builtins.open</code> and <code>os.open()</code> are distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear which module implements a function. For instance, writing <code>random.seed()</code> or <code>itertools.islice()</code> makes it clear that those functions are implemented by the <code>random</code> and <code>itertools</code> modules, respectively.</p> <p>The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another function can refer to variables in the outer function. Note that nested scopes by default work only for reference and not for assignment. Local variables both read and write in the innermost scope. Likewise, global variables read and write to the global namespace. The <code>nonlocal</code> allows writing to outer scopes.</p> <p>A function defined inside another function is called a nested function. Nested functions can access variables of the enclosing scope.</p> <p>In Python, these non-local variables are read-only by default and we must declare them explicitly as non-local (using <code>nonlocal</code> keyword) in order to modify them.</p> <pre><code>def print_msg(msg):\n\n    def printer():\n        print(msg)\n\n    printer()\n\nprint_msg(\"Hello\")\n</code></pre> <pre>\n<code>Hello\n</code>\n</pre> <pre><code>def print_msg(msg):\n\n    def printer():\n        msg = \"Hello World\"\n        print(msg)\n\n    printer()\n    print(msg)\nprint_msg(msg)\n</code></pre> <pre>\n<code>Hello World\nHello\n</code>\n</pre> <p>A Python module which can contain submodules or recursively, subpackages. Technically, a package is a Python module with an <code>__path__</code> attribute. In simpler terms a package is folder that contains various modules as files.</p> <p>A named entity in a function (or method) definition that specifies an argument (or in some cases, arguments) that the function can accept. There are five kinds of parameter:</p> <ol> <li>positional-or-keyword: specifies an argument that can be passed either positionally or as a keyword argument. This is the default kind of parameter, for example <code>foo</code> and <code>bar</code> in the following:</li> </ol> <pre><code>def func(foo, bar=None):\n    pass\n</code></pre> <ol> <li>positional-only: specifies an argument that can be supplied only by position. Positional-only parameters can be defined by including a / character in the parameter list of the function definition after them, for example <code>posonly1</code> and <code>posonly2</code> in the following:</li> </ol> <pre><code>def func(posonly1, posonly2, /, positional_or_keyword):\n    pass\n</code></pre> <ol> <li>keyword-only: specifies an argument that can be supplied only by keyword. Keyword-only parameters can be defined by including a single var-positional parameter or bare * in the parameter list of the function definition before them, for example <code>kw_only1</code> and <code>kw_only2</code> in the following:</li> </ol> <pre><code>def func(arg, *, kw_only1, kw_only2):\n    pass\n</code></pre> <ol> <li>var-positional: specifies that an arbitrary sequence of positional arguments can be provided (in addition to any positional arguments already accepted by other parameters). Such a parameter can be defined by prepending the parameter name with *, for example <code>args</code> in the following:</li> </ol> <pre><code>def func(*args, **kwargs):\n    pass\n</code></pre> <ol> <li>var-keyword: specifies that arbitrarily many keyword arguments can be provided (in addition to any keyword arguments already accepted by other parameters). Such a parameter can be defined by prepending the parameter name with **, for example <code>kwargs</code> in the example above.</li> </ol> <p>Also see Argument.</p> <p>An object representing a file system path. A path-like object is either a <code>str</code> or <code>bytes</code> object representing a path, or an object implementing the <code>os.PathLike</code> protocol. An object that supports the <code>os.PathLike</code> protocol can be converted to a <code>str</code> or <code>bytes</code> file system path by calling the <code>os.fspath()</code> function; <code>os.fsdecode()</code> and <code>os.fsencode()</code> can be used to guarantee a <code>str</code> or <code>bytes</code> result instead, respectively.</p> <p>Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. PEPs should provide a concise technical specification and a rationale for proposed features.</p> <p>PEPs are intended to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is responsible for building consensus within the community and documenting dissenting opinions.</p> <p>An idea or piece of code which closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages. For example, a common idiom in Python is to loop over all elements of an iterable using a <code>for</code> statement. Many other languages don\u2019t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter instead:</p> <pre><code>food = [\"bread\", \"cheese\", \"milk\"]\nfor i in range(len(food)):\n    print(food[i])\n</code></pre> <pre>\n<code>bread\ncheese\nmilk\n</code>\n</pre> <p>As opposed to the cleaner, Pythonic method:</p> <pre><code>for piece in food:\n    print(piece)\n</code></pre> <pre>\n<code>bread\ncheese\nmilk\n</code>\n</pre> <p>The number of references to an object. When the reference count of an object drops to zero, it is deallocated. Reference counting is generally not visible to Python code, but it is a key element of the CPython implementation. The <code>sys</code> module defines a <code>getrefcount()</code> function that programmers can call to return the reference count for a particular object.</p> <p>An iterable which supports efficient element access using integer indices via the <code>__getitem__()</code> special method and defines a <code>__len__()</code> method that returns the length of the sequence. Some built-in sequence types are <code>list</code>, <code>str</code>, <code>tuple</code>, and <code>bytes</code>. Note that <code>dict</code> also supports <code>__getitem__()</code> and <code>__len__()</code>, but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers.</p> <p>An object usually containing a portion of a sequence. A slice is created using the subscript notation, [] with colons between numbers when several are given, such as in <code>variable_name[1:3:5]</code>. The bracket (subscript) notation uses <code>slice</code> objects internally.</p> <p>A method that is called implicitly by Python to execute a certain operation on a type, such as addition. Such methods have names starting and ending with double underscores.</p> <p>A statement is part of a suite (a \u201cblock\u201d of code). A statement is either an expression or one of several constructs with a keyword, such as <code>if</code>, <code>while</code> or <code>for</code>.</p> <p>In Python\u2019s C API, a strong reference is a reference to an object which increments the object\u2019s reference count when it is created and decrements the object\u2019s reference count when it is deleted.</p> <p>A string in Python is a sequence of Unicode code points (in range U+0000\u2013U+10FFFF). To store or transfer a string, it needs to be serialized as a sequence of bytes.</p> <p>Serializing a string into a sequence of bytes is known as \u201cencoding\u201d, and recreating the string from the sequence of bytes is known as \u201cdecoding\u201d.</p> <p>A string which is bound by three instances of either a quotation mark (\u201d) or an apostrophe (\u2018). While they don\u2019t provide any functionality not available with single-quoted strings, they are useful for a number of reasons. They allow you to include unescaped single and double quotes within a string and they can span multiple lines without the use of the continuation character, making them especially useful when writing docstrings.</p> <p>The type of a Python object determines what kind of object it is; every object has a type. An object\u2019s type is accessible as its <code>__class__</code> attribute or can be retrieved with <code>type(obj)</code>.</p> <p>A synonym for a type, created by assigning the type to an identifier. Type aliases are useful for simplifying type hints. For example:</p> <pre><code>def remove_gray_shades(\n        colors: list[tuple[int, int, int]]) -&gt; list[tuple[int, int, int]]:\n    pass\n</code></pre> <p>could be made more readable like this:</p> <pre><code>Color = tuple[int, int, int]\n\ndef remove_gray_shades(colors: list[Color]) -&gt; list[Color]:\n    pass\n</code></pre> <p>An annotation that specifies the expected type for a variable, a class attribute, or a function parameter or return value. Type hints are optional and are not enforced by Python but they are useful to static type analysis tools, and aid IDEs with code completion and refactoring.</p> <p>Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using <code>typing.get_type_hints()</code>.</p> <p>Listing of Python design principles and philosophies that are helpful in understanding and using the language. The listing can be found by typing <code>import this</code>.</p> <pre><code>import this\n</code></pre> <pre>\n<code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code>\n</pre>"},{"location":"Notes/Python/Terminology/#contents","title":"Contents","text":"<ol><li>A</li> <li>B</li> <li>C</li> <li>D</li> <li>E</li> <li>F</li> <li>G</li> <li>H</li> <li>I</li> <li>J</li> <li>K</li> <li>L</li> <li>M</li> <li>N</li> <li>O</li> <li>P</li> <li>Q</li> <li>R</li> <li>S</li> <li>T</li> <li>U</li> <li>V</li> <li>W</li> <li>X</li> <li>Y</li> <li>Z</li> </ol>"},{"location":"Notes/Python/Terminology/#a","title":"A","text":""},{"location":"Notes/Python/Terminology/#abstract-base-classes","title":"Abstract Base Classes","text":""},{"location":"Notes/Python/Terminology/#annotation","title":"Annotation","text":""},{"location":"Notes/Python/Terminology/#argument","title":"Argument","text":""},{"location":"Notes/Python/Terminology/#what-is-the-difference-between-arguments-and-parameters","title":"What is the difference between arguments and parameters?","text":""},{"location":"Notes/Python/Terminology/#attribute","title":"Attribute","text":""},{"location":"Notes/Python/Terminology/#class-vs-instance-attributes","title":"Class vs. Instance Attributes","text":""},{"location":"Notes/Python/Terminology/#b","title":"B","text":""},{"location":"Notes/Python/Terminology/#bytecode","title":"Bytecode","text":""},{"location":"Notes/Python/Terminology/#difference-between-byte-code-and-machine-code","title":"Difference between Byte Code and Machine Code","text":""},{"location":"Notes/Python/Terminology/#c","title":"C","text":""},{"location":"Notes/Python/Terminology/#callable","title":"Callable","text":""},{"location":"Notes/Python/Terminology/#callback","title":"Callback","text":""},{"location":"Notes/Python/Terminology/#class","title":"Class","text":""},{"location":"Notes/Python/Terminology/#class-variableattribute","title":"Class Variable/Attribute","text":""},{"location":"Notes/Python/Terminology/#coercion","title":"Coercion","text":""},{"location":"Notes/Python/Terminology/#context-manager","title":"Context Manager","text":""},{"location":"Notes/Python/Terminology/#d","title":"D","text":""},{"location":"Notes/Python/Terminology/#decorator","title":"Decorator","text":""},{"location":"Notes/Python/Terminology/#descriptor","title":"Descriptor","text":""},{"location":"Notes/Python/Terminology/#dictionary-view","title":"Dictionary View","text":""},{"location":"Notes/Python/Terminology/#docstring","title":"Docstring","text":""},{"location":"Notes/Python/Terminology/#duck-typing","title":"Duck Typing","text":""},{"location":"Notes/Python/Terminology/#e","title":"E","text":""},{"location":"Notes/Python/Terminology/#eafp","title":"EAFP","text":""},{"location":"Notes/Python/Terminology/#expression","title":"Expression","text":""},{"location":"Notes/Python/Terminology/#f","title":"F","text":""},{"location":"Notes/Python/Terminology/#file-object-or-file-like-object","title":"File Object or File Like Object","text":""},{"location":"Notes/Python/Terminology/#function","title":"Function","text":""},{"location":"Notes/Python/Terminology/#function-and-method","title":"Function and Method","text":""},{"location":"Notes/Python/Terminology/#function-annotations","title":"Function Annotations","text":""},{"location":"Notes/Python/Terminology/#g","title":"G","text":""},{"location":"Notes/Python/Terminology/#garbage-collection","title":"Garbage Collection","text":""},{"location":"Notes/Python/Terminology/#generator","title":"Generator","text":""},{"location":"Notes/Python/Terminology/#generator-expressions","title":"Generator Expressions","text":""},{"location":"Notes/Python/Terminology/#h","title":"H","text":""},{"location":"Notes/Python/Terminology/#hashable","title":"Hashable","text":""},{"location":"Notes/Python/Terminology/#i","title":"I","text":""},{"location":"Notes/Python/Terminology/#idle","title":"IDLE","text":""},{"location":"Notes/Python/Terminology/#immutable","title":"Immutable","text":""},{"location":"Notes/Python/Terminology/#interactive","title":"Interactive","text":""},{"location":"Notes/Python/Terminology/#interpreted","title":"Interpreted","text":""},{"location":"Notes/Python/Terminology/#iterable","title":"Iterable","text":""},{"location":"Notes/Python/Terminology/#iterator","title":"Iterator","text":""},{"location":"Notes/Python/Terminology/#l","title":"L","text":""},{"location":"Notes/Python/Terminology/#lbyl","title":"LBYL","text":""},{"location":"Notes/Python/Terminology/#m","title":"M","text":""},{"location":"Notes/Python/Terminology/#magic-methods","title":"Magic Methods","text":""},{"location":"Notes/Python/Terminology/#metaclasse","title":"MetaClasse","text":""},{"location":"Notes/Python/Terminology/#method","title":"Method","text":""},{"location":"Notes/Python/Terminology/#module","title":"Module","text":""},{"location":"Notes/Python/Terminology/#mutable","title":"Mutable","text":""},{"location":"Notes/Python/Terminology/#n","title":"N","text":""},{"location":"Notes/Python/Terminology/#namespace","title":"Namespace","text":""},{"location":"Notes/Python/Terminology/#nested-scope","title":"Nested Scope","text":""},{"location":"Notes/Python/Terminology/#nonlocal-variables","title":"Nonlocal Variables","text":""},{"location":"Notes/Python/Terminology/#p","title":"P","text":""},{"location":"Notes/Python/Terminology/#subpackage","title":"Subpackage","text":""},{"location":"Notes/Python/Terminology/#parameter","title":"Parameter","text":""},{"location":"Notes/Python/Terminology/#path-like-objects","title":"Path-like Objects","text":""},{"location":"Notes/Python/Terminology/#pep","title":"PEP","text":""},{"location":"Notes/Python/Terminology/#pythonic","title":"Pythonic","text":""},{"location":"Notes/Python/Terminology/#r","title":"R","text":""},{"location":"Notes/Python/Terminology/#refrence-count","title":"Refrence Count","text":""},{"location":"Notes/Python/Terminology/#s","title":"S","text":""},{"location":"Notes/Python/Terminology/#sequence","title":"Sequence","text":""},{"location":"Notes/Python/Terminology/#slice","title":"Slice","text":""},{"location":"Notes/Python/Terminology/#special-method","title":"Special Method","text":""},{"location":"Notes/Python/Terminology/#statement","title":"Statement","text":""},{"location":"Notes/Python/Terminology/#strong-reference","title":"Strong Reference","text":""},{"location":"Notes/Python/Terminology/#t","title":"T","text":""},{"location":"Notes/Python/Terminology/#text-encoding","title":"Text Encoding","text":""},{"location":"Notes/Python/Terminology/#triple-quoted-string","title":"Triple Quoted String","text":""},{"location":"Notes/Python/Terminology/#type","title":"Type","text":""},{"location":"Notes/Python/Terminology/#type-alias","title":"Type Alias","text":""},{"location":"Notes/Python/Terminology/#type-hint","title":"Type Hint","text":""},{"location":"Notes/Python/Terminology/#z","title":"Z","text":""},{"location":"Notes/Python/Terminology/#zen-of-python","title":"Zen of Python","text":""},{"location":"Notes/Python/Variables_and_Pointers/","title":"Variables and Pointers","text":"<p>Think of a variable as a name attached to a particular object. In Python, variables need not be declared or defined in advance, as is the case in many other programming languages. To create a variable, you just assign it a value and then start using it. Assignment is done with a single equals sign (=):</p> <pre><code>text = \"Hello World\"\nprint(text)\n</code></pre> <pre>\n<code>Hello World\n</code>\n</pre> <p>Python also allows chained assignment, which makes it possible to assign the same value to several variables simultaneously:</p> <pre><code>a = b = c = 300\nprint(a, b, c)\n</code></pre> <pre>\n<code>300 300 300\n</code>\n</pre> <p>In many programming languages, variables are statically typed. That means a variable is initially declared to have a specific data type, and any value assigned to it during its lifetime must always have that type.</p> <p>Variables in Python are not subject to this restriction. In Python, a variable may be assigned a value of one type and then later re-assigned a value of a different type:</p> <p>The way Python does a variable assignment is very different from the way other programming languages do it. In Python, the value of a variable is not stored in the variable itself, but in a separate object called a reference. Let's consider the assignment of the value 3 to the variable x:</p> <pre><code>x = 3\n</code></pre> <p>When presented with the statement print(300), the interpreter does the following:</p> <ul> <li>Creates an integer object</li> <li>Gives it the value 3</li> <li>Creates a pointer to the object and stores it in the variable x</li> </ul> <p>So, a Python variable is a symbolic name that is a reference or pointer to an object. Once an object is assigned to a variable, you can refer to the object by that name. But the data itself is still contained within the object. For example:</p> <pre><code>n = 300\n</code></pre> <p>This assignment creates an integer object with the value 300 and assigns the variable n to point to that object. </p> <p>We can see this by checking the type of n:</p> <pre><code>type(n)\n</code></pre> <pre>\n<code>int</code>\n</pre> <p>This is an <code>int</code> (object).</p> <p>Now, after doing the following:</p> <pre><code>m = n\n</code></pre> <p>Python does not create another object. It simply creates a new symbolic name or reference, m, which points to the same object that n points to.</p> <p></p> <p>If we assign <code>m</code> a different integer by using:</p> <pre><code>m = 400\n</code></pre> <p>Then Python creates a new integer object with the value 400, and m becomes a reference to it.</p> <p></p> <p>If we reassign the <code>n</code> variable to something else, eg.:</p> <pre><code>n = \"foo\"\n</code></pre> <p>Now Python creates a string object with the value \"foo\" and makes n reference that. </p> <p>We see that there is no longer any reference to the integer object 300. It is orphaned, and there is no way to access it. When the number of references to an object drops to zero, it is no longer accessible. At that point, its lifetime is over. Python will eventually notice that it is inaccessible and reclaim the allocated memory so it can be used for something else. In computer lingo, this process is referred to as garbage collection.</p> <p>In Python, every object that is created is given a number that uniquely identifies it. It is guaranteed that no two objects will have the same identifier during any period in which their lifetimes overlap. Once an object\u2019s reference count drops to zero and it is garbage collected, as happened to the 300 object above, then its identifying number becomes available and may be used again.</p> <p>The built-in Python function <code>id()</code> returns an object\u2019s integer identifier. Using the <code>id()</code> function, you can verify that two variables indeed point to the same object:</p> <pre><code>n = 300\nm = n\nid(m)==id(n)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>id(m), id(n)\n</code></pre> <pre>\n<code>(140285886342672, 140285886342672)</code>\n</pre> <p>After the assignment m = n, m and n both point to the same object, confirmed by the fact that id(m) and id(n) return the same number. Once m is reassigned to 400, m and n point to different objects with different identities.</p> <pre><code>m = 400\nid(m)==id(n)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>There is an exception though. Consider the following assignment:</p> <pre><code>m = 30\nn = 30\nid(m)==id(n)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>m = 300\nn = 300\nid(m)==id(n)\n</code></pre> <pre>\n<code>False</code>\n</pre> <p>Here, m and n are separately assigned to integer objects having value 30. But in this case, id(m) and id(n) are identical! So, what happens? For purposes of optimization, the interpreter creates objects for the integers in the range [-5, 256] at startup, and then reuses them during program execution. Thus, when you assign separate variables to an integer value in this range, they will actually reference the same object.</p> <p>There is one more restriction on identifier names. The Python language reserves a small set of keywords that designate special language functionality. No object can have the same name as a reserved word.</p> <p>In Python 3.6, there are 33 reserved keywords:</p> PythonKeywords <code>False</code> <code>def</code> <code>if</code> <code>raise</code> <code>None</code> <code>del</code> <code>import</code> <code>return</code> <code>True</code> <code>elif</code> <code>in</code> <code>try</code> <code>and</code> <code>else</code> <code>is</code> <code>while</code> <code>as</code> <code>except</code> <code>lambda</code> <code>with</code> <code>assert</code> <code>finally</code> <code>nonlocal</code> <code>yield</code> <code>break</code> <code>for</code> <code>not</code> <code>class</code> <code>from</code> <code>or</code> <code>continue</code> <code>global</code> <code>pass</code> <p>Trying to create a variable with the same name as any reserved word results in an error:</p> <pre><code>class = 3\n</code></pre> <pre>\n  Input In [17]\n    class = 3\n          ^\nSyntaxError: invalid syntax\n</pre> <p>Reference1 Reference2</p>"},{"location":"Notes/Python/Variables_and_Pointers/#Contents","title":"Contents","text":"<pre><code>    &lt;ol&gt;\n    &lt;ol&gt;&lt;li&gt;&lt;a class=\"\" href=\"#Assignment\"&gt;Assignment&lt;/a&gt;&lt;/li&gt;\n</code></pre> <li>Object References</li> <li>Object Identity</li> <ol><li>Small Integers</li> </ol> <p><li>Reserved Words (Keywords)</li> </p>"},{"location":"Notes/Python/Variables_and_Pointers/#assignment","title":"Assignment","text":""},{"location":"Notes/Python/Variables_and_Pointers/#object-references","title":"Object References","text":""},{"location":"Notes/Python/Variables_and_Pointers/#object-identity","title":"Object Identity","text":""},{"location":"Notes/Python/Variables_and_Pointers/#small-integers","title":"Small Integers","text":""},{"location":"Notes/Python/Variables_and_Pointers/#reserved-words-keywords","title":"Reserved Words (Keywords)","text":""}]}